<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d1/d3e/namespacetudat_1_1orbital__element__conversions" kind="namespace" language="C++">
    <compoundname>tudat::orbital_element_conversions</compoundname>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d8/d7e/stateVectorIndices_8h_1a7b22e3fc338f75b04fd60f90a25816a6" prot="public" static="no" strong="no">
        <type></type>
        <name>CartesianElementIndices</name>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a7b22e3fc338f75b04fd60f90a25816a6a490f66276418683e6077250f2c05b416" prot="public">
          <name>xCartesianPositionIndex</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a7b22e3fc338f75b04fd60f90a25816a6ad1c993da4eec3e773adb36e4b5c0b092" prot="public">
          <name>yCartesianPositionIndex</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a7b22e3fc338f75b04fd60f90a25816a6a89ccdafe9639014ba6676d70c57eef01" prot="public">
          <name>zCartesianPositionIndex</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a7b22e3fc338f75b04fd60f90a25816a6aa805037523ea3227790d1f50b3141da6" prot="public">
          <name>xCartesianVelocityIndex</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a7b22e3fc338f75b04fd60f90a25816a6a97a47cb44a4f1812136579a34582b5cd" prot="public">
          <name>yCartesianVelocityIndex</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a7b22e3fc338f75b04fd60f90a25816a6aebfa9b0dc83752c817264c2305e43efd" prot="public">
          <name>zCartesianVelocityIndex</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Cartesian elements indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" line="22" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" bodystart="23" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d7e/stateVectorIndices_8h_1a36d63f93f6571946fcf36aed50bb6070" prot="public" static="no" strong="no">
        <type></type>
        <name>KeplerianElementIndices</name>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a36d63f93f6571946fcf36aed50bb6070a12dd24c0288aadacd9620ee42590557f" prot="public">
          <name>semiMajorAxisIndex</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a36d63f93f6571946fcf36aed50bb6070ab2f8613f0219411b019e6e3b5138cf70" prot="public">
          <name>eccentricityIndex</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a36d63f93f6571946fcf36aed50bb6070a51ab4208ab945a8dfef7b577526aaa4c" prot="public">
          <name>inclinationIndex</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a36d63f93f6571946fcf36aed50bb6070a37869132d48c7456f86abb58a219fa5d" prot="public">
          <name>argumentOfPeriapsisIndex</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a36d63f93f6571946fcf36aed50bb6070a47f75ce481c3e445914bdac7f5f1d9ba" prot="public">
          <name>longitudeOfAscendingNodeIndex</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a36d63f93f6571946fcf36aed50bb6070abd587681b93a911cffc37f10e42f63e3" prot="public">
          <name>trueAnomalyIndex</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a36d63f93f6571946fcf36aed50bb6070ad5dc287e5748315f2eef4239c323d9c8" prot="public">
          <name>semiLatusRectumIndex</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Keplerian elements indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" line="33" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" bodystart="34" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d7e/stateVectorIndices_8h_1a4e6e2fc9efd6af515e2808fdd68fb30d" prot="public" static="no" strong="no">
        <type></type>
        <name>ModifiedEquinoctialElementVectorIndices</name>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a4e6e2fc9efd6af515e2808fdd68fb30da451fa278318c0909f4da3bed617b29cc" prot="public">
          <name>semiParameterIndex</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a4e6e2fc9efd6af515e2808fdd68fb30da345f23ebf26770b84a39f772a75afd68" prot="public">
          <name>fElementIndex</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a4e6e2fc9efd6af515e2808fdd68fb30dacff5f81ebd1488c237fe55031db23ce5" prot="public">
          <name>gElementIndex</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a4e6e2fc9efd6af515e2808fdd68fb30da10a2f377cc43d01cba56d9f0bad0ccb0" prot="public">
          <name>hElementIndex</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a4e6e2fc9efd6af515e2808fdd68fb30daae367cd748aaad0c9d44d941e67a61b1" prot="public">
          <name>kElementIndex</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a4e6e2fc9efd6af515e2808fdd68fb30daf8f500ec1b7541225ff213fdea64ece8" prot="public">
          <name>trueLongitudeIndex</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Modified equinoctial element vector indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" line="45" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d7e/stateVectorIndices_8h_1a9738efb82da0f0eef98d6dba92b4e4cf" prot="public" static="no" strong="no">
        <type></type>
        <name>SphericalOrbitalStateElementIndices</name>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9738efb82da0f0eef98d6dba92b4e4cfa871747e34ed6d24edd2ab64a8e9fd903" prot="public">
          <name>radiusIndex</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9738efb82da0f0eef98d6dba92b4e4cfad8bbe4cd1a33475ac2a63b0ce41d30c8" prot="public">
          <name>latitudeIndex</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9738efb82da0f0eef98d6dba92b4e4cfaf5105ccd8590c0c545f521c477583737" prot="public">
          <name>longitudeIndex</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9738efb82da0f0eef98d6dba92b4e4cfa9588604a4b49faa9bfd27ae0fd31f81a" prot="public">
          <name>speedIndex</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9738efb82da0f0eef98d6dba92b4e4cfacc7c1323962acdb63810ea0d56854d1d" prot="public">
          <name>flightPathIndex</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9738efb82da0f0eef98d6dba92b4e4cfaa7a88a0068afcb376aa942319d97bd1e" prot="public">
          <name>headingAngleIndex</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Spherical orbital state element indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" line="56" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d7e/stateVectorIndices_8h_1a93f042634b2241c5fb751a4b219bd2eb" prot="public" static="no" strong="no">
        <type></type>
        <name>UnifiedStateModelQuaternionsElementIndices</name>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a93f042634b2241c5fb751a4b219bd2eba0f888bb80c60f5aae1ae0a2a90cdadf9" prot="public">
          <name>CHodographUSM7Index</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a93f042634b2241c5fb751a4b219bd2ebac6996b2d2538f2bb19525c2b71717d2d" prot="public">
          <name>Rf1HodographUSM7Index</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a93f042634b2241c5fb751a4b219bd2eba53b2251cfbe5f6f49b7daf1955575f86" prot="public">
          <name>Rf2HodographUSM7Index</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a93f042634b2241c5fb751a4b219bd2ebacf8b7ed94977439183db6ebe428e7383" prot="public">
          <name>etaUSM7Index</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a93f042634b2241c5fb751a4b219bd2eba50c95aba7c18723b6a50e6f6c1ff458b" prot="public">
          <name>epsilon1USM7Index</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a93f042634b2241c5fb751a4b219bd2ebab93e6a9585fcca8661538b607f7e86da" prot="public">
          <name>epsilon2USM7Index</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a93f042634b2241c5fb751a4b219bd2eba5f37534bae366994d8fff70f8fce7bdf" prot="public">
          <name>epsilon3USM7Index</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Unified state model with quaternions indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" line="67" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d7e/stateVectorIndices_8h_1a9d7de7a453bba39a640e44cc49fedf0d" prot="public" static="no" strong="no">
        <type></type>
        <name>UnifiedStateModelModifiedRodriguesParametersElementIndices</name>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9d7de7a453bba39a640e44cc49fedf0daa6512ab1a7153017f2b2cc99cd5eb95f" prot="public">
          <name>CHodographUSM6Index</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9d7de7a453bba39a640e44cc49fedf0daf7495bb18c4bb5bbea1a430f22186778" prot="public">
          <name>Rf1HodographUSM6Index</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9d7de7a453bba39a640e44cc49fedf0da8fa1823eed4ceff5fccd05d027a0f870" prot="public">
          <name>Rf2HodographUSM6Index</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9d7de7a453bba39a640e44cc49fedf0da458c8320bbcec9e35e5a30e51488aa4e" prot="public">
          <name>sigma1USM6Index</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9d7de7a453bba39a640e44cc49fedf0da017677139a739acac8503b337dd700c6" prot="public">
          <name>sigma2USM6Index</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9d7de7a453bba39a640e44cc49fedf0dab2a3e1f4a95719d1f19fb2a84f8698ef" prot="public">
          <name>sigma3USM6Index</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a9d7de7a453bba39a640e44cc49fedf0da2acdebbcd38f49f6574b918e36911c00" prot="public">
          <name>shadowFlagUSM6Index</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Unified state model with modified Rodrigues parameters indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" line="79" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" bodystart="80" bodyend="88"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d7e/stateVectorIndices_8h_1a052879357315e4ce8762a90da8dbf815" prot="public" static="no" strong="no">
        <type></type>
        <name>UnifiedStateModelExponentialMapElementIndices</name>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a052879357315e4ce8762a90da8dbf815aaccb0c3bc0489430c8c94271e5ce9091" prot="public">
          <name>CHodographUSMEMIndex</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a052879357315e4ce8762a90da8dbf815ae4d5b576ad0ebc7be596810bbfb6a535" prot="public">
          <name>Rf1HodographUSMEMIndex</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a052879357315e4ce8762a90da8dbf815aae6ecd126eef8ff22f1d75807385efaf" prot="public">
          <name>Rf2HodographUSMEMIndex</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a052879357315e4ce8762a90da8dbf815a2a44084d587ba6e120f952d0b197f5d8" prot="public">
          <name>e1USMEMIndex</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a052879357315e4ce8762a90da8dbf815a297cb2909f79c2c69bc47ec6195b1d21" prot="public">
          <name>e2USMEMIndex</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a052879357315e4ce8762a90da8dbf815a0376a38cadec738c11eefaa118b003c3" prot="public">
          <name>e3USMEMIndex</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a052879357315e4ce8762a90da8dbf815a11304ebb013195970d91db78e6002aec" prot="public">
          <name>shadowFlagUSMEMIndex</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Unified state model with exponential map indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" line="91" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" bodystart="92" bodyend="100"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d7e/stateVectorIndices_8h_1aa91a5cbc25b98bc9b5d91bafb0847abf" prot="public" static="no" strong="no">
        <type></type>
        <name>QuaternionsElementIndices</name>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1aa91a5cbc25b98bc9b5d91bafb0847abfa3be9380a68927053b25a98600d8966f5" prot="public">
          <name>etaQuaternionIndex</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1aa91a5cbc25b98bc9b5d91bafb0847abfa6f71cdc997b96b5176cf4e0663e3ff82" prot="public">
          <name>epsilon1QuaternionIndex</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1aa91a5cbc25b98bc9b5d91bafb0847abfaf790f3d98baf607c63669629392eb70e" prot="public">
          <name>epsilon2QuaternionIndex</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1aa91a5cbc25b98bc9b5d91bafb0847abfa72c7dab5e2c867e111aeb777ce18a749" prot="public">
          <name>epsilon3QuaternionIndex</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Quaternions indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" line="103" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d7e/stateVectorIndices_8h_1ae2b410d4d820567d7fb4249bd942e7f6" prot="public" static="no" strong="no">
        <type></type>
        <name>ModifiedRodriguesParametersElementIndices</name>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1ae2b410d4d820567d7fb4249bd942e7f6afd35fd6635d5214ba029619647203038" prot="public">
          <name>sigma1ModifiedRodriguesParametersIndex</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1ae2b410d4d820567d7fb4249bd942e7f6a242730653be854d4df332d43dd35b440" prot="public">
          <name>sigma2ModifiedRodriguesParametersIndex</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1ae2b410d4d820567d7fb4249bd942e7f6af509dbed1e4d88b614158c098d02b4c1" prot="public">
          <name>sigma3ModifiedRodriguesParametersIndex</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1ae2b410d4d820567d7fb4249bd942e7f6af511a64adcf94485975d758064907cb2" prot="public">
          <name>shadowFlagModifiedRodriguesParametersIndex</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Modified Rodrigues parameters indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" line="112" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d7e/stateVectorIndices_8h_1a3d1674dfdf4279f82274d7034689f728" prot="public" static="no" strong="no">
        <type></type>
        <name>ExponentialMapElementIndices</name>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a3d1674dfdf4279f82274d7034689f728ac1d3d60adb0d6e09cc1bd68b9909868f" prot="public">
          <name>e1ExponentialMapIndex</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a3d1674dfdf4279f82274d7034689f728a811595711cb2d3c64dbecfe31bbe214e" prot="public">
          <name>e2ExponentialMapIndex</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a3d1674dfdf4279f82274d7034689f728ad59138d547f02e7c05984c9972ea9209" prot="public">
          <name>e3ExponentialMapIndex</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d7e/stateVectorIndices_8h_1a3d1674dfdf4279f82274d7034689f728a996da32754c34b7b335827216ee6d2cb" prot="public">
          <name>shadowFlagExponentialMapIndex</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Exponential map indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" line="121" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/stateVectorIndices.h" bodystart="122" bodyend="127"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d3/dc6/attitudeElementConversions_8h_1ac4cdc8c15341913354a3c090154c4ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector4d</type>
        <definition>Eigen::Vector4d tudat::orbital_element_conversions::convertQuaternionsToModifiedRodriguesParameterElements</definition>
        <argsstring>(const Eigen::Vector4d &amp;quaternionElements)</argsstring>
        <name>convertQuaternionsToModifiedRodriguesParameterElements</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>quaternionElements</declname>
        </param>
        <briefdescription>
<para>Convert quaternions to modified Rodrigues parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert quaternions to modified Rodrigues parameters. The conversion is slightly different for modified Rodrigues parameters (MRP) than for shadow modified Rodrigues parameters (SMRP). This difference is embodied by conversionSign. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quaternionElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of quaternion elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedModifiedRodriguesParameterElements Vector of (shadow) modified Rodrigues parameter elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/attitudeElementConversions.cpp" line="27" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/attitudeElementConversions.cpp" bodystart="27" bodyend="44" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/attitudeElementConversions.h" declline="35" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc6/attitudeElementConversions_8h_1a0bfc55024bbc6ec4b8ce95741e1352ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector4d</type>
        <definition>Eigen::Vector4d tudat::orbital_element_conversions::convertModifiedRodriguesParametersToQuaternionElements</definition>
        <argsstring>(const Eigen::Vector4d &amp;modifiedRodriguesParameterElements)</argsstring>
        <name>convertModifiedRodriguesParametersToQuaternionElements</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>modifiedRodriguesParameterElements</declname>
        </param>
        <briefdescription>
<para>Convert modified Rodrigues parameters to quaternions. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert modified Rodrigues parameters to quaternions. The conversion is slightly different for modified Rodrigues parameters (MRP) than for shadow modified Rodrigues parameters (SMRP). This difference is embodied by conversionSign. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>modifiedRodriguesParameterElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of (shadow) modified Rodrigues parameters elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedQuaternionElements Vector of quaternion elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/attitudeElementConversions.cpp" line="47" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/attitudeElementConversions.cpp" bodystart="47" bodyend="71" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/attitudeElementConversions.h" declline="44" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc6/attitudeElementConversions_8h_1a9f7851abb02d749b26b99c631c45c93e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector4d</type>
        <definition>Eigen::Vector4d tudat::orbital_element_conversions::convertQuaternionsToExponentialMapElements</definition>
        <argsstring>(const Eigen::Vector4d &amp;quaternionElements)</argsstring>
        <name>convertQuaternionsToExponentialMapElements</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>quaternionElements</declname>
        </param>
        <briefdescription>
<para>Convert quaternions to exponential map. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert quaternions to exponential map. The conversion is the same for both exponential map (EM) and shadow exponential map (SEM). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quaternionElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of quaternion elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedExponentialMapElements Vector of (shadow) exponential map elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/attitudeElementConversions.cpp" line="74" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/attitudeElementConversions.cpp" bodystart="74" bodyend="103" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/attitudeElementConversions.h" declline="53" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc6/attitudeElementConversions_8h_1a8a68ca2dbca7f4fcffa36718cedb9e23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector4d</type>
        <definition>Eigen::Vector4d tudat::orbital_element_conversions::convertExponentialMapToQuaternionElements</definition>
        <argsstring>(const Eigen::Vector4d &amp;exponentialMapElements)</argsstring>
        <name>convertExponentialMapToQuaternionElements</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>exponentialMapElements</declname>
        </param>
        <briefdescription>
<para>Convert exponential map to quaternions. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert exponential map to quaternions. The conversion is the same for both exponential map (EM) and shadow exponential map (SEM). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exponentialMapElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of (shadow) exponential map elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedQuaternionElements Vector of quaternion elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/attitudeElementConversions.cpp" line="106" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/attitudeElementConversions.cpp" bodystart="106" bodyend="137" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/attitudeElementConversions.h" declline="62" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dd/ddd/convertMeanToEccentricAnomalies_8h_1a4cff20c97fc5ebd1b16f6e98c6b07efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::computeKeplersFunctionForEllipticalOrbits</definition>
        <argsstring>(const ScalarType eccentricAnomaly, const ScalarType eccentricity, const ScalarType meanAnomaly)</argsstring>
        <name>computeKeplersFunctionForEllipticalOrbits</name>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>meanAnomaly</declname>
        </param>
        <briefdescription>
<para>Compute Kepler&apos;s function for elliptical orbits. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes Kepler&apos;s function, given as: <formula id="14">\[ f( E ) = E - e * sin( E ) - M \]</formula> for elliptical orbits, where <formula id="15">$ E $</formula> is the eccentric anomaly, <formula id="16">$ e $</formula> is the eccentricity, <formula id="17">$ M $</formula> is the mean anomaly. All eccentricities &gt;= 0.0 and &lt; 1.0 are valid. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eccentricAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentric anomaly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meanAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean anomaly. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of Kepler&apos;s function for elliptical orbits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" line="67" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="dd/ddd/convertMeanToEccentricAnomalies_8h_1a7b16a450f46d9c51a605df35b802bb45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::computeFirstDerivativeKeplersFunctionForEllipticalOrbits</definition>
        <argsstring>(const ScalarType eccentricAnomaly, const ScalarType eccentricity)</argsstring>
        <name>computeFirstDerivativeKeplersFunctionForEllipticalOrbits</name>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Compute first-derivative of Kepler&apos;s function for elliptical orbits. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the first-derivative of Kepler&apos;s function, given as: <formula id="18">\[ \frac{ df( E ) } { dE } = 1 - e * cos( E ) \]</formula> for elliptical orbits, where <formula id="15">$ E $</formula> is the eccentric anomaly, and <formula id="16">$ e $</formula> is the eccentricity. All eccentricities &gt;= 0.0 and &lt; 1.0 are valid. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eccentricAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentric anomaly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of first-derivative of Kepler&apos;s function for elliptical orbits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" line="87" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="dd/ddd/convertMeanToEccentricAnomalies_8h_1a76e7cdbfafe93dea60b64020eb885529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::computeKeplersFunctionForHyperbolicOrbits</definition>
        <argsstring>(const ScalarType hyperbolicEccentricAnomaly, const ScalarType eccentricity, const ScalarType hyperbolicMeanAnomaly)</argsstring>
        <name>computeKeplersFunctionForHyperbolicOrbits</name>
        <param>
          <type>const ScalarType</type>
          <declname>hyperbolicEccentricAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>hyperbolicMeanAnomaly</declname>
        </param>
        <briefdescription>
<para>Compute Kepler&apos;s function for hyperbolic orbits. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes Kepler&apos;s function, given as: <formula id="19">\[ f( F ) = e * sinh( F ) - F - M \]</formula> for hyperbolic orbits, where <formula id="20">$ F $</formula> is the hyperbolic eccentric anomaly, <formula id="16">$ e $</formula> is the eccentricity, <formula id="17">$ M $</formula> is the mean anomaly. All eccentricities &gt; 1.0 are valid. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hyperbolicEccentricAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Hyperbolic eccentric anomaly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hyperbolicMeanAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Hyperbolic mean anomaly.. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of Kepler&apos;s function for hyperbolic orbits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" line="109" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" bodystart="109" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="dd/ddd/convertMeanToEccentricAnomalies_8h_1accf6886f0257f277f213b344ccb2965c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::computeFirstDerivativeKeplersFunctionForHyperbolicOrbits</definition>
        <argsstring>(const ScalarType hyperbolicEccentricAnomaly, const ScalarType eccentricity)</argsstring>
        <name>computeFirstDerivativeKeplersFunctionForHyperbolicOrbits</name>
        <param>
          <type>const ScalarType</type>
          <declname>hyperbolicEccentricAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Compute first-derivative of Kepler&apos;s function for hyperbolic orbits. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the first-derivative of Kepler&apos;s function, given as: <formula id="21">\[ \frac{ df( F ) } { dF } = e * cosh( F ) - 1 \]</formula> for hyperbolic orbits, where <formula id="20">$ F $</formula> is the hyperbolic eccentric anomaly, and <formula id="16">$ e $</formula> is the eccentricity. All eccentricities &gt; 1.0 are valid. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hyperbolicEccentricAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Hyperbolic eccentric anomaly </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of first-derivative of Kepler&apos;s function for hyperbolic orbits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" line="130" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" bodystart="130" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="dd/ddd/convertMeanToEccentricAnomalies_8h_1a85c3b67657adac215374cfca024b5034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertMeanAnomalyToEccentricAnomaly</definition>
        <argsstring>(const ScalarType eccentricity, const ScalarType aMeanAnomaly, const bool useDefaultInitialGuess=true, const ScalarType userSpecifiedInitialGuess=TUDAT_NAN, std::shared_ptr&lt; root_finders::RootFinder&lt; ScalarType &gt; &gt; rootFinder=std::shared_ptr&lt; root_finders::RootFinder&lt; ScalarType &gt; &gt;())</argsstring>
        <name>convertMeanAnomalyToEccentricAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>aMeanAnomaly</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useDefaultInitialGuess</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>userSpecifiedInitialGuess</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" kindref="compound">root_finders::RootFinder</ref>&lt; ScalarType &gt; &gt;</type>
          <declname>rootFinder</declname>
          <defval>std::shared_ptr&lt; <ref refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" kindref="compound">root_finders::RootFinder</ref>&lt; ScalarType &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Convert mean anomaly to eccentric anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts mean anomaly to eccentric anomaly for elliptical orbits for all eccentricities &gt;= 0.0 and &lt; 1.0. If the conversion fails or the eccentricity falls outside the valid range, then ScalarType::NaN is returned. Calculated with an accuracy of 1.0e-13 for all cases, except for some near-parabolic cases in which macine precision problems occur. These are tested against an accuracy of 1.0e-9. Near-parabolic in this sense means e &gt; 1.0-1.0e-11. Also note that your mean anomaly is automatically transformed to fit within the 0 to 2.0*PI spectrum. Numerical tests performed using double ScalarType. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity of the orbit [-]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aMeanAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean anomaly to convert to eccentric anomaly [rad]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useDefaultInitialGuess</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean specifying whether to use default initial guess [-]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userSpecifiedInitialGuess</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess for rootfinder [rad]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rootFinder</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared-pointer to the rootfinder that is to be used. Default is Newton-Raphson using 1000 iterations as maximum and apprximately 1.0e-13 absolute X-tolerance (for doubles; 500 times ScalarType resolution ). Higher precision may invoke machine precision problems for some values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eccentric anomaly [rad]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" line="157" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" bodystart="157" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="dd/ddd/convertMeanToEccentricAnomalies_8h_1acbfec016792a9dfe02941f48cc3814cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertMeanAnomalyToHyperbolicEccentricAnomaly</definition>
        <argsstring>(const ScalarType eccentricity, const ScalarType hyperbolicMeanAnomaly, const bool useDefaultInitialGuess=true, const ScalarType userSpecifiedInitialGuess=TUDAT_NAN, std::shared_ptr&lt; root_finders::RootFinder&lt; ScalarType &gt; &gt; aRootFinder=std::shared_ptr&lt; root_finders::RootFinder&lt; ScalarType &gt; &gt;())</argsstring>
        <name>convertMeanAnomalyToHyperbolicEccentricAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>hyperbolicMeanAnomaly</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useDefaultInitialGuess</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>userSpecifiedInitialGuess</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" kindref="compound">root_finders::RootFinder</ref>&lt; ScalarType &gt; &gt;</type>
          <declname>aRootFinder</declname>
          <defval>std::shared_ptr&lt; <ref refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" kindref="compound">root_finders::RootFinder</ref>&lt; ScalarType &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Convert mean anomaly to hyperbolic eccentric anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts mean anomaly to hyperbolic eccentric anomaly for hyperbolic orbits for all eccentricities &gt; 1.0. If the conversion fails or the eccentricity falls outside the valid range, then double::NaN is returned. Calculated with an accuracy of 1.0e-14 for all reasonable cases (eccentricities up to 1.0e15, mean anomalies -1.2e12 to 1.2e12, test cases using doubles). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity of the orbit [-]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hyperbolicMeanAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Hyperbolic mean anomaly to convert to eccentric anomaly [rad]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useDefaultInitialGuess</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean specifying whether to use default initial guess [-]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userSpecifiedInitialGuess</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess for rootfinder [rad]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRootFinder</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared-pointer to the rootfinder that is to be used. Default is Newton-Raphson using 1000 iterations as maximum and apprximately 5.0e-15 absolute X-tolerance (for doubles; 25 times ScalarType resolution ). Higher precision may invoke machine precision problems for some values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hyperbolic eccentric anomaly. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" line="301" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/convertMeanToEccentricAnomalies.h" bodystart="301" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="da/d5e/keplerPropagator_8h_1a9335c5a407c595a75e33cd7b34aefc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::propagateKeplerOrbit</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;initialStateInKeplerianElements, const ScalarType propagationTime, const ScalarType centralBodyGravitationalParameter, std::shared_ptr&lt; root_finders::RootFinder&lt; ScalarType &gt; &gt; aRootFinder=std::shared_ptr&lt; root_finders::RootFinder&lt; ScalarType &gt; &gt;())</argsstring>
        <name>propagateKeplerOrbit</name>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;</type>
          <declname>initialStateInKeplerianElements</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>propagationTime</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" kindref="compound">root_finders::RootFinder</ref>&lt; ScalarType &gt; &gt;</type>
          <declname>aRootFinder</declname>
          <defval>std::shared_ptr&lt; <ref refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" kindref="compound">root_finders::RootFinder</ref>&lt; ScalarType &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Propagate Kepler orbit. </para>
        </briefdescription>
        <detaileddescription>
<para>Propagates Kepler orbit. This function essentially takes a state in classical Keplerian elements at an initial epoch and propagates it to a final state at a given final epoch. Currently both elliptic and hyperbolic orbits are supported. Parabolic orbits are not supported and will result in an error message. IMPORTANT! Note that the true anomaly is returned within the -PI to PI spectrum. If the user desires a different spectrum (possibly including the number of revolutions), these should be added by the user a posteriori. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialStateInKeplerianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state vector in classical Keplerian elements. Order is important! initialStateInKeplerianElements( 0 ) = semiMajorAxis, [m] initialStateInKeplerianElements( 1 ) = eccentricity, [-] initialStateInKeplerianElements( 2 ) = inclination, [rad] initialStateInKeplerianElements( 3 ) = argument of periapsis, [rad] initialStateInKeplerianElements( 4 ) = longitude of ascending node, [rad] initialStateInKeplerianElements( 5 ) = true anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagationTime</parametername>
</parameternamelist>
<parameterdescription>
<para>propagation time. [s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body [m^3 s^-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRootFinder</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared-pointer to the root-finder that is used to solve the conversion from mean to eccentric anomaly. Default is Newton-Raphson using 5.0e-14 absolute X-tolerance and 1000 iterations as maximum. Higher precision may invoke machine precision problems for some values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>finalStateInKeplerianElements Final state vector in classical Keplerian elements. Order is important! finalStateInKeplerianElements( 0 ) = semiMajorAxis, [m] finalStateInKeplerianElements( 1 ) = eccentricity, [-] finalStateInKeplerianElements( 2 ) = inclination, [rad] finalStateInKeplerianElements( 3 ) = argument of periapsis, [rad] finalStateInKeplerianElements( 4 ) = longitude of ascending node, [rad] finalStateInKeplerianElements( 5 ) = true anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/keplerPropagator.h" line="65" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/keplerPropagator.h" bodystart="65" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="d4/d6b/modifiedEquinoctialElementConversions_8h_1a744e9162cf97c3315d658dd4177fcda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertKeplerianToModifiedEquinoctialElements</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;keplerianElements, const bool flipSingularityToZeroInclination)</argsstring>
        <name>convertKeplerianToModifiedEquinoctialElements</name>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;</type>
          <declname>keplerianElements</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>flipSingularityToZeroInclination</declname>
        </param>
        <briefdescription>
<para>Convert Keplerian to modified equinoctial orbital elements using MEE explicit equation set. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts Keplerian to modified equinoctial elements using the prograde/retrograde equation determined by the values of the input Kepler elements. If input exceeds allowable ranges, an error is thrown. NOTE: This function automatically selects the boolean parameter that defines the location of the singularity, depending on whether the orbit is prograde or retrograde. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keplerianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing Keplerian elements. Order of elements is important! keplerianElements( 0 ) = semi-major axis, [m] keplerianElements( 1 ) = eccentricity, [-] keplerianElements( 2 ) = inclination (in range [0,PI]), [rad] keplerianElements( 3 ) = argument of periapsis, [rad] keplerianElements( 4 ) = longitude of ascending node, [rad] keplerianElements( 5 ) = true anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipSingularityToZeroInclination</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to indicate whether the set of equations for the inclination = 180 degrees (false) or 0 degrees (true) singular case are to be used. Take note: the same set of equations is required for conversion back to Keplerian elements to retrieve original state! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted state in modified equinoctial elements. The order of elements is fixed! modifiedEquinoctialElements( 0 ) = semi-latus rectum, [m] modifiedEquinoctialElements( 1 ) = f-element, [-] modifiedEquinoctialElements( 2 ) = g-element, [-] modifiedEquinoctialElements( 3 ) = h-element, [-] modifiedEquinoctialElements( 4 ) = k-element, [-] modifiedEquinoctialElements( 5 ) = true longitude. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" line="64" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" bodystart="64" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="d4/d6b/modifiedEquinoctialElementConversions_8h_1a734a361d91ff3e75b137675d27035ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertKeplerianToModifiedEquinoctialElements</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;keplerianElements)</argsstring>
        <name>convertKeplerianToModifiedEquinoctialElements</name>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;</type>
          <declname>keplerianElements</declname>
        </param>
        <briefdescription>
<para>Convert Keplerian to modified equinoctial orbital elements using implicit MEE equation set. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts Keplerian to modified equinoctial elements using the prograde/retrograde equation determined by the values of the input Kepler elements. If input exceeds allowable ranges, an error is thrown. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keplerianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing Keplerian elements. Order of elements is important! keplerianElements( 0 ) = semi-major axis, [m] keplerianElements( 1 ) = eccentricity, [-] keplerianElements( 2 ) = inclination (in range [0,PI]), [rad] keplerianElements( 3 ) = argument of periapsis, [rad] keplerianElements( 4 ) = longitude of ascending node, [rad] keplerianElements( 5 ) = true anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted state in modified equinoctial elements. The order of elements is fixed! modifiedEquinoctialElements( 0 ) = semi-latus rectum, [m] modifiedEquinoctialElements( 1 ) = f-element, [-] modifiedEquinoctialElements( 2 ) = g-element, [-] modifiedEquinoctialElements( 3 ) = h-element, [-] modifiedEquinoctialElements( 4 ) = k-element, [-] modifiedEquinoctialElements( 5 ) = true longitude. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" line="179" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" bodystart="179" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="d4/d6b/modifiedEquinoctialElementConversions_8h_1a5a6a0a3c680404bf2954c71b1331ecac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertModifiedEquinoctialToKeplerianElements</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;modifiedEquinoctialElements, const bool flipSingularityToZeroInclination)</argsstring>
        <name>convertModifiedEquinoctialToKeplerianElements</name>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;</type>
          <declname>modifiedEquinoctialElements</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>flipSingularityToZeroInclination</declname>
        </param>
        <briefdescription>
<para>Convert modified equinoctial to Keplerian orbital elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts modified equinoctial elements to Keplerian using one of two sets of equations specified by the user. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>modifiedEquinoctialElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing modified equinoctial elements. Order of elements is important! modifiedEquinoctialElements( 0 ) = semi-latus rectum, [m] modifiedEquinoctialElements( 1 ) = f-element, [-] modifiedEquinoctialElements( 2 ) = g-element, [-] modifiedEquinoctialElements( 3 ) = h-element, [-] modifiedEquinoctialElements( 4 ) = k-element, [-] modifiedEquinoctialElements( 5 ) = true longitude. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipSingularityToZeroInclination</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to indicate whether the set of equations for the inclination = 180 degrees (false) or 0 degrees (true) singular case are to be used. Take note: the same set of equations is required for conversion back to modified equinoctial elements to retrieve original state! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted state in Keplerian elements. The order of elements is fixed! keplerianElements( 0 ) = semi-major axis, [m] keplerianElements( 1 ) = eccentricity, [-] keplerianElements( 2 ) = inclination [0, 180], [rad] keplerianElements( 3 ) = argument of periapsis, [rad] keplerianElements( 4 ) = longitude of ascending node, [rad] keplerianElements( 5 ) = true anomaly. [rad] </para>
</simplesect>
<simplesect kind="note"><para>Using unknown source pdf, code archive E. Heeren and personal derivation based on Hintz 2008. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" line="219" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" bodystart="219" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="d4/d6b/modifiedEquinoctialElementConversions_8h_1acbc70f640deb2e5e522ce048f765cd82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertCartesianToModifiedEquinoctialElements</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;cartesianElements, const ScalarType centralBodyGravitationalParameter)</argsstring>
        <name>convertCartesianToModifiedEquinoctialElements</name>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;</type>
          <declname>cartesianElements</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert Cartesian to modified equinoctial orbital elements using implicit MEE equation set. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts Cartesian to modified equinoctial elements using one of two sets of equations implicitly determined from intermediate inclination. NOTE: This function automatically selects the boolean parameter that defines the location of the singularity, depending on whether the orbit is prograde or retrograde. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing Cartesian elements. Order of elements is important! cartesianElements( 0 ) = x-position coordinate, [m] cartesianElements( 1 ) = y-position coordinate, [m] cartesianElements( 2 ) = z-position coordinate, [m] cartesianElements( 3 ) = x-velocity coordinate, [m/s] cartesianElements( 4 ) = y-velocity coordinate, [m/s] cartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted state in modified equinoctial elements. The order of elements is fixed! modifiedEquinoctialElements( 0 ) = semi-latus rectum, [m] modifiedEquinoctialElements( 1 ) = f-element, [-] modifiedEquinoctialElements( 2 ) = g-element, [-] modifiedEquinoctialElements( 3 ) = h-element, [-] modifiedEquinoctialElements( 4 ) = k-element, [-] modifiedEquinoctialElements( 5 ) = true longitude. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" line="342" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" bodystart="342" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="d4/d6b/modifiedEquinoctialElementConversions_8h_1ace65264cdb70d6791abb716c18fd959b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertCartesianToModifiedEquinoctialElementsFromStateFunction</definition>
        <argsstring>(const std::function&lt; Eigen::Matrix&lt; ScalarType, 6, 1 &gt;() &gt; &amp;cartesianElementsFunction, const std::function&lt; ScalarType() &gt; centralBodyGravitationalParameterFunction)</argsstring>
        <name>convertCartesianToModifiedEquinoctialElementsFromStateFunction</name>
        <param>
          <type>const std::function&lt; Eigen::Matrix&lt; ScalarType, 6, 1 &gt;() &gt; &amp;</type>
          <declname>cartesianElementsFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; ScalarType() &gt;</type>
          <declname>centralBodyGravitationalParameterFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" line="361" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" bodystart="361" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="d4/d6b/modifiedEquinoctialElementConversions_8h_1ad7e50db31b5941e8db0175f2942a3620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertCartesianToModifiedEquinoctialElements</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;cartesianElements, const ScalarType centralBodyGravitationalParameter, const bool flipSingularityToZeroInclination)</argsstring>
        <name>convertCartesianToModifiedEquinoctialElements</name>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;</type>
          <declname>cartesianElements</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>flipSingularityToZeroInclination</declname>
        </param>
        <briefdescription>
<para>Convert Cartesian to modified equinoctial orbital elements using explicit MEE equation set. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts Cartesian to modified equinoctial elements using one of two sets of equations specified by the user. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing Cartesian elements. Order of elements is important! cartesianElements( 0 ) = x-position coordinate, [m] cartesianElements( 1 ) = y-position coordinate, [m] cartesianElements( 2 ) = z-position coordinate, [m] cartesianElements( 3 ) = x-velocity coordinate, [m/s] cartesianElements( 4 ) = y-velocity coordinate, [m/s] cartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipSingularityToZeroInclination</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to indicate whether the set of equations for the inclination = 180 degrees (false) or 0 degrees (true) singular case are to be used. Take note: the same set of equations is required for conversion back to Cartesian elements to retrieve original state! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted state in modified equinoctial elements. The order of elements is fixed! modifiedEquinoctialElements( 0 ) = semi-latus rectum, [m] modifiedEquinoctialElements( 1 ) = f-element, [-] modifiedEquinoctialElements( 2 ) = g-element, [-] modifiedEquinoctialElements( 3 ) = h-element, [-] modifiedEquinoctialElements( 4 ) = k-element, [-] modifiedEquinoctialElements( 5 ) = true longitude. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" line="394" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" bodystart="394" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="d4/d6b/modifiedEquinoctialElementConversions_8h_1aa1df954105e62498903ef4575450778e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertModifiedEquinoctialToCartesianElementsViaKeplerElements</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;modifiedEquinoctialElements, const ScalarType centralBodyGravitationalParameter, const bool flipSingularityToZeroInclination)</argsstring>
        <name>convertModifiedEquinoctialToCartesianElementsViaKeplerElements</name>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;</type>
          <declname>modifiedEquinoctialElements</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>flipSingularityToZeroInclination</declname>
        </param>
        <briefdescription>
<para>Convert modified equinoctial elements to Cartesian orbital elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts modified equinoctial elements to Cartesian orbital elements using one of two sets of equations specified by the user. This function first converts to Keplerian elements, and then to Cartesian elements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>modifiedEquinoctialElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing modified equinoctial elements. Order of elements is important! modifiedEquinoctialElements( 0 ) = semi-latus rectum, [m] modifiedEquinoctialElements( 1 ) = f-element, [-] modifiedEquinoctialElements( 2 ) = g-element, [-] modifiedEquinoctialElements( 3 ) = h-element, [-] modifiedEquinoctialElements( 4 ) = k-element, [-] modifiedEquinoctialElements( 5 ) = true longitude. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipSingularityToZeroInclination</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to indicate whether the set of equations for the inclination = 180 degrees (false) or 0 degrees (true) singular case are to be used. Take note: the same set of equations is required for conversion back to modified equinoctial elements to retrieve original state! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted state in Cartesian elements. The order of elements is fixed! cartesianElements( 0 ) = x-position coordinate, [m] cartesianElements( 1 ) = y-position coordinate, [m] cartesianElements( 2 ) = z-position coordinate, [m] cartesianElements( 3 ) = x-velocity coordinate, [m/s] cartesianElements( 4 ) = y-velocity coordinate, [m/s] cartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" line="434" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" bodystart="434" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="d4/d6b/modifiedEquinoctialElementConversions_8h_1ac56fcf9c542cb8bd5099f23709ad7aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertModifiedEquinoctialToCartesianElements</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;modifiedEquinoctialElements, const ScalarType centralBodyGravitationalParameter, const bool flipSingularityToZeroInclination)</argsstring>
        <name>convertModifiedEquinoctialToCartesianElements</name>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;</type>
          <declname>modifiedEquinoctialElements</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>flipSingularityToZeroInclination</declname>
        </param>
        <briefdescription>
<para>Convert modified equinoctial elements to Cartesian orbital elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts modified equinoctial elements to Cartesian orbital elements using one of two sets of equations specified by the user. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>modifiedEquinoctialElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing modified equinoctial elements. Order of elements is important! modifiedEquinoctialElements( 0 ) = semi-latus rectum, [m] modifiedEquinoctialElements( 1 ) = f-element, [-] modifiedEquinoctialElements( 2 ) = g-element, [-] modifiedEquinoctialElements( 3 ) = h-element, [-] modifiedEquinoctialElements( 4 ) = k-element, [-] modifiedEquinoctialElements( 5 ) = true longitude. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipSingularityToZeroInclination</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to indicate whether the set of equations for the inclination = 180 degrees (false) or 0 degrees (true) singular case are to be used. Take note: the same set of equations is required for conversion back to modified equinoctial elements to retrieve original state! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted state in Cartesian elements. The order of elements is fixed! cartesianElements( 0 ) = x-position coordinate, [m] cartesianElements( 1 ) = y-position coordinate, [m] cartesianElements( 2 ) = z-position coordinate, [m] cartesianElements( 3 ) = x-velocity coordinate, [m/s] cartesianElements( 4 ) = y-velocity coordinate, [m/s] cartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" line="545" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/modifiedEquinoctialElementConversions.h" bodystart="545" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1ae2ca90e89d0bbf3a2eabe69d966bb913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::computeSemiLatusRectum</definition>
        <argsstring>(const ScalarType eccentricity, const ScalarType semiMajorAxis, const ScalarType tolerance)</argsstring>
        <name>computeSemiLatusRectum</name>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Function to compute orbit semi-latus rectum. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute orbit semi-latus rectum. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity of orbit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of orbit (in Tudat, this input must equal semi-latus rectum for parabolic orbits) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity tolerance for which orbit is deemed to be parabolic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Orbit semi-latus rectum </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="51" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="51" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a4544948d624e6128ef0edcb788d2dc6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::computeOrbitalAngularMomentumPerUnitMass</definition>
        <argsstring>(const ScalarType semiLatusRectum, const ScalarType centralBodyGravitationalParameter)</argsstring>
        <name>computeOrbitalAngularMomentumPerUnitMass</name>
        <param>
          <type>const ScalarType</type>
          <declname>semiLatusRectum</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to compute orbit angular momentum per unit mass. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute orbit angular momentum per unit mass <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semiLatusRectum</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-latus rectum of orbit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Orbital angular momentum </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="85" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a7eefa586d913da62305c90141ebcac9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertKeplerianToCartesianElements</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;keplerianElements, const ScalarType centralBodyGravitationalParameter)</argsstring>
        <name>convertKeplerianToCartesianElements</name>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;</type>
          <declname>keplerianElements</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert Keplerian to Cartesian orbital elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts Keplerian to Cartesian orbital elements (Chobotov, 2002). Use the CartesianElementVectorIndices enum to access the individual orbital element components in the storage vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keplerianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing Keplerian elements. <linebreak/>
 <emphasis> Order of elements is important! <linebreak/>
 keplerianElements( 0 ) = semiMajorAxis, [m] <linebreak/>
 keplerianElements( 1 ) = eccentricity, [-] <linebreak/>
 keplerianElements( 2 ) = inclination, [rad] <linebreak/>
 keplerianElements( 3 ) = argument of periapsis, [rad] <linebreak/>
 keplerianElements( 4 ) = longitude of ascending node, [rad] <linebreak/>
 keplerianElements( 5 ) = true anomaly. [rad] <linebreak/>
 </emphasis> WARNING: If eccentricity is 1.0 within machine precision, keplerianElements( 0 ) = semi-latus rectum.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body [m^3 s^-2].</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted state in Cartesian elements. <linebreak/>
 <emphasis> Order of elements is important! <linebreak/>
 cartesianElements( 0 ) = x-position coordinate, [m] <linebreak/>
 cartesianElements( 1 ) = y-position coordinate, [m] <linebreak/>
 cartesianElements( 2 ) = z-position coordinate, [m] <linebreak/>
 cartesianElements( 3 ) = x-velocity coordinate, [m/s] <linebreak/>
 cartesianElements( 4 ) = y-velocity coordinate, [m/s] <linebreak/>
 cartesianElements( 5 ) = z-velocity coordinate. [m/s] <linebreak/>
 </emphasis></para>
</simplesect>
<simplesect kind="see"><para>CartesianElementVectorIndices() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="127" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="127" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a7bfb58f6a24f43d459b6aa9ee07f1a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertKeplerianToCartesianElements</definition>
        <argsstring>(const ScalarType semiMajorAxis, const ScalarType eccentricity, const ScalarType inclination, const ScalarType argumentOfPeriapsis, const ScalarType longitudeOfAscendingNode, const ScalarType trueAnomaly, const ScalarType centralBodyGravitationalParameter)</argsstring>
        <name>convertKeplerianToCartesianElements</name>
        <param>
          <type>const ScalarType</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>inclination</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>argumentOfPeriapsis</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>longitudeOfAscendingNode</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>trueAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="206" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="206" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1aa367c8d39ad23cca71267144313ea0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertCartesianToKeplerianElements</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;cartesianElements, const ScalarType centralBodyGravitationalParameter)</argsstring>
        <name>convertCartesianToKeplerianElements</name>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 1 &gt; &amp;</type>
          <declname>cartesianElements</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert Cartesian to Keplerian orbital elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts Cartesian to Keplerian orbital elements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing Cartesian elements. Order of elements is important! cartesianElements( 0 ) = x-position coordinate, [m] cartesianElements( 1 ) = y-position coordinate, [m] cartesianElements( 2 ) = z-position coordinate, [m] cartesianElements( 3 ) = x-velocity coordinate, [m/s] cartesianElements( 4 ) = y-velocity coordinate, [m/s] cartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted state in Keplerian elements. The order of elements is fixed! keplerianElements( 0 ) = semiMajorAxis, [m] keplerianElements( 1 ) = eccentricity, [-] keplerianElements( 2 ) = inclination, [rad] keplerianElements( 3 ) = argument of periapsis, [rad] keplerianElements( 4 ) = longitude of ascending node, [rad] keplerianElements( 5 ) = true anomaly. [rad] WARNING: If eccentricity is 1.0 within 1.0e-15, keplerianElements( 0 ) = semi-latus rectum, since the orbit is parabolic. WARNING: If eccentricity is 0.0 within 1.0e-15, argument of periapsis is set to 0.0, since the orbit is circular. WARNING: If inclination is 0.0 within 1.0e-15, longitude of ascending node is set to 0.0, since the orbit is equatorial. The tolerance 1.0e-15 is hard-coded, as it should not be changed for performance reasons, unless required for specific scenarios. In those cases, users are expected to update the internal tolerance to the required value. Below these tolerance values for eccentricity and inclination, the orbit is considered to be a limit case. Essentially, special solutions are then used for parabolic, circular inclined, non-circular equatorial, and circular equatorial orbits. These special solutions are required because of singularities in the classical Keplerian elements. If high precision is required near these singularities, users are encouraged to consider using other elements, such as modified equinoctial elements. It should be noted that modified equinoctial elements also suffer from singularities, but not for zero eccentricity and inclination. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="258" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="258" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a93dacfb10bb48374b311134397e4e47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertCartesianToKeplerianElementsFromFunctions</definition>
        <argsstring>(const std::function&lt; Eigen::Matrix&lt; ScalarType, 6, 1 &gt;() &gt; cartesianElementsFunction, const std::function&lt; ScalarType() &gt; centralBodyGravitationalParameterFunction)</argsstring>
        <name>convertCartesianToKeplerianElementsFromFunctions</name>
        <param>
          <type>const std::function&lt; Eigen::Matrix&lt; ScalarType, 6, 1 &gt;() &gt;</type>
          <declname>cartesianElementsFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; ScalarType() &gt;</type>
          <declname>centralBodyGravitationalParameterFunction</declname>
        </param>
        <briefdescription>
<para>Convert Cartesian to Keplerian orbital elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts Cartesian to Keplerian orbital elements, using function pointers to retrieve the cartesian state and gravitational parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianElementsFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that returns vector containing Cartesian elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameterFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that returns gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted state in Keplerian elements. </para>
</simplesect>
<simplesect kind="see"><para>convertCartesianToKeplerianElements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="461" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="461" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1ad7fc761d802acd347d46513f1c08babb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertTrueAnomalyToEllipticalEccentricAnomaly</definition>
        <argsstring>(const ScalarType trueAnomaly, const ScalarType eccentricity)</argsstring>
        <name>convertTrueAnomalyToEllipticalEccentricAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>trueAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Convert true anomaly to (elliptical) eccentric anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts true anomaly to eccentric anomaly for elliptical orbits ( 0 &lt;= eccentricity &lt; 1.0 ). The equations used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trueAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>True anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. [-] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(Elliptical) Eccentric anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="478" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="478" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1aba359a0218819c330469ed839804905a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertTrueAnomalyToHyperbolicEccentricAnomaly</definition>
        <argsstring>(const ScalarType trueAnomaly, const ScalarType eccentricity)</argsstring>
        <name>convertTrueAnomalyToHyperbolicEccentricAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>trueAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Convert true anomaly to hyperbolic eccentric anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts true anomaly to hyperbolic eccentric anomaly for hyperbolic orbits ( eccentricity &gt; 1.0 ). The equations used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trueAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>True anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. [-] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hyperbolic eccentric anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="513" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="513" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a3f241c29aa7fc90b19b05a03acb0331f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertTrueAnomalyToEccentricAnomaly</definition>
        <argsstring>(const ScalarType trueAnomaly, const ScalarType eccentricity)</argsstring>
        <name>convertTrueAnomalyToEccentricAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>trueAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Convert true anomaly to eccentric anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts true anomaly to eccentric anomaly for elliptical and hyperbolic orbits ( eccentricity &lt; 1.0 &amp;&amp; eccentricity &gt; 1.0 ). This function is essentially a wrapper for convertTrueAnomalyToEllipticalEccentricAnomaly() and convertTrueAnomalyToHyperbolicEccentricAnomaly(). It should be used in cases where the eccentricity of the orbit is not known a priori. Currently, this implementation performs a check on the eccentricity and throws an error for eccentricity &lt; 0.0 and parabolic orbits, which have not been implemented. The equations used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trueAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>True anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. [-] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eccentric anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="556" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="556" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1ad645cd6b612d1dd2d8f49da387bbd62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertEllipticalEccentricAnomalyToTrueAnomaly</definition>
        <argsstring>(const ScalarType ellipticEccentricAnomaly, const ScalarType eccentricity)</argsstring>
        <name>convertEllipticalEccentricAnomalyToTrueAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>ellipticEccentricAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Convert (elliptical) eccentric anomaly to true anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts eccentric anomaly to true anomaly for elliptical orbits ( 0 &lt;= eccentricity &lt; 1.0 ). The equations used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ellipticEccentricAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Elliptical eccentric anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. [-] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="603" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="603" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a47cc4ef237959bc01e678652d9b2f001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertHyperbolicEccentricAnomalyToTrueAnomaly</definition>
        <argsstring>(const ScalarType hyperbolicEccentricAnomaly, const ScalarType eccentricity)</argsstring>
        <name>convertHyperbolicEccentricAnomalyToTrueAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>hyperbolicEccentricAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Convert hyperbolic eccentric anomaly to true anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts hyperbolic eccentric anomaly to true anomaly for hyperbolic orbits ( eccentricity &gt; 1.0 ). The equations used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hyperbolicEccentricAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Hyperbolic eccentric anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. [-] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="642" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="642" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a712d4620b7c6bb5218618b9d6b48053c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertEccentricAnomalyToTrueAnomaly</definition>
        <argsstring>(const ScalarType eccentricAnomaly, const ScalarType eccentricity)</argsstring>
        <name>convertEccentricAnomalyToTrueAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Convert eccentric anomaly to true anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts eccentric anomaly to true anomaly for elliptical and hyperbolic orbits ( eccentricity &lt; 1.0 &amp;&amp; eccentricity &gt; 1.0 ). This function is essentially a wrapper for convertEllipticalEccentricAnomalyToTrueAnomaly() and convertHyperbolicEccentricAnomalyToTrueAnomaly(). It should be used in cases where the eccentricity of the orbit is not known a priori. Currently, this implementation performs a check on the eccentricity and throws an error for eccentricity &lt; 0.0 and parabolic orbits, which have not been implemented. The equations used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eccentricAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentric anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. [-] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="687" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="687" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a97d5235d950fb874945ced344b87f75a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertEllipticalEccentricAnomalyToMeanAnomaly</definition>
        <argsstring>(const ScalarType ellipticalEccentricAnomaly, const ScalarType eccentricity)</argsstring>
        <name>convertEllipticalEccentricAnomalyToMeanAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>ellipticalEccentricAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Convert (elliptical) eccentric anomaly to mean anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts eccentric anomaly to mean anomaly for elliptical orbits ( 0 &lt;= eccentricity &lt; 1.0 ). The equations used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ellipticalEccentricAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>(Elliptical) eccentric anomaly [rad]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mean anomaly [rad]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="735" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="735" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a2a1c24c3b60ff302383b1d5c0f5c3698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertHyperbolicEccentricAnomalyToMeanAnomaly</definition>
        <argsstring>(const ScalarType hyperbolicEccentricAnomaly, const ScalarType eccentricity)</argsstring>
        <name>convertHyperbolicEccentricAnomalyToMeanAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>hyperbolicEccentricAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Convert hyperbolic eccentric anomaly to mean anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts hyperbolic eccentric anomaly to mean anomaly for hyperbolic orbits ( eccentricity &gt; 1.0 ). The equations used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hyperbolicEccentricAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Hyperbolic eccentric anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. [-] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mean anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="752" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="752" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1ac79dc64aaca7e8ca56982c5932b5e995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertEccentricAnomalyToMeanAnomaly</definition>
        <argsstring>(const ScalarType eccentricAnomaly, const ScalarType eccentricity)</argsstring>
        <name>convertEccentricAnomalyToMeanAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricAnomaly</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
<para>Convert eccentric anomaly to mean anomaly. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts eccentric anomaly to mean anomaly for elliptical and hyperbolic orbits ( eccentricity &lt; 1.0 &amp;&amp; eccentricity &gt; 1.0 ). This function is essentially a wrapper for convertEllipticalEccentricAnomalyToMeanAnomaly() and convertHyperbolicEccentricAnomalyToMeanAnomaly(). It should be used in cases where the eccentricity of the orbit is not known a priori. Currently, this implementation performs a check on the eccentricity and throws an error for eccentricity &lt; 0.0 and parabolic orbits, which have not been implemented. The equations used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentric anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mean anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="773" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="773" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a15acd254ffbd65961cc8a98fa45fc221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertElapsedTimeToEllipticalMeanAnomalyChange</definition>
        <argsstring>(const ScalarType elapsedTime, const ScalarType centralBodyGravitationalParameter, const ScalarType semiMajorAxis)</argsstring>
        <name>convertElapsedTimeToEllipticalMeanAnomalyChange</name>
        <param>
          <type>const ScalarType</type>
          <declname>elapsedTime</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>semiMajorAxis</declname>
        </param>
        <briefdescription>
<para>Convert elapsed time to (elliptical) mean anomaly change. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts elapsed time to mean anomaly change for elliptical orbits ( 0 &lt;= eccentricity &lt; 1.0 ). The semi-major axis must be non-negative; this function will throw an error to indicate if the semi-major axis is invalid. The equation used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elapsedTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Elapsed time. [s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis. [m] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(Elliptical) Mean anomaly change. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="825" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="825" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a3ba74324bb7caaed6890c3e1f495ab3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertElapsedTimeToHyperbolicMeanAnomalyChange</definition>
        <argsstring>(const ScalarType elapsedTime, const ScalarType centralBodyGravitationalParameter, const ScalarType semiMajorAxis)</argsstring>
        <name>convertElapsedTimeToHyperbolicMeanAnomalyChange</name>
        <param>
          <type>const ScalarType</type>
          <declname>elapsedTime</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>semiMajorAxis</declname>
        </param>
        <briefdescription>
<para>Convert elapsed time to mean anomaly change for hyperbolic orbits. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts elapsed time to mean anomaly change for hyperbolic orbits ( eccentricity &gt; 1.0 ). The semi-major axis must be non-positive; this function will throw an error to indicate if the semi-major axis is invalid. The equation used can be found in (Chobotov, 2002). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elapsedTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Elapsed time. [s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis. [m] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mean anomaly change. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="855" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="855" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1ad9461574b8a15b72add6eac24f2a853b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertElapsedTimeToMeanAnomalyChange</definition>
        <argsstring>(const ScalarType elapsedTime, const ScalarType centralBodyGravitationalParameter, const ScalarType semiMajorAxis)</argsstring>
        <name>convertElapsedTimeToMeanAnomalyChange</name>
        <param>
          <type>const ScalarType</type>
          <declname>elapsedTime</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>semiMajorAxis</declname>
        </param>
        <briefdescription>
<para>Convert elapsed time to mean anomaly change. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts elapsed time to mean anomaly change for elliptical and hyperbolic orbits ( eccentricity &lt; 1.0 &amp;&amp; eccentricity &gt; 1.0 ). This function is essentially a wrapper for convertElapsedTimeToEllipticalMeanAnomalyChange() and convertElapsedTimeToHyperbolicMeanAnomalyChange(). It should be used in cases where the eccentricity of the orbit is not known a priori. The equations used can be found in (Wertz, 2001). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elapsedTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Elapsed time. [s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis. [m] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mean anomaly change. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="888" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="888" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a2c0b035bbbc79a82b9948b399211b0ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertEllipticalMeanAnomalyChangeToElapsedTime</definition>
        <argsstring>(const ScalarType ellipticalMeanAnomalyChange, const ScalarType centralBodyGravitationalParameter, const ScalarType semiMajorAxis)</argsstring>
        <name>convertEllipticalMeanAnomalyChangeToElapsedTime</name>
        <param>
          <type>const ScalarType</type>
          <declname>ellipticalMeanAnomalyChange</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>semiMajorAxis</declname>
        </param>
        <briefdescription>
<para>Convert (elliptical) mean anomaly change to elapsed time. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts mean anomaly change to elapsed time for elliptical orbits ( 0 &lt;= eccentricity &lt; 1.0 ). The equation used can be found in (Wertz, 2001). This function checks if the semi-major axis is non-negative and throws an error if it not. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ellipticalMeanAnomalyChange</parametername>
</parameternamelist>
<parameterdescription>
<para>(Elliptical) Mean anomaly change. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis. [m] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Elapsed time. [s] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="925" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="925" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a34d16a987dc39a73e5fbfa216b10489c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertHyperbolicMeanAnomalyChangeToElapsedTime</definition>
        <argsstring>(const ScalarType hyperbolicMeanAnomalyChange, const ScalarType centralBodyGravitationalParameter, const ScalarType semiMajorAxis)</argsstring>
        <name>convertHyperbolicMeanAnomalyChangeToElapsedTime</name>
        <param>
          <type>const ScalarType</type>
          <declname>hyperbolicMeanAnomalyChange</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>semiMajorAxis</declname>
        </param>
        <briefdescription>
<para>Convert hyperbolic mean anomaly change to elapsed time. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts mean anomaly change to elapsed time for hyperbolic orbits ( eccentricity &gt; 1.0 ). The equation used can be found in (Wertz, 2001). This function checks if the semi-major axis is non-positive and throws an error if it not. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hyperbolicMeanAnomalyChange</parametername>
</parameternamelist>
<parameterdescription>
<para>Hyperbolic mean anomaly change. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis. [m] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Elapsed time. [s] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="956" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="956" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a65fd73c2cb43f42c7ee05c05eadc468a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertMeanAnomalyChangeToElapsedTime</definition>
        <argsstring>(const ScalarType meanAnomalyChange, const ScalarType centralBodyGravitationalParameter, const ScalarType semiMajorAxis)</argsstring>
        <name>convertMeanAnomalyChangeToElapsedTime</name>
        <param>
          <type>const ScalarType</type>
          <declname>meanAnomalyChange</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>semiMajorAxis</declname>
        </param>
        <briefdescription>
<para>Convert mean anomaly change to elapsed time. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts mean anomaly change to elapsed time for elliptical and hyperbolic orbits ( eccentricity &lt; 1.0 &amp;&amp; eccentricity &gt; 1.0 ). This function is essentially a wrapper for convertEllipticalMeanAnomalyChangeToElapsedTime() and convertHyperbolicMeanAnomalyChangeToElapsedTime(). It should be used in cases where the eccentricity of the orbit is not known a priori. The equations used can be found in (Wertz, 2001). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meanAnomalyChange</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean anomaly change. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis. [m] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Elapsed time. [s] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="989" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="989" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a5c01ff79c1f78ca3db9e83943d484dcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertEllipticalMeanMotionToSemiMajorAxis</definition>
        <argsstring>(const ScalarType ellipticalMeanMotion, const ScalarType centralBodyGravitationalParameter)</argsstring>
        <name>convertEllipticalMeanMotionToSemiMajorAxis</name>
        <param>
          <type>const ScalarType</type>
          <declname>ellipticalMeanMotion</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert (elliptical) mean motion to semi-major axis. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts mean motion to semi-major axis for elliptical orbits. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ellipticalMeanMotion</parametername>
</parameternamelist>
<parameterdescription>
<para>(Elliptical) Mean motion. [rad/s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>semiMajorAxis Semi-major axis. [m] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="1022" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="1022" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1aa452df9e9048a1b505c5dd9f03b23268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertSemiMajorAxisToEllipticalMeanMotion</definition>
        <argsstring>(const ScalarType semiMajorAxis, const ScalarType centralBodyGravitationalParameter)</argsstring>
        <name>convertSemiMajorAxisToEllipticalMeanMotion</name>
        <param>
          <type>const ScalarType</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert semi-major axis to elliptical mean motion. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts semi-major axis to elliptical mean motion. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis. [m] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ellipticalMeanMotion (Elliptical) Mean motion. [rad/s] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="1038" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="1038" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a8a178b295122b5e4dadc3b4791003ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertMeanAnomalyToTrueAnomaly</definition>
        <argsstring>(const ScalarType eccentricity, const ScalarType meanAnomaly, const bool useDefaultInitialGuess=true, const ScalarType userSpecifiedInitialGuess=TUDAT_NAN, std::shared_ptr&lt; root_finders::RootFinder&lt; ScalarType &gt; &gt; rootFinder=std::shared_ptr&lt; root_finders::RootFinder&lt; ScalarType &gt; &gt;())</argsstring>
        <name>convertMeanAnomalyToTrueAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>meanAnomaly</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useDefaultInitialGuess</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>userSpecifiedInitialGuess</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" kindref="compound">root_finders::RootFinder</ref>&lt; ScalarType &gt; &gt;</type>
          <declname>rootFinder</declname>
          <defval>std::shared_ptr&lt; <ref refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" kindref="compound">root_finders::RootFinder</ref>&lt; ScalarType &gt; &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="1057" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="1057" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="dc/dee/orbitalElementConversions_8h_1a22077b0d7b177afe5547ae3ae58437df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType tudat::orbital_element_conversions::convertTrueAnomalyToMeanAnomaly</definition>
        <argsstring>(const ScalarType eccentricity, const ScalarType trueAnomaly)</argsstring>
        <name>convertTrueAnomalyToMeanAnomaly</name>
        <param>
          <type>const ScalarType</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>trueAnomaly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" line="1093" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/orbitalElementConversions.h" bodystart="1093" bodyend="1125"/>
      </memberdef>
      <memberdef kind="function" id="d5/d72/sphericalStateConversions_8h_1a3395b7859be48859e3419358f4f61671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::orbital_element_conversions::calculateHeadingAngle</definition>
        <argsstring>(const Eigen::Vector3d &amp;velocityInVerticalFrame)</argsstring>
        <name>calculateHeadingAngle</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>velocityInVerticalFrame</declname>
        </param>
        <briefdescription>
<para>Calculate current heading angle. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate heading angle from velocity in vertical (LVLH) frame. NOTE: This function can be used for both ground- and airspeed-based variables, with both the input and output always w.r.t. the same velocity vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocityInVerticalFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Current Cartesian velocity in vertical frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current heading angle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/sphericalStateConversions.cpp" line="25" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/sphericalStateConversions.cpp" bodystart="25" bodyend="28" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/sphericalStateConversions.h" declline="34" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d5/d72/sphericalStateConversions_8h_1a526f1f0dc4f96f78e595c1a43d5a528e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::orbital_element_conversions::calculateFlightPathAngle</definition>
        <argsstring>(const Eigen::Vector3d &amp;velocityInVerticalFrame)</argsstring>
        <name>calculateFlightPathAngle</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>velocityInVerticalFrame</declname>
        </param>
        <briefdescription>
<para>Calculate current flight path angle. Angle is defined positive upwards. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculatre current flight path angle.</para>
<para>Calculate flight path angle from velocity in vertical (LVLH) frame. Angle is defined positive upwards. NOTE: This function can be used for both ground- and airspeed-based variables, with both the input and output always w.r.t. the same velocity vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocityInVerticalFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Current Cartesian velocity in vertical frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current flight path angle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/sphericalStateConversions.cpp" line="31" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/sphericalStateConversions.cpp" bodystart="31" bodyend="34" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/sphericalStateConversions.h" declline="46" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d5/d72/sphericalStateConversions_8h_1aec305ae97673c8c92ffac9798306176e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertCartesianToSphericalOrbitalState</definition>
        <argsstring>(const Eigen::Vector6d &amp;bodyFixedCartesianState)</argsstring>
        <name>convertCartesianToSphericalOrbitalState</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>bodyFixedCartesianState</declname>
        </param>
        <briefdescription>
<para>Function to convert a Cartesian to a spherical orbital state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert a Cartesian to a spherical orbital state. We define the spherical orbital position by the radius, latitude and longitude. The spherical orbital velocity is defined by the speed, flight path angle (positive upwards) and the heading angle. Note that this is distinct from a &apos;mathematical&apos; spherical state, where the velocity is denoted by the radius rate, latitude rate and longitude rate. The spherical orbital state is often used to define entry (initial) conditions. The order of the entries in the return vector are defined by the SphericalOrbitalStateElementIndices enum. NOTE: This function can be used for both ground- and airspeed-based variables, with both the input and output always w.r.t. the same velocity vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyFixedCartesianState</parametername>
</parameternamelist>
<parameterdescription>
<para>Vehicle state in a frame fixed to the body w.r.t. which the state is to be computed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Spherical orbital state representation of bodyFixedCartesianState </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/sphericalStateConversions.cpp" line="37" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/sphericalStateConversions.cpp" bodystart="37" bodyend="62" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/sphericalStateConversions.h" declline="62" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d5/d72/sphericalStateConversions_8h_1a43979094190769d91f8ab0aa40d855a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertSphericalOrbitalToCartesianState</definition>
        <argsstring>(const Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &amp;sphericalOrbitalState)</argsstring>
        <name>convertSphericalOrbitalToCartesianState</name>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &amp;</type>
          <declname>sphericalOrbitalState</declname>
        </param>
        <briefdescription>
<para>Function to convert a spherical orbital to a Cartesian state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert a spherical orbital to a Cartesian state. We define the spherical orbital position by the radius, latitude and longitude. The spherical orbital velocity is defined by the speed, flight path angle (positive upwards) and the heading angle. Note that this is distinct from a &apos;mathematical&apos; spherical state, where the velocity is denoted by the radius rate, latitude rate and longitude rate. The spherical orbital state is often used to define entry (initial) conditions. The order of the entries in the return vector are defined by the SphericalOrbitalStateElementIndices enum. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sphericalOrbitalState</parametername>
</parameternamelist>
<parameterdescription>
<para>Vehicle spherical orbital state in a frame fixed to the body w.r.t. which the state is to be computed. NOTE: This function can be used for both ground- and airspeed-based variables, with both the input and output always w.r.t. the same velocity vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cartesian state representation of sphericalOrbitalState (in same frame). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/sphericalStateConversions.h" line="80" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/sphericalStateConversions.h" bodystart="80" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="d5/d72/sphericalStateConversions_8h_1a25aa7656ff5e1e91c83d0501c85758c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; tudat::orbital_element_conversions::convertSphericalOrbitalToCartesianState</definition>
        <argsstring>(const StateScalarType radialDistance, const StateScalarType latitude, const StateScalarType longitude, const StateScalarType speed, const StateScalarType flightPathAngle, const StateScalarType headingAngle)</argsstring>
        <name>convertSphericalOrbitalToCartesianState</name>
        <param>
          <type>const StateScalarType</type>
          <declname>radialDistance</declname>
        </param>
        <param>
          <type>const StateScalarType</type>
          <declname>latitude</declname>
        </param>
        <param>
          <type>const StateScalarType</type>
          <declname>longitude</declname>
        </param>
        <param>
          <type>const StateScalarType</type>
          <declname>speed</declname>
        </param>
        <param>
          <type>const StateScalarType</type>
          <declname>flightPathAngle</declname>
        </param>
        <param>
          <type>const StateScalarType</type>
          <declname>headingAngle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/sphericalStateConversions.h" line="122" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/sphericalStateConversions.h" bodystart="122" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="d7/dfe/unifiedStateModelExponentialMapElementConversions_8h_1a2429dd828e2ff0bd9b31ad1a9b5b0e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 7, 1 &gt;</type>
        <definition>Eigen::Vector7d tudat::orbital_element_conversions::convertKeplerianToUnifiedStateModelExponentialMapElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;keplerianElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertKeplerianToUnifiedStateModelExponentialMapElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;</type>
          <declname>keplerianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert Keplerian to unified state model elements with exponential map. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert Keplerian elements to unified state model elements with exponential map.</para>
<para>Converts Keplerian to unified state model elements with exponential map. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keplerianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing Keplerian elements. Order of elements is important! keplerianElements( 0 ) = semi-major axis, [m] keplerianElements( 1 ) = eccentricity, [-] keplerianElements( 2 ) = inclination (in range [0,PI]), [rad] keplerianElements( 3 ) = argument of periapsis, [rad] keplerianElements( 4 ) = longitude of ascending node, [rad] keplerianElements( 5 ) = true anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedUnifiedStateModelElements Converted state in unified state model elements with exponential map. The order of elements is fixed convertedUnifiedStateModelElements( 0 ) = C hodograph element, [m/s] convertedUnifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 3 ) = e1 exponential map element, [-] convertedUnifiedStateModelElements( 4 ) = e2 exponential map element, [-] convertedUnifiedStateModelElements( 5 ) = e3 exponential map element, [-] convertedUnifiedStateModelElements( 6 ) = shadow exponential map flag. [-] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.cpp" line="34" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.cpp" bodystart="34" bodyend="244" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.h" declline="48" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d7/dfe/unifiedStateModelExponentialMapElementConversions_8h_1ac17b66b7ad5332b3398ccff26ffd2636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertUnifiedStateModelExponentialMapToKeplerianElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;unifiedStateModelElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertUnifiedStateModelExponentialMapToKeplerianElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;</type>
          <declname>unifiedStateModelElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert unified state model elements with exponential map to Keplerian elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts unified state model elements with exponential map to Keplerian elements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing unified state model elements with exponential map. Order of elements is important! unifiedStateModelElements( 0 ) = C hodograph element, [m/s] unifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 3 ) = e1 exponential map element, [-] unifiedStateModelElements( 4 ) = e2 exponential map element, [-] unifiedStateModelElements( 5 ) = e3 exponential map element, [-] unifiedStateModelElements( 6 ) = shadow exponential map flag. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedKeplerianElements Converted state in Keplerian elements. The order of elements is fixed! convertedKeplerianElements( 0 ) = semi-major axis, [m] convertedKeplerianElements( 1 ) = eccentricity, [-] convertedKeplerianElements( 2 ) = inclination (in range [0,PI]), [rad] convertedKeplerianElements( 3 ) = argument of periapsis, [rad] convertedKeplerianElements( 4 ) = longitude of ascending node, [rad] convertedKeplerianElements( 5 ) = true anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.cpp" line="247" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.cpp" bodystart="247" bodyend="444" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.h" declline="73" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d7/dfe/unifiedStateModelExponentialMapElementConversions_8h_1ae862bc70b9e90cff8d180be625b473f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 7, 1 &gt;</type>
        <definition>Eigen::Vector7d tudat::orbital_element_conversions::convertCartesianToUnifiedStateModelExponentialMapElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;cartesianElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertCartesianToUnifiedStateModelExponentialMapElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;</type>
          <declname>cartesianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert Cartesian elements to unified state model elements with exponential map. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts Cartesian to unified state model elements with exponential map. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Converted state in Cartesian elements. The order of elements is fixed! cartesianElements( 0 ) = x-position coordinate, [m] cartesianElements( 1 ) = y-position coordinate, [m] cartesianElements( 2 ) = z-position coordinate, [m] cartesianElements( 3 ) = x-velocity coordinate, [m/s] cartesianElements( 4 ) = y-velocity coordinate, [m/s] cartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedUnifiedStateModelElements Converted state in unified state model elements with exponential map. The order of elements is fixed convertedUnifiedStateModelElements( 0 ) = C hodograph element, [m/s] convertedUnifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 3 ) = e1 exponential map element, [-] convertedUnifiedStateModelElements( 4 ) = e2 exponential map element, [-] convertedUnifiedStateModelElements( 5 ) = e3 exponential map element, [-] convertedUnifiedStateModelElements( 6 ) = shadow exponential map flag. [-] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.cpp" line="447" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.cpp" bodystart="447" bodyend="469" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.h" declline="98" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d7/dfe/unifiedStateModelExponentialMapElementConversions_8h_1a6c7e04fc785edbe4c8b33ba1d4c37339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertUnifiedStateModelExponentialMapToCartesianElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;unifiedStateModelElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertUnifiedStateModelExponentialMapToCartesianElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;</type>
          <declname>unifiedStateModelElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert unified state model elements with exponential map to Cartesian elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts unified state model elements with exponential map to Cartesian elements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing unified state model elements with exponential map. Order of elements is important! unifiedStateModelElements( 0 ) = C hodograph element, [m/s] unifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 3 ) = e1 exponential map element, [-] unifiedStateModelElements( 4 ) = e2 exponential map element, [-] unifiedStateModelElements( 5 ) = e3 exponential map element, [-] unifiedStateModelElements( 6 ) = shadow exponential map flag. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedCartesianElements Converted state in Cartesian elements. The order of elements is fixed! convertedCartesianElements( 0 ) = x-position coordinate, [m] convertedCartesianElements( 1 ) = y-position coordinate, [m] convertedCartesianElements( 2 ) = z-position coordinate, [m] convertedCartesianElements( 3 ) = x-velocity coordinate, [m/s] convertedCartesianElements( 4 ) = y-velocity coordinate, [m/s] convertedCartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.cpp" line="472" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.cpp" bodystart="472" bodyend="488" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelExponentialMapElementConversions.h" declline="123" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d6/db9/unifiedStateModelModifiedRodriguesParameterElementConversions_8h_1ac86e2468ef59539e48ac09aedf3e38d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 7, 1 &gt;</type>
        <definition>Eigen::Vector7d tudat::orbital_element_conversions::convertKeplerianToUnifiedStateModelModifiedRodriguesParameterElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;keplerianElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertKeplerianToUnifiedStateModelModifiedRodriguesParameterElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;</type>
          <declname>keplerianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert Keplerian to unified state model elements with modified rodrigues parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert Keplerian elements to unified state model elements with modified Rodrigues parameters.</para>
<para>Converts Keplerian to unified state model elements with modified rodrigues parameters. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keplerianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing Keplerian elements. Order of elements is important! keplerianElements( 0 ) = semi-major axis, [m] keplerianElements( 1 ) = eccentricity, [-] keplerianElements( 2 ) = inclination (in range [0,PI]), [rad] keplerianElements( 3 ) = argument of periapsis, [rad] keplerianElements( 4 ) = longitude of ascending node, [rad] keplerianElements( 5 ) = true anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedUnifiedStateModelElements Converted state in unified state model elements with modified rodrigues parameters. The order of elements is fixed convertedUnifiedStateModelElements( 0 ) = C hodograph element, [m/s] convertedUnifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 3 ) = sigma1 modified rodrigues parameters element, [-] convertedUnifiedStateModelElements( 4 ) = sigma2 modified rodrigues parameters element, [-] convertedUnifiedStateModelElements( 5 ) = sigma3 modified rodrigues parameters element, [-] convertedUnifiedStateModelElements( 6 ) = shadow modified rodrigues parameters flag. [-] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.cpp" line="34" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.cpp" bodystart="34" bodyend="227" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.h" declline="48" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d6/db9/unifiedStateModelModifiedRodriguesParameterElementConversions_8h_1aff76be5fba2bf92e8b57cbf2e00610ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertUnifiedStateModelModifiedRodriguesParametersToKeplerianElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;unifiedStateModelElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertUnifiedStateModelModifiedRodriguesParametersToKeplerianElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;</type>
          <declname>unifiedStateModelElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert unified state model elements with modified rodrigues parameters to Keplerian elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert unified state model elements with modified Rodrigues parameters to Keplerian elements.</para>
<para>Converts unified state model elements with modified rodrigues parameters to Keplerian elements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing unified state model elements with modified rodrigues parameters. Order of elements is important! unifiedStateModelElements( 0 ) = C hodograph element, [m/s] unifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 3 ) = sigma1 modified rodrigues parameters element, [-] unifiedStateModelElements( 4 ) = sigma2 modified rodrigues parameters element, [-] unifiedStateModelElements( 5 ) = sigma3 modified rodrigues parameters element. [-] unifiedStateModelElements( 6 ) = shadow modified rodrigues parameters flag. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedKeplerianElements Converted state in Keplerian elements. The order of elements is fixed! convertedKeplerianElements( 0 ) = semi-major axis, [m] convertedKeplerianElements( 1 ) = eccentricity, [-] convertedKeplerianElements( 2 ) = inclination (in range [0,PI]), [rad] convertedKeplerianElements( 3 ) = argument of periapsis, [rad] convertedKeplerianElements( 4 ) = longitude of ascending node, [rad] convertedKeplerianElements( 5 ) = true anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.cpp" line="230" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.cpp" bodystart="230" bodyend="439" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.h" declline="73" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d6/db9/unifiedStateModelModifiedRodriguesParameterElementConversions_8h_1a87f2434da078b4cc4ccc3e4cff7b8048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 7, 1 &gt;</type>
        <definition>Eigen::Vector7d tudat::orbital_element_conversions::convertCartesianToUnifiedStateModelModifiedRodriguesParameterElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;cartesianElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertCartesianToUnifiedStateModelModifiedRodriguesParameterElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;</type>
          <declname>cartesianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert Cartesian elements to unified state model elements with modified rodrigues parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts Cartesian to unified state model elements with modified rodrigues parameters. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Converted state in Cartesian elements. The order of elements is fixed! cartesianElements( 0 ) = x-position coordinate, [m] cartesianElements( 1 ) = y-position coordinate, [m] cartesianElements( 2 ) = z-position coordinate, [m] cartesianElements( 3 ) = x-velocity coordinate, [m/s] cartesianElements( 4 ) = y-velocity coordinate, [m/s] cartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedUnifiedStateModelElements Converted state in unified state model elements with modified rodrigues parameters. The order of elements is fixed convertedUnifiedStateModelElements( 0 ) = C hodograph element, [m/s] convertedUnifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 3 ) = sigma1 modified rodrigues parameters element, [-] convertedUnifiedStateModelElements( 4 ) = sigma2 modified rodrigues parameters element, [-] convertedUnifiedStateModelElements( 5 ) = sigma3 modified rodrigues parameters element, [-] convertedUnifiedStateModelElements( 6 ) = shadow modified rodrigues parameters flag. [-] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.cpp" line="442" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.cpp" bodystart="442" bodyend="464" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.h" declline="99" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d6/db9/unifiedStateModelModifiedRodriguesParameterElementConversions_8h_1a2d399529f1457f8781d203d143f129ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertUnifiedStateModelModifiedRodriguesParametersToCartesianElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;unifiedStateModelElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertUnifiedStateModelModifiedRodriguesParametersToCartesianElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;</type>
          <declname>unifiedStateModelElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert unified state model elements with modified rodrigues parameters to Cartesian elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert unified state model elements with modified Rodrigues parameters to Cartesian elements.</para>
<para>Converts unified state model elements with modified rodrigues parameters to Cartesian elements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing unified state model elements with modified rodrigues parameters. Order of elements is important! unifiedStateModelElements( 0 ) = C hodograph element, [m/s] unifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 3 ) = sigma1 modified rodrigues parameters element, [-] unifiedStateModelElements( 4 ) = sigma2 modified rodrigues parameters element, [-] unifiedStateModelElements( 5 ) = sigma3 modified rodrigues parameters element. [-] unifiedStateModelElements( 6 ) = shadow modified rodrigues parameters flag. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedCartesianElements Converted state in Cartesian elements. The order of elements is fixed! convertedCartesianElements( 0 ) = x-position coordinate, [m] convertedCartesianElements( 1 ) = y-position coordinate, [m] convertedCartesianElements( 2 ) = z-position coordinate, [m] convertedCartesianElements( 3 ) = x-velocity coordinate, [m/s] convertedCartesianElements( 4 ) = y-velocity coordinate, [m/s] convertedCartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.cpp" line="467" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.cpp" bodystart="467" bodyend="484" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelModifiedRodriguesParameterElementConversions.h" declline="124" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d8/d7c/unifiedStateModelQuaternionElementConversions_8h_1ab34b7b3756a6176535d9335851f86ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 7, 1 &gt;</type>
        <definition>Eigen::Vector7d tudat::orbital_element_conversions::convertKeplerianToUnifiedStateModelQuaternionsElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;keplerianElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertKeplerianToUnifiedStateModelQuaternionsElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;</type>
          <declname>keplerianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert Keplerian to unified state model elements with quaternions. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert Keplerian elements to unified state model elements with quaternions.</para>
<para>Converts Keplerian to unified state model elements with quaternions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keplerianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing Keplerian elements. Order of elements is important! keplerianElements( 0 ) = semi-major axis, [m] keplerianElements( 1 ) = eccentricity, [-] keplerianElements( 2 ) = inclination (in range [0,PI]), [rad] keplerianElements( 3 ) = argument of periapsis, [rad] keplerianElements( 4 ) = longitude of ascending node, [rad] keplerianElements( 5 ) = true anomaly. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedUnifiedStateModelElements Converted state in unified state model elements with quaternions. The order of elements is fixed convertedUnifiedStateModelElements( 0 ) = C hodograph element, [m/s] convertedUnifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 3 ) = epsilon1 quaternion element, [-] convertedUnifiedStateModelElements( 4 ) = epsilon2 quaternion element, [-] convertedUnifiedStateModelElements( 5 ) = epsilon3 quaternion element, [-] convertedUnifiedStateModelElements( 6 ) = eta quaternion element. [-] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelQuaternionElementConversions.cpp" line="31" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelQuaternionElementConversions.cpp" bodystart="31" bodyend="216" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelQuaternionElementConversions.h" declline="48" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d8/d7c/unifiedStateModelQuaternionElementConversions_8h_1a449a4baf4711fe07698c0ee845dab629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertUnifiedStateModelQuaternionsToKeplerianElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;unifiedStateModelElements, const double centralBodyGravitationalParameter, const bool forceQuaternionNormalization=false)</argsstring>
        <name>convertUnifiedStateModelQuaternionsToKeplerianElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;</type>
          <declname>unifiedStateModelElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>forceQuaternionNormalization</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert unified state model elements with quaternions to Keplerian elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts unified state model elements with quaternions to Keplerian elements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing unified state model elements with quaternions. Order of elements is important! unifiedStateModelElements( 0 ) = C hodograph element, [m/s] unifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 3 ) = epsilon1 quaternion element, [-] unifiedStateModelElements( 4 ) = epsilon2 quaternion element, [-] unifiedStateModelElements( 5 ) = epsilon3 quaternion element, [-] unifiedStateModelElements( 6 ) = eta quaternion element. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceQuaternionNormalization</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the normalization of the quaternion vector has to be forced. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedKeplerianElements Converted state in Keplerian elements. The order of elements is fixed! convertedKeplerianElements( 0 ) = semi-major axis, [m] convertedKeplerianElements( 1 ) = eccentricity, [-] convertedKeplerianElements( 2 ) = inclination (in range [0,PI]), [rad] convertedKeplerianElements( 3 ) = argument of periapsis, [rad] convertedKeplerianElements( 4 ) = longitude of ascending node, [rad] convertedKeplerianElements( 5 ) = true anomaly. [rad] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelQuaternionElementConversions.cpp" line="219" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelQuaternionElementConversions.cpp" bodystart="219" bodyend="432" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelQuaternionElementConversions.h" declline="75" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d8/d7c/unifiedStateModelQuaternionElementConversions_8h_1a5c0baf05894d10c532d25308fed80c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 7, 1 &gt;</type>
        <definition>Eigen::Vector7d tudat::orbital_element_conversions::convertCartesianToUnifiedStateModelQuaternionsElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;cartesianElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertCartesianToUnifiedStateModelQuaternionsElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 6, 1 &gt; &amp;</type>
          <declname>cartesianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert Cartesian elements to unified state model elements with quaternions. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts Cartesian to unified state model elements with quaternions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Converted state in Cartesian elements. The order of elements is fixed! cartesianElements( 0 ) = x-position coordinate, [m] cartesianElements( 1 ) = y-position coordinate, [m] cartesianElements( 2 ) = z-position coordinate, [m] cartesianElements( 3 ) = x-velocity coordinate, [m/s] cartesianElements( 4 ) = y-velocity coordinate, [m/s] cartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedUnifiedStateModelElements Converted state in unified state model elements with quaternions. The order of elements is fixed convertedUnifiedStateModelElements( 0 ) = C hodograph element, [m/s] convertedUnifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] convertedUnifiedStateModelElements( 3 ) = epsilon1 quaternion element, [-] convertedUnifiedStateModelElements( 4 ) = epsilon2 quaternion element, [-] convertedUnifiedStateModelElements( 5 ) = epsilon3 quaternion element, [-] convertedUnifiedStateModelElements( 6 ) = eta quaternion element. [-] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelQuaternionElementConversions.cpp" line="435" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelQuaternionElementConversions.cpp" bodystart="435" bodyend="609" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelQuaternionElementConversions.h" declline="101" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d8/d7c/unifiedStateModelQuaternionElementConversions_8h_1a5c7293ff1c118461a27c884ff905b926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertUnifiedStateModelQuaternionsToCartesianElements</definition>
        <argsstring>(const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;unifiedStateModelElements, const double centralBodyGravitationalParameter, const bool forceQuaternionNormalization=false)</argsstring>
        <name>convertUnifiedStateModelQuaternionsToCartesianElements</name>
        <param>
          <type>const Eigen::Matrix&lt; double, 7, 1 &gt; &amp;</type>
          <declname>unifiedStateModelElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>forceQuaternionNormalization</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert unified state model elements with quaternions to Cartesian elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts unified state model elements with quaternions to Cartesian elements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing unified state model elements with quaternions. Order of elements is important! unifiedStateModelElements( 0 ) = C hodograph element, [m/s] unifiedStateModelElements( 1 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 2 ) = Rf1 hodograph element, [m/s] unifiedStateModelElements( 3 ) = epsilon1 quaternion element, [-] unifiedStateModelElements( 4 ) = epsilon2 quaternion element, [-] unifiedStateModelElements( 5 ) = epsilon3 quaternion element, [-] unifiedStateModelElements( 6 ) = eta quaternion element. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. [m^3/s^2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceQuaternionNormalization</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the normalization of the quaternion vector has to be forced. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>convertedCartesianElements Converted state in Cartesian elements. The order of elements is fixed! convertedCartesianElements( 0 ) = x-position coordinate, [m] convertedCartesianElements( 1 ) = y-position coordinate, [m] convertedCartesianElements( 2 ) = z-position coordinate, [m] convertedCartesianElements( 3 ) = x-velocity coordinate, [m/s] convertedCartesianElements( 4 ) = y-velocity coordinate, [m/s] convertedCartesianElements( 5 ) = z-velocity coordinate. [m/s] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelQuaternionElementConversions.cpp" line="612" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/unifiedStateModelQuaternionElementConversions.cpp" bodystart="612" bodyend="705" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/unifiedStateModelQuaternionElementConversions.h" declline="128" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d8/db4/modifiedEquinoctialElementConversions_8cpp_1ad0c318b2d4603dac21f8b16a73a71ebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertKeplerianToModifiedEquinoctialElements</definition>
        <argsstring>(const Eigen::Vector6d &amp;keplerianElements)</argsstring>
        <name>convertKeplerianToModifiedEquinoctialElements</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>keplerianElements</declname>
        </param>
        <briefdescription>
<para>Convert Keplerian to modified equinoctial orbital elements using implicit MEE equation set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" line="39" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" bodystart="39" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="d8/db4/modifiedEquinoctialElementConversions_8cpp_1abeb29820035d2cf8d7f9a39500a3bfb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertKeplerianToModifiedEquinoctialElements</definition>
        <argsstring>(const Eigen::Vector6d &amp;keplerianElements, const bool avoidSingularityAtPiInclination)</argsstring>
        <name>convertKeplerianToModifiedEquinoctialElements</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>keplerianElements</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>avoidSingularityAtPiInclination</declname>
        </param>
        <briefdescription>
<para>Convert Keplerian to modified equinoctial orbital elements using MEE explicit equation set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" line="53" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" bodystart="53" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="d8/db4/modifiedEquinoctialElementConversions_8cpp_1a29ea1f87ea43ef2c01a14e9ccd496d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertModifiedEquinoctialToKeplerianElements</definition>
        <argsstring>(const Eigen::Vector6d &amp;modifiedEquinoctialElements, const bool avoidSingularityAtPiInclination)</argsstring>
        <name>convertModifiedEquinoctialToKeplerianElements</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>modifiedEquinoctialElements</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>avoidSingularityAtPiInclination</declname>
        </param>
        <briefdescription>
<para>Convert modified equinoctial to Keplerian orbital elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" line="151" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" bodystart="151" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="d8/db4/modifiedEquinoctialElementConversions_8cpp_1ae26d26cd55b6b8c8393d7618f5252039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertCartesianToModifiedEquinoctialElements</definition>
        <argsstring>(const Eigen::Vector6d &amp;cartesianElements, const double centralBodyGravitationalParameter)</argsstring>
        <name>convertCartesianToModifiedEquinoctialElements</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>cartesianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Convert Cartesian to modified equinoctial orbital elements using implicit MEE equation set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" line="251" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" bodystart="251" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="d8/db4/modifiedEquinoctialElementConversions_8cpp_1a0e5b7edd560c858996fdaeeeddb9259d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertCartesianToModifiedEquinoctialElements</definition>
        <argsstring>(const Eigen::Vector6d &amp;cartesianElements, const double centralBodyGravitationalParameter, const bool avoidSingularityAtPiInclination)</argsstring>
        <name>convertCartesianToModifiedEquinoctialElements</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>cartesianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>avoidSingularityAtPiInclination</declname>
        </param>
        <briefdescription>
<para>Convert Cartesian to modified equinoctial orbital elements using explicit MEE equation set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" line="271" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" bodystart="271" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="d8/db4/modifiedEquinoctialElementConversions_8cpp_1acd8b076ba2fdb4d32ad90f8944a89153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::orbital_element_conversions::convertModifiedEquinoctialToCartesianElements</definition>
        <argsstring>(const Eigen::Vector6d &amp;modifiedEquinoctialElements, const double centralBodyGravitationalParameter, const bool avoidSingularityAtPiInclination)</argsstring>
        <name>convertModifiedEquinoctialToCartesianElements</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>modifiedEquinoctialElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>avoidSingularityAtPiInclination</declname>
        </param>
        <briefdescription>
<para>Convert Modified Equinoctial Elements to Cartesian Elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" line="284" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/modifiedEquinoctialElementConversions.cpp" bodystart="284" bodyend="362"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/attitudeElementConversions.h" line="25" column="1"/>
  </compounddef>
</doxygen>
