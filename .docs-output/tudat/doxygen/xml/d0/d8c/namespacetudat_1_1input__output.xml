<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d0/d8c/namespacetudat_1_1input__output" kind="namespace" language="C++">
    <compoundname>tudat::input_output</compoundname>
    <innerclass refid="d5/dc5/classtudat_1_1input__output_1_1Extractor" prot="public">tudat::input_output::Extractor</innerclass>
    <innerclass refid="dc/dde/classtudat_1_1input__output_1_1FieldTransform" prot="public">tudat::input_output::FieldTransform</innerclass>
    <innerclass refid="d6/ded/classtudat_1_1input__output_1_1FieldValue" prot="public">tudat::input_output::FieldValue</innerclass>
    <innerclass refid="d9/d86/classtudat_1_1input__output_1_1FixedWidthParser" prot="public">tudat::input_output::FixedWidthParser</innerclass>
    <innerclass refid="d6/d03/classtudat_1_1input__output_1_1LinearFieldTransform" prot="public">tudat::input_output::LinearFieldTransform</innerclass>
    <innerclass refid="db/da3/classtudat_1_1input__output_1_1MissileDatcomData" prot="public">tudat::input_output::MissileDatcomData</innerclass>
    <innerclass refid="d3/d22/classtudat_1_1input__output_1_1MissileDatcomReader" prot="public">tudat::input_output::MissileDatcomReader</innerclass>
    <innerclass refid="d4/d72/classtudat_1_1input__output_1_1MultiArrayFileReader" prot="public">tudat::input_output::MultiArrayFileReader</innerclass>
    <innerclass refid="d6/d73/classtudat_1_1input__output_1_1MultiArrayFileReader_3_011_01_4" prot="public">tudat::input_output::MultiArrayFileReader&lt; 1 &gt;</innerclass>
    <innerclass refid="d7/d76/classtudat_1_1input__output_1_1MultiArrayFileReader_3_012_01_4" prot="public">tudat::input_output::MultiArrayFileReader&lt; 2 &gt;</innerclass>
    <innerclass refid="d2/da8/classtudat_1_1input__output_1_1MultiArrayFileReader_3_013_01_4" prot="public">tudat::input_output::MultiArrayFileReader&lt; 3 &gt;</innerclass>
    <innerclass refid="dd/df5/classtudat_1_1input__output_1_1MultiArrayFileReader_3_014_01_4" prot="public">tudat::input_output::MultiArrayFileReader&lt; 4 &gt;</innerclass>
    <innerclass refid="d5/db6/classtudat_1_1input__output_1_1MultiArrayFileWriter" prot="public">tudat::input_output::MultiArrayFileWriter</innerclass>
    <innerclass refid="df/d22/classtudat_1_1input__output_1_1MultiArrayFileWriter_3_011_00_01NumberOfCoefficients_01_4" prot="public">tudat::input_output::MultiArrayFileWriter&lt; 1, NumberOfCoefficients &gt;</innerclass>
    <innerclass refid="de/df9/classtudat_1_1input__output_1_1MultiArrayFileWriter_3_012_00_01NumberOfCoefficients_01_4" prot="public">tudat::input_output::MultiArrayFileWriter&lt; 2, NumberOfCoefficients &gt;</innerclass>
    <innerclass refid="d0/de6/classtudat_1_1input__output_1_1MultiArrayFileWriter_3_013_00_01NumberOfCoefficients_01_4" prot="public">tudat::input_output::MultiArrayFileWriter&lt; 3, NumberOfCoefficients &gt;</innerclass>
    <innerclass refid="d0/d8a/classtudat_1_1input__output_1_1Parser" prot="public">tudat::input_output::Parser</innerclass>
    <innerclass refid="db/dc9/classtudat_1_1input__output_1_1SeparatedParser" prot="public">tudat::input_output::SeparatedParser</innerclass>
    <innerclass refid="df/d12/classtudat_1_1input__output_1_1TextParser" prot="public">tudat::input_output::TextParser</innerclass>
    <innerclass refid="d2/dea/structtudat_1_1input__output_1_1TwoLineElementData" prot="public">tudat::input_output::TwoLineElementData</innerclass>
    <innerclass refid="db/d90/classtudat_1_1input__output_1_1TwoLineElementsFileReader" prot="public">tudat::input_output::TwoLineElementsFileReader</innerclass>
    <innerclass refid="d6/d76/classtudat_1_1input__output_1_1TwoLineElementsTextFileReader" prot="public">tudat::input_output::TwoLineElementsTextFileReader</innerclass>
    <innernamespace refid="df/d20/namespacetudat_1_1input__output_1_1dictionary">tudat::input_output::dictionary</innernamespace>
    <innernamespace refid="d3/dc2/namespacetudat_1_1input__output_1_1field__types">tudat::input_output::field_types</innernamespace>
    <innernamespace refid="d4/dff/namespacetudat_1_1input__output_1_1parsed__data__vector__utilities">tudat::input_output::parsed_data_vector_utilities</innernamespace>
    <innernamespace refid="d9/de5/namespacetudat_1_1input__output_1_1solar__activity">tudat::input_output::solar_activity</innernamespace>
    <innernamespace refid="d0/dd4/namespacetudat_1_1input__output_1_1stream__filters">tudat::input_output::stream_filters</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="df/da7/basicInputOutput_8h_1a1093594914d0f1359da5656311dc28e8" prot="public" static="no">
        <type>std::map&lt; double, double &gt;</type>
        <definition>typedef std::map&lt;double, double&gt; tudat::input_output::DoubleKeyTypeDoubleValueTypeMap</definition>
        <argsstring></argsstring>
        <name>DoubleKeyTypeDoubleValueTypeMap</name>
        <briefdescription>
<para>Typedef for double-KeyType, double-ValueType map. </para>
        </briefdescription>
        <detaileddescription>
<para>Typedef for double-KeyType, double-ValueType map. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="412" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/da7/basicInputOutput_8h_1a0be2312befaebc5fd72799c85a3acb58" prot="public" static="no">
        <type>std::map&lt; double, Eigen::VectorXd &gt;</type>
        <definition>typedef std::map&lt;double, Eigen::VectorXd&gt; tudat::input_output::DoubleKeyTypeVectorXdValueTypeMap</definition>
        <argsstring></argsstring>
        <name>DoubleKeyTypeVectorXdValueTypeMap</name>
        <briefdescription>
<para>Typedef for double-KeyType, VectorXd-ValueType map. </para>
        </briefdescription>
        <detaileddescription>
<para>Typedef for double-KeyType, VectorXd-ValueType map. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="418" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/da7/basicInputOutput_8h_1a2fc77b9d514e140b8d0cf297d96774bf" prot="public" static="no">
        <type>std::map&lt; double, Eigen::Vector3d &gt;</type>
        <definition>typedef std::map&lt;double, Eigen::Vector3d&gt; tudat::input_output::DoubleKeyTypeVector3dValueTypeMap</definition>
        <argsstring></argsstring>
        <name>DoubleKeyTypeVector3dValueTypeMap</name>
        <briefdescription>
<para>Typedef for double-KeyType, Vector3d-ValueType map. </para>
        </briefdescription>
        <detaileddescription>
<para>Typedef for double-KeyType, Vector3d-ValueType map. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="424" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/da7/basicInputOutput_8h_1ac67655c2c08d9e86267f9e68390d5796" prot="public" static="no">
        <type>std::map&lt; double, Eigen::MatrixXd &gt;</type>
        <definition>typedef std::map&lt;double, Eigen::MatrixXd&gt; tudat::input_output::DoubleKeyTypeMatrixXdValueTypeMap</definition>
        <argsstring></argsstring>
        <name>DoubleKeyTypeMatrixXdValueTypeMap</name>
        <briefdescription>
<para>Typedef for double-KeyType, MatrixXd-ValueType map. </para>
        </briefdescription>
        <detaileddescription>
<para>Typedef for double-KeyType, MatrixXd-ValueType map. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="430" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/da7/basicInputOutput_8h_1a7a769b20069bd0042b9fe940b6fb26d7" prot="public" static="no">
        <type>std::map&lt; double, Eigen::Matrix3d &gt;</type>
        <definition>typedef std::map&lt;double, Eigen::Matrix3d&gt; tudat::input_output::DoubleKeyTypeMatrix3dValueTypeMap</definition>
        <argsstring></argsstring>
        <name>DoubleKeyTypeMatrix3dValueTypeMap</name>
        <briefdescription>
<para>Typedef for double-KeyType, Matrix3d-ValueType map. </para>
        </briefdescription>
        <detaileddescription>
<para>Typedef for double-KeyType, Matrix3d-ValueType map. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="436" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/da7/basicInputOutput_8h_1a4749a08c6e57ff3ad88f1de5eb03126d" prot="public" static="no">
        <type>std::map&lt; int, double &gt;</type>
        <definition>typedef std::map&lt;int, double&gt; tudat::input_output::IntKeyTypeDoubleValueTypeMap</definition>
        <argsstring></argsstring>
        <name>IntKeyTypeDoubleValueTypeMap</name>
        <briefdescription>
<para>Typedef for int-KeyType, double-ValueType map. </para>
        </briefdescription>
        <detaileddescription>
<para>Typedef for int-KeyType, double-ValueType map. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="442" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="de/d03/fieldTransform_8h_1afd989daefd9b84f22b3c1dd7818a9957" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="dc/dde/classtudat_1_1input__output_1_1FieldTransform" kindref="compound">FieldTransform</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; FieldTransform &gt; tudat::input_output::FieldTransformPointer</definition>
        <argsstring></argsstring>
        <name>FieldTransformPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="dc/dde/classtudat_1_1input__output_1_1FieldTransform" kindref="compound">FieldTransform</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/fieldTransform.h" line="52" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/fieldTransform.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d23/fieldType_8h_1a0997c1b0e8fcb77a20f824b50abcf789" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t tudat::input_output::FieldType</definition>
        <argsstring></argsstring>
        <name>FieldType</name>
        <briefdescription>
<para>FieldType is a hash number of a description. </para>
        </briefdescription>
        <detaileddescription>
<para>FieldType is a hash number (see note at the end of this comment) created from a description for that FieldType. This means that it is important to maintain different descriptions of each field, as the same description leads to the same hash. It is strongly advised to use the following convention:</para>
<para>A description is built up from a category path. Each category starts with a capital letter and must not contain any spaces. Following the category name is a colon followed by a space and the description of the next sub-category or the actual string identifying the specific field. The same conventions as for categories are used on the string identifier.</para>
<para>Examples can be seen in FieldType.h</para>
<para>Note: A hash number is a fixed length key that uniquely indexes a variable length key. Hash numbers are mostly used to accelerate table lookup or data comparison tasks such as finding items in a database (Wikipedia). Here, each field type (variable length) is associated with a hash number of fixed length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/fieldType.h" line="46" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/fieldType.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/de2/fieldValue_8h_1ab16170514302b74c537295fe9d4c36fa" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d6/ded/classtudat_1_1input__output_1_1FieldValue" kindref="compound">FieldValue</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; FieldValue &gt; tudat::input_output::FieldValuePointer</definition>
        <argsstring></argsstring>
        <name>FieldValuePointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d6/ded/classtudat_1_1input__output_1_1FieldValue" kindref="compound">FieldValue</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/fieldValue.h" line="97" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/fieldValue.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="de/d50/fixedWidthParser_8h_1a370978f40044d2167b8b4cf7425940ae" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d9/d86/classtudat_1_1input__output_1_1FixedWidthParser" kindref="compound">FixedWidthParser</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; FixedWidthParser &gt; tudat::input_output::FixedWidthParserPointer</definition>
        <argsstring></argsstring>
        <name>FixedWidthParserPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d9/d86/classtudat_1_1input__output_1_1FixedWidthParser" kindref="compound">FixedWidthParser</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/fixedWidthParser.h" line="84" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/fixedWidthParser.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/d0f/linearFieldTransform_8h_1a6e2672328459bcfd7dd2c35e6f00540b" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d6/d03/classtudat_1_1input__output_1_1LinearFieldTransform" kindref="compound">LinearFieldTransform</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; LinearFieldTransform &gt; tudat::input_output::LinearFieldTransformPointer</definition>
        <argsstring></argsstring>
        <name>LinearFieldTransformPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d6/d03/classtudat_1_1input__output_1_1LinearFieldTransform" kindref="compound">LinearFieldTransform</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/linearFieldTransform.h" line="68" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/linearFieldTransform.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/df8/missileDatcomData_8h_1aafbd4dc9f6f6b1671683701a8e606805" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="db/da3/classtudat_1_1input__output_1_1MissileDatcomData" kindref="compound">MissileDatcomData</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; MissileDatcomData &gt; tudat::input_output::MissileDatcomDataPointer</definition>
        <argsstring></argsstring>
        <name>MissileDatcomDataPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="db/da3/classtudat_1_1input__output_1_1MissileDatcomData" kindref="compound">MissileDatcomData</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/missileDatcomData.h" line="223" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/missileDatcomData.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/dda/missileDatcomReader_8h_1a48f823336c35475654390cfeebd5b500" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d3/d22/classtudat_1_1input__output_1_1MissileDatcomReader" kindref="compound">MissileDatcomReader</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; MissileDatcomReader &gt; tudat::input_output::MissileDatcomReaderPointer</definition>
        <argsstring></argsstring>
        <name>MissileDatcomReaderPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d3/d22/classtudat_1_1input__output_1_1MissileDatcomReader" kindref="compound">MissileDatcomReader</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/missileDatcomReader.h" line="145" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/missileDatcomReader.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/d36/parser_8h_1a1118d3c0e525d202a0eb6c63a58371ef" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d0/d8a/classtudat_1_1input__output_1_1Parser" kindref="compound">Parser</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; Parser &gt; tudat::input_output::ParserPointer</definition>
        <argsstring></argsstring>
        <name>ParserPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d0/d8a/classtudat_1_1input__output_1_1Parser" kindref="compound">Parser</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/parser.h" line="68" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/parser.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/d1a/separatedParser_8h_1a6c007a7606366926adc2a48726405f30" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="db/dc9/classtudat_1_1input__output_1_1SeparatedParser" kindref="compound">SeparatedParser</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; SeparatedParser &gt; tudat::input_output::SeparatedParserPointer</definition>
        <argsstring></argsstring>
        <name>SeparatedParserPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="db/dc9/classtudat_1_1input__output_1_1SeparatedParser" kindref="compound">SeparatedParser</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/separatedParser.h" line="96" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/separatedParser.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d1c/textParser_8h_1a0c1cb7dc219bde633a0e69b0b1993821" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="df/d12/classtudat_1_1input__output_1_1TextParser" kindref="compound">TextParser</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; TextParser &gt; tudat::input_output::TextParserPointer</definition>
        <argsstring></argsstring>
        <name>TextParserPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="df/d12/classtudat_1_1input__output_1_1TextParser" kindref="compound">TextParser</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/textParser.h" line="123" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/textParser.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/dd2/twoLineElementData_8h_1a0e462e5139f0635e2098ca114eaf4233" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d2/dea/structtudat_1_1input__output_1_1TwoLineElementData" kindref="compound">TwoLineElementData</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; TwoLineElementData &gt; tudat::input_output::TwoLineElementDataPointer</definition>
        <argsstring></argsstring>
        <name>TwoLineElementDataPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d2/dea/structtudat_1_1input__output_1_1TwoLineElementData" kindref="compound">TwoLineElementData</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/twoLineElementData.h" line="301" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/twoLineElementData.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d4b/twoLineElementsTextFileReader_8h_1afff12cf621a0906f5f5cee0b5812fbf7" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d6/d76/classtudat_1_1input__output_1_1TwoLineElementsTextFileReader" kindref="compound">TwoLineElementsTextFileReader</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; TwoLineElementsTextFileReader &gt; tudat::input_output::TwoLineElementsTextFileReaderPointer</definition>
        <argsstring></argsstring>
        <name>TwoLineElementsTextFileReaderPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d6/d76/classtudat_1_1input__output_1_1TwoLineElementsTextFileReader" kindref="compound">TwoLineElementsTextFileReader</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/twoLineElementsTextFileReader.h" line="327" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/twoLineElementsTextFileReader.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d3/dac/aerodynamicCoefficientReader_8h_1a624753b00e0ba69d48162d0e2d42d58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt; NumberOfDimensions) &gt;</type>
        <definition>boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt; NumberOfDimensions ) &gt; tudat::input_output::mergeNDimensionalCoefficients</definition>
        <argsstring>(boost::multi_array&lt; double, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt; xComponents, boost::multi_array&lt; double, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt; yComponents, boost::multi_array&lt; double, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt; zComponents)</argsstring>
        <name>mergeNDimensionalCoefficients</name>
        <param>
          <type>boost::multi_array&lt; double, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt;</type>
          <declname>xComponents</declname>
        </param>
        <param>
          <type>boost::multi_array&lt; double, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt;</type>
          <declname>yComponents</declname>
        </param>
        <param>
          <type>boost::multi_array&lt; double, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt;</type>
          <declname>zComponents</declname>
        </param>
        <briefdescription>
<para>Function to merge three double multi-arrays of N dimension into a single Vector3d multi-array. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to merge three double multi-arrays of N dimension into a single Vector3d multi-array, where the three double multi-arrays represent the x-, y- and z-components of the Vector3ds. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xComponents</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-array containing the x-components of the Vector3d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yComponents</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-array containing the y-components of the Vector3d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zComponents</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-array containing the z-components of the Vector3d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Single multi-array containing Vector3ds according to double multi-arrays. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/aerodynamicCoefficientReader.h" line="32" column="22" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/aerodynamicCoefficientReader.h" bodystart="32" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="d3/dac/aerodynamicCoefficientReader_8h_1a28bee4d06045a1cde44b9d083932b51a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tudat::input_output::compareIndependentVariables</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;list1, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;list2)</argsstring>
        <name>compareIndependentVariables</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>list1</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>list2</declname>
        </param>
        <briefdescription>
<para>Function to compare if two lists of aerodynamic coefficient independent variables are equal. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compare if two lists of aerodynamic coefficient independent variables (vector of vector of doubles) are equal <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list1</parametername>
</parameternamelist>
<parameterdescription>
<para>First list that is to be compared. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second list that is to be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True of the two lists are completely equal in size and contents, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/util.cpp" line="12" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/util.cpp" bodystart="12" bodyend="45" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/aerodynamicCoefficientReader.h" declline="89" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dac/aerodynamicCoefficientReader_8h_1a7d5aae0919b73b4f625eb7a1e9629961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt; NumberOfDimensions) &gt;, std::vector&lt; std::vector&lt; double &gt; &gt; &gt;</type>
        <definition>std::pair&lt; boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt; NumberOfDimensions ) &gt;,std::vector&lt; std::vector&lt; double &gt; &gt; &gt; tudat::input_output::readAerodynamicCoefficients</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;fileNames)</argsstring>
        <name>readAerodynamicCoefficients</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>fileNames</declname>
        </param>
        <briefdescription>
<para>Function to read a list of aerodynamic coefficients and associated independent variables from a set of files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to read a list of aerodynamic coefficients of NumberOfDimensions independent variables and associated independent variables from a set of files. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of size 3, containing the file names for the x-, y- and z- components of the aerodynamic coefficients. Note that the independent variables for each components must be identical. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair: first entry containing multi-array of aerodynamic coefficients, second containing list of independent variables at which coefficients are defined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/aerodynamicCoefficientReader.h" line="104" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/aerodynamicCoefficientReader.h" bodystart="104" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="d3/dac/aerodynamicCoefficientReader_8h_1ac39ab59bf00026d92445fb8c96f3a29e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt; NumberOfDimensions) &gt;, std::vector&lt; std::vector&lt; double &gt; &gt; &gt;</type>
        <definition>std::pair&lt; boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt; NumberOfDimensions ) &gt;,std::vector&lt; std::vector&lt; double &gt; &gt; &gt; tudat::input_output::readAerodynamicCoefficients</definition>
        <argsstring>(const std::map&lt; int, std::string &gt; &amp;fileNames)</argsstring>
        <name>readAerodynamicCoefficients</name>
        <param>
          <type>const std::map&lt; int, std::string &gt; &amp;</type>
          <declname>fileNames</declname>
        </param>
        <briefdescription>
<para>Function to read a list of aerodynamic coefficients and associated independent variables from a set of files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to read a list of aerodynamic coefficients of 2 independent variables and associated independent variables from a set of files. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of file names, with the key required to be 0, 1 and/or 2. These indices denote the x-, y- and z- components of the aerodynamic coefficients. All indices that are not provided in this map are assumed to have associated coefficients equal to zero for all values of the independent variables Note that the independent variables for each components must be identical. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair: first entry containing multi-array of aerodynamic coefficients, second containing list of independent variables at which coefficients are defined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/aerodynamicCoefficientReader.h" line="134" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/aerodynamicCoefficientReader.h" bodystart="134" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1ae7171bd21cba7f711d16ef9191d08466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::input_output::printInFormattedScientificNotation</definition>
        <argsstring>(const double floatingPointNumber, const int basePrecision=std::numeric_limits&lt; double &gt;::digits10, const int exponentWidth=2)</argsstring>
        <name>printInFormattedScientificNotation</name>
        <param>
          <type>const double</type>
          <declname>floatingPointNumber</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>basePrecision</declname>
          <defval>std::numeric_limits&lt; double &gt;::digits10</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>exponentWidth</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Print floating-point number in formatted scientific notation. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints floating-point number in formatted scientific notation. The user can specify the precision that the base is represented by (default=maximum precision for doubles), and the number of digits (width) in the exponent (default=2). This function can be used to ensure that the string output generated in scientific notation is the consistently the same for all platforms. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>floatingPointNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating-point number to format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>basePrecision</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of digits to represent the base of the floating-point number.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponentWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of digits to represent the exponent of the floating-point number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Formatted string representation of floating-point number in scientific notation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/basicInputOutput.cpp" line="29" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/basicInputOutput.cpp" bodystart="29" bodyend="93" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" declline="111" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1a3f3d870328cd1d40bf5481c1a7c49b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; boost::filesystem::path &gt;</type>
        <definition>std::vector&lt; boost::filesystem::path &gt; tudat::input_output::listAllFilesInDirectory</definition>
        <argsstring>(const boost::filesystem::path &amp;directory, const bool isRecurseIntoSubdirectories=false)</argsstring>
        <name>listAllFilesInDirectory</name>
        <param>
          <type>const boost::filesystem::path &amp;</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isRecurseIntoSubdirectories</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>List all files in directory. </para>
        </briefdescription>
        <detaileddescription>
<para>Lists all files in directory.</para>
<para>Lists all files in a given directory. There is a recursion option to allow all files in subdirectories to be listed as well. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>Absolute directory path. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isRecurseIntoSubdirectories</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to set if algorithm should recurse through subdirectories. Set to false by default. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Container of filenames in directory, stored as Boost path variables. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/basicInputOutput.cpp" line="96" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/basicInputOutput.cpp" bodystart="96" bodyend="126" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" declline="126" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1a24c686482edd167bfdaf5acbd02db984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputStream</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::input_output::writeValueToStream</definition>
        <argsstring>(OutputStream &amp;stream, const ValueType &amp;value, const int precision, const std::string &amp;delimiter)</argsstring>
        <name>writeValueToStream</name>
        <param>
          <type>OutputStream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const ValueType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
<para>Write a value to a stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Write a value to a stream, left-aligned at a specified precision. Value is preceded by delimiter followed by a space, and followed by an end-of-line character. Helper function for writeDataMapToTextFile(). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputStream</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the stream to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the value to write, should support the &lt;&lt; operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream to write to.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write to stream.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Precision to write the value with.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter to precede the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="140" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1a489fe1a8e16138a67105006154c4dd9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputStream</type>
          </param>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfRows</declname>
            <defname>NumberOfRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfColumns</declname>
            <defname>NumberOfColumns</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaximumRows</declname>
            <defname>MaximumRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaximumCols</declname>
            <defname>MaximumCols</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::input_output::writeValueToStream</definition>
        <argsstring>(OutputStream &amp;stream, const Eigen::Matrix&lt; ScalarType, NumberOfRows, NumberOfColumns, Options, MaximumRows, MaximumCols &gt; &amp;value, const int precision, const std::string &amp;delimiter, const bool endLineAfterRow=0)</argsstring>
        <name>writeValueToStream</name>
        <param>
          <type>OutputStream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, NumberOfRows, NumberOfColumns, Options, MaximumRows, MaximumCols &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>endLineAfterRow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Write an Eigen type to a stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Write an Eigen type to a stream, row-by-row and left-aligned at a specified precision. Each value is preceded by delimiter followed by a space, and followed by an end-of-line character. Helper function for writeDataMapToTextFile(). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OutputStream</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the stream to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type for Eigen::Matrix to write to stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumberOfRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in Eigen::Matrix to write to stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumberOfColumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in Eigen::Matrix to write to stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Options</parametername>
</parameternamelist>
<parameterdescription>
<para>options for Eigen::Matrix to write to stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MaxiumumRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of rows for Eigen::Matrix to write to stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MinimumRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of rows for Eigen::Matrix to write to stream.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream to write to.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write to stream.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Precision to write the value with.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter to precede the value.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLineAfterRow</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether a new line is to be started after each row of the matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="165" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="165" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1abc03d4b643a16aaa916adace70e75160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string tudat::input_output::toStringWithPrecision</definition>
        <argsstring>(const ValueType valueToBeConverted, const int precision=3)</argsstring>
        <name>toStringWithPrecision</name>
        <param>
          <type>const ValueType</type>
          <declname>valueToBeConverted</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>precision</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>Convert number to string with specified number of decimals. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert number to string with specified number of decimals. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value to be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>valueToBeConverted</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of type ValueType to be converted to string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Number specifiying number of decimals to be used during conversion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String containing valueToBeConverted with the number of decimals specified in precision. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="193" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1aab855e18455c2fd0b431d9420ffb5810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::input_output::writeDataMapToTextFile</definition>
        <argsstring>(InputIterator iteratorDataMap, InputIterator last, const std::string &amp;outputFilename, const boost::filesystem::path &amp;outputDirectory, const std::string &amp;fileHeader, const int precisionOfKeyType, const int precisionOfValueType, const std::string &amp;delimiter)</argsstring>
        <name>writeDataMapToTextFile</name>
        <param>
          <type>InputIterator</type>
          <declname>iteratorDataMap</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputFilename</declname>
        </param>
        <param>
          <type>const boost::filesystem::path &amp;</type>
          <declname>outputDirectory</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileHeader</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>precisionOfKeyType</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>precisionOfValueType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
<para>Write data map to text file. </para>
        </briefdescription>
        <detaileddescription>
<para>Writes data stored in a map to text file. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator of pairs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iteratorDataMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the first item of the sequence to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the item past the the last item of the sequence to write.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>Output filename.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputDirectory</parametername>
</parameternamelist>
<parameterdescription>
<para>Output directory. This can be passed as a string as well. It will be created if it does not exist.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileHeader</parametername>
</parameternamelist>
<parameterdescription>
<para>Text to be placed at the head of the output file. N.B: This string MUST end in a newline/return character, or the first line of data will not be printed on a new line.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precisionOfKeyType</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of significant digits of KeyType-data to output.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precisionOfValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of significant digits of ValueType-data to output.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter character, to delimit data entries in file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="218" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="218" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1af0215f57d5cdb287391086494d9e2b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::input_output::writeDataMapToTextFile</definition>
        <argsstring>(const std::map&lt; KeyType, ValueType &gt; &amp;dataMap, const std::string &amp;outputFilename, const boost::filesystem::path &amp;outputDirectory, const std::string &amp;fileHeader=&quot;&quot;, const int precisionOfKeyType=16, const int precisionOfValueType=16, const std::string &amp;delimiter=&quot;\t&quot;)</argsstring>
        <name>writeDataMapToTextFile</name>
        <param>
          <type>const std::map&lt; KeyType, ValueType &gt; &amp;</type>
          <declname>dataMap</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputFilename</declname>
        </param>
        <param>
          <type>const boost::filesystem::path &amp;</type>
          <declname>outputDirectory</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileHeader</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>precisionOfKeyType</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>precisionOfValueType</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delimiter</declname>
          <defval>&quot;\t&quot;</defval>
        </param>
        <briefdescription>
<para>Write data map to text file. </para>
        </briefdescription>
        <detaileddescription>
<para>Writes data stored in a map to text file. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>KeyType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type for map key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type for map value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map with data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>Output filename. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputDirectory</parametername>
</parameternamelist>
<parameterdescription>
<para>Output directory. This can be passed as a string as well. It will be created if it does not exist.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileHeader</parametername>
</parameternamelist>
<parameterdescription>
<para>Text to be placed at the head of the output file. N.B: This string MUST end in a newline/return character, or the first line of data will not be printed on a new line.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precisionOfKeyType</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of significant digits of KeyType-data to output.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precisionOfValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of significant digits of ValueType-data to output.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter character, to delimit data entries in file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="268" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="268" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1a13b683686f3582bea5f831d482220c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::input_output::writeDataMapToTextFile</definition>
        <argsstring>(InputIterator first, InputIterator last, const std::string &amp;outputFilename)</argsstring>
        <name>writeDataMapToTextFile</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputFilename</declname>
        </param>
        <briefdescription>
<para>Write data map to text file. </para>
        </briefdescription>
        <detaileddescription>
<para>Writes data stored in a map to text file, using default KeyType-precision and ValueType-precision (digits10 from &quot;limits&quot; standard library), output directory (Tudat root-path), and delimiter (space). Do not use this function for Eigen types. Instead, use the function that accepts a map as input parameter below, or the function with the full argument list. Otherwise, your input will be truncated. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputIterator</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator of pairs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the first item of the sequence to write.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the item past the the last item of the sequence to write.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>Output filename. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="293" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="293" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1a88e01843302012575d6456b04c5d5cfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::input_output::writeDataMapToTextFile</definition>
        <argsstring>(const std::map&lt; KeyType, ValueType &gt; &amp;dataMap, const std::string &amp;outputFilename)</argsstring>
        <name>writeDataMapToTextFile</name>
        <param>
          <type>const std::map&lt; KeyType, ValueType &gt; &amp;</type>
          <declname>dataMap</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputFilename</declname>
        </param>
        <briefdescription>
<para>Write data map to text file. </para>
        </briefdescription>
        <detaileddescription>
<para>Writes data stored in a map to text file, using default KeyType-precision and ValueType-precision (digits10 from &quot;limits&quot; standard library), output directory (Tudat root-path), and delimiter (space). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>KeyType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type for map key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type for map value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map with data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>Output filename. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="313" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="313" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1ab43b02c9233d260395769507480b4f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfRows</declname>
            <defname>NumberOfRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfColumns</declname>
            <defname>NumberOfColumns</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaximumRows</declname>
            <defname>MaximumRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaximumCols</declname>
            <defname>MaximumCols</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::input_output::writeDataMapToTextFile</definition>
        <argsstring>(const std::map&lt; KeyType, Eigen::Matrix&lt; ScalarType, NumberOfRows, NumberOfColumns, Options, MaximumRows, MaximumCols &gt;&gt; &amp;dataMap, const std::string &amp;outputFilename)</argsstring>
        <name>writeDataMapToTextFile</name>
        <param>
          <type>const std::map&lt; KeyType, Eigen::Matrix&lt; ScalarType, NumberOfRows, NumberOfColumns, Options, MaximumRows, MaximumCols &gt;&gt; &amp;</type>
          <declname>dataMap</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputFilename</declname>
        </param>
        <briefdescription>
<para>Write data map to text file. </para>
        </briefdescription>
        <detaileddescription>
<para>Writes Eigen data stored in a map to text file, using default KeyType-precision and ValueType-precision (digits10 from &quot;limits&quot; standard library), output directory (Tudat root-path), and delimiter (space). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>KeyType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type for map key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type for Eigen::Matrix, used as map value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumberOfRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in Eigen::Matrix, used as map value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumberOfColumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in Eigen::Matrix, used as map value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Options</parametername>
</parameternamelist>
<parameterdescription>
<para>options for Eigen::Matrix, used as map value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MaxiumumRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of rows for Eigen::Matrix, used as map value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MinimumRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of rows for Eigen::Matrix, used as map value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map with data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>Output filename. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="337" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="337" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1a6597f2c7a1a97d3fc5af8fee794db8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::input_output::writeDataMapToTextFile</definition>
        <argsstring>(const std::map&lt; KeyType, ValueType &gt; &amp;dataMap, const boost::filesystem::path &amp;outputPath, const std::string &amp;fileHeader, const int precision)</argsstring>
        <name>writeDataMapToTextFile</name>
        <param>
          <type>const std::map&lt; KeyType, ValueType &gt; &amp;</type>
          <declname>dataMap</declname>
        </param>
        <param>
          <type>const boost::filesystem::path &amp;</type>
          <declname>outputPath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileHeader</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
<para>Write data map to text file. </para>
        </briefdescription>
        <detaileddescription>
<para>Writes Eigen data stored in a map to text file, using default KeyType-precision and ValueType-precision (digits10 from &quot;limits&quot; standard library), output directory (Tudat root-path), and delimiter (space). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>KeyType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type for map key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type for Eigen::Matrix, used as map value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map with data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputPath</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the output file.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileHeader</parametername>
</parameternamelist>
<parameterdescription>
<para>Text to be placed at the head of the output file. N.B: This string MUST end in a newline/return character, or the first line of data will not be printed on a new line.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of significant digits of KeyType-data and ValueType-data to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="361" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="361" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="df/da7/basicInputOutput_8h_1a67df5673efab77c6e77b570f25bfd8ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfRows</declname>
            <defname>NumberOfRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfColumns</declname>
            <defname>NumberOfColumns</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::input_output::writeMatrixToFile</definition>
        <argsstring>(Eigen::Matrix&lt; ScalarType, NumberOfRows, NumberOfColumns &gt; matrixToWrite, const std::string &amp;outputFilename, const int precisionOfMatrixEntries=16, const boost::filesystem::path &amp;outputDirectory=get_tudat_path(), const std::string &amp;delimiter=&quot;\t&quot;, const std::string &amp;header=&quot;&quot;)</argsstring>
        <name>writeMatrixToFile</name>
        <param>
          <type>Eigen::Matrix&lt; ScalarType, NumberOfRows, NumberOfColumns &gt;</type>
          <declname>matrixToWrite</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputFilename</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>precisionOfMatrixEntries</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>const boost::filesystem::path &amp;</type>
          <declname>outputDirectory</declname>
          <defval>get_tudat_path()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delimiter</declname>
          <defval>&quot;\t&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>header</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Write Eigen matrix to text file. </para>
        </briefdescription>
        <detaileddescription>
<para>Write Eigen matrix to text file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrixToWrite</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix that is to be written to a file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>Output filename. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precisionOfMatrixEntries</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of significant digits of Matrix output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputDirectory</parametername>
</parameternamelist>
<parameterdescription>
<para>Output directory. It can be passed as a string as well. The directory be created if it does not exist.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>Delimiter character, to delimit data entries in file.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Header to be added in the first line. Header char (e.g. %, #), if any, must be included in this string. Must end in line break to make data matrix start in the next line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" line="384" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/basicInputOutput.h" bodystart="384" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="d1/dd4/mapTextFileReader_8h_1a334d7dd25b1b3ccc6d8ba4244dd26f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EigenVectorType</type>
            <defval>Eigen::VectorXd</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; typename EigenVectorType::Scalar, EigenVectorType &gt;</type>
        <definition>std::map&lt; typename EigenVectorType::Scalar, EigenVectorType &gt; tudat::input_output::readEigenVectorMapFromFile</definition>
        <argsstring>(const std::string &amp;relativePath, const std::string &amp;separators=&quot;\t ;,&quot;, const std::string &amp;skipLinesCharacter=&quot;%&quot;)</argsstring>
        <name>readEigenVectorMapFromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>relativePath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
          <defval>&quot;\t ;,&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>skipLinesCharacter</declname>
          <defval>&quot;%&quot;</defval>
        </param>
        <briefdescription>
<para>Read a map of Eigen vectors from a text file. </para>
        </briefdescription>
        <detaileddescription>
<para>Read a textfile whith separated (space, tab, comma etc...) values. The first element of each line is a key. Successive elements in the current line are the associated values, converted to Eigen column vector. <simplesect kind="remark"><para>The scalar type of <computeroutput>EigenVectorType</computeroutput> is used for the keys of the returned map. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativePath</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative path to file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>separators</parametername>
</parameternamelist>
<parameterdescription>
<para>Separators used, every character in the string will be used as separators. (multiple seperators possible). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipLinesCharacter</parametername>
</parameternamelist>
<parameterdescription>
<para>Skip lines starting with this character. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The map with data as read from the file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/mapTextFileReader.h" line="57" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/mapTextFileReader.h" bodystart="57" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="d1/dd4/mapTextFileReader_8h_1ae58dbbf0bf6c4ba9d4203a31c43d5e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>typename ScalarValueType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; KeyType, std::vector&lt; ScalarValueType &gt; &gt;</type>
        <definition>std::map&lt; KeyType, std::vector&lt; ScalarValueType &gt; &gt; tudat::input_output::readStlVectorMapFromFile</definition>
        <argsstring>(const std::string &amp;relativePath, const std::string &amp;separators=&quot;\t ;,&quot;, const std::string &amp;skipLinesCharacter=&quot;%&quot;)</argsstring>
        <name>readStlVectorMapFromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>relativePath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
          <defval>&quot;\t ;,&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>skipLinesCharacter</declname>
          <defval>&quot;%&quot;</defval>
        </param>
        <briefdescription>
<para>Read a map of std vector from a text file. </para>
        </briefdescription>
        <detaileddescription>
<para>Read a textfile whith separated (space, tab, comma etc...) values. The first element of each line is a key. Successive elements in the current line are the associated values, stored as an STL vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativePath</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative path to file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>separators</parametername>
</parameternamelist>
<parameterdescription>
<para>Separators used, every character in the string will be used as separators. (multiple seperators possible). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipLinesCharacter</parametername>
</parameternamelist>
<parameterdescription>
<para>Skip lines starting with this character. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The map with data as read from the file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/mapTextFileReader.h" line="105" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/mapTextFileReader.h" bodystart="105" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/matrixTextFileReader_8h_1a9d3b6cf4d6b4f811d79b0959e8511f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, Eigen::Dynamic, Eigen::Dynamic &gt; tudat::input_output::readMatrixFromFile</definition>
        <argsstring>(const std::string &amp;relativePath, const std::string &amp;separators=&quot;\t ;,&quot;, const std::string &amp;skipLinesCharacter=&quot;%&quot;, const int numberOfHeaderLines=0)</argsstring>
        <name>readMatrixFromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>relativePath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
          <defval>&quot;\t ;,&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>skipLinesCharacter</declname>
          <defval>&quot;%&quot;</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfHeaderLines</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Read the file and return the data matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Read a textfile whith separated (space, tab, comma etc...) numbers. The class returns these numbers as a matrixXd. The first line with numbers is used to define the number of columns. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativePath</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative path to file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>separators</parametername>
</parameternamelist>
<parameterdescription>
<para>Separators used, every character in the string will be used as separators. (multiple seperators possible). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipLinesCharacter</parametername>
</parameternamelist>
<parameterdescription>
<para>Skip lines starting with this character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfHeaderLines</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of header lines, i.e., number of lines to be skipped at the beginning of the file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The data matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/matrixTextFileReader.h" line="53" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/matrixTextFileReader.h" bodystart="53" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="d8/d87/multiDimensionalArrayReader_8h_1aa75468c435fe630098eafbbbaba7332d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::multi_array&lt; double, 1 &gt;</type>
        <definition>boost::multi_array&lt; double, 1 &gt; tudat::input_output::parseRawOneDimensionalCoefficientsFromFile</definition>
        <argsstring>(const std::vector&lt; int &gt; independentVariableSize, const Eigen::MatrixXd &amp;coefficientsBlock)</argsstring>
        <name>parseRawOneDimensionalCoefficientsFromFile</name>
        <param>
          <type>const std::vector&lt; int &gt;</type>
          <declname>independentVariableSize</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>coefficientsBlock</declname>
        </param>
        <briefdescription>
<para>Function to parse a block of values read from a file into a multi-array of size 1. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to parse a block of values read from a file into a multi-array of size 1. The size of the independent variable is provided as input from this file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentVariableSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of independent variables (must be of size 1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficientsBlock</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw number block as read from file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Multi-array of size 1, according to input data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" line="27" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" bodystart="27" bodyend="50" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/multiDimensionalArrayReader.h" declline="32" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d8/d87/multiDimensionalArrayReader_8h_1a63e3ade7f947e33354ccd619e12a0158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::multi_array&lt; double, 2 &gt;</type>
        <definition>boost::multi_array&lt; double, 2 &gt; tudat::input_output::parseRawTwoDimensionalCoefficientsFromFile</definition>
        <argsstring>(const std::vector&lt; int &gt; independentVariableSize, const Eigen::MatrixXd &amp;coefficientsBlock)</argsstring>
        <name>parseRawTwoDimensionalCoefficientsFromFile</name>
        <param>
          <type>const std::vector&lt; int &gt;</type>
          <declname>independentVariableSize</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>coefficientsBlock</declname>
        </param>
        <briefdescription>
<para>Function to parse a block of values read from a file into a multi-array of size 2. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to parse a block of values read from a file into a multi-array of size 2. The size of the independent variables is provided as input from this file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentVariableSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of independent variables (must be of size 2) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficientsBlock</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw number block as read from file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Multi-array of size 2, according to input data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" line="53" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" bodystart="53" bodyend="79" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/multiDimensionalArrayReader.h" declline="44" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d8/d87/multiDimensionalArrayReader_8h_1aa2e9c821167ddf5065734cb31a10d8d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::multi_array&lt; double, 3 &gt;</type>
        <definition>boost::multi_array&lt; double, 3 &gt; tudat::input_output::parseRawThreeDimensionalCoefficientsFromFile</definition>
        <argsstring>(const std::vector&lt; int &gt; independentVariableSize, const Eigen::MatrixXd &amp;coefficientsBlock)</argsstring>
        <name>parseRawThreeDimensionalCoefficientsFromFile</name>
        <param>
          <type>const std::vector&lt; int &gt;</type>
          <declname>independentVariableSize</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>coefficientsBlock</declname>
        </param>
        <briefdescription>
<para>Function to parse a block of values read from a file into a multi-array of size 3. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to parse a block of values read from a file into a multi-array of size 3. The size of the independent variables is provided as input from this file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentVariableSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of independent variables (must be of size 3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficientsBlock</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw number block as read from file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Multi-array of size 3, according to input data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" line="82" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" bodystart="82" bodyend="114" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/multiDimensionalArrayReader.h" declline="56" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d8/d87/multiDimensionalArrayReader_8h_1a2c6623af3176af53cefd7ecd0f9a7300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::multi_array&lt; double, 4 &gt;</type>
        <definition>boost::multi_array&lt; double, 4 &gt; tudat::input_output::parseRawFourDimensionalCoefficientsFromFile</definition>
        <argsstring>(const std::vector&lt; int &gt; independentVariableSize, const Eigen::MatrixXd &amp;coefficientsBlock)</argsstring>
        <name>parseRawFourDimensionalCoefficientsFromFile</name>
        <param>
          <type>const std::vector&lt; int &gt;</type>
          <declname>independentVariableSize</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>coefficientsBlock</declname>
        </param>
        <briefdescription>
<para>Function to parse a block of values read from a file into a multi-array of size 4. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to parse a block of values read from a file into a multi-array of size 4. The size of the independent variables is provided as input from this file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentVariableSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of independent variables (must be of size 4) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficientsBlock</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw number block as read from file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Multi-array of size 4, according to input data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" line="117" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" bodystart="117" bodyend="184" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/multiDimensionalArrayReader.h" declline="68" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d8/d87/multiDimensionalArrayReader_8h_1a434d5542553af6f56ef3f29c763232e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::input_output::readCoefficientsFile</definition>
        <argsstring>(const std::string fileName, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;independentVariables, Eigen::MatrixXd &amp;coefficientBlock)</argsstring>
        <name>readCoefficientsFile</name>
        <param>
          <type>const std::string</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>independentVariables</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>coefficientBlock</declname>
        </param>
        <briefdescription>
<para>Function to read a coefficient file (data on a structured grid as a function of N independent variables) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to read a coefficient file (data on a structured grid as a function of N independent variables). This function reads the file as raw data, converting the data into a multi-array of the correct size can be done using the <ref refid="d4/d72/classtudat_1_1input__output_1_1MultiArrayFileReader" kindref="compound">MultiArrayFileReader</ref> class if needed. The file format is defined in the Tudat wiki. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of file containing coefficients, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Independent variables of coefficients, as read from file (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficientBlock</parametername>
</parameternamelist>
<parameterdescription>
<para>Block of coefficients, as read from file (returned by reference) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" line="187" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" bodystart="187" bodyend="355" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/multiDimensionalArrayReader.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d8/d87/multiDimensionalArrayReader_8h_1af2245c2acba3d8d0ef17c400ad440a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::input_output::getNumberOfIndependentVariablesInCoefficientFile</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>getNumberOfIndependentVariablesInCoefficientFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Function to retrieve the number of independent variables that the coefficients in a file are given for. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the number of independent variables that the coefficients in a file are given for. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file containing the coefficients. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of independent variables that the coefficients in a file are given for. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" line="358" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/multiDimensionalArrayReader.cpp" bodystart="358" bodyend="398" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/multiDimensionalArrayReader.h" declline="92" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="df/d71/readHistoryFromFile_8h_1a09abdfd25fb1d014ae2147b0472af647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</type>
        <definition>std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, Eigen::Dynamic &gt; &gt; tudat::input_output::readMatrixHistoryFromFile</definition>
        <argsstring>(const int singleMatrixRows, const int singleMatrixColumns, const std::string &amp;fileName)</argsstring>
        <name>readMatrixHistoryFromFile</name>
        <param>
          <type>const int</type>
          <declname>singleMatrixRows</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>singleMatrixColumns</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Function to read a time history of Eigen MatrixXd data from a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to read a time history of Eigen MatrixXd data from a file, as a map with time (key) and associated MatrixXd (value) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>singleMatrixRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows per matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>singleMatrixColumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns per matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>File name to load </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix history from file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/readHistoryFromFile.h" line="38" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/readHistoryFromFile.h" bodystart="38" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="df/d71/readHistoryFromFile_8h_1a11354bc4c972a8962ed7c5bc8b715edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt;</type>
        <definition>std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; tudat::input_output::readVectorHistoryFromFile</definition>
        <argsstring>(const int singleMatrixRows, const std::string &amp;fileName)</argsstring>
        <name>readVectorHistoryFromFile</name>
        <param>
          <type>const int</type>
          <declname>singleMatrixRows</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Function to read a time history of Eigen VectorXd data from a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to read a time history of Eigen VectorXd data from a file, as a map with time (key) and associated VectorXd (value) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>singleMatrixRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows per vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>File name to load </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector history from file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/readHistoryFromFile.h" line="84" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/readHistoryFromFile.h" bodystart="84" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="df/d71/readHistoryFromFile_8h_1a888de794491d5612ebc72fbbc72bd014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; S, T &gt;</type>
        <definition>std::map&lt; S, T &gt; tudat::input_output::readScalarHistoryFromFile</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>readScalarHistoryFromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Function to read a time history of scalar data from a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to read a time history of scalar data from a file, as a map with time (key) and associated scalar (value) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>File name to load </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Scalar history from file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/readHistoryFromFile.h" line="125" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/readHistoryFromFile.h" bodystart="125" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="dd/d71/tabulatedAtmosphereReader_8h_1a3b74ef1c05905a6d649312b5a1846c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::vector&lt; boost::multi_array&lt; double, static_cast&lt; size_t &gt; NumberOfDimensions) &gt; &gt;, std::vector&lt; std::vector&lt; double &gt; &gt; &gt;</type>
        <definition>std::pair&lt; std::vector&lt; boost::multi_array&lt; double, static_cast&lt; size_t &gt; NumberOfDimensions ) &gt; &gt;,std::vector&lt; std::vector&lt; double &gt; &gt; &gt; tudat::input_output::readTabulatedAtmosphere</definition>
        <argsstring>(const std::map&lt; int, std::string &gt; &amp;fileNames)</argsstring>
        <name>readTabulatedAtmosphere</name>
        <param>
          <type>const std::map&lt; int, std::string &gt; &amp;</type>
          <declname>fileNames</declname>
        </param>
        <briefdescription>
<para>Function to read a list of atmosphere parameters and associated independent variables from a set of files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to read a list of atmosphere parameters of 2 independent variables and associated independent variables from a set of files. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of file names, with the key required to be 0, 1 and/or 2. These indices denote the x-, y- and z- components of the atmosphere parameters. All indices that are not provided in this map are assumed to have associated coefficients equal to zero for all values of the independent variables Note that the independent variables for each components must be identical. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair: first entry containing multi-array of atmosphere parameters, second containing list of independent variables at which coefficients are defined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/tabulatedAtmosphereReader.h" line="50" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/tabulatedAtmosphereReader.h" bodystart="50" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="d8/d5a/aerodynamicCoefficientReader_8cpp_1ad4849d1a2ad6a45fa18ea5e333058e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::multi_array&lt; Eigen::Vector3d, 1 &gt;</type>
        <definition>boost::multi_array&lt; Eigen::Vector3d, 1 &gt; tudat::input_output::mergeOneDimensionalCoefficients</definition>
        <argsstring>(const boost::multi_array&lt; double, 1 &gt; xComponents, const boost::multi_array&lt; double, 1 &gt; yComponents, const boost::multi_array&lt; double, 1 &gt; zComponents)</argsstring>
        <name>mergeOneDimensionalCoefficients</name>
        <param>
          <type>const boost::multi_array&lt; double, 1 &gt;</type>
          <declname>xComponents</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; double, 1 &gt;</type>
          <declname>yComponents</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; double, 1 &gt;</type>
          <declname>zComponents</declname>
        </param>
        <briefdescription>
<para>Function to merge three double multi-arrays of 1 dimension into a single Vector3d multi-array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/aerodynamicCoefficientReader.cpp" line="21" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/aerodynamicCoefficientReader.cpp" bodystart="21" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="d8/d5a/aerodynamicCoefficientReader_8cpp_1a11274f30e6e97dd6aef8d134be2f6ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::multi_array&lt; Eigen::Vector3d, 2 &gt;</type>
        <definition>boost::multi_array&lt; Eigen::Vector3d, 2 &gt; tudat::input_output::mergeTwoDimensionalCoefficients</definition>
        <argsstring>(const boost::multi_array&lt; double, 2 &gt; xComponents, const boost::multi_array&lt; double, 2 &gt; yComponents, const boost::multi_array&lt; double, 2 &gt; zComponents)</argsstring>
        <name>mergeTwoDimensionalCoefficients</name>
        <param>
          <type>const boost::multi_array&lt; double, 2 &gt;</type>
          <declname>xComponents</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; double, 2 &gt;</type>
          <declname>yComponents</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; double, 2 &gt;</type>
          <declname>zComponents</declname>
        </param>
        <briefdescription>
<para>Function to merge three double multi-arrays of 2 dimensions into a single Vector3d multi-array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/aerodynamicCoefficientReader.cpp" line="46" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/aerodynamicCoefficientReader.cpp" bodystart="46" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="d8/d5a/aerodynamicCoefficientReader_8cpp_1a4b55ebec168b4824fb51722e84f58046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::multi_array&lt; Eigen::Vector3d, 3 &gt;</type>
        <definition>boost::multi_array&lt; Eigen::Vector3d, 3 &gt; tudat::input_output::mergeThreeDimensionalCoefficients</definition>
        <argsstring>(const boost::multi_array&lt; double, 3 &gt; xComponents, const boost::multi_array&lt; double, 3 &gt; yComponents, const boost::multi_array&lt; double, 3 &gt; zComponents)</argsstring>
        <name>mergeThreeDimensionalCoefficients</name>
        <param>
          <type>const boost::multi_array&lt; double, 3 &gt;</type>
          <declname>xComponents</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; double, 3 &gt;</type>
          <declname>yComponents</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; double, 3 &gt;</type>
          <declname>zComponents</declname>
        </param>
        <briefdescription>
<para>Function to merge three double multi-arrays of 3 dimensions into a single Vector3d multi-array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/aerodynamicCoefficientReader.cpp" line="77" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/aerodynamicCoefficientReader.cpp" bodystart="77" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="d4/d12/matrixTextFileReader_8cpp_1aa8a299c923c8ff00a3fd6d1e084374d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd tudat::input_output::readMatrixFromFile</definition>
        <argsstring>(const std::string &amp;relativePath, const std::string &amp;separators, const std::string &amp;skipLinesCharacter)</argsstring>
        <name>readMatrixFromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>relativePath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>skipLinesCharacter</declname>
        </param>
        <briefdescription>
<para>Read the file and return the data matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/matrixTextFileReader.cpp" line="34" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/matrixTextFileReader.cpp" bodystart="34" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="d7/d03/twoLineElementData_8cpp_1aa4f58124de529899bdc3c65ab058e523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; tudat::input_output::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, TwoLineElementData &amp;twoLineElementData)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="d2/dea/structtudat_1_1input__output_1_1TwoLineElementData" kindref="compound">TwoLineElementData</ref> &amp;</type>
          <declname>twoLineElementData</declname>
        </param>
        <briefdescription>
<para>Overload ostream to print class information. </para>
        </briefdescription>
        <detaileddescription>
<para>Overloads ostream to print class information; prints all converted TLE variables obtained from TLE. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream to print class data to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>twoLineElementData</parametername>
</parameternamelist>
<parameterdescription>
<para>TLE data to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Stream handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/twoLineElementData.cpp" line="49" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/io/twoLineElementData.cpp" bodystart="49" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/io/aerodynamicCoefficientReader.h" line="19" column="1"/>
  </compounddef>
</doxygen>
