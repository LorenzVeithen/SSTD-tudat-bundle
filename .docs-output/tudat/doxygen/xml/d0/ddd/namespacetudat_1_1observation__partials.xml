<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d0/ddd/namespacetudat_1_1observation__partials" kind="namespace" language="C++">
    <compoundname>tudat::observation_partials</compoundname>
    <innerclass refid="d3/dda/classtudat_1_1observation__partials_1_1AngularPositionScaling" prot="public">tudat::observation_partials::AngularPositionScaling</innerclass>
    <innerclass refid="d9/d15/classtudat_1_1observation__partials_1_1AngularPositionPartial" prot="public">tudat::observation_partials::AngularPositionPartial</innerclass>
    <innerclass refid="dc/d92/classtudat_1_1observation__partials_1_1OneWayRangeRateScaling" prot="public">tudat::observation_partials::OneWayRangeRateScaling</innerclass>
    <innerclass refid="d7/d0e/classtudat_1_1observation__partials_1_1DifferencedOneWayRangeRatePartial" prot="public">tudat::observation_partials::DifferencedOneWayRangeRatePartial</innerclass>
    <innerclass refid="d2/d6d/classtudat_1_1observation__partials_1_1EulerAngleObervationPartialWrtCurrentRotationalState" prot="public">tudat::observation_partials::EulerAngleObervationPartialWrtCurrentRotationalState</innerclass>
    <innerclass refid="d8/dde/classtudat_1_1observation__partials_1_1FirstOrderRelativisticLightTimeCorrectionPartial" prot="public">tudat::observation_partials::FirstOrderRelativisticLightTimeCorrectionPartial</innerclass>
    <innerclass refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" prot="public">tudat::observation_partials::LightTimeCorrectionPartial</innerclass>
    <innerclass refid="db/d77/classtudat_1_1observation__partials_1_1NWayRangeScaling" prot="public">tudat::observation_partials::NWayRangeScaling</innerclass>
    <innerclass refid="db/d9f/classtudat_1_1observation__partials_1_1NWayRangePartial" prot="public">tudat::observation_partials::NWayRangePartial</innerclass>
    <innerclass refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" prot="public">tudat::observation_partials::PositionPartialScaling</innerclass>
    <innerclass refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" prot="public">tudat::observation_partials::ObservationPartial</innerclass>
    <innerclass refid="de/d81/classtudat_1_1observation__partials_1_1ObservationPartialWrtConstantAbsoluteBias" prot="public">tudat::observation_partials::ObservationPartialWrtConstantAbsoluteBias</innerclass>
    <innerclass refid="da/d30/classtudat_1_1observation__partials_1_1ObservationPartialWrtArcWiseAbsoluteBias" prot="public">tudat::observation_partials::ObservationPartialWrtArcWiseAbsoluteBias</innerclass>
    <innerclass refid="de/dc6/classtudat_1_1observation__partials_1_1ObservationPartialWrtConstantRelativeBias" prot="public">tudat::observation_partials::ObservationPartialWrtConstantRelativeBias</innerclass>
    <innerclass refid="d9/d74/classtudat_1_1observation__partials_1_1ObservationPartialWrtArcWiseRelativeBias" prot="public">tudat::observation_partials::ObservationPartialWrtArcWiseRelativeBias</innerclass>
    <innerclass refid="d2/d34/classtudat_1_1observation__partials_1_1OneWayDopplerProperTimeComponentScaling" prot="public">tudat::observation_partials::OneWayDopplerProperTimeComponentScaling</innerclass>
    <innerclass refid="de/dc4/classtudat_1_1observation__partials_1_1OneWayDopplerDirectFirstOrderProperTimeComponentScaling" prot="public">tudat::observation_partials::OneWayDopplerDirectFirstOrderProperTimeComponentScaling</innerclass>
    <innerclass refid="d2/df1/classtudat_1_1observation__partials_1_1OneWayDopplerScaling" prot="public">tudat::observation_partials::OneWayDopplerScaling</innerclass>
    <innerclass refid="db/de9/classtudat_1_1observation__partials_1_1OneWayDopplerPartial" prot="public">tudat::observation_partials::OneWayDopplerPartial</innerclass>
    <innerclass refid="d5/d2c/classtudat_1_1observation__partials_1_1OneWayRangeScaling" prot="public">tudat::observation_partials::OneWayRangeScaling</innerclass>
    <innerclass refid="de/dfc/classtudat_1_1observation__partials_1_1OneWayRangePartial" prot="public">tudat::observation_partials::OneWayRangePartial</innerclass>
    <innerclass refid="d4/d4e/classtudat_1_1observation__partials_1_1CartesianStatePartial" prot="public">tudat::observation_partials::CartesianStatePartial</innerclass>
    <innerclass refid="d3/d4b/classtudat_1_1observation__partials_1_1CartesianStatePartialWrtCartesianState" prot="public">tudat::observation_partials::CartesianStatePartialWrtCartesianState</innerclass>
    <innerclass refid="db/d14/classtudat_1_1observation__partials_1_1CartesianStatePartialWrtRotationMatrixParameter" prot="public">tudat::observation_partials::CartesianStatePartialWrtRotationMatrixParameter</innerclass>
    <innerclass refid="d4/d27/classtudat_1_1observation__partials_1_1CartesianPartialWrtBodyFixedPosition" prot="public">tudat::observation_partials::CartesianPartialWrtBodyFixedPosition</innerclass>
    <innerclass refid="d9/d1b/classtudat_1_1observation__partials_1_1PositionObservationScaling" prot="public">tudat::observation_partials::PositionObservationScaling</innerclass>
    <innerclass refid="dd/de9/classtudat_1_1observation__partials_1_1PositionObervationPartial" prot="public">tudat::observation_partials::PositionObervationPartial</innerclass>
    <innerclass refid="dd/ddb/classtudat_1_1observation__partials_1_1VelocityObservationScaling" prot="public">tudat::observation_partials::VelocityObservationScaling</innerclass>
    <innerclass refid="de/dbd/classtudat_1_1observation__partials_1_1VelocityObervationPartial" prot="public">tudat::observation_partials::VelocityObervationPartial</innerclass>
    <innerclass refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial" prot="public">tudat::observation_partials::RotationMatrixPartial</innerclass>
    <innerclass refid="dd/dbc/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtConstantRotationRate" prot="public">tudat::observation_partials::RotationMatrixPartialWrtConstantRotationRate</innerclass>
    <innerclass refid="d2/dea/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPoleOrientation" prot="public">tudat::observation_partials::RotationMatrixPartialWrtPoleOrientation</innerclass>
    <innerclass refid="da/dfe/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPeriodicSpinVariations" prot="public">tudat::observation_partials::RotationMatrixPartialWrtPeriodicSpinVariations</innerclass>
    <innerclass refid="d7/d40/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPolarMotionAmplitude" prot="public">tudat::observation_partials::RotationMatrixPartialWrtPolarMotionAmplitude</innerclass>
    <innerclass refid="d6/d44/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtCoreFactor" prot="public">tudat::observation_partials::RotationMatrixPartialWrtCoreFactor</innerclass>
    <innerclass refid="d0/dc6/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtFreeCoreNutationRate" prot="public">tudat::observation_partials::RotationMatrixPartialWrtFreeCoreNutationRate</innerclass>
    <innerclass refid="d9/d3f/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtQuaternion" prot="public">tudat::observation_partials::RotationMatrixPartialWrtQuaternion</innerclass>
    <innerclass refid="dc/d64/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtRotationalState" prot="public">tudat::observation_partials::RotationMatrixPartialWrtRotationalState</innerclass>
    <innerclass refid="d5/d59/classtudat_1_1observation__partials_1_1SynchronousRotationMatrixPartialWrtTranslationalState" prot="public">tudat::observation_partials::SynchronousRotationMatrixPartialWrtTranslationalState</innerclass>
    <innerclass refid="dd/dad/classtudat_1_1observation__partials_1_1TwoWayDopplerScaling" prot="public">tudat::observation_partials::TwoWayDopplerScaling</innerclass>
    <innerclass refid="d2/d50/classtudat_1_1observation__partials_1_1TwoWayDopplerPartial" prot="public">tudat::observation_partials::TwoWayDopplerPartial</innerclass>
    <innerclass refid="d3/d2b/classtudat_1_1observation__partials_1_1ObservationPartialCreator" prot="public">tudat::observation_partials::ObservationPartialCreator</innerclass>
    <innerclass refid="df/dac/classtudat_1_1observation__partials_1_1ObservationPartialCreator_3_011_00_01ObservationScalarType_00_01TimeType_01_4" prot="public">tudat::observation_partials::ObservationPartialCreator&lt; 1, ObservationScalarType, TimeType &gt;</innerclass>
    <innerclass refid="db/d79/classtudat_1_1observation__partials_1_1ObservationPartialCreator_3_012_00_01ObservationScalarType_00_01TimeType_01_4" prot="public">tudat::observation_partials::ObservationPartialCreator&lt; 2, ObservationScalarType, TimeType &gt;</innerclass>
    <innerclass refid="df/ddf/classtudat_1_1observation__partials_1_1ObservationPartialCreator_3_013_00_01ObservationScalarType_00_01TimeType_01_4" prot="public">tudat::observation_partials::ObservationPartialCreator&lt; 3, ObservationScalarType, TimeType &gt;</innerclass>
    <innerclass refid="d8/daa/classtudat_1_1observation__partials_1_1ObservationPartialCreator_3_016_00_01ObservationScalarType_00_01TimeType_01_4" prot="public">tudat::observation_partials::ObservationPartialCreator&lt; 6, ObservationScalarType, TimeType &gt;</innerclass>
    <innerclass refid="d2/d74/classtudat_1_1observation__partials_1_1ObservationPartialCreator_3_01Eigen_1_1Dynamic_00_01Obser089649db4724e97cea9040a88bdc6eb6" prot="public">tudat::observation_partials::ObservationPartialCreator&lt; Eigen::Dynamic, ObservationScalarType, TimeType &gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="df/d4c/observationPartial_8h_1a5d8e41629aa9a85426c999baccdda38b" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; <ref refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" kindref="compound">ObservationPartial</ref>&lt; 1 &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; ObservationPartial&lt; 1 &gt; &gt; &gt; tudat::observation_partials::SingleLinkObservationPartialList</definition>
        <argsstring></argsstring>
        <name>SingleLinkObservationPartialList</name>
        <briefdescription>
<para>Typedef for map of observation partials. </para>
        </briefdescription>
        <detaileddescription>
<para>Typedef for single observation partial list, with key parameter start index and size.</para>
<para>Typedef for map of observation partials, for an observable of size 1. The key of the map is a pair denoting the start index of the parameter in the list of estimated parameters and the number of indices of the parameter wrt which the current partial (corresponding value in map) is taken. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/observationPartial.h" line="450" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/observationPartial.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/d4c/observationPartial_8h_1ad36fd758cf02cdd31c4dea0836c18142" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; <ref refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" kindref="compound">ObservationPartial</ref>&lt; 2 &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; ObservationPartial&lt; 2 &gt; &gt; &gt; tudat::observation_partials::SingleLinkObservationTwoPartialList</definition>
        <argsstring></argsstring>
        <name>SingleLinkObservationTwoPartialList</name>
        <briefdescription>
<para>Typedef for map of observation partials. </para>
        </briefdescription>
        <detaileddescription>
<para>Typedef for map of observation partials, for an observable of size 2. The key of the map is a pair denoting the start index of the parameter in the list of estimated parameters and the number of indices of the parameter wrt which the current partial (corresponding value in map) is taken. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/observationPartial.h" line="459" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/observationPartial.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/d4c/observationPartial_8h_1a348e6d85b85e5c46d224de6220463f19" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; <ref refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" kindref="compound">ObservationPartial</ref>&lt; 3 &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; ObservationPartial&lt; 3 &gt; &gt; &gt; tudat::observation_partials::SingleLinkObservationThreePartialList</definition>
        <argsstring></argsstring>
        <name>SingleLinkObservationThreePartialList</name>
        <briefdescription>
<para>Typedef for map of observation partials. </para>
        </briefdescription>
        <detaileddescription>
<para>Typedef for map of observation partials, for an observable of size 3. The key of the map is a pair denoting the start index of the parameter in the list of estimated parameters and the number of indices of the parameter wrt which the current partial (corresponding value in map) is taken. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/observationPartial.h" line="468" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/observationPartial.h" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/dda/rotationMatrixPartial_8h_1a80c10ee71cea536bfca4d6a68de28dfd" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; estimatable_parameters::EstimatebleParametersEnum, std::string &gt;, std::shared_ptr&lt; <ref refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial" kindref="compound">observation_partials::RotationMatrixPartial</ref> &gt; &gt;</type>
        <definition>typedef std::map&lt; std::pair&lt; estimatable_parameters::EstimatebleParametersEnum, std::string &gt;, std::shared_ptr&lt; RotationMatrixPartial &gt; &gt; tudat::observation_partials::RotationMatrixPartialNamedList</definition>
        <argsstring></argsstring>
        <name>RotationMatrixPartialNamedList</name>
        <briefdescription>
<para>Typedef of list of <ref refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial" kindref="compound">RotationMatrixPartial</ref> objects, ordered by parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" line="894" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" bodystart="894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d24/createDifferencedOneWayRangeRatePartials_8h_1a1f63e714b6967307118ee99b63c3e386" prot="public" static="no">
        <type>std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; &gt; tudat::observation_partials::PerLinkEndPerLightTimeSolutionCorrections</definition>
        <argsstring></argsstring>
        <name>PerLinkEndPerLightTimeSolutionCorrections</name>
        <briefdescription>
<para>Typedef for list of light time corrections for a list of link ends. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDifferencedOneWayRangeRatePartials.h" line="30" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDifferencedOneWayRangeRatePartials.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d7/d5b/angularPositionPartial_8h_1a81ea07cbde532d7a1af8a00b2b152d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 1, 3 &gt;</type>
        <definition>Eigen::Matrix&lt; double, 1, 3 &gt; tudat::observation_partials::calculatePartialOfRightAscensionWrtLinkEndPosition</definition>
        <argsstring>(const Eigen::Vector3d &amp;relativeRangeVector, const bool isLinkEndReceiver)</argsstring>
        <name>calculatePartialOfRightAscensionWrtLinkEndPosition</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>relativeRangeVector</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isLinkEndReceiver</declname>
        </param>
        <briefdescription>
<para>Function to compute the derivative of (direct geometric) right ascension w.r.t. position of observer or observed object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the derivative of (direct geometric) right ascension w.r.t. position of observer or observed object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeRangeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector from observer to observed object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isLinkEndReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the partial is to be computed w.r.t. position of observer, false if it is the observed object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>derivative of (direct geometric) right ascension w.r.t. position of observer or observed object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/angularPositionPartial.cpp" line="20" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/angularPositionPartial.cpp" bodystart="20" bodyend="34" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/angularPositionPartial.h" declline="34" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d7/d5b/angularPositionPartial_8h_1aea0c4b7797bc33d8eeb50c29f5651fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 1, 3 &gt;</type>
        <definition>Eigen::Matrix&lt; double, 1, 3 &gt; tudat::observation_partials::calculatePartialOfDeclinationWrtLinkEndPosition</definition>
        <argsstring>(Eigen::Vector3d relativeRangeVector, const bool isLinkEndReceiver)</argsstring>
        <name>calculatePartialOfDeclinationWrtLinkEndPosition</name>
        <param>
          <type>Eigen::Vector3d</type>
          <declname>relativeRangeVector</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isLinkEndReceiver</declname>
        </param>
        <briefdescription>
<para>Function to compute the derivative of (direct geometric) declination w.r.t. position of observer or observed object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the derivative of (direct geometric) declination w.r.t. position of observer or observed object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeRangeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector from observer to observed object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isLinkEndReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the partial is to be computed w.r.t. position of observer, false if it is the observed object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>derivative of (direct geometric) declination w.r.t. position of observer or observed object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/angularPositionPartial.cpp" line="37" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/angularPositionPartial.cpp" bodystart="37" bodyend="52" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/angularPositionPartial.h" declline="46" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d7/d5b/angularPositionPartial_8h_1a20ea6104c1659b8566650a32cc71d91a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 2, 3 &gt;</type>
        <definition>Eigen::Matrix&lt; double, 2, 3 &gt; tudat::observation_partials::calculatePartialOfAngularPositionWrtLinkEndPosition</definition>
        <argsstring>(Eigen::Vector3d relativeRangeVector, const bool isLinkEndReceiver)</argsstring>
        <name>calculatePartialOfAngularPositionWrtLinkEndPosition</name>
        <param>
          <type>Eigen::Vector3d</type>
          <declname>relativeRangeVector</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isLinkEndReceiver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the derivative of (direct geometric) right ascension and declination w.r.t. position of observer or observed object.</para>
<para>Function to compute the derivative of (direct geometric) right ascension and declination w.r.t. position of observer or observed object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeRangeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector from observer to observed object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isLinkEndReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the partial is to be computed w.r.t. position of observer, false if it is the observed object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Derivative of (direct geometric) right ascension and declination w.r.t. position of observer or observed object.</para>
</simplesect>
Function to compute the derivative of (direct geometric) right ascension and declination w.r.t. position of observer or observed object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/angularPositionPartial.cpp" line="56" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/angularPositionPartial.cpp" bodystart="56" bodyend="66" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/angularPositionPartial.h" declline="60" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d1/df4/firstOrderRelativisticPartial_8h_1aedba17f582e163e3c97376f1b4a86dc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::observation_partials::getPartialOfFirstOrderRelativisticLightTimeCorrectionWrtSingleGravitationalParameter</definition>
        <argsstring>(const double singleBodyLightTimeCorrection, const double bodyGravitationalParameter)</argsstring>
        <name>getPartialOfFirstOrderRelativisticLightTimeCorrectionWrtSingleGravitationalParameter</name>
        <param>
          <type>const double</type>
          <declname>singleBodyLightTimeCorrection</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to compute partial derivative of 1st order relativistic correction w.r.t. gravitational parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute partial derivative of 1st order relativistic correction w.r.t. gravitational parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>singleBodyLightTimeCorrection</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of light-time correction for which partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of gravitational parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of 1st order relativistic correction w.r.t. gravitational parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/firstOrderRelativisticPartial.cpp" line="20" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/firstOrderRelativisticPartial.cpp" bodystart="20" bodyend="24" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/firstOrderRelativisticPartial.h" declline="30" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d1/df4/firstOrderRelativisticPartial_8h_1ac5814abaa65561649f77ef75fc9ed748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::observation_partials::getPartialOfFirstOrderRelativisticLightTimeCorrectionWrtPpnParameterGamma</definition>
        <argsstring>(const double totalLightTimeCorrection, const double ppnParameterGamma)</argsstring>
        <name>getPartialOfFirstOrderRelativisticLightTimeCorrectionWrtPpnParameterGamma</name>
        <param>
          <type>const double</type>
          <declname>totalLightTimeCorrection</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ppnParameterGamma</declname>
        </param>
        <briefdescription>
<para>Function to compute partial derivative of 1st order relativistic correction w.r.t. PPN parameter gamma. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute partial derivative of 1st order relativistic correction w.r.t. PPN parameter gamma. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>totalLightTimeCorrection</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of light-time correction for which partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppnParameterGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of PPN parameter gamma. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of 1st order relativistic correction w.r.t. PPN parameter gamma. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/firstOrderRelativisticPartial.cpp" line="27" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/firstOrderRelativisticPartial.cpp" bodystart="27" bodyend="31" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/firstOrderRelativisticPartial.h" declline="40" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d1/d30/lightTimeCorrectionPartial_8h_1a5d6460f4f7c4fab00fc2781b2545335c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::function&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial_1a7a759098d3629d8d00a83648d81f9e9a" kindref="member">LightTimeCorrectionPartial::SingleOneWayRangePartialReturnType</ref>(const std::vector&lt; Eigen::Vector6d &gt; &amp;, const std::vector&lt; double &gt; &amp;) &gt;, bool &gt;</type>
        <definition>std::pair&lt; std::function&lt; LightTimeCorrectionPartial::SingleOneWayRangePartialReturnType(const std::vector&lt; Eigen::Vector6d &gt; &amp;, const std::vector&lt; double &gt; &amp;) &gt;, bool &gt; tudat::observation_partials::getLightTimeParameterPartialFunction</definition>
        <argsstring>(const estimatable_parameters::EstimatebleParameterIdentifier parameterId, const std::shared_ptr&lt; LightTimeCorrectionPartial &gt; lightTimeCorrectionPartial)</argsstring>
        <name>getLightTimeParameterPartialFunction</name>
        <param>
          <type>const estimatable_parameters::EstimatebleParameterIdentifier</type>
          <declname>parameterId</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">LightTimeCorrectionPartial</ref> &gt;</type>
          <declname>lightTimeCorrectionPartial</declname>
        </param>
        <briefdescription>
<para>Function to get the function returning the light-time correction partial for given correction partial and parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the function returning the light-time correction partial for given correction partial and parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameterId</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter for which partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrectionPartial</parametername>
</parameternamelist>
<parameterdescription>
<para>Partial object from which partial function is to be retrieved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair (with second entry boolean which is true if the partial is non-zero). First entry of pair gives partial and associated time as a function of link-end states and times. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/lightTimeCorrectionPartial.cpp" line="28" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/lightTimeCorrectionPartial.cpp" bodystart="28" bodyend="85" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/lightTimeCorrectionPartial.h" declline="82" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d4c/observationPartial_8h_1ab2df218e4d35ddcebaed1f97d37f8fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" kindref="compound">ObservationPartial</ref>&lt; ObservationSize &gt; &gt;</type>
        <definition>std::shared_ptr&lt; ObservationPartial&lt; ObservationSize &gt; &gt; tudat::observation_partials::createObservationPartialWrtLinkProperty</definition>
        <argsstring>(const observation_models::LinkEnds &amp;linkEnds, const observation_models::ObservableType observableType, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::VectorXd &gt; &gt; parameterToEstimate, const bool useBiasPartials=true)</argsstring>
        <name>createObservationPartialWrtLinkProperty</name>
        <param>
          <type>const observation_models::LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const observation_models::ObservableType</type>
          <declname>observableType</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::VectorXd &gt; &gt;</type>
          <declname>parameterToEstimate</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useBiasPartials</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to create partials of observation w.r.t. a link property. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create partials of observation w.r.t. a link property, e.g. a parameter that does not influence either link end&apos;s dynamics, only the observable itself, such as observation biases and clock parameters. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends of observable for which partial is to be made. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable for which partial is to be made. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter w.r.t. which the partial is to be taken </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useBiasPartials</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether this function should create partials w.r.t. observation bias parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object that computes the partial of the observation w.r.t. parameterToEstimate (nullptr if no dependency). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/observationPartial.h" line="482" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/observationPartial.h" bodystart="482" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="d7/d3d/oneWayDopplerPartial_8h_1a39e895fa8500db0083d05abd6879cd11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::observation_partials::computePartialOfUnitVectorWrtLinkEndTime</definition>
        <argsstring>(const Eigen::Vector3d &amp;vectorToReceiver, const Eigen::Vector3d &amp;unitVectorToReceiver, const double linkEndDistance, const Eigen::Vector3d linkEndVelocity)</argsstring>
        <name>computePartialOfUnitVectorWrtLinkEndTime</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>vectorToReceiver</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>unitVectorToReceiver</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>linkEndDistance</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>linkEndVelocity</declname>
        </param>
        <briefdescription>
<para>Function to computed the derivative of the unit vector from transmitter to receiver w.r.t. the observation time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to computed the derivative of the unit vector from transmitter to receiver w.r.t. the observation time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vectorToReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector from transmitter to receiver (unnormalized). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unitVectorToReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector from transmitter to receiver (normalized). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance between transmitter and receiver </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity of link end at which the time is varied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Derivative of the unit vector from transmitter to receiver w.r.t. the observation time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/oneWayDopplerPartial.cpp" line="20" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/oneWayDopplerPartial.cpp" bodystart="20" bodyend="28" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/oneWayDopplerPartial.h" declline="369" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d7/d3d/oneWayDopplerPartial_8h_1a7ee207d85aface46e367ada4685ded0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::observation_partials::computePartialOfProjectedLinkEndVelocityWrtAssociatedTime</definition>
        <argsstring>(const Eigen::Vector3d &amp;vectorToReceiver, const Eigen::Vector3d &amp;projectedLinkEndVelocity, const Eigen::Vector3d &amp;variableLinkEndVelocity, const Eigen::Vector3d &amp;projectedLinkEndAcceleration, const bool linkEndIsReceiver, const bool projectedLinkEndIsVariableLinkEnd=true)</argsstring>
        <name>computePartialOfProjectedLinkEndVelocityWrtAssociatedTime</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>vectorToReceiver</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>projectedLinkEndVelocity</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>variableLinkEndVelocity</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>projectedLinkEndAcceleration</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>linkEndIsReceiver</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>projectedLinkEndIsVariableLinkEnd</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to computed the derivative of velocity component along line-of-sight vector w.r.t. the observation time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to computed the derivative of velocity component along line-of-sight vector w.r.t. the observation time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vectorToReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector from transmitter to receiver (unnormalized). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>projectedLinkEndVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity vector of link end, projected along line-of-sight vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>variableLinkEndVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity of link end at which the time is varied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>projectedLinkEndAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration vector of link end, projected along line-of-sight vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndIsReceiver</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the link end at which partial is taken at receiver (if true) or transmitter (if false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>projectedLinkEndIsVariableLinkEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the link end at which partial is the reference link end for the observation (if false) or not (if true) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Derivative of velocity component along line-of-sight vector w.r.t. the observation time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/oneWayDopplerPartial.cpp" line="31" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/oneWayDopplerPartial.cpp" bodystart="31" bodyend="45" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/oneWayDopplerPartial.h" declline="389" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/d2a/positionPartials_8h_1a7af8f743e75502db363f1629a1208ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::observation_partials::calculatePartialOfPointPositionWrtBodyPosition</definition>
        <argsstring>()</argsstring>
        <name>calculatePartialOfPointPositionWrtBodyPosition</name>
        <briefdescription>
<para>Function to calculate the partial of position of a point on body wrt position of that body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate the partial of position of a point on or in a body wrt position of that body.</para>
<para>Function to calculate the partial of position of a point on body wrt position of that body, with both positions expressed in the same frame. <simplesect kind="return"><para>Requested partial (3x3 identity matrix) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/positionPartials.cpp" line="23" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/positionPartials.cpp" bodystart="23" bodyend="26" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/positionPartials.h" declline="40" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d9/d2a/positionPartials_8h_1a652abf819e2cf2f1e093d10bf322d9e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::observation_partials::calculatePartialOfPointPositionWrtBodyFixedPointPosition</definition>
        <argsstring>(const Eigen::Matrix3d &amp;rotationMatrixToInertialFrame)</argsstring>
        <name>calculatePartialOfPointPositionWrtBodyFixedPointPosition</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>rotationMatrixToInertialFrame</declname>
        </param>
        <briefdescription>
<para>Function to calculate the partial of position of a point on a body wrt its body-fixed position. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate the partial of position of a point on a body (expressed in a non-corotating, non-body fixed frame) wrt its body-fixed position, e.g. the partial of a ground station&apos;s inertial position wrt its body-fixed position. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rotationMatrixToInertialFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation matrix from body-fixed to inertial frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial of position of a point on a body wrt its body-fixed position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/positionPartials.cpp" line="29" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/positionPartials.cpp" bodystart="29" bodyend="33" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/positionPartials.h" declline="50" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1a1491980e5e414e430cfe233d99bd8e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameWrtConstantRotationRate</definition>
        <argsstring>(const Eigen::Quaterniond inertialBodyFixedToIntegrationFrame, const double rotationRate, const double timeSinceEpoch)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameWrtConstantRotationRate</name>
        <param>
          <type>const Eigen::Quaterniond</type>
          <declname>inertialBodyFixedToIntegrationFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rotationRate</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeSinceEpoch</declname>
        </param>
        <briefdescription>
<para>Function to calculate partial of a rotation matrix from a body-fixed to inertial frame w.r.t. a constant rotation rate. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. a constant rotation rate.</para>
<para>Function to calculate partial of a rotation matrix from a body-fixed to inertial frame, as computed by the SimpleRotationalEphemeris class, w.r.t. the constant rotation rate. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inertialBodyFixedToIntegrationFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation matrix at reference epoch </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationRate</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal rotation rate (about local z-axis) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeSinceEpoch</parametername>
</parameternamelist>
<parameterdescription>
<para>Elapsed time (in seconds) since reference epoch </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of rotation matrix w.r.t. rotation rate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="20" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="20" bodyend="34" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="42" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1a9d8c86698858970d01878850b126670e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtConstantRotationRate</definition>
        <argsstring>(const Eigen::Matrix3d currentRotationFromLocalToGlobalFrame, const double rotationRate, const double timeSinceEpoch)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtConstantRotationRate</name>
        <param>
          <type>const Eigen::Matrix3d</type>
          <declname>currentRotationFromLocalToGlobalFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rotationRate</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeSinceEpoch</declname>
        </param>
        <briefdescription>
<para>Function to calculate partial of a rotation matrix derivative (body-fixed to inertial) w.r.t. a constant rotation rate. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate partial of a rotation matrix derivative from a body-fixed to inertial frame, as computed by the SimpleRotationalEphemeris class, w.r.t. the constant rotation rate. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentRotationFromLocalToGlobalFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation matrix to inertial frame at reference epoch </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationRate</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal rotation rate (about local z-axis) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeSinceEpoch</parametername>
</parameternamelist>
<parameterdescription>
<para>Elapsed time (in seconds) since reference epoch </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of rotation matrix derivative w.r.t. rotation rate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="37" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="37" bodyend="45" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="55" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1af713280ca05cd810cd559663818c3012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::Matrix3d &gt;</type>
        <definition>std::vector&lt; Eigen::Matrix3d &gt; tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameWrtPoleOrientation</definition>
        <argsstring>(const Eigen::Vector3d initialOrientationAngles, const double rotationRate, const double timeSinceEpoch)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameWrtPoleOrientation</name>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>initialOrientationAngles</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rotationRate</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeSinceEpoch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. a constant pole right ascension and declination.</para>
<para>Function to calculate a partial of rotation matrix from a body-fixed to inertial frame, as computed by the SimpleRotationalEphemeris class, w.r.t. a constant pole right ascension and declination. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialOrientationAngles</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation Euler angles at reference epoch, in order right ascension, declination, prime meridian </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationRate</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation rate (about local z-axis) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeSinceEpoch</parametername>
</parameternamelist>
<parameterdescription>
<para>Elapsed time (in seconds) since reference epoch </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivatives of rotation matrix w.r.t. right ascension (entry 0) and declination (entry 1) of pole.</para>
</simplesect>
Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. a constant pole right ascension and declination </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="48" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="48" bodyend="81" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="70" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1a08278c6e18e3da0a1d5e09531b28782b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::Matrix3d &gt;</type>
        <definition>std::vector&lt; Eigen::Matrix3d &gt; tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtPoleOrientation</definition>
        <argsstring>(const Eigen::Vector3d initialOrientationAngles, const double rotationRate, const double timeSinceEpoch)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtPoleOrientation</name>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>initialOrientationAngles</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rotationRate</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeSinceEpoch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. a constant pole right ascension and declination.</para>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame, as computed by the SimpleRotationalEphemeris class, w.r.t. a constant pole right ascension and declination. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialOrientationAngles</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation Euler angles at reference epoch, in order right ascension, declination, prime meridian </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationRate</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation rate (about local z-axis) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeSinceEpoch</parametername>
</parameternamelist>
<parameterdescription>
<para>Elapsed time (in seconds) since reference epoch </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivatives of rotation matrix w.r.t. right ascension (entry 0) and declination (entry 1) of pole.</para>
</simplesect>
Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. a constant pole right ascension and declination. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="85" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="85" bodyend="98" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="85" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1a2b94d2c841d65261286b1854a013cba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::Matrix3d &gt;</type>
        <definition>std::vector&lt; Eigen::Matrix3d &gt; tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameWrtPeriodicSpinVariations</definition>
        <argsstring>(const std::shared_ptr&lt; ephemerides::PlanetaryOrientationAngleCalculator &gt; planetaryOrientationCalculator, const Eigen::Quaterniond &amp;rotationFromMeanOrbitToIcrf, const Eigen::Quaterniond &amp;polarMotionRotation, const double ephemerisTime)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameWrtPeriodicSpinVariations</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dc9/classtudat_1_1ephemerides_1_1PlanetaryOrientationAngleCalculator" kindref="compound">ephemerides::PlanetaryOrientationAngleCalculator</ref> &gt;</type>
          <declname>planetaryOrientationCalculator</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>rotationFromMeanOrbitToIcrf</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>polarMotionRotation</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ephemerisTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. the periodic spin variations.</para>
<para>Function to calculate a partial of rotation matrix from a body-fixed to inertial frame, as computed by the PlanetaryRotationModel class, w.r.t. the periodic spin variations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>planetaryOrientationCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to PlanetaryOrientationAngleCalculator, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationFromMeanOrbitToIcrf</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation From Mean Orbit To Icrf (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polarMotionRotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation due to Polar Motion at ephemeris time (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivatives of rotation matrix w.r.t. Phi_cj (entry 0), Phi_sj (entry 1) with j=1,...,4 .</para>
</simplesect>
Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. the periodic spin variations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="102" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="102" bodyend="141" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="100" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1a0c6d480962745e09570c5337468050d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::Matrix3d &gt;</type>
        <definition>std::vector&lt; Eigen::Matrix3d &gt; tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtPeriodicSpinVariations</definition>
        <argsstring>(const std::shared_ptr&lt; ephemerides::PlanetaryOrientationAngleCalculator &gt; planetaryOrientationCalculator, const Eigen::Quaterniond &amp;rotationFromMeanOrbitToIcrf, const Eigen::Quaterniond &amp;polarMotionRotation, const double ephemerisTime)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtPeriodicSpinVariations</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dc9/classtudat_1_1ephemerides_1_1PlanetaryOrientationAngleCalculator" kindref="compound">ephemerides::PlanetaryOrientationAngleCalculator</ref> &gt;</type>
          <declname>planetaryOrientationCalculator</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>rotationFromMeanOrbitToIcrf</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>polarMotionRotation</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ephemerisTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. the periodic spin variations.</para>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame, as computed by the PlanetaryRotationModel class, w.r.t. the periodic spin variations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>planetaryOrientationCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to PlanetaryOrientationAngleCalculator, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationFromMeanOrbitToIcrf</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation From Mean Orbit To Icrf (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polarMotionRotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation due to Polar Motion at ephemeris time (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivatives of rotation matrix w.r.t. Phi_cj (entry 0), Phi_sj (entry 1) with j=1,...,4 .</para>
</simplesect>
Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. the periodic spin variations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="145" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="145" bodyend="216" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="117" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1aaae3883ed084d67755ee684494179ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::Matrix3d &gt;</type>
        <definition>std::vector&lt; Eigen::Matrix3d &gt; tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameWrtPolarMotionAmplitude</definition>
        <argsstring>(const std::shared_ptr&lt; ephemerides::PlanetaryOrientationAngleCalculator &gt; planetaryOrientationCalculator, const Eigen::Quaterniond &amp;rotationFromMeanOrbitToIcrf, const Eigen::Quaterniond &amp;rotationFromBodyFixedToIntermediateInertialFrame, const double ephemerisTime)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameWrtPolarMotionAmplitude</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dc9/classtudat_1_1ephemerides_1_1PlanetaryOrientationAngleCalculator" kindref="compound">ephemerides::PlanetaryOrientationAngleCalculator</ref> &gt;</type>
          <declname>planetaryOrientationCalculator</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>rotationFromMeanOrbitToIcrf</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>rotationFromBodyFixedToIntermediateInertialFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ephemerisTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. polar motion amplitudes. Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. polar motion amplitudes.</para>
<para>Function to calculate a partial of rotation matrix from a body-fixed to inertial frame, as computed by the PlanetaryRotationModel class, w.r.t. polar motion amplitudes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>planetaryOrientationCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to PlanetaryOrientationAngleCalculator, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationFromMeanOrbitToIcrf</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation From Mean Orbit To Icrf (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationFromBodyFixedToIntermediateInertialFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation From Body Fixed To Intermediate Inertial Frame (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivatives of rotation matrix w.r.t. Phi_cj (entry 0), Phi_sj (entry 1) with j=1,...,4 .</para>
</simplesect>
Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. polar motion amplitude. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="220" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="220" bodyend="289" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="137" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1a9402fc4d0ce48b66b68be04478464971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::Matrix3d &gt;</type>
        <definition>std::vector&lt; Eigen::Matrix3d &gt; tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtPolarMotionAmplitude</definition>
        <argsstring>(const std::shared_ptr&lt; ephemerides::PlanetaryOrientationAngleCalculator &gt; planetaryOrientationCalculator, const Eigen::Quaterniond &amp;rotationFromMeanOrbitToIcrf, const double ephemerisTime)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtPolarMotionAmplitude</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dc9/classtudat_1_1ephemerides_1_1PlanetaryOrientationAngleCalculator" kindref="compound">ephemerides::PlanetaryOrientationAngleCalculator</ref> &gt;</type>
          <declname>planetaryOrientationCalculator</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>rotationFromMeanOrbitToIcrf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ephemerisTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. polar motion amplitudes.</para>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame, as computed by the PlanetaryRotationModel class, w.r.t. polar motion amplitudes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>planetaryOrientationCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to PlanetaryOrientationAngleCalculator, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationFromMeanOrbitToIcrf</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation From Mean Orbit To Icrf (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivatives of rotation matrix w.r.t. Phi_cj (entry 0), Phi_sj (entry 1) with j=1,...,4 .</para>
</simplesect>
Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. polar motion amplitude. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="293" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="293" bodyend="371" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="153" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1a8f6b933cc8c27d1feeb596bf67788d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameWrtCoreFactor</definition>
        <argsstring>(const std::shared_ptr&lt; ephemerides::PlanetaryOrientationAngleCalculator &gt; planetaryOrientationCalculator, const Eigen::Quaterniond &amp;rotationFromMeanOrbitToIcrf, const Eigen::Quaterniond &amp;polarMotionRotation, const double ephemerisTime)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameWrtCoreFactor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dc9/classtudat_1_1ephemerides_1_1PlanetaryOrientationAngleCalculator" kindref="compound">ephemerides::PlanetaryOrientationAngleCalculator</ref> &gt;</type>
          <declname>planetaryOrientationCalculator</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>rotationFromMeanOrbitToIcrf</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>polarMotionRotation</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ephemerisTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. core factor.</para>
<para>Function to calculate a partial of rotation matrix from a body-fixed to inertial frame, as computed by the PlanetaryRotationModel class, w.r.t. core factor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>planetaryOrientationCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to PlanetaryOrientationAngleCalculator, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationFromMeanOrbitToIcrf</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation From Mean Orbit To Icrf (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polarMotionRotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation due to Polar Motion at ephemeris time (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivatives of rotation matrix w.r.t. core factor .</para>
</simplesect>
Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. core factor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="375" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="375" bodyend="532" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="169" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1aafcd1055a00e30abb6859709142b0549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtCoreFactor</definition>
        <argsstring>(const std::shared_ptr&lt; ephemerides::PlanetaryOrientationAngleCalculator &gt; planetaryOrientationCalculator, const Eigen::Quaterniond &amp;rotationFromMeanOrbitToIcrf, const Eigen::Quaterniond &amp;polarMotionRotation, const double ephemerisTime)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtCoreFactor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dc9/classtudat_1_1ephemerides_1_1PlanetaryOrientationAngleCalculator" kindref="compound">ephemerides::PlanetaryOrientationAngleCalculator</ref> &gt;</type>
          <declname>planetaryOrientationCalculator</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>rotationFromMeanOrbitToIcrf</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>polarMotionRotation</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ephemerisTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. core factor.</para>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame, as computed by the PlanetaryRotationModel class, w.r.t. core factor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>planetaryOrientationCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to PlanetaryOrientationAngleCalculator, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationFromMeanOrbitToIcrf</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation From Mean Orbit To Icrf (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polarMotionRotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation due to Polar Motion at ephemeris time (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivatives of rotation matrix w.r.t. core factor.</para>
</simplesect>
Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. core factor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="536" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="536" bodyend="709" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="186" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1a7fb3e2f9dbcf36b2877fcf42fdd75a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameWrtFreeCoreNutationRate</definition>
        <argsstring>(const std::shared_ptr&lt; ephemerides::PlanetaryOrientationAngleCalculator &gt; planetaryOrientationCalculator, const Eigen::Quaterniond &amp;rotationFromMeanOrbitToIcrf, const Eigen::Quaterniond &amp;polarMotionRotation, const double ephemerisTime)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameWrtFreeCoreNutationRate</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dc9/classtudat_1_1ephemerides_1_1PlanetaryOrientationAngleCalculator" kindref="compound">ephemerides::PlanetaryOrientationAngleCalculator</ref> &gt;</type>
          <declname>planetaryOrientationCalculator</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>rotationFromMeanOrbitToIcrf</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>polarMotionRotation</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ephemerisTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. free core nutation.</para>
<para>Function to calculate a partial of rotation matrix from a body-fixed to inertial frame, as computed by the PlanetaryRotationModel class, w.r.t. free core nutation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>planetaryOrientationCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to PlanetaryOrientationAngleCalculator, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationFromMeanOrbitToIcrf</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation From Mean Orbit To Icrf (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polarMotionRotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation due to Polar Motion at ephemeris time (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivatives of rotation matrix w.r.t. free core nutation.</para>
</simplesect>
Function to calculate a partial of rotation matrix from a body-fixed to inertial frame w.r.t. free core nutation rate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="713" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="713" bodyend="879" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="203" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/dda/rotationMatrixPartial_8h_1aecc655d7ba9e69d0f964de9cbf3f1f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::observation_partials::calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtFreeCoreNutationRate</definition>
        <argsstring>(const std::shared_ptr&lt; ephemerides::PlanetaryOrientationAngleCalculator &gt; planetaryOrientationCalculator, const Eigen::Quaterniond &amp;rotationFromMeanOrbitToIcrf, const Eigen::Quaterniond &amp;polarMotionRotation, const double ephemerisTime)</argsstring>
        <name>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtFreeCoreNutationRate</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dc9/classtudat_1_1ephemerides_1_1PlanetaryOrientationAngleCalculator" kindref="compound">ephemerides::PlanetaryOrientationAngleCalculator</ref> &gt;</type>
          <declname>planetaryOrientationCalculator</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>rotationFromMeanOrbitToIcrf</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>polarMotionRotation</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ephemerisTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. free core nutation.</para>
<para>Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame, as computed by the PlanetaryRotationModel class, w.r.t. free core nutation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>planetaryOrientationCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to PlanetaryOrientationAngleCalculator, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationFromMeanOrbitToIcrf</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation From Mean Orbit To Icrf (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polarMotionRotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation due to Polar Motion at ephemeris time (Quaternion), </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivatives of rotation matrix w.r.t. core factor.</para>
</simplesect>
Function to calculate a partial of rotation matrix derivative from a body-fixed to inertial frame w.r.t. free core nutation rate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" line="883" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="883" bodyend="1067" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" declline="220" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d1/d22/createAngularPositionPartials_8h_1a9e247b969b693204d9d84eb406ae4727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/d15/classtudat_1_1observation__partials_1_1AngularPositionPartial" kindref="compound">AngularPositionPartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AngularPositionPartial &gt; tudat::observation_partials::createAngularPositionPartialWrtBodyPosition</definition>
        <argsstring>(const observation_models::LinkEnds angularPositionLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::string bodyToEstimate, const std::shared_ptr&lt; AngularPositionScaling &gt; angularPositionScaler, const std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt; &amp;lightTimeCorrectionPartialObjects=std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt;())</argsstring>
        <name>createAngularPositionPartialWrtBodyPosition</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>angularPositionLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/dda/classtudat_1_1observation__partials_1_1AngularPositionScaling" kindref="compound">AngularPositionScaling</ref> &gt;</type>
          <declname>angularPositionScaler</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrectionPartialObjects</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate angular position partial wrt a position of a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate angular position partial wrt a position of a body, for a single link ends (which must contain a transmitter and receiever linkEndType). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angularPositionLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which partials are to be calculated (i.e. for which angular position observation observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating angular position partial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body wrt position of which a partial is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angularPositionScaler</parametername>
</parameternamelist>
<parameterdescription>
<para>Object scale position partials to angular position partials for current link ends. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrectionPartialObjects</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Angular position partial object wrt a current position of a body (is nullptr if no parameter dependency exists). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createAngularPositionPartials.cpp" line="26" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createAngularPositionPartials.cpp" bodystart="26" bodyend="49" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAngularPositionPartials.h" declline="48" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d1/d22/createAngularPositionPartials_8h_1aedf4d707efb28743a27be343cbba1ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d9/d15/classtudat_1_1observation__partials_1_1AngularPositionPartial" kindref="compound">AngularPositionPartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AngularPositionPartial &gt; tudat::observation_partials::createAngularPositionPartialWrtParameter</definition>
        <argsstring>(const observation_models::LinkEnds angularPositionLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; ParameterType &gt; &gt; parameterToEstimate, const std::shared_ptr&lt; AngularPositionScaling &gt; angularPositionScaler, const std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt; &amp;lightTimeCorrectionPartialObjects=std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt;())</argsstring>
        <name>createAngularPositionPartialWrtParameter</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>angularPositionLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parameterToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/dda/classtudat_1_1observation__partials_1_1AngularPositionScaling" kindref="compound">AngularPositionScaling</ref> &gt;</type>
          <declname>angularPositionScaler</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrectionPartialObjects</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate angular position partial wrt a single parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate angular position partial wrt a single parameter, for a single link ends (which must contain a transmitter and receiever linkEndType). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ParameterType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of parameter (double for size 1, VectorXd for larger size). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angularPositionLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which angular position partials are to be calculated (i.e. for which angular position observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating angular position partial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object of current parameter that is to be estimated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angularPositionScaler</parametername>
</parameternamelist>
<parameterdescription>
<para>Object scale position partials to angular position partials for current link ends. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrectionPartialObjects</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Angular position partial object wrt a single parameter (is nullptr if no parameter dependency exists). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAngularPositionPartials.h" line="71" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAngularPositionPartials.h" bodystart="71" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="d1/d22/createAngularPositionPartials_8h_1a83c79603e14b81508d1dd97fcbf564c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; <ref refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" kindref="compound">ObservationPartial</ref>&lt; 2 &gt; &gt; &gt;, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt;</type>
        <definition>std::pair&lt; std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; ObservationPartial&lt; 2 &gt; &gt; &gt;,std::shared_ptr&lt; PositionPartialScaling &gt; &gt; tudat::observation_partials::createAngularPositionPartials</definition>
        <argsstring>(const observation_models::LinkEnds angularPositionLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &amp;lightTimeCorrections=std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt;())</argsstring>
        <name>createAngularPositionPartials</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>angularPositionLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrections</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate angular position partials and associated scaler for single link end. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate angular position partials and associated scaler for all parameters that are to be estimated, for a single link ends. The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angularPositionLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which angular position partials are to be calculated (i.e. for which angular position observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating angular position partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of observation partials with associated indices in complete vector of parameters that are estimated, representing all necessary angular position partials of a single link end, and <ref refid="d3/dda/classtudat_1_1observation__partials_1_1AngularPositionScaling" kindref="compound">AngularPositionScaling</ref>, object, used for scaling the position partial members of all AngularPositionPartials in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAngularPositionPartials.h" line="117" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAngularPositionPartials.h" bodystart="117" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="d1/d22/createAngularPositionPartials_8h_1a680cfde0460f81e372ca7866a6f98117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationTwoPartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationTwoPartialList,std::shared_ptr&lt; PositionPartialScaling &gt; &gt; &gt; tudat::observation_partials::createAngularPositionPartials</definition>
        <argsstring>(const std::vector&lt; observation_models::LinkEnds &gt; linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; &gt; &amp;lightTimeCorrections=std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; &gt;())</argsstring>
        <name>createAngularPositionPartials</name>
        <param>
          <type>const std::vector&lt; observation_models::LinkEnds &gt;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt; &gt; &amp;</type>
          <declname>lightTimeCorrections</declname>
          <defval>std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate angular position partials for all parameters that are to be estimated, for all sets of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate angular position partials for all parameters that are to be estimated, for all sets of link ends. The angular position partials are generated per set of link ends. The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of all link ends for which angular position partials are to be calculated (i.e. for which one-way angular position observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating angular position partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of SingleLinkObservationPartialList, representing all necessary angular position partials of a single link end, and <ref refid="d3/dda/classtudat_1_1observation__partials_1_1AngularPositionScaling" kindref="compound">AngularPositionScaling</ref>, object, used for scaling the position partial members of all AngularPositionPartials in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAngularPositionPartials.h" line="256" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAngularPositionPartials.h" bodystart="256" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1a89e2c0e87e44489cb6a02b4b6107cb19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; observation_models::LinkEndType, std::shared_ptr&lt; <ref refid="d4/d4e/classtudat_1_1observation__partials_1_1CartesianStatePartial" kindref="compound">CartesianStatePartial</ref> &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEndType, std::shared_ptr&lt; CartesianStatePartial &gt; &gt; tudat::observation_partials::createCartesianStatePartialsWrtBodyState</definition>
        <argsstring>(const observation_models::LinkEnds &amp;linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::string bodyToEstimate)</argsstring>
        <name>createCartesianStatePartialsWrtBodyState</name>
        <param>
          <type>const observation_models::LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to return partial(s) of position of reference point w.r.t state of a single body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to return partial(s) of position of ground station(s) w.r.t. state of a single body.</para>
<para>Function to return partial(s) of position of reference point w.r.t state of a single body. A set of link ends and the name of the body wrt the position of which the partials are to be created. A map is returned, with the LinkEndType as key and pointer to state partial as value. An entry for the map is created for each link end which corresponds to the body wrt the position of which the partial is to be taken. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of link ends, for each entry of this map, it is checked whether the body corresponds to the requested body and, if so, a partial object is created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects, used in the creation of the partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body wrt the position of which partials are to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of position partial objects, one entry for each link end corresponding to the bodyToEstimate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" line="22" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" bodystart="22" bodyend="48" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" declline="47" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1a9f99df4f26caf32fe620fe0ddb44c98e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; observation_models::LinkEndType, std::shared_ptr&lt; <ref refid="d4/d4e/classtudat_1_1observation__partials_1_1CartesianStatePartial" kindref="compound">CartesianStatePartial</ref> &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEndType, std::shared_ptr&lt; CartesianStatePartial &gt; &gt; tudat::observation_partials::createCartesianStatePartialsWrtBodyRotationalState</definition>
        <argsstring>(const observation_models::LinkEnds &amp;linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::string &amp;bodyToEstimate)</argsstring>
        <name>createCartesianStatePartialsWrtBodyRotationalState</name>
        <param>
          <type>const observation_models::LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to return partial(s) of position of ground station(s) w.r.t. rotational state of a single body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to return partial(s) of position of reference point w.r.t rotational state of a single body. A set of link ends and the name of the body wrt the position of which the partials are to be created. A map is returned, with the LinkEndType as key and pointer to state partial as value. An entry for the map is created for each link end which corresponds to the body wrt the position of which the partial is to be taken. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of link ends, for each entry of this map, it is checked whether the body corresponds to the requested body and, if so, a partial object is created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects, used in the creation of the partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body wrt the position of which partials are to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of position partial objects, one entry for each link end corresponding to the bodyToEstimate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" line="51" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" bodystart="51" bodyend="94" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" declline="64" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1aab97cbf595467fc3888011dab3883f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; observation_models::LinkEndType, std::shared_ptr&lt; <ref refid="d4/d4e/classtudat_1_1observation__partials_1_1CartesianStatePartial" kindref="compound">CartesianStatePartial</ref> &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEndType, std::shared_ptr&lt; CartesianStatePartial &gt; &gt; tudat::observation_partials::createCartesianStatePartialsWrtParameter</definition>
        <argsstring>(const observation_models::LinkEnds linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; double &gt; &gt; parameterToEstimate)</argsstring>
        <name>createCartesianStatePartialsWrtParameter</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; double &gt; &gt;</type>
          <declname>parameterToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to return partial object(s) of position of reference point w.r.t. a (double) parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to return partial object(s) of position of reference point w.r.t. a (double) parameter. A set of link ends and parameter object wrt which the partials are to be created. A map is returned, with the LinkEndType as key and pointer to position partial as value. An entry for the map is created for each entry of linkEnds for which there is a direct dependency between its position and the parameter in question. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of link ends, for each entry of this map, it is checked whether a there is a direct dependency between its position and the parameter in question. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects, used in the creation of the partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter object wrt which partials are to be calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of position partial objects, one entry for each link end corresponding to the parameterToEstimate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" line="97" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" bodystart="97" bodyend="174" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" declline="81" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1af352dc8b16624131d05b92bad50c8f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; observation_models::LinkEndType, std::shared_ptr&lt; <ref refid="d4/d4e/classtudat_1_1observation__partials_1_1CartesianStatePartial" kindref="compound">CartesianStatePartial</ref> &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEndType, std::shared_ptr&lt; CartesianStatePartial &gt; &gt; tudat::observation_partials::createCartesianStatePartialsWrtParameter</definition>
        <argsstring>(const observation_models::LinkEnds linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::VectorXd &gt; &gt; parameterToEstimate)</argsstring>
        <name>createCartesianStatePartialsWrtParameter</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::VectorXd &gt; &gt;</type>
          <declname>parameterToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to return partial object(s) of position of reference point w.r.t. a (vector) parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to return partial(s) of position of ground station(s) w.r.t. a (vector) parameter.</para>
<para>Function to return partial object(s) of position of reference point w.r.t. a (vector) parameter. A set of link ends and parameter object wrt which the partials are to be created. A map is returned, with the LinkEndType as key and pointer to position partial as value. An entry for the map is created for each entry of linkEnds for which there is a direct dependency between its position and the parameter in question. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of link ends, for each entry of this map, it is checked whether a there is a direct dependency between its position and the parameter in question. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects, used in the creation of the partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter object wrt which partials are to be calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of position partial objects, one entry for each link end corresponding to the parameterToEstimate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" line="177" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" bodystart="177" bodyend="290" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" declline="98" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1a860bdf3fc81942850b6b78ede8b56185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial" kindref="compound">RotationMatrixPartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationMatrixPartial &gt; tudat::observation_partials::createRotationMatrixPartialsWrtTranslationalState</definition>
        <argsstring>(const std::shared_ptr&lt; simulation_setup::Body &gt; currentBody)</argsstring>
        <name>createRotationMatrixPartialsWrtTranslationalState</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>currentBody</declname>
        </param>
        <briefdescription>
<para>Function to create partial object(s) of rotation matrix wrt translational state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create partial object(s) of rotation matrix wrt a state parameter <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Body for which partial is to be created (must have a synchronous rotation model for output to be non-null) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotation matrix partial object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" line="293" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" bodystart="293" bodyend="305" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" declline="109" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1ad8203e0be6e5f6f396922df5f2ac15b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial" kindref="compound">RotationMatrixPartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationMatrixPartial &gt; tudat::observation_partials::createRotationMatrixPartialsWrtStateParameter</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::Matrix&lt; InitialStateParameterType, Eigen::Dynamic, 1 &gt; &gt; &gt; parameterToEstimate)</argsstring>
        <name>createRotationMatrixPartialsWrtStateParameter</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::Matrix&lt; InitialStateParameterType, Eigen::Dynamic, 1 &gt; &gt; &gt;</type>
          <declname>parameterToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to create partial object(s) of rotation matrix wrt a state parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create partial object(s) of rotation matrix wrt a state parameter <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects, used in the creation of the partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter object wrt which partials are to be calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotation matrix partial object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" line="120" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" bodystart="120" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1aabf1438632a460f7f06a510c3ebebf1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial" kindref="compound">RotationMatrixPartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationMatrixPartial &gt; tudat::observation_partials::createRotationMatrixPartialsWrtParameter</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; double &gt; &gt; parameterToEstimate)</argsstring>
        <name>createRotationMatrixPartialsWrtParameter</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; double &gt; &gt;</type>
          <declname>parameterToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to create partial object(s) of rotation matrix wrt a (double) parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create partial object(s) of rotation matrix from a body-fixed to inertial frame wrt a (double) parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects, used in the creation of the partial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter wrt which rotation matrix partial object is to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested rotation matrix partial object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" line="308" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" bodystart="308" bodyend="378" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" declline="162" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1a3efc79dc06cdd1fb6045de94a13e3d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial" kindref="compound">RotationMatrixPartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationMatrixPartial &gt; tudat::observation_partials::createRotationMatrixPartialsWrtParameter</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::VectorXd &gt; &gt; parameterToEstimate)</argsstring>
        <name>createRotationMatrixPartialsWrtParameter</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::VectorXd &gt; &gt;</type>
          <declname>parameterToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to create partial object(s) of rotation matrix wrt a (vector) parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create partial object(s) of rotation matrix from a body-fixed to inertial frame wrt a (vector) parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects, used in the creation of the partial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter wrt which rotation matrix partial object is to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested rotation matrix partial object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" line="381" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" bodystart="381" bodyend="463" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" declline="173" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1acf70c0ec2fccef2ed356fab287a1ceb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>RotationMatrixPartialNamedList</type>
        <definition>RotationMatrixPartialNamedList tudat::observation_partials::createRotationMatrixPartials</definition>
        <argsstring>(const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const std::string &amp;bodyName, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createRotationMatrixPartials</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to create rotation matrix partial objects for all rotation model parameters of given body in given set of parameters.</para>
<para>Function to create rotation matrix partial objects for all rotation model parameters of given body in given set of parameters. All parameter objects of given EstimatableParameterSet are checked whether they are firstly a property of the requested body, and secondly if they represent a property of the rotation from the body-fixed to base frame. If both conditions are met, a partial is created and added to the return list. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of all parameters which are to be estimated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which to create partials of rotation from body-fixed to base frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects, used in the creation of the partials. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotation matrix partial objects for all rotation model parameters of bodyName in parametersToEstimate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" line="190" column="32" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" bodystart="190" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1a5c6c119201eb4dab7381182bfe0e385a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/de9/classtudat_1_1observation__partials_1_1PositionObervationPartial" kindref="compound">PositionObervationPartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; PositionObervationPartial &gt; tudat::observation_partials::createPositionObservablePartialWrtPosition</definition>
        <argsstring>(const observation_models::LinkEnds linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::string bodyToEstimate, const std::shared_ptr&lt; PositionObservationScaling &gt; positionObservableScaler)</argsstring>
        <name>createPositionObservablePartialWrtPosition</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d1b/classtudat_1_1observation__partials_1_1PositionObservationScaling" kindref="compound">PositionObservationScaling</ref> &gt;</type>
          <declname>positionObservableScaler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to create an objects that computes the partial derivatives of a three-dimensional position observable w.r.t. the position of a body.</para>
<para>Function to create an objects that computes the partial derivatives of a three-dimensional position observable w.r.t. the position of a body. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of link ends used for observation model of three-dimensional position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies that comprise the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body w.r.t. the position of which a partial is to be compured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positionObservableScaler</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that scales position partial to observable partial. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Single object that computes partial of given observable w.r.t. given parameter.</para>
</simplesect>
Function to create an objects that computes the partial derivatives of a three-dimensional position observable w.r.t. the position of a body. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" line="467" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" bodystart="467" bodyend="485" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" declline="288" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1a89a87a1f4a9bd187e42b311b2197d331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt;</type>
        <definition>std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; tudat::observation_partials::createPositionObservablePartials</definition>
        <argsstring>(const observation_models::LinkEnds positionObservableLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate)</argsstring>
        <name>createPositionObservablePartials</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>positionObservableLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to create a list of objects that compute the partial derivatives of a three-dimensional position observable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a list of objects that compute the partial derivatives of a three-dimensional position observable A single object is created for each parameter w.r.t. whih a partial derivative is to be taken. Note that the three-dimensional position observable is only sensitive to the position of the body under observation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positionObservableLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of link ends used for observation model of three-dimensional position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies that comprise the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters that is to be estimated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair, first entry is map (key is start index and size of parameter; value is partial object), secod entry is scaling object to be used for all partials. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" line="307" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" bodystart="307" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1a47dcd500ca471a1ff213e9577e024072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEnds,std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; &gt; tudat::observation_partials::createPositionObservablePartials</definition>
        <argsstring>(const std::vector&lt; observation_models::LinkEnds &gt; linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate)</argsstring>
        <name>createPositionObservablePartials</name>
        <param>
          <type>const std::vector&lt; observation_models::LinkEnds &gt;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to create a list of objects that compute the partial derivatives of a list of 3-dimensional position observable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a list of objects that compute the partial derivatives of a list of 3-dimensional position observable A single object is created for each parameter w.r.t. whih a partial derivative is to be taken, separately for each set of link ends. Note that the three-dimensional position observable is only sensitive to the position of the body under observation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>List of sets of link ends used for observation models of three-dimensional position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies that comprise the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters that is to be estimated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each set of link ends a single pair, containing: First entry is map (key is start index and size of parameter; value is partial object), secod entry is scaling object to be used for all partials. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" line="372" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" bodystart="372" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1ab8cc5d46128a0c77aac6daab00990887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/dbd/classtudat_1_1observation__partials_1_1VelocityObervationPartial" kindref="compound">VelocityObervationPartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; VelocityObervationPartial &gt; tudat::observation_partials::createVelocityObservablePartialWrtVelocity</definition>
        <argsstring>(const observation_models::LinkEnds linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::string bodyToEstimate, const std::shared_ptr&lt; VelocityObservationScaling &gt; velocityObservableScaler)</argsstring>
        <name>createVelocityObservablePartialWrtVelocity</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/ddb/classtudat_1_1observation__partials_1_1VelocityObservationScaling" kindref="compound">VelocityObservationScaling</ref> &gt;</type>
          <declname>velocityObservableScaler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to create an objects that computes the partial derivatives of a three-dimensional velocity observable w.r.t. the velocity of a body.</para>
<para>Function to create an objects that computes the partial derivatives of a three-dimensional velocity observable w.r.t. the velocity of a body. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of link ends used for observation model of three-dimensional velocity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies that comprise the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body w.r.t. the velocity of which a partial is to be compured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocityObservableScaler</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that scales velocity partial to observable partial. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Single object that computes partial of given observable w.r.t. given parameter.</para>
</simplesect>
Function to create an objects that computes the partial derivatives of a three-dimensional position observable w.r.t. the Velocity of a body. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" line="489" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createCartesianStatePartials.cpp" bodystart="489" bodyend="507" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" declline="404" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1aeaf8a28beebd4fde375f182c067880b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt;</type>
        <definition>std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; tudat::observation_partials::createVelocityObservablePartials</definition>
        <argsstring>(const observation_models::LinkEnds velocityObservableLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate)</argsstring>
        <name>createVelocityObservablePartials</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>velocityObservableLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to create a list of objects that compute the partial derivatives of a three-dimensional velocity observable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a list of objects that compute the partial derivatives of a three-dimensional velocity observable A single object is created for each parameter w.r.t. whih a partial derivative is to be taken. Note that the three-dimensional velocity observable is only sensitive to the velocity of the body under observation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocityObservableLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of link ends used for observation model of three-dimensional velocity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies that comprise the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters that is to be estimated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair, first entry is map (key is start index and size of parameter; value is partial object), secod entry is scaling object to be used for all partials. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" line="423" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" bodystart="423" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="dc/d23/createCartesianStatePartials_8h_1a5b66ef87736767592ea729ce96757d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEnds,std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; &gt; tudat::observation_partials::createVelocityObservablePartials</definition>
        <argsstring>(const std::vector&lt; observation_models::LinkEnds &gt; linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate)</argsstring>
        <name>createVelocityObservablePartials</name>
        <param>
          <type>const std::vector&lt; observation_models::LinkEnds &gt;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to create a list of objects that compute the partial derivatives of a list of 3-dimensional velocity observable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a list of objects that compute the partial derivatives of a list of 3-dimensional velocity observable A single object is created for each parameter w.r.t. whih a partial derivative is to be taken, separately for each set of link ends. Note that the three-dimensional velocity observable is only sensitive to the velocity of the body under observation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>List of sets of link ends used for observation models of three-dimensional velocity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies that comprise the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters that is to be estimated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For each set of link ends a single pair, containing: First entry is map (key is start index and size of parameter; value is partial object), secod entry is scaling object to be used for all partials. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" line="491" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createCartesianStatePartials.h" bodystart="491" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="d4/d24/createDifferencedOneWayRangeRatePartials_8h_1a7447589dcf60ae9b3416966cc3ff628d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; PerLinkEndPerLightTimeSolutionCorrections, PerLinkEndPerLightTimeSolutionCorrections &gt;</type>
        <definition>std::pair&lt; PerLinkEndPerLightTimeSolutionCorrections, PerLinkEndPerLightTimeSolutionCorrections &gt; tudat::observation_partials::splitOneWayRangeRateLightTimeCorrectionsBetweenArcs</definition>
        <argsstring>(const PerLinkEndPerLightTimeSolutionCorrections &amp;combinedCorrections)</argsstring>
        <name>splitOneWayRangeRateLightTimeCorrectionsBetweenArcs</name>
        <param>
          <type>const PerLinkEndPerLightTimeSolutionCorrections &amp;</type>
          <declname>combinedCorrections</declname>
        </param>
        <briefdescription>
<para>Function to split the total list of light-time corrections for one-way differenced range rate into list for either arc. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to split the total list of light-time corrections for one-way differenced range rate into list for either arc. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>combinedCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>Total list of light-time corrections for one-way differenced range rate, per link end. First vector in map entry should always have size two: entry 0 is for arc start, entry 1 for arc end. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of light-time corrections for two arcs of one-way differenced range rate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createDifferencedOneWayRangeRatePartials.cpp" line="21" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createDifferencedOneWayRangeRatePartials.cpp" bodystart="21" bodyend="56" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDifferencedOneWayRangeRatePartials.h" declline="43" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d24/createDifferencedOneWayRangeRatePartials_8h_1a30a8ce5357488bd8695e4a46047d0a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEnds,std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; &gt; tudat::observation_partials::createDifferencedOneWayRangeRatePartials</definition>
        <argsstring>(const std::vector&lt; observation_models::LinkEnds &gt; linkEnds, const simulation_setup::SystemOfBodies bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const PerLinkEndPerLightTimeSolutionCorrections &amp;lightTimeCorrections=PerLinkEndPerLightTimeSolutionCorrections())</argsstring>
        <name>createDifferencedOneWayRangeRatePartials</name>
        <param>
          <type>const std::vector&lt; observation_models::LinkEnds &gt;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref></type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const PerLinkEndPerLightTimeSolutionCorrections &amp;</type>
          <declname>lightTimeCorrections</declname>
          <defval>PerLinkEndPerLightTimeSolutionCorrections()</defval>
        </param>
        <briefdescription>
<para>Function to generate one-way differenced range partials for all parameters that are to be estimated, for all sets of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way differenced range partials for all parameters that are to be estimated, for all sets of link ends The one-way differenced range partials are generated per set of link ends, using partials for the range of the arc start and arc end links The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of all link ends for which partials are to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies that consitute the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of SingleLinkObservationPartialList, representing all necessary one-way differenced range partials of a single link end, and scaling, object, used for scaling the position partial members of all partial in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDifferencedOneWayRangeRatePartials.h" line="63" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDifferencedOneWayRangeRatePartials.h" bodystart="63" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="df/dc7/createDopplerPartials_8h_1af0e66d6939d73c6430732f94bd9d2097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" kindref="compound">ObservationPartial</ref>&lt; 1 &gt; &gt;</type>
        <definition>std::shared_ptr&lt; ObservationPartial&lt; 1 &gt; &gt; tudat::observation_partials::createOneWayDopplerPartialWrtParameter</definition>
        <argsstring>(const observation_models::LinkEnds oneWayDopplerLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; ParameterType &gt; &gt; parameterToEstimate, const std::shared_ptr&lt; OneWayDopplerScaling &gt; oneWayDopplerScaler, const std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt; &amp;lightTimeCorrectionPartialObjects=std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt;())</argsstring>
        <name>createOneWayDopplerPartialWrtParameter</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>oneWayDopplerLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parameterToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d2/df1/classtudat_1_1observation__partials_1_1OneWayDopplerScaling" kindref="compound">OneWayDopplerScaling</ref> &gt;</type>
          <declname>oneWayDopplerScaler</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrectionPartialObjects</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate one-way doppler partial wrt a single parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way doppler partial wrt a single parameter, for a single link ends (which must contain a transmitter and receiever linkEndType). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ParameterType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of parameter (double for size 1, VectorXd for larger size). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oneWayDopplerLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which one-way doppler partials are to be calculated (i.e. for which one-way doppler observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating one-way doppler partial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object of current parameter that is to be estimated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oneWayDopplerScaler</parametername>
</parameternamelist>
<parameterdescription>
<para>Object scale position partials to one-way doppler partials for current link ends. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrectionPartialObjects</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One-way doppler partial object wrt a single parameter (is nullptr if no parameter dependency exists). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" line="55" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" bodystart="55" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="df/dc7/createDopplerPartials_8h_1a284ed3d52e9785d1fe0e96703a118537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/de9/classtudat_1_1observation__partials_1_1OneWayDopplerPartial" kindref="compound">OneWayDopplerPartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; OneWayDopplerPartial &gt; tudat::observation_partials::createOneWayDopplerPartialWrtBodyState</definition>
        <argsstring>(const observation_models::LinkEnds oneWayDopplerLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::string bodyToEstimate, const std::shared_ptr&lt; PositionPartialScaling &gt; oneWayDopplerScaler, const std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt; &amp;lightTimeCorrectionPartialObjects=std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt;())</argsstring>
        <name>createOneWayDopplerPartialWrtBodyState</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>oneWayDopplerLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt;</type>
          <declname>oneWayDopplerScaler</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrectionPartialObjects</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate one-way doppler partial wrt a position of a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way doppler partial wrt an initial position of a body.</para>
<para>Function to generate one-way doppler partial wrt a position of a body, for a single link ends (which must contain a transmitter and receiever linkEndType). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oneWayDopplerLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which one-way doppler partials are to be calculated (i.e. for which one-way doppler observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating one-way doppler partial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body wrt position of which a partial is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oneWayDopplerScaler</parametername>
</parameternamelist>
<parameterdescription>
<para>Object scale position partials to one-way doppler partials for current link ends. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrectionPartialObjects</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One-way doppler partial object wrt a current position of a body (is nullptr if no parameter dependency exists). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createDopplerPartials.cpp" line="28" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createDopplerPartials.cpp" bodystart="28" bodyend="58" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" declline="103" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dc7/createDopplerPartials_8h_1a174f52265f08efafed8c82de2f21f884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d2/d34/classtudat_1_1observation__partials_1_1OneWayDopplerProperTimeComponentScaling" kindref="compound">OneWayDopplerProperTimeComponentScaling</ref> &gt;</type>
        <definition>std::shared_ptr&lt; OneWayDopplerProperTimeComponentScaling &gt; tudat::observation_partials::createDopplerProperTimePartials</definition>
        <argsstring>(const std::shared_ptr&lt; observation_models::DopplerProperTimeRateInterface &gt; dopplerProperTimeInterface, const observation_models::LinkEnds oneWayDopplerLinkEnds, const observation_models::LinkEndType linkEndAtWhichPartialIsComputed)</argsstring>
        <name>createDopplerProperTimePartials</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/da8/classtudat_1_1observation__models_1_1DopplerProperTimeRateInterface" kindref="compound">observation_models::DopplerProperTimeRateInterface</ref> &gt;</type>
          <declname>dopplerProperTimeInterface</declname>
        </param>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>oneWayDopplerLinkEnds</declname>
        </param>
        <param>
          <type>const observation_models::LinkEndType</type>
          <declname>linkEndAtWhichPartialIsComputed</declname>
        </param>
        <briefdescription>
<para>Function to create an object that computes the scaling of the state partials to obtain proper time rate partials. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an object that computes the scaling of the state partials to obtain proper time rate partials. A single scaling object is used for a single link end of the one-way Doppler partials <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dopplerProperTimeInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that is used to computed proper-time rate in one-way Doppler modelkkl </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oneWayDopplerLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends of observable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndAtWhichPartialIsComputed</parametername>
</parameternamelist>
<parameterdescription>
<para>Link end for which proper-time partials are to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Scaling object for proper-time rate partials </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createDopplerPartials.cpp" line="61" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createDopplerPartials.cpp" bodystart="61" bodyend="88" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" declline="121" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dc7/createDopplerPartials_8h_1a584697d2a140d626c77d60d8f867ae15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt;</type>
        <definition>std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; tudat::observation_partials::createOneWayDopplerPartials</definition>
        <argsstring>(const observation_models::LinkEnds oneWayDopplerLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const std::shared_ptr&lt; observation_models::DopplerProperTimeRateInterface &gt; transmitterDopplerProperTimeInterface, const std::shared_ptr&lt; observation_models::DopplerProperTimeRateInterface &gt; receiverDopplerProperTimeInterface, const std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &amp;lightTimeCorrections=std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt;(), const bool useBiasPartials=true)</argsstring>
        <name>createOneWayDopplerPartials</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>oneWayDopplerLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/da8/classtudat_1_1observation__models_1_1DopplerProperTimeRateInterface" kindref="compound">observation_models::DopplerProperTimeRateInterface</ref> &gt;</type>
          <declname>transmitterDopplerProperTimeInterface</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/da8/classtudat_1_1observation__models_1_1DopplerProperTimeRateInterface" kindref="compound">observation_models::DopplerProperTimeRateInterface</ref> &gt;</type>
          <declname>receiverDopplerProperTimeInterface</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrections</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>useBiasPartials</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to generate one-way doppler partials and associated scaler for single link end. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way doppler partials and associated scaler for all parameters that are to be estimated, for a single link ends. The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oneWayDopplerLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which one-way doppler partials are to be calculated (i.e. for which one-way doppler observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating one-way doppler partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitterDopplerProperTimeInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Proper time rate calculator for transmitter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiverDopplerProperTimeInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Proper time rate calculator for receiver </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useBiasPartials</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether this function should create partials w.r.t. observation bias parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of observation partials with associated indices in complete vector of parameters that are estimated, representing all necessary one-way doppler partials of a single link end, and <ref refid="d2/df1/classtudat_1_1observation__partials_1_1OneWayDopplerScaling" kindref="compound">OneWayDopplerScaling</ref>, object, used for scaling the position partial members of all OneWayDopplerPartials in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" line="146" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" bodystart="146" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="df/dc7/createDopplerPartials_8h_1ad14597133943046fe90670971937970e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
          </param>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationPartialList,std::shared_ptr&lt; PositionPartialScaling &gt; &gt; &gt; tudat::observation_partials::createOneWayDopplerPartials</definition>
        <argsstring>(const std::map&lt; observation_models::LinkEnds, std::shared_ptr&lt; observation_models::ObservationModel&lt; 1, ObservationScalarType, TimeType &gt; &gt; &gt; observationModelList, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ObservationScalarType &gt; &gt; parametersToEstimate, const bool useBiasPartials=true)</argsstring>
        <name>createOneWayDopplerPartials</name>
        <param>
          <type>const std::map&lt; observation_models::LinkEnds, std::shared_ptr&lt; <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">observation_models::ObservationModel</ref>&lt; 1, ObservationScalarType, TimeType &gt; &gt; &gt;</type>
          <declname>observationModelList</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ObservationScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useBiasPartials</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to generate one-way doppler partials for all parameters that are to be estimated, for all sets of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way doppler partials for all parameters that are to be estimated, for all sets of link ends. The one-way doppler partials are generated per set of link ends. The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationModelList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all observation models (must be one-way Doppler) for which partials are to be created, with map key being the link ends </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating one-way doppler partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useBiasPartials</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether this function should create partials w.r.t. observation bias parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of SingleLinkObservationPartialList, representing all necessary one-way doppler partials of a single link end, and <ref refid="d2/df1/classtudat_1_1observation__partials_1_1OneWayDopplerScaling" kindref="compound">OneWayDopplerScaling</ref>, object, used for scaling the position partial members of all OneWayDopplerPartials in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" line="306" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" bodystart="306" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="df/dc7/createDopplerPartials_8h_1a9f69895105a9d87a16b43fddab5f9de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt;</type>
        <definition>std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; tudat::observation_partials::createTwoWayDopplerPartials</definition>
        <argsstring>(const observation_models::LinkEnds &amp;twoWayDopplerLinkEnds, const std::shared_ptr&lt; observation_models::TwoWayDopplerObservationModel&lt; ParameterType, TimeType &gt; &gt; twoWayObservationModel, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; lightTimeCorrections=std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt;())</argsstring>
        <name>createTwoWayDopplerPartials</name>
        <param>
          <type>const observation_models::LinkEnds &amp;</type>
          <declname>twoWayDopplerLinkEnds</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d67/classtudat_1_1observation__models_1_1TwoWayDopplerObservationModel" kindref="compound">observation_models::TwoWayDopplerObservationModel</ref>&lt; ParameterType, TimeType &gt; &gt;</type>
          <declname>twoWayObservationModel</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt;</type>
          <declname>lightTimeCorrections</declname>
          <defval>std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate tow-way Doppler partials and associated scaler for single link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate tow-way Doppler partials and associated scaler for all parameters that are to be estimated, for a single link ends set. The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. The tow-way Doppler partials are built from one-way Doppler partials of the constituent links <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>twoWayDopplerLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which tow-way Doppler partials are to be calculated (i.e. for which tow-way Doppler observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>twoWayObservationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation model for two-way Doppler for which partials are to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating tow-way Doppler partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default). First vector entry is index of link in 2-way link ends (up and downlink), second vector is list of light-time corrections. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of observation partials with associated indices in complete vector of parameters that are estimated, representing all necessary two-way Doppler partials of a single link end, and <ref refid="dd/dad/classtudat_1_1observation__partials_1_1TwoWayDopplerScaling" kindref="compound">TwoWayDopplerScaling</ref>, object, used for scaling the position partial members of all TwoWayDopplerPartials in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" line="379" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" bodystart="379" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="df/dc7/createDopplerPartials_8h_1ac13db26324884cfbb87500c3bb7206e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; &gt; tudat::observation_partials::createTwoWayDopplerPartials</definition>
        <argsstring>(const std::map&lt; observation_models::LinkEnds, std::shared_ptr&lt; observation_models::ObservationModel&lt; 1, ParameterType, TimeType &gt; &gt; &gt; observationModelList, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; &gt; &amp;lightTimeCorrections=std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; &gt;())</argsstring>
        <name>createTwoWayDopplerPartials</name>
        <param>
          <type>const std::map&lt; observation_models::LinkEnds, std::shared_ptr&lt; <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">observation_models::ObservationModel</ref>&lt; 1, ParameterType, TimeType &gt; &gt; &gt;</type>
          <declname>observationModelList</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt; &gt; &amp;</type>
          <declname>lightTimeCorrections</declname>
          <defval>std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate two-way Doppler partials for all parameters that are to be estimated, for all sets of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate two-way Doppler partials for all parameters that are to be estimated, for all sets of link ends. The two-way Doppler partials are generated per set of link ends. The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. The two-way Doppler partials are built from one-way range partials of the constituent links <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationModelList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all two-way Doppler models (as a function of LinkEnds) for which partials are to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating two-way Doppler partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction used (empty by default). First vector entry is index of link in 2-way link ends (up and downlink), second vector is list of light-time corrections. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of SingleLinkObservationPartialList, representing all necessary two-way Doppler partials of a single link end, and <ref refid="dd/dad/classtudat_1_1observation__partials_1_1TwoWayDopplerScaling" kindref="compound">TwoWayDopplerScaling</ref>, object, used for scaling the position partial members of all TwoWayDopplerPartials in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" line="584" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createDopplerPartials.h" bodystart="584" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="dd/d33/createEulerAngleObservationPartials_8h_1afb60d5ed29d78c1e3808aa915f870bee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" kindref="compound">ObservationPartial</ref>&lt; 3 &gt; &gt;</type>
        <definition>std::shared_ptr&lt; ObservationPartial&lt; 3 &gt; &gt; tudat::observation_partials::createEulerAngleObservablePartialWrtCurrentRotationalState</definition>
        <argsstring>(const estimatable_parameters::EstimatebleParameterIdentifier parameterIdentifier)</argsstring>
        <name>createEulerAngleObservablePartialWrtCurrentRotationalState</name>
        <param>
          <type>const estimatable_parameters::EstimatebleParameterIdentifier</type>
          <declname>parameterIdentifier</declname>
        </param>
        <briefdescription>
<para>Function to create object that comptes partial derivative of Euler angle observation w.r.t. current rotational state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way range partial wrt an initial position of a body.</para>
<para>Function to create object that comptes partial derivative of Euler angle observation w.r.t. current rotational state <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameterIdentifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Type and reference body of parameter to be estimated (initial rotational state) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object that comptes partial derivative of Euler angle observation w.r.t. current rotational state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createEulerAngleObservationPartials.cpp" line="12" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createEulerAngleObservationPartials.cpp" bodystart="12" bodyend="17" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEulerAngleObservationPartials.h" declline="42" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dd/d33/createEulerAngleObservationPartials_8h_1a1c7b543da4ea847179675f9e476219d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt;</type>
        <definition>std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; tudat::observation_partials::createEulerAngleObservablePartials</definition>
        <argsstring>(const observation_models::LinkEnds eulerAngleLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate)</argsstring>
        <name>createEulerAngleObservablePartials</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>eulerAngleLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to compute Euler angle observation partial objects for a single set of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute Euler angle observation partial objects for a single set of link ends <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eulerAngleLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (observed_body only) for which Euler angle partials are to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating Euler angle partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of observation partials with associated indices in complete vector of parameters that are estimated, representing all necessary Euler angle partials of a single link end, and a nulptr position scaling pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEulerAngleObservationPartials.h" line="57" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEulerAngleObservationPartials.h" bodystart="57" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="dd/d33/createEulerAngleObservationPartials_8h_1a9ed4fc147e65f6e802a24215cc37fdad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEnds,std::pair&lt; SingleLinkObservationThreePartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; &gt; tudat::observation_partials::createEulerAngleObservablePartials</definition>
        <argsstring>(const std::vector&lt; observation_models::LinkEnds &gt; linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate)</argsstring>
        <name>createEulerAngleObservablePartials</name>
        <param>
          <type>const std::vector&lt; observation_models::LinkEnds &gt;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to compute Euler angle observation partial objects for multiple sets of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute Euler angle observation partial objects for multiple sets of link ends <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>List of link ends (observed_body only) for which Euler angle partials are to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating Euler angle partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of observation partials with associated indices in complete vector of parameters that are estimated, representing all necessary Euler angle partials of a single link end, and a nulptr position scaling pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEulerAngleObservationPartials.h" line="148" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEulerAngleObservationPartials.h" bodystart="148" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="de/d75/createLightTimeCorrectionPartials_8h_1a218ffdcb9e4e5c0284ff68473bbd6cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">LightTimeCorrectionPartial</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionPartial &gt; &gt; tudat::observation_partials::createLightTimeCorrectionPartials</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &amp;lightTimeCorrectionList)</argsstring>
        <name>createLightTimeCorrectionPartials</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrectionList</declname>
        </param>
        <briefdescription>
<para>Function to create a partial objects from list of light time corrections. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a partial objects from list of light time corrections. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lightTimeCorrectionList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time corrections. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of light-time correction partial objects </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createLightTimeCorrectionPartials.cpp" line="24" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createLightTimeCorrectionPartials.cpp" bodystart="24" bodyend="59" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCorrectionPartials.h" declline="30" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d8/d86/createNWayRangePartials_8h_1a847345bbe3418acc4eece9edee74410a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt;</type>
        <definition>std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; tudat::observation_partials::createNWayRangePartials</definition>
        <argsstring>(const observation_models::LinkEnds &amp;nWayRangeLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; lightTimeCorrections=std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt;())</argsstring>
        <name>createNWayRangePartials</name>
        <param>
          <type>const observation_models::LinkEnds &amp;</type>
          <declname>nWayRangeLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt;</type>
          <declname>lightTimeCorrections</declname>
          <defval>std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate n-way range partials and associated scaler for single link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate n-way range partials and associated scaler for all parameters that are to be estimated, for a single link ends set. The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. The n-way range partials are built from one-way range partials of the constituent links <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nWayRangeLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which n-way range partials are to be calculated (i.e. for which n-way range observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating n-way range partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default). First vector entry is index of link in n-way link ends, second vector is list of light-time corrections. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of observation partials with associated indices in complete vector of parameters that are estimated, representing all necessary n-way range partials of a single link end, and <ref refid="db/d77/classtudat_1_1observation__partials_1_1NWayRangeScaling" kindref="compound">NWayRangeScaling</ref>, object, used for scaling the position partial members of all NWayRangePartials in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNWayRangePartials.h" line="53" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNWayRangePartials.h" bodystart="53" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="d8/d86/createNWayRangePartials_8h_1afc14c2d11bfe43e512ef8936e56caff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; &gt; tudat::observation_partials::createNWayRangePartials</definition>
        <argsstring>(const std::vector&lt; observation_models::LinkEnds &gt; &amp;linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; &gt; &amp;lightTimeCorrections=std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; &gt;())</argsstring>
        <name>createNWayRangePartials</name>
        <param>
          <type>const std::vector&lt; observation_models::LinkEnds &gt; &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt; &gt; &amp;</type>
          <declname>lightTimeCorrections</declname>
          <defval>std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate n-way range partials for all parameters that are to be estimated, for all sets of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate n-way range partials for all parameters that are to be estimated, for all sets of link ends. The n-way range partials are generated per set of link ends. The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. The n-way range partials are built from one-way range partials of the constituent links <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all n-way link ends sets with observation models for which partials are to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating n-way range partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default). First vector entry is index of link in n-way link ends, second vector is list of light-time corrections. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of SingleLinkObservationPartialList, representing all necessary n-way range partials of a single link end, and <ref refid="db/d77/classtudat_1_1observation__partials_1_1NWayRangeScaling" kindref="compound">NWayRangeScaling</ref>, object, used for scaling the position partial members of all NWayRangePartials in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNWayRangePartials.h" line="182" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNWayRangePartials.h" bodystart="182" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="d4/d62/createObservationPartials_8h_1a2f870e8b551d1bad5520ddd7943f429f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
          </param>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
          </param>
        </templateparamlist>
        <type>PerLinkEndPerLightTimeSolutionCorrections</type>
        <definition>PerLinkEndPerLightTimeSolutionCorrections tudat::observation_partials::getLightTimeCorrectionsList</definition>
        <argsstring>(const std::map&lt; observation_models::LinkEnds, std::shared_ptr&lt; observation_models::ObservationModel&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; &gt; observationModels)</argsstring>
        <name>getLightTimeCorrectionsList</name>
        <param>
          <type>const std::map&lt; observation_models::LinkEnds, std::shared_ptr&lt; <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">observation_models::ObservationModel</ref>&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; &gt;</type>
          <declname>observationModels</declname>
        </param>
        <briefdescription>
<para>Function to retrieve a list of light-time corrections per link end from a list of observation models. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve a list of light-time corrections per link end from a list of observation models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationModels</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of observation models (may not be of mixed type) with LinkEnds of observable as map key </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of light-time corrections, with associated link ends as key. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationPartials.h" line="44" column="43" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationPartials.h" bodystart="44" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="d4/d62/createObservationPartials_8h_1a39ffc7e773741dede92b8f52a7d30249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::observation_partials::splitObservationPartialsAndScalers</definition>
        <argsstring>(const std::map&lt; observation_models::LinkEnds, std::pair&lt; std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; ObservationPartial&lt; ObservationSize &gt; &gt; &gt;, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; &gt; &amp;observationPartialsAndScalers, std::map&lt; observation_models::LinkEnds, std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; observation_partials::ObservationPartial&lt; ObservationSize &gt; &gt; &gt; &gt; &amp;observationPartials, std::map&lt; observation_models::LinkEnds, std::shared_ptr&lt; observation_partials::PositionPartialScaling &gt; &gt; &amp;observationPartialScalers)</argsstring>
        <name>splitObservationPartialsAndScalers</name>
        <param>
          <type>const std::map&lt; observation_models::LinkEnds, std::pair&lt; std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; <ref refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" kindref="compound">ObservationPartial</ref>&lt; ObservationSize &gt; &gt; &gt;, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt; &gt; &amp;</type>
          <declname>observationPartialsAndScalers</declname>
        </param>
        <param>
          <type>std::map&lt; observation_models::LinkEnds, std::map&lt; std::pair&lt; int, int &gt;, std::shared_ptr&lt; <ref refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" kindref="compound">observation_partials::ObservationPartial</ref>&lt; ObservationSize &gt; &gt; &gt; &gt; &amp;</type>
          <declname>observationPartials</declname>
        </param>
        <param>
          <type>std::map&lt; observation_models::LinkEnds, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">observation_partials::PositionPartialScaling</ref> &gt; &gt; &amp;</type>
          <declname>observationPartialScalers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to split observation partials and scaling object (produced by observationPartialsAndScaler function) into separate containers</para>
<para>Function to split observation partials and scaling object (produced by observationPartialsAndScaler function) into separate containers <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationPartialsAndScalers</parametername>
</parameternamelist>
<parameterdescription>
<para>Combined list of observation partials and scaling objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationPartials</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation partials, per link ends, and per parameter indices (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationPartialScalers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of position partial scaling objects, per link ends (returned by reference) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationPartials.h" line="194" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationPartials.h" bodystart="194" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/createOneWayRangePartials_8h_1a647aa7265574452c024e72fd8c2a2775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="da/d78/classtudat_1_1observation__partials_1_1ObservationPartial" kindref="compound">ObservationPartial</ref>&lt; 1 &gt; &gt;</type>
        <definition>std::shared_ptr&lt; ObservationPartial&lt; 1 &gt; &gt; tudat::observation_partials::createOneWayRangePartialWrtParameter</definition>
        <argsstring>(const observation_models::LinkEnds oneWayRangeLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; ParameterType &gt; &gt; parameterToEstimate, const std::shared_ptr&lt; OneWayRangeScaling &gt; oneWayRangeScaler, const std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt; &amp;lightTimeCorrectionPartialObjects=std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt;())</argsstring>
        <name>createOneWayRangePartialWrtParameter</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>oneWayRangeLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parameterToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d5/d2c/classtudat_1_1observation__partials_1_1OneWayRangeScaling" kindref="compound">OneWayRangeScaling</ref> &gt;</type>
          <declname>oneWayRangeScaler</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrectionPartialObjects</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate one-way range partial wrt a single parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way range partial wrt a single parameter, for a single link ends (which must contain a transmitter and receiever linkEndType). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ParameterType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of parameter (double for size 1, VectorXd for larger size). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oneWayRangeLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which one-way range partials are to be calculated (i.e. for which one-way range observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating one-way range partial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object of current parameter that is to be estimated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oneWayRangeScaler</parametername>
</parameternamelist>
<parameterdescription>
<para>Object scale position partials to one-way range partials for current link ends. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrectionPartialObjects</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One-way range partial object wrt a single parameter (is nullptr if no parameter dependency exists). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createOneWayRangePartials.h" line="52" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createOneWayRangePartials.h" bodystart="52" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/createOneWayRangePartials_8h_1af82d130d17e5d616cabdcf179ae644fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/dfc/classtudat_1_1observation__partials_1_1OneWayRangePartial" kindref="compound">OneWayRangePartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; OneWayRangePartial &gt; tudat::observation_partials::createOneWayRangePartialWrtBodyPosition</definition>
        <argsstring>(const observation_models::LinkEnds oneWayRangeLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::string bodyToEstimate, const std::shared_ptr&lt; OneWayRangeScaling &gt; oneWayRangeScaler, const std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt; &amp;lightTimeCorrectionPartialObjects=std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt;())</argsstring>
        <name>createOneWayRangePartialWrtBodyPosition</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>oneWayRangeLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d5/d2c/classtudat_1_1observation__partials_1_1OneWayRangeScaling" kindref="compound">OneWayRangeScaling</ref> &gt;</type>
          <declname>oneWayRangeScaler</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrectionPartialObjects</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to generate one-way range partial wrt a position of a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way range partial wrt an initial position of a body.</para>
<para>Function to generate one-way range partial wrt a position of a body, for a single link ends (which must contain a transmitter and receiever linkEndType). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oneWayRangeLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which one-way range partials are to be calculated (i.e. for which one-way range observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating one-way range partial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body wrt position of which a partial is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oneWayRangeScaler</parametername>
</parameternamelist>
<parameterdescription>
<para>Object scale position partials to one-way range partials for current link ends. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrectionPartialObjects</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One-way range partial object wrt a current position of a body (is nullptr if no parameter dependency exists). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createOneWayRangePartials.cpp" line="27" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createOneWayRangePartials.cpp" bodystart="27" bodyend="51" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createOneWayRangePartials.h" declline="93" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/createOneWayRangePartials_8h_1a1915aef56c5fb12bca3d71d08e9bb780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/dfc/classtudat_1_1observation__partials_1_1OneWayRangePartial" kindref="compound">OneWayRangePartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; OneWayRangePartial &gt; tudat::observation_partials::createOneWayRangePartialWrtBodyRotationalState</definition>
        <argsstring>(const observation_models::LinkEnds oneWayRangeLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::string bodyToEstimate, const std::shared_ptr&lt; OneWayRangeScaling &gt; oneWayRangeScaler, const std::vector&lt; std::shared_ptr&lt; observation_partials::LightTimeCorrectionPartial &gt; &gt; &amp;lightTimeCorrectionPartialObjects)</argsstring>
        <name>createOneWayRangePartialWrtBodyRotationalState</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>oneWayRangeLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d5/d2c/classtudat_1_1observation__partials_1_1OneWayRangeScaling" kindref="compound">OneWayRangeScaling</ref> &gt;</type>
          <declname>oneWayRangeScaler</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d5/dda/classtudat_1_1observation__partials_1_1LightTimeCorrectionPartial" kindref="compound">observation_partials::LightTimeCorrectionPartial</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrectionPartialObjects</declname>
        </param>
        <briefdescription>
<para>Function to generate one-way range partial wrt a rotational state of a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way range partial wrt an initial position of a body.</para>
<para>Function to generate one-way range partial wrt a rotational state of a body, for a single link ends (which must contain a transmitter and receiever linkEndType). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oneWayRangeLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which one-way range partials are to be calculated (i.e. for which one-way range observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating one-way range partial. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body wrt rotational state of which a partial is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oneWayRangeScaler</parametername>
</parameternamelist>
<parameterdescription>
<para>Object scale position partials to one-way range partials for current link ends. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrectionPartialObjects</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One-way range partial object wrt a current rotational state of a body (is nullptr if no parameter dependency exists). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createOneWayRangePartials.cpp" line="54" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createOneWayRangePartials.cpp" bodystart="54" bodyend="78" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createOneWayRangePartials.h" declline="114" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/createOneWayRangePartials_8h_1a0cdacdc78ae3d4bcbe1f53aa8c82ad38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt;</type>
        <definition>std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; PositionPartialScaling &gt; &gt; tudat::observation_partials::createOneWayRangePartials</definition>
        <argsstring>(const observation_models::LinkEnds oneWayRangeLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &amp;lightTimeCorrections=std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt;(), const bool useBiasPartials=true)</argsstring>
        <name>createOneWayRangePartials</name>
        <param>
          <type>const observation_models::LinkEnds</type>
          <declname>oneWayRangeLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrections</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>useBiasPartials</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to generate one-way range partials and associated scaler for single link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way range partials and associated scaler for all parameters that are to be estimated, for a single link ends set. The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oneWayRangeLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends (transmitter and receiever) for which one-way range partials are to be calculated (i.e. for which one-way range observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating one-way range partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useBiasPartials</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether this function should create partials w.r.t. observation bias parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of observation partials with associated indices in complete vector of parameters that are estimated, representing all necessary one-way range partials of a single link end, and <ref refid="d5/d2c/classtudat_1_1observation__partials_1_1OneWayRangeScaling" kindref="compound">OneWayRangeScaling</ref>, object, used for scaling the position partial members of all OneWayRangePartials in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createOneWayRangePartials.h" line="139" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createOneWayRangePartials.h" bodystart="139" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="d9/dc5/createOneWayRangePartials_8h_1a5f097649518b11445d741ae8a85ee7ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParameterType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationPartialList, std::shared_ptr&lt; <ref refid="df/dde/classtudat_1_1observation__partials_1_1PositionPartialScaling" kindref="compound">PositionPartialScaling</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt; observation_models::LinkEnds, std::pair&lt; SingleLinkObservationPartialList,std::shared_ptr&lt; PositionPartialScaling &gt; &gt; &gt; tudat::observation_partials::createOneWayRangePartials</definition>
        <argsstring>(const std::vector&lt; observation_models::LinkEnds &gt; &amp;linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ParameterType &gt; &gt; parametersToEstimate, const std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; &gt; &amp;lightTimeCorrections=std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; observation_models::LightTimeCorrection &gt; &gt; &gt; &gt;(), const bool useBiasPartials=true)</argsstring>
        <name>createOneWayRangePartials</name>
        <param>
          <type>const std::vector&lt; observation_models::LinkEnds &gt; &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt; &gt; &amp;</type>
          <declname>lightTimeCorrections</declname>
          <defval>std::map&lt; observation_models::LinkEnds, std::vector&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">observation_models::LightTimeCorrection</ref> &gt; &gt; &gt; &gt;()</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>useBiasPartials</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to generate one-way range partials for all parameters that are to be estimated, for all sets of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate one-way range partials for all parameters that are to be estimated, for all sets of link ends. The one-way range partials are generated per set of link ends. The set of parameters and bodies that are to be estimated, as well as the set of link ends (each of which must contain a transmitter and receiever linkEndType) that are to be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of all link ends for which one-way range partials are to be calculated (i.e. for which one-way range observations are to be processed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all bodies, for creating one-way range partials. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters that are to be estimated (in addition to initial states of requested bodies) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time correction partials to be used (empty by default) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useBiasPartials</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether this function should create partials w.r.t. observation bias parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of SingleLinkObservationPartialList, representing all necessary one-way range partials of a single link end, and <ref refid="d5/d2c/classtudat_1_1observation__partials_1_1OneWayRangeScaling" kindref="compound">OneWayRangeScaling</ref>, object, used for scaling the position partial members of all OneWayRangePartials in link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createOneWayRangePartials.h" line="293" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createOneWayRangePartials.h" bodystart="293" bodyend="339"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/angularPositionPartial.h" line="23" column="1"/>
  </compounddef>
</doxygen>
