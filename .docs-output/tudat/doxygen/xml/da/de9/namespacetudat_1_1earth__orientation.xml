<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="da/de9/namespacetudat_1_1earth__orientation" kind="namespace" language="C++">
    <compoundname>tudat::earth_orientation</compoundname>
    <innerclass refid="d7/d26/classtudat_1_1earth__orientation_1_1EarthOrientationAnglesCalculator" prot="public">tudat::earth_orientation::EarthOrientationAnglesCalculator</innerclass>
    <innerclass refid="db/d3f/classtudat_1_1earth__orientation_1_1EOPReader" prot="public">tudat::earth_orientation::EOPReader</innerclass>
    <innerclass refid="d1/d07/classtudat_1_1earth__orientation_1_1PolarMotionCalculator" prot="public">tudat::earth_orientation::PolarMotionCalculator</innerclass>
    <innerclass refid="de/d7b/classtudat_1_1earth__orientation_1_1PrecessionNutationCalculator" prot="public">tudat::earth_orientation::PrecessionNutationCalculator</innerclass>
    <innerclass refid="d1/d2d/classtudat_1_1earth__orientation_1_1ShortPeriodEarthOrientationCorrectionCalculator" prot="public">tudat::earth_orientation::ShortPeriodEarthOrientationCorrectionCalculator</innerclass>
    <innerclass refid="da/df2/structtudat_1_1earth__orientation_1_1CurrentTimes" prot="public">tudat::earth_orientation::CurrentTimes</innerclass>
    <innerclass refid="d1/d21/classtudat_1_1earth__orientation_1_1TerrestrialTimeScaleConverter" prot="public">tudat::earth_orientation::TerrestrialTimeScaleConverter</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1a62bfb3b5ebdc6d3e9d9ff932d930b220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::earth_orientation::getApproximateTioLocator</definition>
        <argsstring>(const double secondsSinceJ2000)</argsstring>
        <name>getApproximateTioLocator</name>
        <param>
          <type>const double</type>
          <declname>secondsSinceJ2000</declname>
        </param>
        <briefdescription>
<para>Function to get the value of the TIO locator, approximated as described in IERS 2010 conventions. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the value of the TIO locator, approximated as described in IERS 2010 conventions, Eq. (5.13), evaluated using iauSp00 SOFA function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>secondsSinceJ2000</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which TIO locator is to be computed. Formally, input should be in TT, but may be provided in any common time scale, as variations in TIO are slow. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of TIO locator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/earthOrientationCalculator.cpp" line="22" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/earthOrientationCalculator.cpp" bodystart="22" bodyend="25" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" declline="39" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1a4cac180e29797125a554e7fa80875eb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond tudat::earth_orientation::calculateRotationFromCirsToGcrs</definition>
        <argsstring>(const double celestialPoleXPosition, const double celestialPoleYPosition, const double cioLocator)</argsstring>
        <name>calculateRotationFromCirsToGcrs</name>
        <param>
          <type>const double</type>
          <declname>celestialPoleXPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>celestialPoleYPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cioLocator</declname>
        </param>
        <briefdescription>
<para>Function to calculate rotation from CIRS to GCRS, i.e. applying CIO-based rotations due to nutation and precession. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate rotation from CIRS to GCRS, i.e. applying CIO-based rotations due to nutation and precession, as described by IERS Conventions, Eq. (5.10) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>celestialPoleXPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter X in IERS Conventions 2010, Section 5.4.4 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>celestialPoleYPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter X in IERS Conventions 2010, Section 5.4.4 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cioLocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Celestial intermediate origin locator; parameter s in IERS Conventions 2010, Section 5.4.4 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotation from CIRS to GCRS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/earthOrientationCalculator.cpp" line="28" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/earthOrientationCalculator.cpp" bodystart="28" bodyend="44" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" declline="50" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1a7230efc26ec832eb96e51bc2a2b44832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond tudat::earth_orientation::calculateRotationFromTirsToCirs</definition>
        <argsstring>(const double earthRotationAngle)</argsstring>
        <name>calculateRotationFromTirsToCirs</name>
        <param>
          <type>const double</type>
          <declname>earthRotationAngle</declname>
        </param>
        <briefdescription>
<para>Calculate rotation from TIRS to CIRS. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate rotation from TIRS to CIRS, i.e. rotating over earth rotation angle. Implementes Eq. (5.5) of IERS 2010 Conventions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>earthRotationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Current Earth Rotation angle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotation from TIRS to CIRS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/earthOrientationCalculator.cpp" line="47" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/earthOrientationCalculator.cpp" bodystart="47" bodyend="50" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" declline="60" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1a7b2148591bf51820c74602bec308c63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond tudat::earth_orientation::calculateRotationFromItrsToTirs</definition>
        <argsstring>(const double xPolePosition, const double yPolePosition, const double tioLocator)</argsstring>
        <name>calculateRotationFromItrsToTirs</name>
        <param>
          <type>const double</type>
          <declname>xPolePosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>yPolePosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tioLocator</declname>
        </param>
        <briefdescription>
<para>Calculate rotation from ITRS to TIRS,. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate rotation from ITRS to TIRS.</para>
<para>Calculate rotation from ITRS to TIRS, according to Eq. (5.3) of IERS 2010 Conventions. Applies the effect of polar motion. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xPolePosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Polar motion parameter in x-direction (typically denoted x_{p}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yPolePosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Polar motion parameter in y-direction (typically denoted x_{p}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tioLocator</parametername>
</parameternamelist>
<parameterdescription>
<para>TIO locator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotation from ITRS to TIRS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/earthOrientationCalculator.cpp" line="53" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/earthOrientationCalculator.cpp" bodystart="53" bodyend="59" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" declline="70" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1ae28adda49b9bfb33905b90b03d6b2d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::earth_orientation::calculateRotationRateFromItrsToGcrs</definition>
        <argsstring>(const double celestialPoleXPosition, const double celestialPoleYPosition, const double cioLocator, const TimeType ut1, const double xPolePosition, const double yPolePosition, const double tioLocator)</argsstring>
        <name>calculateRotationRateFromItrsToGcrs</name>
        <param>
          <type>const double</type>
          <declname>celestialPoleXPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>celestialPoleYPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cioLocator</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>ut1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>xPolePosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>yPolePosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tioLocator</declname>
        </param>
        <briefdescription>
<para>Calculate time-derivative of rotation matrix from ITRS to GCRS. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate time-derivative of rotation matrix from ITRS to GCRS. Function approximates derivative by only including derivative of Earth rotation sub-matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>celestialPoleXPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter X in IERS Conventions 2010, Section 5.4.4 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>celestialPoleYPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter X in IERS Conventions 2010, Section 5.4.4 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cioLocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Celestial intermediate origin locator; parameter s in IERS Conventions 2010, Section 5.4.4 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ut1</parametername>
</parameternamelist>
<parameterdescription>
<para>Current UT1 time, used to compute Earth Rotation angle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xPolePosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Polar motion parameter in x-direction (typically denoted x_{p}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yPolePosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Polar motion parameter in y-direction (typically denoted x_{p}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tioLocator</parametername>
</parameternamelist>
<parameterdescription>
<para>TIO locator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time-derivative of rotation matrix from ITRS to GCRS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" line="87" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" bodystart="87" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1a6d1d42fbee537d8a4425348cbcd2e8f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::earth_orientation::calculateRotationRateFromItrsToGcrs</definition>
        <argsstring>(const Eigen::Vector5d &amp;rotationAngles, const TimeType ut1, const double secondsSinceJ2000)</argsstring>
        <name>calculateRotationRateFromItrsToGcrs</name>
        <param>
          <type>const Eigen::Vector5d &amp;</type>
          <declname>rotationAngles</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>ut1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>secondsSinceJ2000</declname>
        </param>
        <briefdescription>
<para>Calculate time-derivative of rotation matrix from ITRS to GCRS. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate time-derivative of rotation matrix from ITRS to GCRS. Function approximates derivative by only including derivative of Earth rotation sub-matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rotationAngles</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing quantities (in IERS Conventions 2010 notation): X, Y, s, xp, yp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ut1</parametername>
</parameternamelist>
<parameterdescription>
<para>Current UT1 time, used to compute Earth Rotation angle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondsSinceJ2000</parametername>
</parameternamelist>
<parameterdescription>
<para>Current time in seconds since J2000, used for computing TIO locator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time-derivative of rotation matrix from ITRS to GCRS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" line="111" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1ab77845855e1dc40a597b820928f7c5db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::earth_orientation::calculateRotationRateFromItrsToGcrs</definition>
        <argsstring>(const std::pair&lt; Eigen::Vector5d, TimeType &gt; rotationAnglesAndUt1, const double secondsSinceJ2000)</argsstring>
        <name>calculateRotationRateFromItrsToGcrs</name>
        <param>
          <type>const std::pair&lt; Eigen::Vector5d, TimeType &gt;</type>
          <declname>rotationAnglesAndUt1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>secondsSinceJ2000</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" line="121" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" bodystart="121" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1aea82ea2838f4c7e965a608b3623529a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond tudat::earth_orientation::calculateRotationFromItrsToGcrs</definition>
        <argsstring>(const double celestialPoleXPosition, const double celestialPoleYPosition, const double cioLocator, const TimeType ut1, const double xPolePosition, const double yPolePosition, const double tioLocator)</argsstring>
        <name>calculateRotationFromItrsToGcrs</name>
        <param>
          <type>const double</type>
          <declname>celestialPoleXPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>celestialPoleYPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cioLocator</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>ut1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>xPolePosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>yPolePosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tioLocator</declname>
        </param>
        <briefdescription>
<para>Calculate rotation from ITRS to GCRS. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate rotation from ITRS to GCRS. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>celestialPoleXPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter X in IERS Conventions 2010, Section 5.4.4 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>celestialPoleYPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter X in IERS Conventions 2010, Section 5.4.4 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cioLocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Celestial intermediate origin locator; parameter s in IERS Conventions 2010, Section 5.4.4 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ut1</parametername>
</parameternamelist>
<parameterdescription>
<para>Current UT1 time, used to compute Earth Rotation angle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xPolePosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Polar motion parameter in x-direction (typically denoted x_{p}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yPolePosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Polar motion parameter in y-direction (typically denoted x_{p}) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tioLocator</parametername>
</parameternamelist>
<parameterdescription>
<para>TIO locator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotation from ITRS to GCRS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" line="143" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" bodystart="143" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1afce82bcb816239c24a7524635aa86067" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond tudat::earth_orientation::calculateRotationFromItrsToGcrs</definition>
        <argsstring>(const Eigen::Vector5d &amp;rotationAngles, const TimeType ut1, const double secondsSinceJ2000)</argsstring>
        <name>calculateRotationFromItrsToGcrs</name>
        <param>
          <type>const Eigen::Vector5d &amp;</type>
          <declname>rotationAngles</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>ut1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>secondsSinceJ2000</declname>
        </param>
        <briefdescription>
<para>Calculate rotation from ITRS to GCRS. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate rotation from ITRS to GCRS. Function approximates derivative by only including derivative of Earth rotation sub-matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rotationAngles</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing quantities (in IERS Conventions 2010 notation): X, Y, s, xp, yp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ut1</parametername>
</parameternamelist>
<parameterdescription>
<para>Current UT1 time, used to compute Earth Rotation angle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondsSinceJ2000</parametername>
</parameternamelist>
<parameterdescription>
<para>Current time in seconds since J2000, used for computing TIO locator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotation from ITRS to GCRS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" line="164" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" bodystart="164" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1a355d055e1454a0ff932c425c4db26e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond tudat::earth_orientation::calculateRotationFromItrsToGcrs</definition>
        <argsstring>(const std::pair&lt; Eigen::Vector5d, TimeType &gt; rotationAnglesAndUt1, const double secondsSinceJ2000)</argsstring>
        <name>calculateRotationFromItrsToGcrs</name>
        <param>
          <type>const std::pair&lt; Eigen::Vector5d, TimeType &gt;</type>
          <declname>rotationAnglesAndUt1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>secondsSinceJ2000</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" line="174" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" bodystart="174" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1a6eebb64c5cb593040512f5e1b85056f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/d26/classtudat_1_1earth__orientation_1_1EarthOrientationAnglesCalculator" kindref="compound">EarthOrientationAnglesCalculator</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EarthOrientationAnglesCalculator &gt; tudat::earth_orientation::createStandardEarthOrientationCalculator</definition>
        <argsstring>(const std::shared_ptr&lt; EOPReader &gt; eopReader=std::make_shared&lt; EOPReader &gt;())</argsstring>
        <name>createStandardEarthOrientationCalculator</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/d3f/classtudat_1_1earth__orientation_1_1EOPReader" kindref="compound">EOPReader</ref> &gt;</type>
          <declname>eopReader</declname>
          <defval>std::make_shared&lt; <ref refid="db/d3f/classtudat_1_1earth__orientation_1_1EOPReader" kindref="compound">EOPReader</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create an <ref refid="d7/d26/classtudat_1_1earth__orientation_1_1EarthOrientationAnglesCalculator" kindref="compound">EarthOrientationAnglesCalculator</ref> object, with default settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an <ref refid="d7/d26/classtudat_1_1earth__orientation_1_1EarthOrientationAnglesCalculator" kindref="compound">EarthOrientationAnglesCalculator</ref> object, with default settings: IAU 2006 theory for precession/nutation, all (sub-)diurnal corrections to UTC-UT1 and polar motion according to IERS 2010, polar motion/nutation/UT1 daily corrections published by IERS (linearly interpolated in time) <simplesect kind="return"><para>Default Earth rotation parameter object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/earthOrientationCalculator.cpp" line="62" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/earthOrientationCalculator.cpp" bodystart="62" bodyend="94" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" declline="298" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/d49/earthOrientationCalculator_8h_1aecf6dffc6d66073a18cc5f614ca17603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename UT1ScalarType</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; double, Eigen::Matrix&lt; double, 5, 1 &gt; &gt; &gt;, std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; double, UT1ScalarType &gt; &gt; &gt;</type>
        <definition>std::pair&lt; std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; double, Eigen::Matrix&lt; double, 5, 1 &gt; &gt; &gt;,std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; double, UT1ScalarType &gt; &gt; &gt; tudat::earth_orientation::createInterpolatorsForItrsToGcrsAngles</definition>
        <argsstring>(const double intervalStart, const double intervalEnd, const double timeStep, const basic_astrodynamics::TimeScales timeScale=basic_astrodynamics::tdb_scale, const std::shared_ptr&lt; EarthOrientationAnglesCalculator &gt; earthOrientationCalculator=createStandardEarthOrientationCalculator(), const std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=std::make_shared&lt; interpolators::LagrangeInterpolatorSettings &gt;(6))</argsstring>
        <name>createInterpolatorsForItrsToGcrsAngles</name>
        <param>
          <type>const double</type>
          <declname>intervalStart</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>intervalEnd</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeStep</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::TimeScales</type>
          <declname>timeScale</declname>
          <defval>basic_astrodynamics::tdb_scale</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d26/classtudat_1_1earth__orientation_1_1EarthOrientationAnglesCalculator" kindref="compound">EarthOrientationAnglesCalculator</ref> &gt;</type>
          <declname>earthOrientationCalculator</declname>
          <defval>createStandardEarthOrientationCalculator()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>std::make_shared&lt; <ref refid="d3/d92/classtudat_1_1interpolators_1_1LagrangeInterpolatorSettings" kindref="compound">interpolators::LagrangeInterpolatorSettings</ref> &gt;(6)</defval>
        </param>
        <briefdescription>
<para>Function to create an interpolator for the Earth orientation angles and UT1. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an interpolator for the Earth orientation angles and UT1, to reduce computation time of Earth rotation during orbit propagation/estimation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intervalStart</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of time interval where interpolation data is to be generated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intervalEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>End of time interval where interpolation data is to be generated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeStep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> step between evaluations of rotation data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeScale</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> scale for evaluation data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>earthOrientationCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>Object from which Earth orientation data is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the interpolation proces (default Lagrange 6 point) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>interpolators for the Earth orientation angles (first) and for UT1 (second). Interpolated angle vector contains quantities (in IERS Conventions 2010 notation): X, Y, s, xp, yp. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" line="317" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" bodystart="317" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="d6/d07/readAmplitudeAndArgumentMultipliers_8h_1a56f38f9da1166e868e515e4ae409615d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::MatrixXd, Eigen::MatrixXd &gt;</type>
        <definition>std::pair&lt; Eigen::MatrixXd, Eigen::MatrixXd &gt; tudat::earth_orientation::readAmplitudesAndFundamentalArgumentMultipliers</definition>
        <argsstring>(const std::string amplitudesFile, const std::string fundamentalArgumentMultipliersFile, const double minimumAmplitude=0.0)</argsstring>
        <name>readAmplitudesAndFundamentalArgumentMultipliers</name>
        <param>
          <type>const std::string</type>
          <declname>amplitudesFile</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>fundamentalArgumentMultipliersFile</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>minimumAmplitude</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Function to read the amplitudes and fundamental argument multipliers for tidal corrections. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to read the amplitudes and fundamental argument multiplers for tidal corrections.</para>
<para>Function to read the amplitudes and fundamental argument multipliers for tidal corrections to earth orientation etc. Two file names are required, one containing the fundamental argument multipliers (one set per row) and one file containing the amplitudes (number of entries dependent on correction that is calculated). Function can filter amplitudes, so that only those entries with an RSS higher than a certain value are included in the return type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amplitudesFile</parametername>
</parameternamelist>
<parameterdescription>
<para>File name of file containing correction amplitudes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fundamentalArgumentMultipliersFile</parametername>
</parameternamelist>
<parameterdescription>
<para>File name of file containing fundamental argument multipliers for corrections. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumAmplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value of RSS of amplitudes for single entry for which entry is accepted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of Matrices with 1: fundamental argument multipliers and 2: Amplitudes. A single entry is stored on a single row with same index for fundamental argument multipliers and amplitude. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/readAmplitudeAndArgumentMultipliers.cpp" line="24" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/readAmplitudeAndArgumentMultipliers.cpp" bodystart="24" bodyend="66" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/readAmplitudeAndArgumentMultipliers.h" declline="40" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="d6/d07/readAmplitudeAndArgumentMultipliers_8h_1adb8adfde180bec66f3058c1ec735878d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::MatrixXd, Eigen::MatrixXd &gt;</type>
        <definition>std::pair&lt; Eigen::MatrixXd, Eigen::MatrixXd &gt; tudat::earth_orientation::filterRawDataForAmplitudes</definition>
        <argsstring>(const Eigen::MatrixXd rawAmplitudes, const Eigen::MatrixXd rawFundamentalArgumentMultipliers, const double minimumAmplitude)</argsstring>
        <name>filterRawDataForAmplitudes</name>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>rawAmplitudes</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>rawFundamentalArgumentMultipliers</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>minimumAmplitude</declname>
        </param>
        <briefdescription>
<para>Function to filter tidal corrections based on RSS amplitude criteria. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to filter tidal corrections based on RSS amplitude criteria. Only those entries with an RSS higher than a provided value are returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rawAmplitudes</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of amplitudes, one correction set per row. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rawFundamentalArgumentMultipliers</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of fundamental argument multipliers, one correction set per row. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumAmplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value of RSS of amplitudes for single entry for which entry is accepted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of Matrices with 1: fundamental argument multipliers and 2: Amplitudes for which RSS amplitude is sufficient. A single entry is stored on a single row with same index for fundamental argument multipliers and amplitude. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/readAmplitudeAndArgumentMultipliers.cpp" line="69" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/readAmplitudeAndArgumentMultipliers.cpp" bodystart="69" bodyend="123" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/readAmplitudeAndArgumentMultipliers.h" declline="57" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="d0/d37/shortPeriodEarthOrientationCorrectionCalculator_8h_1af05d63f329a1356aa77f149716f2d5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d2d/classtudat_1_1earth__orientation_1_1ShortPeriodEarthOrientationCorrectionCalculator" kindref="compound">ShortPeriodEarthOrientationCorrectionCalculator</ref>&lt; double &gt; &gt;</type>
        <definition>std::shared_ptr&lt; ShortPeriodEarthOrientationCorrectionCalculator&lt; double &gt; &gt; tudat::earth_orientation::getDefaultUT1CorrectionCalculator</definition>
        <argsstring>(const double minimumAmplitude=0.0)</argsstring>
        <name>getDefaultUT1CorrectionCalculator</name>
        <param>
          <type>const double</type>
          <declname>minimumAmplitude</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Function to retrieve the default UT1 short-period correction calculator. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the default UT1 short-period correction calculator, from Tables 5.1, 8.2 and 8.2. of IERS 2010 Conventions. An amplitude cutoff may be provided. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minimumAmplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Variation amplitude below which corrections are not taken into account. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default UT1 short-period correction calculator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/shortPeriodEarthOrientationCorrectionCalculator.cpp" line="97" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/shortPeriodEarthOrientationCorrectionCalculator.cpp" bodystart="97" bodyend="110" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/shortPeriodEarthOrientationCorrectionCalculator.h" declline="138" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d37/shortPeriodEarthOrientationCorrectionCalculator_8h_1a8068cf0189424abe24cae143d365f891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d2d/classtudat_1_1earth__orientation_1_1ShortPeriodEarthOrientationCorrectionCalculator" kindref="compound">ShortPeriodEarthOrientationCorrectionCalculator</ref>&lt; Eigen::Vector2d &gt; &gt;</type>
        <definition>std::shared_ptr&lt; ShortPeriodEarthOrientationCorrectionCalculator&lt; Eigen::Vector2d &gt; &gt; tudat::earth_orientation::getDefaultPolarMotionCorrectionCalculator</definition>
        <argsstring>(const double minimumAmplitude=0.0)</argsstring>
        <name>getDefaultPolarMotionCorrectionCalculator</name>
        <param>
          <type>const double</type>
          <declname>minimumAmplitude</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Function to retrieve the default polar motion short-period correction calculator. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the default polar motion short-period correction calculator, from Tables 5.1, 8.2 and 8.2. of IERS 2010 Conventions. An amplitude cutoff may be provided. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minimumAmplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Variation amplitude below which corrections are not taken into account. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default polar motion short-period correction calculator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/shortPeriodEarthOrientationCorrectionCalculator.cpp" line="113" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/shortPeriodEarthOrientationCorrectionCalculator.cpp" bodystart="113" bodyend="131" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/shortPeriodEarthOrientationCorrectionCalculator.h" declline="148" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/db2/terrestrialTimeScaleConverter_8h_1ab9e4ea7e8a419df31f681351db8a956f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d21/classtudat_1_1earth__orientation_1_1TerrestrialTimeScaleConverter" kindref="compound">TerrestrialTimeScaleConverter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; TerrestrialTimeScaleConverter &gt; tudat::earth_orientation::createDefaultTimeConverter</definition>
        <argsstring>(const std::shared_ptr&lt; EOPReader &gt; eopReader=std::make_shared&lt; EOPReader &gt;())</argsstring>
        <name>createDefaultTimeConverter</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/d3f/classtudat_1_1earth__orientation_1_1EOPReader" kindref="compound">EOPReader</ref> &gt;</type>
          <declname>eopReader</declname>
          <defval>std::make_shared&lt; <ref refid="db/d3f/classtudat_1_1earth__orientation_1_1EOPReader" kindref="compound">EOPReader</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create the default Earth time scales conversion object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create the default Earth time scales conversion object. All (sub-)diurnal corrections to UTC-UT1 according to IERS 2010, and UT1 daily corrections published by IERS (read from input <ref refid="db/d3f/classtudat_1_1earth__orientation_1_1EOPReader" kindref="compound">EOPReader</ref>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eopReader</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that reads an Earth Orientation Parameters file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default Earth time scales conversion object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/terrestrialTimeScaleConverter.cpp" line="67" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/earth_orientation/terrestrialTimeScaleConverter.cpp" bodystart="67" bodyend="76" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/terrestrialTimeScaleConverter.h" declline="349" declcolumn="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/earth_orientation/earthOrientationCalculator.h" line="28" column="1"/>
  </compounddef>
</doxygen>
