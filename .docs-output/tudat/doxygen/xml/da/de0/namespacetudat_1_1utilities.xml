<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="da/de0/namespacetudat_1_1utilities" kind="namespace" language="C++">
    <compoundname>tudat::utilities</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1aa0afd96ccb1d157c57ba326f0bb93e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; S, T &gt;</type>
        <definition>std::map&lt; S, T &gt; tudat::utilities::linearlyScaleKeyOfMap</definition>
        <argsstring>(const std::map&lt; S, T &gt; &amp;originalMap, S offset, S scale, bool isOffsetAppliedFirst=true)</argsstring>
        <name>linearlyScaleKeyOfMap</name>
        <param>
          <type>const std::map&lt; S, T &gt; &amp;</type>
          <declname>originalMap</declname>
        </param>
        <param>
          <type>S</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>S</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isOffsetAppliedFirst</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to recalculate map keys as a linear function of original map keys. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to recalculate map keys as a linear function of original map keys, i.e. new map key is constant * old key - offset or ( old key - offset ) * constant, where the choise between these two is provided by an input boolean. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>originalMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Orignal, unscaled map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset that is to be applied to (subtracted from) map keys </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Value by which existing map keys are to be scaled (either before or agter application of offset variabled, depending on value of isOffsetAppliedFirst input variable) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isOffsetAppliedFirst</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting order in which offset and scale are to be applied to existing map keys. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="41" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="41" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1ab7ffa5bbb8bf510a4e3942a82e36d63c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorArgument</type>
          </param>
          <param>
            <type>typename KeyType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; VectorArgument &gt;</type>
        <definition>std::vector&lt; VectorArgument &gt; tudat::utilities::createVectorFromMapValues</definition>
        <argsstring>(const std::map&lt; KeyType, VectorArgument &gt; &amp;inputMap)</argsstring>
        <name>createVectorFromMapValues</name>
        <param>
          <type>const std::map&lt; KeyType, VectorArgument &gt; &amp;</type>
          <declname>inputMap</declname>
        </param>
        <briefdescription>
<para>Function to create a vector from the values of a map. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a vector from the values of a map. The output vector is in the order of the map entries, i.e. as provided by a forward iterator. The map keys are not used for the return vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Original map from which the vector is to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector created from the map values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="75" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="75" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a7ff6b03086e9d46b54a9a9b0147e3126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorArgument</type>
          </param>
          <param>
            <type>typename KeyType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; KeyType &gt;</type>
        <definition>std::vector&lt; KeyType &gt; tudat::utilities::createVectorFromMapKeys</definition>
        <argsstring>(const std::map&lt; KeyType, VectorArgument &gt; &amp;inputMap)</argsstring>
        <name>createVectorFromMapKeys</name>
        <param>
          <type>const std::map&lt; KeyType, VectorArgument &gt; &amp;</type>
          <declname>inputMap</declname>
        </param>
        <briefdescription>
<para>Function to create a vector from the keys of a map. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a vector from the keys of a map. The output vector is in the order of the map entries, i.e. as provided by a forward iterator. The map values are not used for the return vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Original map from which the vector is to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector created from the map keys </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="100" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="100" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a84ee8b9e31498e72904a2d8100300cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>S</type>
        <definition>S tudat::utilities::sumFunctionReturn</definition>
        <argsstring>(const std::function&lt; S() &gt; function1, const std::function&lt; S() &gt; function2)</argsstring>
        <name>sumFunctionReturn</name>
        <param>
          <type>const std::function&lt; S() &gt;</type>
          <declname>function1</declname>
        </param>
        <param>
          <type>const std::function&lt; S() &gt;</type>
          <declname>function2</declname>
        </param>
        <briefdescription>
<para>Function to sum the return values of two boost function with empty input argument list. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to sum the return values of two boost function with empty input argument list. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function1</parametername>
</parameternamelist>
<parameterdescription>
<para>First function to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second function to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of return values of function1 and function2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="125" column="3" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a6c853341920db96eb057865033764d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>S</type>
        <definition>S tudat::utilities::subtractFunctionReturn</definition>
        <argsstring>(const std::function&lt; S() &gt; function1, const std::function&lt; S() &gt; function2)</argsstring>
        <name>subtractFunctionReturn</name>
        <param>
          <type>const std::function&lt; S() &gt;</type>
          <declname>function1</declname>
        </param>
        <param>
          <type>const std::function&lt; S() &gt;</type>
          <declname>function2</declname>
        </param>
        <briefdescription>
<para>Function to subtract the return values of two boost function with empty input argument list. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to subtract the return values of two boost function with empty input argument list. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function1</parametername>
</parameternamelist>
<parameterdescription>
<para>First function to be subtracted from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second function to be subtracted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return values of function1 - return value of function2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="138" column="3" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a03307b67bd8ee0129a64107e1014a78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::utilities::createVectorBlockMatrixHistory</definition>
        <argsstring>(const std::map&lt; S, Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &gt; &amp;matrixHistory, std::map&lt; S, Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &gt; &amp;blockMatrixHistory, const std::pair&lt; int, int &gt; startIndices, const int segmentSize)</argsstring>
        <name>createVectorBlockMatrixHistory</name>
        <param>
          <type>const std::map&lt; S, Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &gt; &amp;</type>
          <declname>matrixHistory</declname>
        </param>
        <param>
          <type>std::map&lt; S, Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>blockMatrixHistory</declname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <declname>startIndices</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>segmentSize</declname>
        </param>
        <briefdescription>
<para>Function to create a vector block history from full matrix history. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a vector matrix block history from full matrix history. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrixHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>Full matrix history </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockMatrixHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>Block vector history (return by reference). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting point (row,column) in matrix of return vector blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segmentSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="152" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="152" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a37a43245367b57d45bd45d227d7c66bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::utilities::printMapContents</definition>
        <argsstring>(const std::map&lt; S, T &gt; &amp;mapToPrint)</argsstring>
        <name>printMapContents</name>
        <param>
          <type>const std::map&lt; S, T &gt; &amp;</type>
          <declname>mapToPrint</declname>
        </param>
        <briefdescription>
<para>Function to print the contents of a map, line by line. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to print the contents of a map, line by line. Both the key and value types must have the &lt;&lt; operator defined <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mapToPrint</parametername>
</parameternamelist>
<parameterdescription>
<para>Map that is to be printed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="175" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="175" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a0f97484a4f7f2e8ecf91f4fd8c7c7cc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>int</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::utilities::castMatrixMap</definition>
        <argsstring>(const std::map&lt; S, Eigen::Matrix&lt; T, Rows, Columns &gt; &gt; &amp;originalMap, std::map&lt; U, Eigen::Matrix&lt; V, Rows, Columns &gt; &gt; &amp;newTypesMap)</argsstring>
        <name>castMatrixMap</name>
        <param>
          <type>const std::map&lt; S, Eigen::Matrix&lt; T, Rows, Columns &gt; &gt; &amp;</type>
          <declname>originalMap</declname>
        </param>
        <param>
          <type>std::map&lt; U, Eigen::Matrix&lt; V, Rows, Columns &gt; &gt; &amp;</type>
          <declname>newTypesMap</declname>
        </param>
        <briefdescription>
<para>Function to cast a map of Eigen matrices from one key/matrix scalar type set to another set. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to produce a map of Eigen matrices, cast from one set of key/matrix scalar type set to another set. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>originalMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map in original types </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newTypesMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map that is to be created (returned by reference). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="191" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="191" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1ac7db522751f00da8b6f97f01a03fda73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; T &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; T &gt; &gt; tudat::utilities::dynamicCastSVectorToTVector</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; S &gt; &gt; &amp;originalVector)</argsstring>
        <name>dynamicCastSVectorToTVector</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; S &gt; &gt; &amp;</type>
          <declname>originalVector</declname>
        </param>
        <briefdescription>
<para>Function to dynamic cast vector of shared pointers of one type to shared pointers of another type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to dynamic cast vector of shared pointers of one type (S) to shared pointers of another type (T). The dynamic cast must be permissible, i.e. an S pointer must succesfully dynamic cast to a T pointer (T shoudl typically derive from S). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>originalVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of S shared pointers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dynamic casted vector of T shared pointers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="210" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="210" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a8826e25d6f4baf3d1034c2b8237d0c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfRows</declname>
            <defname>NumberOfRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfColumns</declname>
            <defname>NumberOfColumns</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, Eigen::Dynamic, NumberOfColumns &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, Eigen::Dynamic, NumberOfColumns &gt; tudat::utilities::createConcatenatedEigenMatrixFromMapValues</definition>
        <argsstring>(const std::map&lt; KeyType, Eigen::Matrix&lt; ScalarType, NumberOfRows, NumberOfColumns &gt; &gt; &amp;inputMap)</argsstring>
        <name>createConcatenatedEigenMatrixFromMapValues</name>
        <param>
          <type>const std::map&lt; KeyType, Eigen::Matrix&lt; ScalarType, NumberOfRows, NumberOfColumns &gt; &gt; &amp;</type>
          <declname>inputMap</declname>
        </param>
        <briefdescription>
<para>Function to concatenate matrix values of map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="225" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="225" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1ab937fe377fe527b8f2f66772c882130f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfRows</declname>
            <defname>NumberOfRows</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Eigen::Matrix&lt; ScalarType, Eigen::Dynamic, 1 &gt;, Eigen::Matrix&lt; ScalarType, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</type>
        <definition>std::pair&lt; Eigen::Matrix&lt; ScalarType, Eigen::Dynamic, 1 &gt;, Eigen::Matrix&lt; ScalarType, Eigen::Dynamic, Eigen::Dynamic &gt; &gt; tudat::utilities::extractKeyAndValuesFromMap</definition>
        <argsstring>(const std::map&lt; KeyType, Eigen::Matrix&lt; ScalarType, NumberOfRows, 1 &gt; &gt; &amp;inputMap)</argsstring>
        <name>extractKeyAndValuesFromMap</name>
        <param>
          <type>const std::map&lt; KeyType, Eigen::Matrix&lt; ScalarType, NumberOfRows, 1 &gt; &gt; &amp;</type>
          <declname>inputMap</declname>
        </param>
        <briefdescription>
<para>Function to extract both keys and values from map, and output them as a pair. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="282" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="282" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1ae084b530a39126d9f71b9564a1795c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; tudat::utilities::convertEigenVectorToStlVector</definition>
        <argsstring>(const Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;eigenVector)</argsstring>
        <name>convertEigenVectorToStlVector</name>
        <param>
          <type>const Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>eigenVector</declname>
        </param>
        <briefdescription>
<para>Function to convert Eigen::Vector to std::vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="312" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="312" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a6185604e1e88e807107fba0d5fcd0b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; tudat::utilities::convertStlVectorToEigenVector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;stlVector)</argsstring>
        <name>convertStlVectorToEigenVector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>stlVector</declname>
        </param>
        <briefdescription>
<para>Function to convert std::vector to Eigen::Vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="325" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="325" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a38a390209923d63884b1e5af56554cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
            <defval>Eigen::Dynamic</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; tudat::utilities::convertStlVectorToEigenMatrix</definition>
        <argsstring>(const std::vector&lt; Eigen::Matrix&lt; T, Rows, 1 &gt; &gt; &amp;stlVector)</argsstring>
        <name>convertStlVectorToEigenMatrix</name>
        <param>
          <type>const std::vector&lt; Eigen::Matrix&lt; T, Rows, 1 &gt; &gt; &amp;</type>
          <declname>stlVector</declname>
        </param>
        <briefdescription>
<para>Function to convert std::vector to Eigen::Matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="337" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="337" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1af54bd13dd445f57624d887406b2a3f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; tudat::utilities::addScalarToVector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vector, const double scalar)</argsstring>
        <name>addScalarToVector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Function to add a double to all entries in an STL vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to add a double to all entries in an STL vector (addition of a double must be defined for T type). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to which a double is to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that is to be added to vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New vector with scalar added to all entries of input vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="365" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="365" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a76098cf72d99535ce14d506f507c2ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::utilities::copyMultiArray</definition>
        <argsstring>(const boost::multi_array&lt; S, NumberOfDimensions &gt; &amp;arrayToCopy, boost::multi_array&lt; S, NumberOfDimensions &gt; &amp;targetArray)</argsstring>
        <name>copyMultiArray</name>
        <param>
          <type>const boost::multi_array&lt; S, NumberOfDimensions &gt; &amp;</type>
          <declname>arrayToCopy</declname>
        </param>
        <param>
          <type>boost::multi_array&lt; S, NumberOfDimensions &gt; &amp;</type>
          <declname>targetArray</declname>
        </param>
        <briefdescription>
<para>Function to copy a multi-array into another multi-array. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to copy a multi-array into another multi-array, resizing the new multi-array accordingly <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arrayToCopy</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-array that is to be copied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetArray</parametername>
</parameternamelist>
<parameterdescription>
<para>New multi-array into which arrayToCopy is to be copied (returned by reference). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="387" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="387" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a657048a5d7f39201f785d121a385c1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>boost::multi_array&lt; double, NumberOfDimensions &gt;::index</type>
        <definition>boost::multi_array&lt; double, NumberOfDimensions &gt;::index tudat::utilities::getMultiArrayIndex</definition>
        <argsstring>(const typename boost::multi_array&lt; double, NumberOfDimensions &gt; &amp;multiArray, const double *requestedElement, const unsigned short int direction)</argsstring>
        <name>getMultiArrayIndex</name>
        <param>
          <type>const typename boost::multi_array&lt; double, NumberOfDimensions &gt; &amp;</type>
          <declname>multiArray</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>requestedElement</declname>
        </param>
        <param>
          <type>const unsigned short int</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Get index in nth direction of pointer to single entry in multi-array of doubles. </para>
        </briefdescription>
        <detaileddescription>
<para>Get index in nth direction of pointer to single entry in multi-array of doubles <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>multiArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-array for which the index is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedElement</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to element for which index is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of multi-array for which index is to be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index in nth direction of pointer to single entry in multi-array of doubles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="406" column="37" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="406" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1abba292560800158a5631f439aac326fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::array&lt; boost::multi_array&lt; double, 1 &gt;::index, 1 &gt;</type>
        <definition>boost::array&lt; boost::multi_array&lt; double, 1 &gt;::index, 1 &gt; tudat::utilities::getMultiArrayIndexArray</definition>
        <argsstring>(const boost::multi_array&lt; double, 1 &gt; &amp;multiArray, const double *requestedElement)</argsstring>
        <name>getMultiArrayIndexArray</name>
        <param>
          <type>const boost::multi_array&lt; double, 1 &gt; &amp;</type>
          <declname>multiArray</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>requestedElement</declname>
        </param>
        <briefdescription>
<para>Get indices of pointer to single entry in multi-array (size 1) of doubles. </para>
        </briefdescription>
        <detaileddescription>
<para>Get indices of pointer to single entry in multi-array (size 1) of doubles <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>multiArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-array for which the index is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedElement</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to element for which index is to be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Indices of pointer to single entry in multi-array of doubles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/basics/utilities.cpp" line="20" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/basics/utilities.cpp" bodystart="20" bodyend="32" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" declline="422" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a52273ae41a9cf75389b839cbad7e1bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::array&lt; boost::multi_array&lt; double, 2 &gt;::index, 2 &gt;</type>
        <definition>boost::array&lt; boost::multi_array&lt; double, 2 &gt;::index, 2 &gt; tudat::utilities::getMultiArrayIndexArray</definition>
        <argsstring>(const boost::multi_array&lt; double, 2 &gt; &amp;multiArray, const double *requestedElement)</argsstring>
        <name>getMultiArrayIndexArray</name>
        <param>
          <type>const boost::multi_array&lt; double, 2 &gt; &amp;</type>
          <declname>multiArray</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>requestedElement</declname>
        </param>
        <briefdescription>
<para>Get indices of pointer to single entry in multi-array (size 2) of doubles. </para>
        </briefdescription>
        <detaileddescription>
<para>Get indices of pointer to single entry in multi-array (size 2) of doubles <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>multiArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-array for which the index is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedElement</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to element for which index is to be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Indices of pointer to single entry in multi-array of doubles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/basics/utilities.cpp" line="35" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/basics/utilities.cpp" bodystart="35" bodyend="47" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" declline="432" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a07c60559e4cf7a6fd604383f22ff2104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::array&lt; boost::multi_array&lt; double, 3 &gt;::index, 3 &gt;</type>
        <definition>boost::array&lt; boost::multi_array&lt; double, 3 &gt;::index, 3 &gt; tudat::utilities::getMultiArrayIndexArray</definition>
        <argsstring>(const boost::multi_array&lt; double, 3 &gt; &amp;multiArray, const double *requestedElement)</argsstring>
        <name>getMultiArrayIndexArray</name>
        <param>
          <type>const boost::multi_array&lt; double, 3 &gt; &amp;</type>
          <declname>multiArray</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>requestedElement</declname>
        </param>
        <briefdescription>
<para>Get indices of pointer to single entry in multi-array (size 3) of doubles. </para>
        </briefdescription>
        <detaileddescription>
<para>Get indices of pointer to single entry in multi-array (size 3) of doubles <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>multiArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-array for which the index is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedElement</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to element for which index is to be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Indices of pointer to single entry in multi-array of doubles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/basics/utilities.cpp" line="50" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/basics/utilities.cpp" bodystart="50" bodyend="62" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" declline="442" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a855f3e9a1ac6f189ecb64eca19bc1c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; S &gt;</type>
        <definition>std::vector&lt; S &gt; tudat::utilities::createVectorFromVectorOfPairFirsts</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; S, T &gt; &gt; inputVector)</argsstring>
        <name>createVectorFromVectorOfPairFirsts</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; S, T &gt; &gt;</type>
          <declname>inputVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="446" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="446" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1afb6d1809b5ffd015d531e456b61172e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T tudat::utilities::evaluateFunctionWithoutInputArgumentDependency</definition>
        <argsstring>(std::function&lt; T() &gt; inputFreeFunction, const S dummyInput)</argsstring>
        <name>evaluateFunctionWithoutInputArgumentDependency</name>
        <param>
          <type>std::function&lt; T() &gt;</type>
          <declname>inputFreeFunction</declname>
        </param>
        <param>
          <type>const S</type>
          <declname>dummyInput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="458" column="3" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="458" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a93cdd935427a4cca8218aae7e2d6e408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; tudat::utilities::getSortOrderOfVector</definition>
        <argsstring>(const std::vector&lt; T &gt; unsortedVector)</argsstring>
        <name>getSortOrderOfVector</name>
        <param>
          <type>const std::vector&lt; T &gt;</type>
          <declname>unsortedVector</declname>
        </param>
        <briefdescription>
<para>Function to get the order in which the input vector would be sorted (in ascending order) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the order in which the input vector would be sorted (in ascending order). Example: for inout vector (5,2,6,7,4,0), output would be (5,1,4,0,2,3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unsortedVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of which the sort order is to be determined </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Order in which the input vector would be sorted (in ascending order) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="471" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1ae625adfdbd740bfdf4c5843bd0c4e414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorArgument</type>
          </param>
          <param>
            <type>typename KeyType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; VectorArgument &gt;</type>
        <definition>std::vector&lt; VectorArgument &gt; tudat::utilities::createVectorFromMultiMapValues</definition>
        <argsstring>(const std::multimap&lt; KeyType, VectorArgument &gt; &amp;inputMap)</argsstring>
        <name>createVectorFromMultiMapValues</name>
        <param>
          <type>const std::multimap&lt; KeyType, VectorArgument &gt; &amp;</type>
          <declname>inputMap</declname>
        </param>
        <briefdescription>
<para>Function to create a vector from the values of a multimap. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a vector from the values of a multimap. The output vector is in the order of the multimap entries, i.e. as provided by a forward iterator. The multimap keys are not used for the return vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Original multimap from which the vector is to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector created from the multimap values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="484" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="484" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a296cc0b23594eca7a78a8500ee568af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VectorArgument</type>
          </param>
          <param>
            <type>typename KeyType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; KeyType &gt;</type>
        <definition>std::vector&lt; KeyType &gt; tudat::utilities::createVectorFromMultiMapKeys</definition>
        <argsstring>(const std::multimap&lt; KeyType, VectorArgument &gt; &amp;inputMap)</argsstring>
        <name>createVectorFromMultiMapKeys</name>
        <param>
          <type>const std::multimap&lt; KeyType, VectorArgument &gt; &amp;</type>
          <declname>inputMap</declname>
        </param>
        <briefdescription>
<para>Function to create a vector from the keys of a multimap. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a vector from the keys of a multimap. The output vector is in the order of the multimap entries, i.e. as provided by a forward iterator. The multimap values are not used for the return vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Original multimap from which the vector is to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector created from the multimap keys </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="510" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="510" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a553717c9b01a377e5fbb47f9f3b596d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::vector&lt; int &gt;, std::vector&lt; T &gt; &gt;</type>
        <definition>std::pair&lt; std::vector&lt; int &gt;, std::vector&lt; T &gt; &gt; tudat::utilities::getSortOrderOfVectorAndSortedVector</definition>
        <argsstring>(const std::vector&lt; T &gt; unsortedVector)</argsstring>
        <name>getSortOrderOfVectorAndSortedVector</name>
        <param>
          <type>const std::vector&lt; T &gt;</type>
          <declname>unsortedVector</declname>
        </param>
        <briefdescription>
<para>Function to get sorted vector of an input vector, as well as the order in which this input has been be sorted (ascending) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get sorted vector of an input vector, as well as the order in which this input has been be sorted (ascending)). Example: for inout vector (5,2,6,7,4,0), output would be [(5,1,4,0,2,3), (0,2,4,5,6,7)]. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unsortedVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector that is to be sorted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Parit, with first: order in which the input vector is sorted (in ascending order), second: sorted input vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="536" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="536" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a3c3729d39dbee0d760df4a34697f77d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tudat::utilities::doStlVectorContentsMatch</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vectorA, const std::vector&lt; T &gt; &amp;vectorB)</argsstring>
        <name>doStlVectorContentsMatch</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vectorA</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vectorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="548" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="548" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a19f2c25526670ce13bcf9468760cfffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MapKey</type>
          </param>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; MapKey, Eigen::Array&lt; ScalarType, Eigen::Dynamic, 1 &gt; &gt;</type>
        <definition>std::map&lt; MapKey, Eigen::Array&lt; ScalarType, Eigen::Dynamic, 1 &gt; &gt; tudat::utilities::convertStlVectorMapToEigenVectorMap</definition>
        <argsstring>(std::map&lt; MapKey, std::vector&lt; ScalarType &gt; &gt; stlVectorMap)</argsstring>
        <name>convertStlVectorMapToEigenVectorMap</name>
        <param>
          <type>std::map&lt; MapKey, std::vector&lt; ScalarType &gt; &gt;</type>
          <declname>stlVectorMap</declname>
        </param>
        <briefdescription>
<para>Transform from map of std::vector (output of text file reader) to map of Eigen::Array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="573" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="573" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a94971b7f6fac5f78fe00dbdddb1e8d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; tudat::utilities::sliceStlVector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vectorToBeSliced, unsigned int startIndex=0, unsigned int endIndex=std::numeric_limits&lt; unsigned int &gt;::signaling_NaN())</argsstring>
        <name>sliceStlVector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vectorToBeSliced</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>startIndex</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>endIndex</declname>
          <defval>std::numeric_limits&lt; unsigned int &gt;::signaling_NaN()</defval>
        </param>
        <briefdescription>
<para>Function to slice standard library vector, given an optional initial and final slicing values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="591" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="591" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a8f2166e0c5c4b43b40aabee7237d4a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>FixedSize</declname>
            <defname>FixedSize</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::utilities::castDynamicToFixedSizeEigenVectorMap</definition>
        <argsstring>(std::map&lt; KeyType, Eigen::Matrix&lt; ScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;originalMap, std::map&lt; KeyType, Eigen::Matrix&lt; ScalarType, FixedSize, 1 &gt; &gt; &amp;fixedSizeMap)</argsstring>
        <name>castDynamicToFixedSizeEigenVectorMap</name>
        <param>
          <type>std::map&lt; KeyType, Eigen::Matrix&lt; ScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>originalMap</declname>
        </param>
        <param>
          <type>std::map&lt; KeyType, Eigen::Matrix&lt; ScalarType, FixedSize, 1 &gt; &gt; &amp;</type>
          <declname>fixedSizeMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="625" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="625" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="da/df9/basics_2utilities_8h_1a8c18680bb1f7965a1e41e364fe363149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int tudat::utilities::sgn</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>sgn</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Function to return the sign (+1 or -1) of a variable of type T. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable for which sign is to be determined </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sign of variable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="640" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" bodystart="640" bodyend="643"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/basics/utilities.h" line="27" column="1"/>
  </compounddef>
</doxygen>
