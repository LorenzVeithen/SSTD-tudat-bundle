<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator" kind="class" language="C++" prot="public">
    <compoundname>tudat::interpolators::CubicSplineInterpolator</compoundname>
    <basecompoundref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" prot="public" virt="non-virtual">tudat::interpolators::OneDimensionalInterpolator&lt; IndependentVariableType, DependentVariableType &gt;</basecompoundref>
    <includes refid="da/d70/cubicSplineInterpolator_8h" local="no">cubicSplineInterpolator.h</includes>
    <templateparamlist>
      <param>
        <type>typename IndependentVariableType</type>
      </param>
      <param>
        <type>typename DependentVariableType</type>
      </param>
      <param>
        <type>typename ScalarType</type>
        <defval>IndependentVariableType</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1a09118b538962b7c66f2b2ff6ba95ecf5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; DependentVariableType &gt;</type>
        <definition>std::vector&lt; DependentVariableType &gt; tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;::secondDerivativeOfCurve_</definition>
        <argsstring></argsstring>
        <name>secondDerivativeOfCurve_</name>
        <briefdescription>
<para>Vector filled with second derivative of curvature of each point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="402" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1aba6a2598e073c8ab72d9cbfc3ae909bb" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;::numberOfDataPoints_</definition>
        <argsstring></argsstring>
        <name>numberOfDataPoints_</name>
        <briefdescription>
<para>The number of datapoints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="405" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1ad1e2c43c41518f7b84a4b07927a63192" prot="private" static="no" mutable="no">
        <type>DependentVariableType</type>
        <definition>DependentVariableType tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;::zeroValue_</definition>
        <argsstring></argsstring>
        <name>zeroValue_</name>
        <briefdescription>
<para>Zero value of independent variable type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="408" column="27" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1a215f2b7b0eb1af4d6c7f1282804a3aad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;::CubicSplineInterpolator</definition>
        <argsstring>(const std::vector&lt; IndependentVariableType &gt; &amp;independentVariables, const std::vector&lt; DependentVariableType &gt; &amp;dependentVariables, const AvailableLookupScheme selectedLookupScheme=huntingAlgorithm, const BoundaryInterpolationType boundaryHandling=extrapolate_at_boundary, const std::pair&lt; DependentVariableType, DependentVariableType &gt; &amp;defaultExtrapolationValue=std::make_pair(IdentityElement::getAdditionIdentity&lt; DependentVariableType &gt;(), IdentityElement::getAdditionIdentity&lt; DependentVariableType &gt;()))</argsstring>
        <name>CubicSplineInterpolator</name>
        <param>
          <type>const std::vector&lt; IndependentVariableType &gt; &amp;</type>
          <declname>independentVariables</declname>
        </param>
        <param>
          <type>const std::vector&lt; DependentVariableType &gt; &amp;</type>
          <declname>dependentVariables</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d05/namespacetudat_1_1interpolators_1a31d6dcb244ab2e3055371ab377027bb1" kindref="member">AvailableLookupScheme</ref></type>
          <declname>selectedLookupScheme</declname>
          <defval>huntingAlgorithm</defval>
        </param>
        <param>
          <type>const <ref refid="d3/d05/namespacetudat_1_1interpolators_1a2a462da4b91afdc785987bc35a2325e8" kindref="member">BoundaryInterpolationType</ref></type>
          <declname>boundaryHandling</declname>
          <defval>extrapolate_at_boundary</defval>
        </param>
        <param>
          <type>const std::pair&lt; DependentVariableType, DependentVariableType &gt; &amp;</type>
          <declname>defaultExtrapolationValue</declname>
          <defval>std::make_pair(<ref refid="dd/dcc/classtudat_1_1IdentityElement_1ab3bf500034128c13c2a34fdad21de2b1" kindref="member">IdentityElement::getAdditionIdentity</ref>&lt; DependentVariableType &gt;(), <ref refid="dd/dcc/classtudat_1_1IdentityElement_1ab3bf500034128c13c2a34fdad21de2b1" kindref="member">IdentityElement::getAdditionIdentity</ref>&lt; DependentVariableType &gt;())</defval>
        </param>
        <briefdescription>
<para>Cubic spline interpolator constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Cubic spline interpolator constructor taking separate vectors of dependent and independent variable values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector with the independent variable values, must be sorted in ascending order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector with the dependent variable values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedLookupScheme</parametername>
</parameternamelist>
<parameterdescription>
<para>Look-up scheme that is to be used when finding interval of requested independent variable value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundaryHandling</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundary handling method, in case the independent variable is outside the specified range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultExtrapolationValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair of default values to be used for extrapolation, in case of use_default_value or use_default_value_with_warning as methods for boundaryHandling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="134" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="134" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1aad05017ef7cbbcf1958902c638df8bfe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;::CubicSplineInterpolator</definition>
        <argsstring>(const std::vector&lt; IndependentVariableType &gt; &amp;independentVariables, const std::vector&lt; DependentVariableType &gt; &amp;dependentVariables, const AvailableLookupScheme selectedLookupScheme, const BoundaryInterpolationType boundaryHandling, const DependentVariableType &amp;defaultExtrapolationValue)</argsstring>
        <name>CubicSplineInterpolator</name>
        <param>
          <type>const std::vector&lt; IndependentVariableType &gt; &amp;</type>
          <declname>independentVariables</declname>
        </param>
        <param>
          <type>const std::vector&lt; DependentVariableType &gt; &amp;</type>
          <declname>dependentVariables</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d05/namespacetudat_1_1interpolators_1a31d6dcb244ab2e3055371ab377027bb1" kindref="member">AvailableLookupScheme</ref></type>
          <declname>selectedLookupScheme</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d05/namespacetudat_1_1interpolators_1a2a462da4b91afdc785987bc35a2325e8" kindref="member">BoundaryInterpolationType</ref></type>
          <declname>boundaryHandling</declname>
        </param>
        <param>
          <type>const DependentVariableType &amp;</type>
          <declname>defaultExtrapolationValue</declname>
        </param>
        <briefdescription>
<para>Cubic spline interpolator constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Cubic spline interpolator constructor taking separate vectors of dependent and independent variable values. This constructor takes a single default value, instead of a pair. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector with the independent variable values, must be sorted in ascending order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector with the dependent variable values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedLookupScheme</parametername>
</parameternamelist>
<parameterdescription>
<para>Look-up scheme that is to be used when finding interval of requested independent variable value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundaryHandling</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundary handling method, in case the independent variable is outside the specified range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultExtrapolationValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value to be used for extrapolation, in case of use_default_value or use_default_value_with_warning as methods for boundaryHandling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="189" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="189" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1acc3eff569634181fc5c80f191bfa7e62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;::CubicSplineInterpolator</definition>
        <argsstring>(const std::map&lt; IndependentVariableType, DependentVariableType &gt; dataMap, const AvailableLookupScheme selectedLookupScheme=huntingAlgorithm, const BoundaryInterpolationType boundaryHandling=extrapolate_at_boundary, const std::pair&lt; DependentVariableType, DependentVariableType &gt; &amp;defaultExtrapolationValue=std::make_pair(IdentityElement::getAdditionIdentity&lt; DependentVariableType &gt;(), IdentityElement::getAdditionIdentity&lt; DependentVariableType &gt;()))</argsstring>
        <name>CubicSplineInterpolator</name>
        <param>
          <type>const std::map&lt; IndependentVariableType, DependentVariableType &gt;</type>
          <declname>dataMap</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d05/namespacetudat_1_1interpolators_1a31d6dcb244ab2e3055371ab377027bb1" kindref="member">AvailableLookupScheme</ref></type>
          <declname>selectedLookupScheme</declname>
          <defval>huntingAlgorithm</defval>
        </param>
        <param>
          <type>const <ref refid="d3/d05/namespacetudat_1_1interpolators_1a2a462da4b91afdc785987bc35a2325e8" kindref="member">BoundaryInterpolationType</ref></type>
          <declname>boundaryHandling</declname>
          <defval>extrapolate_at_boundary</defval>
        </param>
        <param>
          <type>const std::pair&lt; DependentVariableType, DependentVariableType &gt; &amp;</type>
          <declname>defaultExtrapolationValue</declname>
          <defval>std::make_pair(<ref refid="dd/dcc/classtudat_1_1IdentityElement_1ab3bf500034128c13c2a34fdad21de2b1" kindref="member">IdentityElement::getAdditionIdentity</ref>&lt; DependentVariableType &gt;(), <ref refid="dd/dcc/classtudat_1_1IdentityElement_1ab3bf500034128c13c2a34fdad21de2b1" kindref="member">IdentityElement::getAdditionIdentity</ref>&lt; DependentVariableType &gt;())</defval>
        </param>
        <briefdescription>
<para>Cubic spline interpolator constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Cubic spline interpolator constructor taking single map of independent and dependent variable values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map with the independent variable values as keys and corresponding dependent variable values as values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedLookupScheme</parametername>
</parameternamelist>
<parameterdescription>
<para>Lookup scheme that is to be used when finding interval of requested independent variable value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundaryHandling</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundary handling method, in case the independent variable is outside the specified range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultExtrapolationValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair of default values to be used for extrapolation, in case of use_default_value or use_default_value_with_warning as methods for boundaryHandling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="211" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="211" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1ae45c1ed66bbcf8c3ec2adb99cc8ab7e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;::CubicSplineInterpolator</definition>
        <argsstring>(const std::map&lt; IndependentVariableType, DependentVariableType &gt; dataMap, const AvailableLookupScheme selectedLookupScheme, const BoundaryInterpolationType boundaryHandling, const DependentVariableType &amp;defaultExtrapolationValue)</argsstring>
        <name>CubicSplineInterpolator</name>
        <param>
          <type>const std::map&lt; IndependentVariableType, DependentVariableType &gt;</type>
          <declname>dataMap</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d05/namespacetudat_1_1interpolators_1a31d6dcb244ab2e3055371ab377027bb1" kindref="member">AvailableLookupScheme</ref></type>
          <declname>selectedLookupScheme</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d05/namespacetudat_1_1interpolators_1a2a462da4b91afdc785987bc35a2325e8" kindref="member">BoundaryInterpolationType</ref></type>
          <declname>boundaryHandling</declname>
        </param>
        <param>
          <type>const DependentVariableType &amp;</type>
          <declname>defaultExtrapolationValue</declname>
        </param>
        <briefdescription>
<para>Cubic spline interpolator constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Cubic spline interpolator constructor taking single map of independent and dependent variable values. This constructor takes a single default value, instead of a pair. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map with the independent variable values as keys and corresponding dependent variable values as values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedLookupScheme</parametername>
</parameternamelist>
<parameterdescription>
<para>Lookup scheme that is to be used when finding interval of requested independent variable value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundaryHandling</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundary handling method, in case the independent variable is outside the specified range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultExtrapolationValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value to be used for extrapolation, in case of use_default_value or use_default_value_with_warning as methods for boundaryHandling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="262" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="262" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1afc6890b74cb63542a2a450d14d089c73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;::~CubicSplineInterpolator</definition>
        <argsstring>()</argsstring>
        <name>~CubicSplineInterpolator</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="272" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="272" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1a81ec99d79a07248afe3523dcf668e00b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>DependentVariableType</type>
        <definition>DependentVariableType tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;::interpolate</definition>
        <argsstring>(const IndependentVariableType targetIndependentVariableValue)</argsstring>
        <name>interpolate</name>
        <reimplements refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1a1756cce160465357493e18221aa49dee">interpolate</reimplements>
        <param>
          <type>const IndependentVariableType</type>
          <declname>targetIndependentVariableValue</declname>
        </param>
        <briefdescription>
<para>Interpolate. </para>
        </briefdescription>
        <detaileddescription>
<para>Executes interpolation of data at a given target value of the independent variable, to yield an interpolated value of the dependent variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>targetIndependentVariableValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Target independent variable value at which point the interpolation is performed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interpolated dependent variable value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="282" column="27" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="282" bodyend="320"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1ab588a44e4f3fe78d0181eb032cb051db" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;::calculateSecondDerivatives</definition>
        <argsstring>()</argsstring>
        <name>calculateSecondDerivatives</name>
        <briefdescription>
<para>Calculates the second derivatives of the curve. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the second derivatives of the curve at the nodes, assuming the first derivatives to be continuous at the nodes and imposing natural spline conditions (zero curvature at endpoints). The methodology is described in (Press W.H., et al., 2002). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="332" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="332" bodyend="399"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Cubic spline interpolator, implementation from (Press W.H., et al., 2002). </para>
    </briefdescription>
    <detaileddescription>
<para>Cubic spline interpolator, implementation from (Press W.H., et al., 2002). Natural boundary conditions are imposed, meaning zero second derivatives (curvature) at end points. Continuity of first derivatives is imposed. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IndependentVariableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DependentVariableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of dependent variables. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>tudat::interpolators::Interpolator&lt; IndependentVariableType, DependentVariableType &gt;</label>
        <link refid="d4/d6c/classtudat_1_1interpolators_1_1Interpolator"/>
      </node>
      <node id="2">
        <label>tudat::interpolators::OneDimensionalInterpolator&lt; IndependentVariableType, DependentVariableType &gt;</label>
        <link refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;</label>
        <link refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>tudat::interpolators::Interpolator&lt; IndependentVariableType, DependentVariableType &gt;</label>
        <link refid="d4/d6c/classtudat_1_1interpolators_1_1Interpolator"/>
      </node>
      <node id="2">
        <label>tudat::interpolators::OneDimensionalInterpolator&lt; IndependentVariableType, DependentVariableType &gt;</label>
        <link refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>tudat::interpolators::CubicSplineInterpolator&lt; IndependentVariableType, DependentVariableType, ScalarType &gt;</label>
        <link refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" line="107" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/interpolators/cubicSplineInterpolator.h" bodystart="109" bodyend="410"/>
    <listofallmembers>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1a5667535e45f5768ae46dd3b7d8895434" prot="protected" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>boundaryHandling_</name></member>
      <member refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1ab588a44e4f3fe78d0181eb032cb051db" prot="private" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>calculateSecondDerivatives</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1ae6db7b6475e9c91eeaa00a0d3e546977" prot="protected" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>checkBoundaryCase</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1ad81400f48dbbc749680975d4ba4ae0de" prot="protected" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>checkInterpolationBoundary</name></member>
      <member refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1a215f2b7b0eb1af4d6c7f1282804a3aad" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>CubicSplineInterpolator</name></member>
      <member refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1aad05017ef7cbbcf1958902c638df8bfe" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>CubicSplineInterpolator</name></member>
      <member refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1acc3eff569634181fc5c80f191bfa7e62" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>CubicSplineInterpolator</name></member>
      <member refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1ae45c1ed66bbcf8c3ec2adb99cc8ab7e0" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>CubicSplineInterpolator</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1a0cf25b829669d7e1bede2ea4f0677bcd" prot="protected" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>defaultExtrapolationValue_</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1aabbc1fda1543131d0e6bf62bcd377839" prot="protected" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>dependentValues_</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1ad0b73292c984422f5dd2164d3dbda3ff" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>getDependentValues</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1ab6b15e16220ddf2f5896c37afb1d1e05" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>getIndependentValues</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1ae2f2a3c4a9838b33add5dac14f69f86f" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>getLookUpScheme</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1a149d4201dc4869276bd2961d17e5acdd" prot="public" virt="virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>getNumberOfDimensions</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1a283eacac87aef562273161b6d42c77f6" prot="protected" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>independentValues_</name></member>
      <member refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1a81ec99d79a07248afe3523dcf668e00b" prot="public" virt="virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>interpolate</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1aaf340e39d13f8b31cab6887b48427918" prot="public" virt="virtual" ambiguityscope="tudat::interpolators::OneDimensionalInterpolator::"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>interpolate</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1a1c2938974e40dd7b48bc6fd42cc7a1cb" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>interpolateNonConst</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1a1f1471fffc3f6f0b33f8ca44108e9dec" prot="protected" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>lookUpScheme_</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1abc218f1803c7f54fad3e0e71d625c764" prot="protected" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>makeLookupScheme</name></member>
      <member refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1aba6a2598e073c8ab72d9cbfc3ae909bb" prot="private" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>numberOfDataPoints_</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1a49ff8a3d4870f4651d576abe48654ed2" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>OneDimensionalInterpolator</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1a83cc44f27902300df59e43ad9bb04e37" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>OneDimensionalInterpolator</name></member>
      <member refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1a09118b538962b7c66f2b2ff6ba95ecf5" prot="private" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>secondDerivativeOfCurve_</name></member>
      <member refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1ad1e2c43c41518f7b84a4b07927a63192" prot="private" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>zeroValue_</name></member>
      <member refid="d6/d84/classtudat_1_1interpolators_1_1CubicSplineInterpolator_1afc6890b74cb63542a2a450d14d089c73" prot="public" virt="non-virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>~CubicSplineInterpolator</name></member>
      <member refid="d4/d6c/classtudat_1_1interpolators_1_1Interpolator_1ac6359fc3104b07fb6cac0b3b3221cc3d" prot="public" virt="virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>~Interpolator</name></member>
      <member refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator_1ad359d0d7a6f229fb9f65260cb3bd2779" prot="public" virt="virtual"><scope>tudat::interpolators::CubicSplineInterpolator</scope><name>~OneDimensionalInterpolator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
