<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator" kind="class" language="C++" prot="public">
    <compoundname>tudat::observation_models::BodyAvoidanceAngleCalculator</compoundname>
    <basecompoundref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" prot="public" virt="non-virtual">tudat::observation_models::ObservationViabilityCalculator</basecompoundref>
    <includes refid="d8/d9d/observationViabilityCalculator_8h" local="no">observationViabilityCalculator.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a3ea603c21cd50db709add2be7d919bd3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; int, int &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; int, int &gt; &gt; tudat::observation_models::BodyAvoidanceAngleCalculator::linkEndIndices_</definition>
        <argsstring></argsstring>
        <name>linkEndIndices_</name>
        <briefdescription>
<para>Vector of indices denoting which combinations of entries of vectors to isObservationViable are to be used. </para>
        </briefdescription>
        <detaileddescription>
<para>Vector of indices denoting which combinations of entries from the linkEndIndices and linkEndTimes vectors to use for elevation angle calculator when isObservationViable is called. The second entry of the pair is the index of the target that is being observed from the ground station at which the avoidance angle is checked, the first entry is the index of the ground station at which the check is performed. From each entry of this vector, a vector is created for which the avoidance angle to bodyToAvoid_ is checked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="217" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a331d0fe9f76ea58ffb27bb7dc4528628" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double tudat::observation_models::BodyAvoidanceAngleCalculator::bodyAvoidanceAngle_</definition>
        <argsstring></argsstring>
        <name>bodyAvoidanceAngle_</name>
        <briefdescription>
<para>Minimum angle between line-of-sight vector and vector to avoided body that is allowed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="220" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a5e3790c4050713d18df9a33acd21e472" prot="private" static="no" mutable="no">
        <type>std::function&lt; Eigen::Vector6d(const double) &gt;</type>
        <definition>std::function&lt; Eigen::Vector6d( const double ) &gt; tudat::observation_models::BodyAvoidanceAngleCalculator::stateFunctionOfBodyToAvoid_</definition>
        <argsstring></argsstring>
        <name>stateFunctionOfBodyToAvoid_</name>
        <briefdescription>
<para>Function that returns the inertial state of the body that is to be avoided as a function of time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="223" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a652f014b11f1f3cb22e12cb7591939cd" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string tudat::observation_models::BodyAvoidanceAngleCalculator::bodyToAvoid_</definition>
        <argsstring></argsstring>
        <name>bodyToAvoid_</name>
        <briefdescription>
<para>Name of the body that is to be avoided. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="226" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a6b204e9253ba46dc10d1b13abc06dfff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::observation_models::BodyAvoidanceAngleCalculator::BodyAvoidanceAngleCalculator</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; int, int &gt; &gt; linkEndIndices, const double bodyAvoidanceAngle, const std::function&lt; Eigen::Vector6d(const double) &gt; stateFunctionOfBodyToAvoid, const std::string bodyToAvoid)</argsstring>
        <name>BodyAvoidanceAngleCalculator</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt;</type>
          <declname>linkEndIndices</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bodyAvoidanceAngle</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector6d(const double) &gt;</type>
          <declname>stateFunctionOfBodyToAvoid</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyToAvoid</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator" kindref="compound">BodyAvoidanceAngleCalculator</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEndIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of indices denoting which combinations of entries from the linkEndIndices and linkEndTimes vectors to use for elevation angle calculator when isObservationViable is called. The second entry of the pair is the index of the target that is being observed from the ground station at which the avoidance angle is checked, the first entry is the index of the ground station at which the check is performed. From each entry of this vector, a vector is created for which the avoidance angle to bodyToAvoid_ is checked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyAvoidanceAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum angle between line-of-sight vector and vector to avoided body that is allowed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateFunctionOfBodyToAvoid</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that returns the inertial state of the body that is to be avoided as a functiom of time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToAvoid</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body that is to be avoided. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="181" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="181" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a5790f36c84bd55c67a7300fd3853a9c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::observation_models::BodyAvoidanceAngleCalculator::~BodyAvoidanceAngleCalculator</definition>
        <argsstring>()</argsstring>
        <name>~BodyAvoidanceAngleCalculator</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="191" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a69f728895bb75c8dd1ac994ddb493a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool tudat::observation_models::BodyAvoidanceAngleCalculator::isObservationViable</definition>
        <argsstring>(const std::vector&lt; Eigen::Vector6d &gt; &amp;linkEndStates, const std::vector&lt; double &gt; &amp;linkEndTimes)</argsstring>
        <name>isObservationViable</name>
        <reimplements refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator_1a10e0bb328451764f39e626d2b11141ee">isObservationViable</reimplements>
        <param>
          <type>const std::vector&lt; Eigen::Vector6d &gt; &amp;</type>
          <declname>linkEndStates</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>linkEndTimes</declname>
        </param>
        <briefdescription>
<para>Function for determining whether the avoidance angle to a given body at station is sufficient to allow observation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function for determining whether the avoidance angle to a given body at station is sufficient to allow observation. The input from which the viability of an observation is calculated are a vector of times and states of link ends involved in the observation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEndStates</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of states of the link ends involved in the observation, in the order as provided by the function computeObservationsAndLinkEndData of the associated <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of times of the link ends involved in the observation, in the order as provided by the function computeObservationsAndLinkEndData of the associated <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if observation is viable, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="204" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observationViabilityCalculator.cpp" bodystart="77" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Function to check whether an observation is possible, based on body avoidance angle, as vied from single link end. </para>
    </briefdescription>
    <detaileddescription>
<para>Function to check whether an observation is possible, based on body avoidance angle, as vied from single link end. A typical example of this is the sun avoidance (or solar separation) angle, on which a limit is typically imposed. Calculations in this class computes the angle between the line-of-sight vector(s) from a single link end, and the vecotr from this link end to the center of mass of the body that is to be &apos;avoided&apos;. NOTE: This class computes the position of the body that is to be avoided in at the time halfway between transmission and reception time of the signal </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>tudat::observation_models::ObservationViabilityCalculator</label>
        <link refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator"/>
      </node>
      <node id="1">
        <label>tudat::observation_models::BodyAvoidanceAngleCalculator</label>
        <link refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>tudat::observation_models::ObservationViabilityCalculator</label>
        <link refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator"/>
      </node>
      <node id="1">
        <label>tudat::observation_models::BodyAvoidanceAngleCalculator</label>
        <link refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="164" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="165" bodyend="227"/>
    <listofallmembers>
      <member refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a331d0fe9f76ea58ffb27bb7dc4528628" prot="private" virt="non-virtual"><scope>tudat::observation_models::BodyAvoidanceAngleCalculator</scope><name>bodyAvoidanceAngle_</name></member>
      <member refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a6b204e9253ba46dc10d1b13abc06dfff" prot="public" virt="non-virtual"><scope>tudat::observation_models::BodyAvoidanceAngleCalculator</scope><name>BodyAvoidanceAngleCalculator</name></member>
      <member refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a652f014b11f1f3cb22e12cb7591939cd" prot="private" virt="non-virtual"><scope>tudat::observation_models::BodyAvoidanceAngleCalculator</scope><name>bodyToAvoid_</name></member>
      <member refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a69f728895bb75c8dd1ac994ddb493a1e" prot="public" virt="virtual"><scope>tudat::observation_models::BodyAvoidanceAngleCalculator</scope><name>isObservationViable</name></member>
      <member refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a3ea603c21cd50db709add2be7d919bd3" prot="private" virt="non-virtual"><scope>tudat::observation_models::BodyAvoidanceAngleCalculator</scope><name>linkEndIndices_</name></member>
      <member refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator_1a3fc6b1b8e740c2de0a2ecdeb9f411b3a" prot="public" virt="non-virtual"><scope>tudat::observation_models::BodyAvoidanceAngleCalculator</scope><name>ObservationViabilityCalculator</name></member>
      <member refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a5e3790c4050713d18df9a33acd21e472" prot="private" virt="non-virtual"><scope>tudat::observation_models::BodyAvoidanceAngleCalculator</scope><name>stateFunctionOfBodyToAvoid_</name></member>
      <member refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator_1a5790f36c84bd55c67a7300fd3853a9c2" prot="public" virt="non-virtual"><scope>tudat::observation_models::BodyAvoidanceAngleCalculator</scope><name>~BodyAvoidanceAngleCalculator</name></member>
      <member refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator_1a2d946b60b63096edf768e7dfbf5eafe6" prot="public" virt="virtual"><scope>tudat::observation_models::BodyAvoidanceAngleCalculator</scope><name>~ObservationViabilityCalculator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
