<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d2/d9c/namespacetudat_1_1propagators" kind="namespace" language="C++">
    <compoundname>tudat::propagators</compoundname>
    <innerclass refid="d5/d19/classtudat_1_1propagators_1_1BodyMassStateDerivative" prot="public">tudat::propagators::BodyMassStateDerivative</innerclass>
    <innerclass refid="dc/d59/classtudat_1_1propagators_1_1CentralBodyData" prot="public">tudat::propagators::CentralBodyData</innerclass>
    <innerclass refid="d4/d77/classtudat_1_1propagators_1_1CustomStateDerivative" prot="public">tudat::propagators::CustomStateDerivative</innerclass>
    <innerclass refid="d5/d9f/classtudat_1_1propagators_1_1DynamicsStateDerivativeModel" prot="public">tudat::propagators::DynamicsStateDerivativeModel</innerclass>
    <innerclass refid="df/d77/classtudat_1_1propagators_1_1EquationIntegrationInterface" prot="public">tudat::propagators::EquationIntegrationInterface</innerclass>
    <innerclass refid="d8/da4/classtudat_1_1propagators_1_1EquationIntegrationInterface_3_01StateType_00_01double_01_4" prot="public">tudat::propagators::EquationIntegrationInterface&lt; StateType, double &gt;</innerclass>
    <innerclass refid="d5/d3d/classtudat_1_1propagators_1_1EquationIntegrationInterface_3_01StateType_00_01Time_01_4" prot="public">tudat::propagators::EquationIntegrationInterface&lt; StateType, Time &gt;</innerclass>
    <innerclass refid="d8/d2f/classtudat_1_1propagators_1_1NBodyCowellStateDerivative" prot="public">tudat::propagators::NBodyCowellStateDerivative</innerclass>
    <innerclass refid="d8/d50/classtudat_1_1propagators_1_1NBodyEnckeStateDerivative" prot="public">tudat::propagators::NBodyEnckeStateDerivative</innerclass>
    <innerclass refid="d9/d0f/classtudat_1_1propagators_1_1NBodyGaussKeplerStateDerivative" prot="public">tudat::propagators::NBodyGaussKeplerStateDerivative</innerclass>
    <innerclass refid="d2/de2/classtudat_1_1propagators_1_1NBodyGaussModifiedEquinictialStateDerivative" prot="public">tudat::propagators::NBodyGaussModifiedEquinictialStateDerivative</innerclass>
    <innerclass refid="d6/d9c/classtudat_1_1propagators_1_1NBodyStateDerivative" prot="public">tudat::propagators::NBodyStateDerivative</innerclass>
    <innerclass refid="dc/dc4/classtudat_1_1propagators_1_1NBodyUnifiedStateModelExponentialMapStateDerivative" prot="public">tudat::propagators::NBodyUnifiedStateModelExponentialMapStateDerivative</innerclass>
    <innerclass refid="d0/dac/classtudat_1_1propagators_1_1NBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative" prot="public">tudat::propagators::NBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative</innerclass>
    <innerclass refid="d6/d30/classtudat_1_1propagators_1_1NBodyUnifiedStateModelQuaternionsStateDerivative" prot="public">tudat::propagators::NBodyUnifiedStateModelQuaternionsStateDerivative</innerclass>
    <innerclass refid="d2/dd1/classtudat_1_1propagators_1_1RotationalMotionExponentialMapStateDerivative" prot="public">tudat::propagators::RotationalMotionExponentialMapStateDerivative</innerclass>
    <innerclass refid="d4/d69/classtudat_1_1propagators_1_1RotationalMotionModifiedRodriguesParametersStateDerivative" prot="public">tudat::propagators::RotationalMotionModifiedRodriguesParametersStateDerivative</innerclass>
    <innerclass refid="d1/d7c/classtudat_1_1propagators_1_1RotationalMotionQuaternionsStateDerivative" prot="public">tudat::propagators::RotationalMotionQuaternionsStateDerivative</innerclass>
    <innerclass refid="d0/d08/classtudat_1_1propagators_1_1RotationalMotionStateDerivative" prot="public">tudat::propagators::RotationalMotionStateDerivative</innerclass>
    <innerclass refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" prot="public">tudat::propagators::SingleStateTypeDerivative</innerclass>
    <innerclass refid="d2/da9/classtudat_1_1propagators_1_1StateDerivativeCircularRestrictedThreeBodyProblem" prot="public">tudat::propagators::StateDerivativeCircularRestrictedThreeBodyProblem</innerclass>
    <innerclass refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" prot="public">tudat::propagators::CombinedStateTransitionAndSensitivityMatrixInterface</innerclass>
    <innerclass refid="dc/db8/classtudat_1_1propagators_1_1SingleArcCombinedStateTransitionAndSensitivityMatrixInterface" prot="public">tudat::propagators::SingleArcCombinedStateTransitionAndSensitivityMatrixInterface</innerclass>
    <innerclass refid="d4/d16/classtudat_1_1propagators_1_1MultiArcCombinedStateTransitionAndSensitivityMatrixInterface" prot="public">tudat::propagators::MultiArcCombinedStateTransitionAndSensitivityMatrixInterface</innerclass>
    <innerclass refid="d0/de0/classtudat_1_1propagators_1_1HybridArcCombinedStateTransitionAndSensitivityMatrixInterface" prot="public">tudat::propagators::HybridArcCombinedStateTransitionAndSensitivityMatrixInterface</innerclass>
    <innerclass refid="d3/d0f/classtudat_1_1propagators_1_1VariationalEquations" prot="public">tudat::propagators::VariationalEquations</innerclass>
    <innerclass refid="df/d14/classtudat_1_1propagators_1_1VariationalEquationsSolver" prot="public">tudat::propagators::VariationalEquationsSolver</innerclass>
    <innerclass refid="d4/dc6/classtudat_1_1propagators_1_1SingleArcVariationalEquationsSolver" prot="public">tudat::propagators::SingleArcVariationalEquationsSolver</innerclass>
    <innerclass refid="d6/d99/classtudat_1_1propagators_1_1MultiArcVariationalEquationsSolver" prot="public">tudat::propagators::MultiArcVariationalEquationsSolver</innerclass>
    <innerclass refid="d0/da5/classtudat_1_1propagators_1_1HybridArcVariationalEquationsSolver" prot="public">tudat::propagators::HybridArcVariationalEquationsSolver</innerclass>
    <innerclass refid="d0/d8f/classtudat_1_1propagators_1_1DynamicsSimulator" prot="public">tudat::propagators::DynamicsSimulator</innerclass>
    <innerclass refid="de/de0/classtudat_1_1propagators_1_1SingleArcDynamicsSimulator" prot="public">tudat::propagators::SingleArcDynamicsSimulator</innerclass>
    <innerclass refid="da/db0/classtudat_1_1propagators_1_1MultiArcDynamicsSimulator" prot="public">tudat::propagators::MultiArcDynamicsSimulator</innerclass>
    <innerclass refid="d9/d68/classtudat_1_1propagators_1_1HybridArcDynamicsSimulator" prot="public">tudat::propagators::HybridArcDynamicsSimulator</innerclass>
    <innerclass refid="d5/d0b/classtudat_1_1propagators_1_1EnvironmentUpdater" prot="public">tudat::propagators::EnvironmentUpdater</innerclass>
    <innerclass refid="d2/d58/classtudat_1_1propagators_1_1VariableSettings" prot="public">tudat::propagators::VariableSettings</innerclass>
    <innerclass refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" prot="public">tudat::propagators::SingleDependentVariableSaveSettings</innerclass>
    <innerclass refid="d0/da0/classtudat_1_1propagators_1_1SingleAccelerationDependentVariableSaveSettings" prot="public">tudat::propagators::SingleAccelerationDependentVariableSaveSettings</innerclass>
    <innerclass refid="d7/d09/classtudat_1_1propagators_1_1SphericalHarmonicAccelerationTermsDependentVariableSaveSettings" prot="public">tudat::propagators::SphericalHarmonicAccelerationTermsDependentVariableSaveSettings</innerclass>
    <innerclass refid="d7/d06/classtudat_1_1propagators_1_1SingleTorqueDependentVariableSaveSettings" prot="public">tudat::propagators::SingleTorqueDependentVariableSaveSettings</innerclass>
    <innerclass refid="df/d39/classtudat_1_1propagators_1_1IntermediateAerodynamicRotationVariableSaveSettings" prot="public">tudat::propagators::IntermediateAerodynamicRotationVariableSaveSettings</innerclass>
    <innerclass refid="dc/da1/classtudat_1_1propagators_1_1BodyAerodynamicAngleVariableSaveSettings" prot="public">tudat::propagators::BodyAerodynamicAngleVariableSaveSettings</innerclass>
    <innerclass refid="d5/de4/classtudat_1_1propagators_1_1SingleVariationSphericalHarmonicAccelerationSaveSettings" prot="public">tudat::propagators::SingleVariationSphericalHarmonicAccelerationSaveSettings</innerclass>
    <innerclass refid="d1/d4c/classtudat_1_1propagators_1_1SingleVariationSingleTermSphericalHarmonicAccelerationSaveSettings" prot="public">tudat::propagators::SingleVariationSingleTermSphericalHarmonicAccelerationSaveSettings</innerclass>
    <innerclass refid="d8/d0e/classtudat_1_1propagators_1_1AccelerationPartialWrtStateSaveSettings" prot="public">tudat::propagators::AccelerationPartialWrtStateSaveSettings</innerclass>
    <innerclass refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" prot="public">tudat::propagators::DependentVariableSaveSettings</innerclass>
    <innerclass refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" prot="public">tudat::propagators::PropagatorSettings</innerclass>
    <innerclass refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" prot="public">tudat::propagators::SingleArcPropagatorSettings</innerclass>
    <innerclass refid="dc/de9/classtudat_1_1propagators_1_1MultiArcPropagatorSettings" prot="public">tudat::propagators::MultiArcPropagatorSettings</innerclass>
    <innerclass refid="df/d4d/classtudat_1_1propagators_1_1HybridArcPropagatorSettings" prot="public">tudat::propagators::HybridArcPropagatorSettings</innerclass>
    <innerclass refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" prot="public">tudat::propagators::TranslationalStatePropagatorSettings</innerclass>
    <innerclass refid="dd/d74/classtudat_1_1propagators_1_1RotationalStatePropagatorSettings" prot="public">tudat::propagators::RotationalStatePropagatorSettings</innerclass>
    <innerclass refid="df/de7/classtudat_1_1propagators_1_1MassPropagatorSettings" prot="public">tudat::propagators::MassPropagatorSettings</innerclass>
    <innerclass refid="dc/dd8/classtudat_1_1propagators_1_1CustomStatePropagatorSettings" prot="public">tudat::propagators::CustomStatePropagatorSettings</innerclass>
    <innerclass refid="d7/d44/classtudat_1_1propagators_1_1MultiTypePropagatorSettings" prot="public">tudat::propagators::MultiTypePropagatorSettings</innerclass>
    <innerclass refid="d3/d39/classtudat_1_1propagators_1_1PropagationTerminationCondition" prot="public">tudat::propagators::PropagationTerminationCondition</innerclass>
    <innerclass refid="da/d95/classtudat_1_1propagators_1_1FixedTimePropagationTerminationCondition" prot="public">tudat::propagators::FixedTimePropagationTerminationCondition</innerclass>
    <innerclass refid="d3/d37/classtudat_1_1propagators_1_1FixedCPUTimePropagationTerminationCondition" prot="public">tudat::propagators::FixedCPUTimePropagationTerminationCondition</innerclass>
    <innerclass refid="d3/d06/classtudat_1_1propagators_1_1SingleVariableLimitPropagationTerminationCondition" prot="public">tudat::propagators::SingleVariableLimitPropagationTerminationCondition</innerclass>
    <innerclass refid="d2/dde/classtudat_1_1propagators_1_1CustomTerminationCondition" prot="public">tudat::propagators::CustomTerminationCondition</innerclass>
    <innerclass refid="d3/d3b/classtudat_1_1propagators_1_1HybridPropagationTerminationCondition" prot="public">tudat::propagators::HybridPropagationTerminationCondition</innerclass>
    <innerclass refid="d3/d1d/classtudat_1_1propagators_1_1PropagationTerminationDetails" prot="public">tudat::propagators::PropagationTerminationDetails</innerclass>
    <innerclass refid="d7/da1/classtudat_1_1propagators_1_1PropagationTerminationDetailsFromHybridCondition" prot="public">tudat::propagators::PropagationTerminationDetailsFromHybridCondition</innerclass>
    <innerclass refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" prot="public">tudat::propagators::PropagationTerminationSettings</innerclass>
    <innerclass refid="d2/dd6/classtudat_1_1propagators_1_1PropagationTimeTerminationSettings" prot="public">tudat::propagators::PropagationTimeTerminationSettings</innerclass>
    <innerclass refid="db/da2/classtudat_1_1propagators_1_1PropagationCPUTimeTerminationSettings" prot="public">tudat::propagators::PropagationCPUTimeTerminationSettings</innerclass>
    <innerclass refid="d3/d40/classtudat_1_1propagators_1_1PropagationDependentVariableTerminationSettings" prot="public">tudat::propagators::PropagationDependentVariableTerminationSettings</innerclass>
    <innerclass refid="d5/dfa/classtudat_1_1propagators_1_1PropagationCustomTerminationSettings" prot="public">tudat::propagators::PropagationCustomTerminationSettings</innerclass>
    <innerclass refid="de/db7/classtudat_1_1propagators_1_1PropagationHybridTerminationSettings" prot="public">tudat::propagators::PropagationHybridTerminationSettings</innerclass>
    <innerclass refid="d3/db5/classtudat_1_1propagators_1_1IntegratedStateProcessor" prot="public">tudat::propagators::IntegratedStateProcessor</innerclass>
    <innerclass refid="d8/d4b/classtudat_1_1propagators_1_1TranslationalStateIntegratedStateProcessor" prot="public">tudat::propagators::TranslationalStateIntegratedStateProcessor</innerclass>
    <innerclass refid="d0/dd5/classtudat_1_1propagators_1_1RotationalStateIntegratedStateProcessor" prot="public">tudat::propagators::RotationalStateIntegratedStateProcessor</innerclass>
    <innerclass refid="dd/d58/classtudat_1_1propagators_1_1BodyMassIntegratedStateProcessor" prot="public">tudat::propagators::BodyMassIntegratedStateProcessor</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dd/d1d/centralBodyData_8h_1a75543347a0571f08ef1b056612924e4b" prot="public" static="no" strong="no">
        <type></type>
        <name>OriginType</name>
        <enumvalue id="dd/d1d/centralBodyData_8h_1a75543347a0571f08ef1b056612924e4ba8acff11b85eeaa78e556feafe351f98c" prot="public">
          <name>global_frame_origin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d1d/centralBodyData_8h_1a75543347a0571f08ef1b056612924e4ba991b3c3800682747e6c87c0593161364" prot="public">
          <name>from_ephemeris</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d1d/centralBodyData_8h_1a75543347a0571f08ef1b056612924e4ba504e5194eb42f9ebfdcd319ef18785a8" prot="public">
          <name>from_integration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of integration origins that can be used in the simulations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/centralBodyData.h" line="28" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/centralBodyData.h" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="enum" id="d1/d89/environmentUpdateTypes_8h_1ab9f9519b51fbaf8ab8209af55aff309b" prot="public" static="no" strong="no">
        <type></type>
        <name>EnvironmentModelsToUpdate</name>
        <enumvalue id="d1/d89/environmentUpdateTypes_8h_1ab9f9519b51fbaf8ab8209af55aff309ba6bf0a42fa80d1b8a129082ef2633121c" prot="public">
          <name>body_translational_state_update</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d1/d89/environmentUpdateTypes_8h_1ab9f9519b51fbaf8ab8209af55aff309ba7bfdb6d11ba6446a0dedf8f822e453ac" prot="public">
          <name>body_rotational_state_update</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d1/d89/environmentUpdateTypes_8h_1ab9f9519b51fbaf8ab8209af55aff309bafb9ffb499109c9f017cb1e6b438876b7" prot="public">
          <name>body_mass_update</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d1/d89/environmentUpdateTypes_8h_1ab9f9519b51fbaf8ab8209af55aff309bad23d9f4ebfb038a2010b855ef15b5c65" prot="public">
          <name>spherical_harmonic_gravity_field_update</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d1/d89/environmentUpdateTypes_8h_1ab9f9519b51fbaf8ab8209af55aff309bafba3d56dfaef91658259fc9ffc280fbd" prot="public">
          <name>vehicle_flight_conditions_update</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d1/d89/environmentUpdateTypes_8h_1ab9f9519b51fbaf8ab8209af55aff309ba9dcab6939925cf3763f317710e7734e1" prot="public">
          <name>radiation_pressure_interface_update</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum defining types of environment model updates that can be done. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/environmentUpdateTypes.h" line="26" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/environmentUpdateTypes.h" bodystart="27" bodyend="34"/>
      </memberdef>
      <memberdef kind="enum" id="db/d2f/nBodyStateDerivative_8h_1afe367b6bf5a79c7a19de00b50d3258a3" prot="public" static="no" strong="no">
        <type></type>
        <name>TranslationalPropagatorType</name>
        <enumvalue id="db/d2f/nBodyStateDerivative_8h_1afe367b6bf5a79c7a19de00b50d3258a3a465e7d7eba7fc97425862463c9b5bd9a" prot="public">
          <name>undefined_translational_propagator</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d2f/nBodyStateDerivative_8h_1afe367b6bf5a79c7a19de00b50d3258a3a390962db5d0a04cb4bbcc71301923a46" prot="public">
          <name>cowell</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d2f/nBodyStateDerivative_8h_1afe367b6bf5a79c7a19de00b50d3258a3a109290e2967253e9c6b8761a330dc9f1" prot="public">
          <name>encke</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d2f/nBodyStateDerivative_8h_1afe367b6bf5a79c7a19de00b50d3258a3ad3a46ea5f192a0c63ca024ab115bd95f" prot="public">
          <name>gauss_keplerian</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d2f/nBodyStateDerivative_8h_1afe367b6bf5a79c7a19de00b50d3258a3a038cf6ebeded078bc989c31a691d9811" prot="public">
          <name>gauss_modified_equinoctial</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d2f/nBodyStateDerivative_8h_1afe367b6bf5a79c7a19de00b50d3258a3a5abae186723ed84a7020af5f25be7c6f" prot="public">
          <name>unified_state_model_quaternions</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d2f/nBodyStateDerivative_8h_1afe367b6bf5a79c7a19de00b50d3258a3a251c89a2f8d45fdce106dcbe0f24fa9c" prot="public">
          <name>unified_state_model_modified_rodrigues_parameters</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d2f/nBodyStateDerivative_8h_1afe367b6bf5a79c7a19de00b50d3258a3a73eb4ad92d5cf9e44bc8038bd1947d65" prot="public">
          <name>unified_state_model_exponential_map</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum listing propagator types for translational dynamics that can be used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyStateDerivative.h" line="34" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyStateDerivative.h" bodystart="35" bodyend="44"/>
      </memberdef>
      <memberdef kind="enum" id="db/d09/rotationalMotionStateDerivative_8h_1aa1169309e8eb3a12df4447ded20d94bd" prot="public" static="no" strong="no">
        <type></type>
        <name>RotationalPropagatorType</name>
        <enumvalue id="db/d09/rotationalMotionStateDerivative_8h_1aa1169309e8eb3a12df4447ded20d94bda3dc37e473756dac3eb620b4c4b9ae702" prot="public">
          <name>undefined_rotational_propagator</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d09/rotationalMotionStateDerivative_8h_1aa1169309e8eb3a12df4447ded20d94bda8aa15a4a4612a179ab2a17ef04314061" prot="public">
          <name>quaternions</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d09/rotationalMotionStateDerivative_8h_1aa1169309e8eb3a12df4447ded20d94bdad721f3cd59a0672feaa7429df71942b8" prot="public">
          <name>modified_rodrigues_parameters</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d09/rotationalMotionStateDerivative_8h_1aa1169309e8eb3a12df4447ded20d94bda048bd8ee0b1dcd4f605655daafa04d32" prot="public">
          <name>exponential_map</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum listing propagator types for rotational dynamics that can be used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/rotationalMotionStateDerivative.h" line="34" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/rotationalMotionStateDerivative.h" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d00/singleStateTypeDerivative_8h_1a567fdc525eae96100752079fe69d4e3b" prot="public" static="no" strong="no">
        <type></type>
        <name>IntegratedStateType</name>
        <enumvalue id="d8/d00/singleStateTypeDerivative_8h_1a567fdc525eae96100752079fe69d4e3bac4379a19b910b0bfee0749d96037d229" prot="public">
          <name>hybrid</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d00/singleStateTypeDerivative_8h_1a567fdc525eae96100752079fe69d4e3ba0478e0cf33067c8f3474a9440272128a" prot="public">
          <name>translational_state</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d00/singleStateTypeDerivative_8h_1a567fdc525eae96100752079fe69d4e3bab61d77f125a4ca100c83f23ca8dcc3c6" prot="public">
          <name>rotational_state</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d00/singleStateTypeDerivative_8h_1a567fdc525eae96100752079fe69d4e3baf24c150de13789a722dd39c3d0038419" prot="public">
          <name>body_mass_state</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d00/singleStateTypeDerivative_8h_1a567fdc525eae96100752079fe69d4e3ba2b46b9eb714f5921623b40bee800c303" prot="public">
          <name>custom_state</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum listing types of dynamics that can be numerically integrated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/singleStateTypeDerivative.h" line="28" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/singleStateTypeDerivative.h" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="enum" id="d0/d7d/propagationOutputSettings_8h_1a58a59a1f326ecebafc38d7c298885477" prot="public" static="no" strong="no">
        <type></type>
        <name>VariableType</name>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a58a59a1f326ecebafc38d7c298885477aed8efaf6c989ca35700d5e0b5b6d1ac7" prot="public">
          <name>independentVariable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a58a59a1f326ecebafc38d7c298885477a773729d7257749f951d7a25ca25b9907" prot="public">
          <name>cpuTimeVariable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a58a59a1f326ecebafc38d7c298885477ad3e4b119488923e55550078e5dba5217" prot="public">
          <name>stateVariable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a58a59a1f326ecebafc38d7c298885477a39d7c50b85cdfa0f3f96d7564b56f107" prot="public">
          <name>dependentVariable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a58a59a1f326ecebafc38d7c298885477a806d9054ad9d32e0ba83ed9c2ecdb993" prot="public">
          <name>stateTransitionMatrix</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a58a59a1f326ecebafc38d7c298885477ae0ca381a30cb88d89bfd89914204985e" prot="public">
          <name>sensitivityMatrix</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="31" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="enum" id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3db" prot="public" static="no" strong="no">
        <type></type>
        <name>PropagationDependentVariables</name>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbaa139d8960ed51622c9e5abf1a5fcae47" prot="public">
          <name>mach_number_dependent_variable</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba8468373fdfca6f660934f5d91c49769c" prot="public">
          <name>altitude_dependent_variable</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbaac4575f0bc822abc03420b7d90c20fd3" prot="public">
          <name>airspeed_dependent_variable</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba97d38181d247edc3cdf8523c34c4a48f" prot="public">
          <name>local_density_dependent_variable</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba536e15a64cd3a1e148c74fa96d4a64e7" prot="public">
          <name>relative_speed_dependent_variable</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba7955000143aefa593604b62766a31f40" prot="public">
          <name>relative_position_dependent_variable</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba1a643faab7c5d9da6dd05057e3c39b7c" prot="public">
          <name>relative_distance_dependent_variable</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba663146b6cffd64a9b92b4fd9066d8aa1" prot="public">
          <name>relative_velocity_dependent_variable</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbae87eae93a7230df4f77e55d46830acea" prot="public">
          <name>radiation_pressure_dependent_variable</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba235598b4e485e13a2855fa05a89f12a3" prot="public">
          <name>total_acceleration_norm_dependent_variable</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba1044ac4795a5b103803809b0b47235ce" prot="public">
          <name>single_acceleration_norm_dependent_variable</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbac8118dea0929ee584a06483fc0e84573" prot="public">
          <name>total_acceleration_dependent_variable</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbab30bc8666c467650c8f58b93021587e3" prot="public">
          <name>single_acceleration_dependent_variable</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba67dc4cf0883dc5efa92b5cedb77debf6" prot="public">
          <name>aerodynamic_force_coefficients_dependent_variable</name>
          <initializer>= 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbaa452ce80ce1e2fc8e9fecf998a161234" prot="public">
          <name>aerodynamic_moment_coefficients_dependent_variable</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba6fa6fd38aeaa5c6cdb99f9485b199ceb" prot="public">
          <name>inertial_to_body_fixed_rotation_matrix_variable</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbae9a8c0d6293cdd9e26e72a1b54ab016c" prot="public">
          <name>intermediate_aerodynamic_rotation_matrix_variable</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbad7040aceaaf9b5849e8eb9b00ffb907e" prot="public">
          <name>relative_body_aerodynamic_orientation_angle_variable</name>
          <initializer>= 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbae6a20627baf17cdab9662053a3b920ef" prot="public">
          <name>body_fixed_airspeed_based_velocity_variable</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba0c77264a0cdb1cd3af82ae5d8646a155" prot="public">
          <name>total_aerodynamic_g_load_variable</name>
          <initializer>= 19</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbab401031df3710acf5c770edc768c07ff" prot="public">
          <name>stagnation_point_heat_flux_dependent_variable</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba78bccea8f64baa39b37fa2a8f9998db4" prot="public">
          <name>local_temperature_dependent_variable</name>
          <initializer>= 21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba26ef216c0244bd73d67879c96200871c" prot="public">
          <name>geodetic_latitude_dependent_variable</name>
          <initializer>= 22</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba636b2005608828efdf2ce7b289f5ecb2" prot="public">
          <name>control_surface_deflection_dependent_variable</name>
          <initializer>= 23</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba1785b7bdeda1259c6207ee55f7386629" prot="public">
          <name>total_mass_rate_dependent_variables</name>
          <initializer>= 24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba668fbc2abd38a5e6fa02099e87210189" prot="public">
          <name>lvlh_to_inertial_frame_rotation_dependent_variable</name>
          <initializer>= 25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba41f5bf3c43766ac3af5f6325010a122a" prot="public">
          <name>periapsis_altitude_dependent_variable</name>
          <initializer>= 26</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba07c4f558039ae2402a85d16862da99e8" prot="public">
          <name>total_torque_norm_dependent_variable</name>
          <initializer>= 27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba9625d0e6360b16b478b6a8d6ef179ab3" prot="public">
          <name>single_torque_norm_dependent_variable</name>
          <initializer>= 28</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbaa40a2c73e956f23b3f509f88a333bbf0" prot="public">
          <name>total_torque_dependent_variable</name>
          <initializer>= 29</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbac7ba3cb1741ad7c494cc61d84da329ad" prot="public">
          <name>single_torque_dependent_variable</name>
          <initializer>= 30</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba4dbefde5031b447a9d00a424cf878b07" prot="public">
          <name>body_fixed_groundspeed_based_velocity_variable</name>
          <initializer>= 31</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba1048d51780566e7b992208870ee3acb5" prot="public">
          <name>keplerian_state_dependent_variable</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba36eeeea5ef5ddcc6c466e8bf05228da5" prot="public">
          <name>modified_equinocial_state_dependent_variable</name>
          <initializer>= 33</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbabdfb1ede8eed7bfa99b4102568ed88f3" prot="public">
          <name>spherical_harmonic_acceleration_terms_dependent_variable</name>
          <initializer>= 34</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbaf820a0f588426368354cf954b7f27d16" prot="public">
          <name>spherical_harmonic_acceleration_norm_terms_dependent_variable</name>
          <initializer>= 35</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbaf9c8c1738317ceb3c3491b546171193d" prot="public">
          <name>body_fixed_relative_cartesian_position</name>
          <initializer>= 36</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba52ac4eba10ac1ef139c19b6f8d8751ad" prot="public">
          <name>body_fixed_relative_spherical_position</name>
          <initializer>= 37</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbaa972710fc2e8ebb032daa3b61b0f1362" prot="public">
          <name>total_gravity_field_variation_acceleration</name>
          <initializer>= 38</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba12808947a8cf620c68011fe769ae56cf" prot="public">
          <name>single_gravity_field_variation_acceleration</name>
          <initializer>= 39</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbac810e155daf24af2f81c92de23467eb7" prot="public">
          <name>single_gravity_field_variation_acceleration_terms</name>
          <initializer>= 40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba60f1dd01acddcb6e6a7ece18aa1eea47" prot="public">
          <name>acceleration_partial_wrt_body_translational_state</name>
          <initializer>= 41</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba6b0ad7e68bbf759c4100c199ecfff688" prot="public">
          <name>local_dynamic_pressure_dependent_variable</name>
          <initializer>= 42</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba26f2d2415fa58a9852284a35934059a9" prot="public">
          <name>local_aerodynamic_heat_rate_dependent_variable</name>
          <initializer>= 43</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba9b3eb0d2ae2589e178338a4c739a3354" prot="public">
          <name>euler_angles_to_body_fixed_313</name>
          <initializer>= 44</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dba066248a857786e22dc22f2dd57ecac19" prot="public">
          <name>current_body_mass_dependent_variable</name>
          <initializer>= 45</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d0/d7d/propagationOutputSettings_8h_1a766f7d3409891d28fea685d831b8a3dbab89fb83209f322054ade62db5a94de5c" prot="public">
          <name>radiation_pressure_coefficient_dependent_variable</name>
          <initializer>= 46</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="70" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="71" bodyend="119"/>
      </memberdef>
      <memberdef kind="enum" id="dc/d7f/propagationTermination_8h_1a7a1cfef7b2f75ca84a4d741ca620a13f" prot="public" static="no" strong="no">
        <type></type>
        <name>PropagationTerminationReason</name>
        <enumvalue id="dc/d7f/propagationTermination_8h_1a7a1cfef7b2f75ca84a4d741ca620a13fa81b85c2b810f89a3d21bb971411f581c" prot="public">
          <name>propagation_never_run</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d7f/propagationTermination_8h_1a7a1cfef7b2f75ca84a4d741ca620a13fa286d8a276b0075d341222e3234783855" prot="public">
          <name>unknown_propagation_termination_reason</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d7f/propagationTermination_8h_1a7a1cfef7b2f75ca84a4d741ca620a13fad24e13c628a11693e73c71ca89e1d271" prot="public">
          <name>termination_condition_reached</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d7f/propagationTermination_8h_1a7a1cfef7b2f75ca84a4d741ca620a13fa2336330c466ad97dda1854aeca3237e8" prot="public">
          <name>runtime_error_caught_in_propagation</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d7f/propagationTermination_8h_1a7a1cfef7b2f75ca84a4d741ca620a13fac8cf6480ed184babd8155d9824c6d475" prot="public">
          <name>nan_or_inf_detected_in_state</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible events that can trigger the termination of a propagation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTermination.h" line="26" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTermination.h" bodystart="27" bodyend="33"/>
      </memberdef>
      <memberdef kind="enum" id="db/d0b/propagationTerminationSettings_8h_1ad16cf473674115402f78cf794cbee9d5" prot="public" static="no" strong="no">
        <type></type>
        <name>PropagationTerminationTypes</name>
        <enumvalue id="db/d0b/propagationTerminationSettings_8h_1ad16cf473674115402f78cf794cbee9d5a218ad8c3ec9eb37ee2980e0b19e610da" prot="public">
          <name>time_stopping_condition</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d0b/propagationTerminationSettings_8h_1ad16cf473674115402f78cf794cbee9d5afc7535d0f2fd8fb8b96a9299fa68c26e" prot="public">
          <name>cpu_time_stopping_condition</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d0b/propagationTerminationSettings_8h_1ad16cf473674115402f78cf794cbee9d5a10887aacf05dce44559445eb70417ab2" prot="public">
          <name>dependent_variable_stopping_condition</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d0b/propagationTerminationSettings_8h_1ad16cf473674115402f78cf794cbee9d5ad4b2b195c45b4986a4ace5bbd1be9885" prot="public">
          <name>hybrid_stopping_condition</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d0b/propagationTerminationSettings_8h_1ad16cf473674115402f78cf794cbee9d5a3a2b5abe65f12cfc6a5c6fbdda78162e" prot="public">
          <name>custom_stopping_condition</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum listing the available types of propagation termination settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" line="29" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" bodystart="30" bodyend="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d7/d4a/stateDerivativeCircularRestrictedThreeBodyProblem_8h_1a14225ec636ea01e45a9087696e98519c" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d2/da9/classtudat_1_1propagators_1_1StateDerivativeCircularRestrictedThreeBodyProblem" kindref="compound">StateDerivativeCircularRestrictedThreeBodyProblem</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; StateDerivativeCircularRestrictedThreeBodyProblem &gt; tudat::propagators::StateDerivativeCircularRestrictedThreeBodyProblemPointer</definition>
        <argsstring></argsstring>
        <name>StateDerivativeCircularRestrictedThreeBodyProblemPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d2/da9/classtudat_1_1propagators_1_1StateDerivativeCircularRestrictedThreeBodyProblem" kindref="compound">StateDerivativeCircularRestrictedThreeBodyProblem</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/stateDerivativeCircularRestrictedThreeBodyProblem.h" line="68" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/stateDerivativeCircularRestrictedThreeBodyProblem.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d6/d71/propagator_8h_1a4f6187eb52b93416f5e0ef632defca6b" prot="public" static="yes" mutable="no">
        <type>std::map&lt; IntegratedStateType, std::string &gt;</type>
        <definition>std::map&lt; IntegratedStateType, std::string &gt; tudat::propagators::integratedStateTypes</definition>
        <argsstring></argsstring>
        <name>integratedStateTypes</name>
        <initializer>=
{
    { hybrid, &quot;hybrid&quot; },
    { translational_state, &quot;translational&quot; },
    { rotational_state, &quot;rotational&quot; },
    { body_mass_state, &quot;mass&quot; },
    { custom_state, &quot;custom&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>IntegratedStateType</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="262" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d71/propagator_8h_1ac83f639eb7ce949b4f534a4608ff5c36" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; IntegratedStateType &gt;</type>
        <definition>std::vector&lt; IntegratedStateType &gt; tudat::propagators::unsupportedIntegratedStateTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedIntegratedStateTypes</name>
        <initializer>=
{
    hybrid,         
    custom_state
}</initializer>
        <briefdescription>
<para><computeroutput>IntegratedStateType</computeroutput>s not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="272" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d71/propagator_8h_1aed799529b8a219228851ef4f1f80ca50" prot="public" static="yes" mutable="no">
        <type>std::map&lt; TranslationalPropagatorType, std::string &gt;</type>
        <definition>std::map&lt; TranslationalPropagatorType, std::string &gt; tudat::propagators::translationalPropagatorTypes</definition>
        <argsstring></argsstring>
        <name>translationalPropagatorTypes</name>
        <initializer>=
{
    { cowell, &quot;cowell&quot; },
    { encke, &quot;encke&quot; },
    { gauss_keplerian, &quot;gaussKeplerian&quot; },
    { gauss_modified_equinoctial, &quot;gaussModifiedEquinoctial&quot; },
    { unified_state_model_quaternions, &quot;unifiedStateModelQuaternions&quot; },
    { unified_state_model_modified_rodrigues_parameters, &quot;unifiedStateModelModifiedRodriguesParameters&quot; },
    { unified_state_model_exponential_map, &quot;unifiedStateModelExponentialMap&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>TranslationalPropagatorType</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="294" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d71/propagator_8h_1aa404a7295f0131f78f43d480d0fcef15" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; TranslationalPropagatorType &gt;</type>
        <definition>std::vector&lt; TranslationalPropagatorType &gt; tudat::propagators::unsupportedTranslationalPropagatorTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedTranslationalPropagatorTypes</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>TranslationalPropagatorType</computeroutput>s not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="306" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d71/propagator_8h_1aa273d1f03968ee22a38aef6043646934" prot="public" static="yes" mutable="no">
        <type>std::map&lt; RotationalPropagatorType, std::string &gt;</type>
        <definition>std::map&lt; RotationalPropagatorType, std::string &gt; tudat::propagators::rotationalPropagatorTypes</definition>
        <argsstring></argsstring>
        <name>rotationalPropagatorTypes</name>
        <initializer>=
{
    { quaternions, &quot;quaternions&quot; },
    { modified_rodrigues_parameters, &quot;modifiedRodriguesParameters&quot; },
    { exponential_map, &quot;exponentialMap&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>RotationalPropagatorType</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="324" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d71/propagator_8h_1a01aece81be6f105fc03e70b2922336d9" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; RotationalPropagatorType &gt;</type>
        <definition>std::vector&lt; RotationalPropagatorType &gt; tudat::propagators::unsupportedRotationalPropagatorTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedRotationalPropagatorTypes</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>RotationalPropagatorType</computeroutput>s not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="332" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d89/variable_8h_1a2c1546d133bba5dfdfc6f4962bf11881" prot="public" static="yes" mutable="no">
        <type>std::map&lt; VariableType, std::string &gt;</type>
        <definition>std::map&lt; VariableType, std::string &gt; tudat::propagators::variableTypes</definition>
        <argsstring></argsstring>
        <name>variableTypes</name>
        <initializer>=
{
    { independentVariable, &quot;independent&quot; },
    { cpuTimeVariable, &quot;cpuTime&quot; },
    { stateVariable, &quot;state&quot; },
    { dependentVariable, &quot;dependent&quot; },
    { stateTransitionMatrix, &quot;stateTransitionMatrix&quot; },
    { sensitivityMatrix, &quot;sensitivityMatrix&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>VariableType</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" line="27" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d89/variable_8h_1a2e135c19191b5667d11b03836478f8d4" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; VariableType &gt;</type>
        <definition>std::vector&lt; VariableType &gt; tudat::propagators::unsupportedVariableTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedVariableTypes</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>VariableType</computeroutput>s not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" line="38" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d89/variable_8h_1ac863018c9e162eeb0262de770c69bf79" prot="public" static="yes" mutable="no">
        <type>std::map&lt; PropagationDependentVariables, std::string &gt;</type>
        <definition>std::map&lt; PropagationDependentVariables, std::string &gt; tudat::propagators::dependentVariableTypes</definition>
        <argsstring></argsstring>
        <name>dependentVariableTypes</name>
        <briefdescription>
<para>Map of <computeroutput>PropagationDependentVariables</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" line="56" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/d89/variable_8h_1a7c1580a7f2dc8f354b72dba1bb7163e9" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; PropagationDependentVariables &gt;</type>
        <definition>std::vector&lt; PropagationDependentVariables &gt; tudat::propagators::unsupportedDependentVariableTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedDependentVariableTypes</name>
        <initializer>=
{

}</initializer>
        <briefdescription>
<para><computeroutput>PropagationDependentVariables</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" line="105" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/d73/dynamicsStateDerivativeModel_8h_1a3665a6aee6c0cd4e524efd1cb79f0393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel3d</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; basic_astrodynamics::AccelerationModel3d &gt; &gt; tudat::propagators::getAccelerationBetweenBodies</definition>
        <argsstring>(const std::string bodyUndergoingAcceleration, const std::string bodyExertingAcceleration, const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;stateDerivativeModels, const basic_astrodynamics::AvailableAcceleration accelerationModelType)</argsstring>
        <name>getAccelerationBetweenBodies</name>
        <param>
          <type>const std::string</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModels</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AvailableAcceleration</type>
          <declname>accelerationModelType</declname>
        </param>
        <briefdescription>
<para>Function to retrieve a single given acceleration model from a list of models. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve a single given acceleration model, determined by the body exerting and undergoing the acceleration, as well as the acceleration type, from a list of state derivative models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body undergoing the acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDerivativeModels</parametername>
</parameternamelist>
<parameterdescription>
<para>Complete list of state derivativ models </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModelType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of acceleration model that is to be retrieved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" line="737" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" bodystart="737" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="da/d73/dynamicsStateDerivativeModel_8h_1af50d71680eed81ff3da04fa5cda9c2a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">basic_astrodynamics::TorqueModel</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; basic_astrodynamics::TorqueModel &gt; &gt; tudat::propagators::getTorqueBetweenBodies</definition>
        <argsstring>(const std::string bodyUndergoingTorque, const std::string bodyExertingTorque, const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;stateDerivativeModels, const basic_astrodynamics::AvailableTorque torqueModelType)</argsstring>
        <name>getTorqueBetweenBodies</name>
        <param>
          <type>const std::string</type>
          <declname>bodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyExertingTorque</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModels</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AvailableTorque</type>
          <declname>torqueModelType</declname>
        </param>
        <briefdescription>
<para>Function to retrieve a single given torque model from a list of models. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve a single given torque model, determined by the body exerting and undergoing the torque, as well as the torque type, from a list of state derivative models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body undergoing the torque. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body exerting the torque. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDerivativeModels</parametername>
</parameternamelist>
<parameterdescription>
<para>Complete list of state derivativ models </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>torqueModelType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of torque model that is to be retrieved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" line="797" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" bodystart="797" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="da/d73/dynamicsStateDerivativeModel_8h_1a7dd1301116c3639c1ff670a94cc01495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d9c/classtudat_1_1propagators_1_1NBodyStateDerivative" kindref="compound">NBodyStateDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; NBodyStateDerivative&lt; StateScalarType, TimeType &gt; &gt; tudat::propagators::getTranslationalStateDerivativeModelForBody</definition>
        <argsstring>(const std::string bodyUndergoingAcceleration, const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;stateDerivativeModels)</argsstring>
        <name>getTranslationalStateDerivativeModelForBody</name>
        <param>
          <type>const std::string</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModels</declname>
        </param>
        <briefdescription>
<para>Function to retrieve the state derivative models for translational dynamics of given body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the state derivative models for translational dynamics (object of derived class from <ref refid="d6/d9c/classtudat_1_1propagators_1_1NBodyStateDerivative" kindref="compound">NBodyStateDerivative</ref>) of given body from full list of state derivative models <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which state derivative model is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDerivativeModels</parametername>
</parameternamelist>
<parameterdescription>
<para>Complete list of state derivativ models </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State derivative model computing derivative of translational state of requested body. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" line="853" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" bodystart="853" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="da/d73/dynamicsStateDerivativeModel_8h_1a7d7dbd786f6b6e054b392805668c5864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d0/d08/classtudat_1_1propagators_1_1RotationalMotionStateDerivative" kindref="compound">RotationalMotionStateDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; RotationalMotionStateDerivative&lt; StateScalarType, TimeType &gt; &gt; tudat::propagators::getRotationalStateDerivativeModelForBody</definition>
        <argsstring>(const std::string bodyUndergoingTorque, const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;stateDerivativeModels)</argsstring>
        <name>getRotationalStateDerivativeModelForBody</name>
        <param>
          <type>const std::string</type>
          <declname>bodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" line="900" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" bodystart="900" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="da/d73/dynamicsStateDerivativeModel_8h_1a8cc484b6acb6ba4d2a9aec5b165f0005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d5/d19/classtudat_1_1propagators_1_1BodyMassStateDerivative" kindref="compound">BodyMassStateDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; BodyMassStateDerivative&lt; StateScalarType, TimeType &gt; &gt; tudat::propagators::getBodyMassStateDerivativeModelForBody</definition>
        <argsstring>(const std::string bodyWithMassDerivative, const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;stateDerivativeModels)</argsstring>
        <name>getBodyMassStateDerivativeModelForBody</name>
        <param>
          <type>const std::string</type>
          <declname>bodyWithMassDerivative</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModels</declname>
        </param>
        <briefdescription>
<para>Function to retrieve the state derivative models for body mass of given body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the state derivative models for body mass (object of class <ref refid="d5/d19/classtudat_1_1propagators_1_1BodyMassStateDerivative" kindref="compound">BodyMassStateDerivative</ref>) of given body from full list of state derivative models <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyWithMassDerivative</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which mass derivative model is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDerivativeModels</parametername>
</parameternamelist>
<parameterdescription>
<para>Complete list of state derivative models </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State derivative model computing derivative of body mass of requested body. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" line="955" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" bodystart="955" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="da/d73/dynamicsStateDerivativeModel_8h_1a0cf979612e7584715b98dcb6655df569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename ConversionClassType</type>
            <defval>DynamicsStateDerivativeModel&lt; TimeType, StateScalarType &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::convertNumericalStateSolutionsToOutputSolutions</definition>
        <argsstring>(std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;convertedSolution, const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;rawSolution, std::shared_ptr&lt; ConversionClassType &gt; converterClass)</argsstring>
        <name>convertNumericalStateSolutionsToOutputSolutions</name>
        <param>
          <type>std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>convertedSolution</declname>
        </param>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>rawSolution</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ConversionClassType &gt;</type>
          <declname>converterClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" line="1029" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/dynamicsStateDerivativeModel.h" bodystart="1029" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="d1/d89/environmentUpdateTypes_8h_1ab94df52e01806acbdbfbf4c508d84ef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::addEnvironmentUpdates</definition>
        <argsstring>(std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; &amp;environmentUpdateList, const std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; updatesToAdd)</argsstring>
        <name>addEnvironmentUpdates</name>
        <param>
          <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; &amp;</type>
          <declname>environmentUpdateList</declname>
        </param>
        <param>
          <type>const std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt;</type>
          <declname>updatesToAdd</declname>
        </param>
        <briefdescription>
<para>Function to extend existing list of required environment update types. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to extend existing list of required environment update types <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>environmentUpdateList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of environment updates to extend (passed by reference and modified by function) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updatesToAdd</parametername>
</parameternamelist>
<parameterdescription>
<para>List of environment updates that are to be added to environmentUpdateList </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/environmentUpdateTypes.cpp" line="21" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/environmentUpdateTypes.cpp" bodystart="21" bodyend="61" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/environmentUpdateTypes.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/dae/getZeroProperModeRotationalInitialState_8h_1a853024bb37a14ec88acc340311112377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::propagators::getDissipationMatrix</definition>
        <argsstring>(const double dampingTime, const Eigen::Matrix3d &amp;inertiaTensor)</argsstring>
        <name>getDissipationMatrix</name>
        <param>
          <type>const double</type>
          <declname>dampingTime</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>inertiaTensor</declname>
        </param>
        <briefdescription>
<para>Function to obtain the synthetic dissipation matrix from the damping time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to obtain the synthetic dissipation matrix from the damping time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dampingTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Damping time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inertiaTensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Inertia Tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dissipation Matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/getZeroProperModeRotationalInitialState.h" line="33" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/getZeroProperModeRotationalInitialState.h" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="dc/dae/getZeroProperModeRotationalInitialState_8h_1a515d53ada695e1af1b0a56fbef7cb890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::integrateForwardWithDissipationAndBackwardsWithout</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcDynamicsSimulator&lt; StateScalarType, TimeType &gt; &gt; dynamicsSimulator, const std::shared_ptr&lt; basic_astrodynamics::DissipativeTorqueModel &gt; dissipativeTorque, std::pair&lt; std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt;, std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; &amp;propagatedStates, std::pair&lt; std::map&lt; TimeType, Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt; &gt;, std::map&lt; TimeType, Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt; &gt; &gt; &amp;dependentVariables)</argsstring>
        <name>integrateForwardWithDissipationAndBackwardsWithout</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/de0/classtudat_1_1propagators_1_1SingleArcDynamicsSimulator" kindref="compound">SingleArcDynamicsSimulator</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
          <declname>dynamicsSimulator</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/d2f/classtudat_1_1basic__astrodynamics_1_1DissipativeTorqueModel" kindref="compound">basic_astrodynamics::DissipativeTorqueModel</ref> &gt;</type>
          <declname>dissipativeTorque</declname>
        </param>
        <param>
          <type>std::pair&lt; std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt;, std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; &amp;</type>
          <declname>propagatedStates</declname>
        </param>
        <param>
          <type>std::pair&lt; std::map&lt; TimeType, Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt; &gt;, std::map&lt; TimeType, Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt; &gt; &gt; &amp;</type>
          <declname>dependentVariables</declname>
        </param>
        <briefdescription>
<para>Function to integrate forward in time with synthetic dissipation, and subsequently backwards without dissipation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to integrate forward in time with synthetic dissipation, and subsequently backwards without dissipation. This function is used to find the initial rotational state with a damped free mode.</para>
<para>integrateForwardWithDissipationAndBackwardsWithout <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dynamicsSimulator</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to numerically propagate the dynamics </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dissipativeTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Synthetic dissipative torque model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatedStates</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair of numerically propagated states (first: forward propagation; second: backwards propagation). Returned by reference. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair of numerically computed dependent variables (first: forward propagation; second: backwards propagation). Returned by reference. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/getZeroProperModeRotationalInitialState.h" line="53" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/getZeroProperModeRotationalInitialState.h" bodystart="53" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="dc/dae/getZeroProperModeRotationalInitialState_8h_1a13d25c317f0c9d90cdb62e47a6c7943d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::propagators::getZeroProperModeRotationalState</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; TimeType &gt; &gt; integratorSettings, const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const double bodyMeanRotationRate, const std::vector&lt; double &gt; dissipationTimes, std::vector&lt; std::pair&lt; std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt;, std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; &gt; &amp;propagatedStates, std::vector&lt; std::pair&lt; std::map&lt; TimeType, Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt; &gt;, std::map&lt; TimeType, Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt; &gt; &gt; &gt; &amp;dependentVariables, const bool propagateNominal=true, const bool writeToFileInLoop=false, const std::string baseFileName=&quot;&quot;, const std::string outputFolder=paths::get_resources_path()+&quot;/outputFolder/&quot;)</argsstring>
        <name>getZeroProperModeRotationalState</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; TimeType &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bodyMeanRotationRate</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>dissipationTimes</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt;, std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; &gt; &amp;</type>
          <declname>propagatedStates</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; std::map&lt; TimeType, Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt; &gt;, std::map&lt; TimeType, Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt; &gt; &gt; &gt; &amp;</type>
          <declname>dependentVariables</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>propagateNominal</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>writeToFileInLoop</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>baseFileName</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>outputFolder</declname>
          <defval>paths::get_resources_path()+&quot;/outputFolder/&quot;</defval>
        </param>
        <briefdescription>
<para>Function to determine the initial rotational state for which the free mode is fully damped. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to determine the initial rotational state for which the free mode is fully damped, using the approach of Rambaux et al. (2012). Using this method, the dynamics is propagated forward in time with an artificial damping, and backwards in time without this damping. The process is repeated for an ever increasing value of the dissipation time. Using this function, the numerical state and dependent variables at each of the iterations is returned (by reference) by the function. Additionally, the results can be written to files after each iteration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of bodies in the propagation, with keys the names of the bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the numerical integration scheme </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the propagator, must include rotational dynamics of only a single body, but may also include translational dynamics. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyMeanRotationRate</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean rotation rate of body for which the initial state is to be determined, used in the computation of the dissipation matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dissipationTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>List of characteristic times for dissipation matrix (in order of which they will be used) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatedStates</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical states for each iteration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Dependent variables for each iteration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagateNominal</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean designating whether the undamped dynamics is also to be propagated (saved in index 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writeToFileInLoop</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean designating whether the results are written to files after each iteration. NOTE: setting this variable to true will result in propagatedStates and dependentVariables being returned empty (the data being stored in files instead) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baseFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>File name prefix used for files, if writeToFileInLoop is true </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFolder</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory to which files will be written, if writeToFileInLoop is true </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/getZeroProperModeRotationalInitialState.h" line="136" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/getZeroProperModeRotationalInitialState.h" bodystart="136" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="dc/dae/getZeroProperModeRotationalInitialState_8h_1ae1569b998f14142f7acc9f2fd78f747d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::propagators::getZeroProperModeRotationalState</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; TimeType &gt; &gt; integratorSettings, const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const double bodyMeanRotationRate, const std::vector&lt; double &gt; dissipationTimes)</argsstring>
        <name>getZeroProperModeRotationalState</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; TimeType &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bodyMeanRotationRate</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>dissipationTimes</declname>
        </param>
        <briefdescription>
<para>Function to determine the initial rotational state for which the free mode is fully damped. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to determine the initial rotational state for which the free mode is fully damped, using the approach of Rambaux et al. (2012). Using this method, the dynamics is propagated forward in time with an artificial damping, and backwards in time without this damping. The process is repeated for an ever increasing value of the dissipation time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of bodies in the propagation, with keys the names of the bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the numerical integration scheme </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the propagator, must include rotational dynamics of only a single body, but may also include translational dynamics. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyMeanRotationRate</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean rotation rate of body for which the initial state is to be determined, used in the computation of the dissipation matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dissipationTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>List of characteristic times for dissipation matrix (in order of which they will be used) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/getZeroProperModeRotationalInitialState.h" line="315" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/getZeroProperModeRotationalInitialState.h" bodystart="315" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="d8/d73/integrateEquations_8h_1aee7be23309b6b9ec8f56717ccc5ab197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateType</type>
            <defval>Eigen::MatrixXd</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeStepType</type>
            <defval>TimeType</defval>
          </param>
        </templateparamlist>
        <type>TimeStepType</type>
        <definition>TimeStepType tudat::propagators::getTerminationDependentVariableErrorForGivenTimeStep</definition>
        <argsstring>(TimeStepType timeStep, const std::shared_ptr&lt; numerical_integrators::NumericalIntegrator&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt; integrator, const std::shared_ptr&lt; SingleVariableLimitPropagationTerminationCondition &gt; dependentVariableTerminationCondition)</argsstring>
        <name>getTerminationDependentVariableErrorForGivenTimeStep</name>
        <param>
          <type>TimeStepType</type>
          <declname>timeStep</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/d9b/classtudat_1_1numerical__integrators_1_1NumericalIntegrator" kindref="compound">numerical_integrators::NumericalIntegrator</ref>&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt;</type>
          <declname>integrator</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d06/classtudat_1_1propagators_1_1SingleVariableLimitPropagationTerminationCondition" kindref="compound">SingleVariableLimitPropagationTerminationCondition</ref> &gt;</type>
          <declname>dependentVariableTerminationCondition</declname>
        </param>
        <briefdescription>
<para>Function to determine, for a given time step of the numerical integrator, the error in termination dependent variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to determine, for a given time step of the numerical integrator, the error in termination dependent variable. This function is used as input for the root finder when the propagation must terminate exactly on a dependent variable value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeStep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> step to take with the numerical integrator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrator</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical integrator used for propagation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariableTerminationCondition</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings used to determine value/type of dependent variable at which propagation is to terminate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The difference between the reached and required value of the termination dependent variable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" line="54" column="14" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" bodystart="54" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="d8/d73/integrateEquations_8h_1a05d4fd9fe450626376bf9d6188b3829f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateType</type>
            <defval>Eigen::MatrixXd</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeStepType</type>
            <defval>TimeType</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::getFinalStateForExactDependentVariableTerminationCondition</definition>
        <argsstring>(const std::shared_ptr&lt; numerical_integrators::NumericalIntegrator&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt; integrator, const std::shared_ptr&lt; SingleVariableLimitPropagationTerminationCondition &gt; dependentVariableTerminationCondition, const TimeType secondToLastTime, const TimeType lastTime, const StateType &amp;secondToLastState, const StateType &amp;lastState, TimeType &amp;endTime, StateType &amp;endState, const bool isOnlyTerminationCondition=true)</argsstring>
        <name>getFinalStateForExactDependentVariableTerminationCondition</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/d9b/classtudat_1_1numerical__integrators_1_1NumericalIntegrator" kindref="compound">numerical_integrators::NumericalIntegrator</ref>&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt;</type>
          <declname>integrator</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d06/classtudat_1_1propagators_1_1SingleVariableLimitPropagationTerminationCondition" kindref="compound">SingleVariableLimitPropagationTerminationCondition</ref> &gt;</type>
          <declname>dependentVariableTerminationCondition</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>secondToLastTime</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>lastTime</declname>
        </param>
        <param>
          <type>const StateType &amp;</type>
          <declname>secondToLastState</declname>
        </param>
        <param>
          <type>const StateType &amp;</type>
          <declname>lastState</declname>
        </param>
        <param>
          <type>TimeType &amp;</type>
          <declname>endTime</declname>
        </param>
        <param>
          <type>StateType &amp;</type>
          <declname>endState</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isOnlyTerminationCondition</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function that propagates to an exact final condition (within tolerance) for dependent variable termination condition. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that propagates to an exact final condition (within tolerance) for dependent variable termination condition. Determines the time step that is to be taken by using a root finder, and returns (by reference) the converged final time and state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integrator</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical integrator that is used for propagation. Upon input to this function, the integrator is rolled back to the secondToLastTime/secondToLastState </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariableTerminationCondition</parametername>
</parameternamelist>
<parameterdescription>
<para>Termination condition that is to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondToLastTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Second to last time (e.g. last time at which integration did not exceed termination condition) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which integration first exceeded termination condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondToLastState</parametername>
</parameternamelist>
<parameterdescription>
<para>Second to last state (e.g. state at last time where integration did not exceed termination condition) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastState</parametername>
</parameternamelist>
<parameterdescription>
<para>State at time where integration first exceeded termination condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which exact termination condition is met (returned by reference). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endState</parametername>
</parameternamelist>
<parameterdescription>
<para>State at time where exact termination condition is met (returned by reference). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" line="91" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" bodystart="91" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="d8/d73/integrateEquations_8h_1a7a02ae910ecc7de497b836645b68aa78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateType</type>
            <defval>Eigen::MatrixXd</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeStepType</type>
            <defval>TimeType</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tudat::propagators::getFinalStateForExactHybridVariableTerminationCondition</definition>
        <argsstring>(const std::shared_ptr&lt; numerical_integrators::NumericalIntegrator&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt; integrator, const std::shared_ptr&lt; HybridPropagationTerminationCondition &gt; hyrbidTerminationCondition, const TimeType secondToLastTime, const TimeType lastTime, const StateType &amp;secondToLastState, const StateType &amp;lastState, TimeType &amp;endTime, StateType &amp;endState)</argsstring>
        <name>getFinalStateForExactHybridVariableTerminationCondition</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/d9b/classtudat_1_1numerical__integrators_1_1NumericalIntegrator" kindref="compound">numerical_integrators::NumericalIntegrator</ref>&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt;</type>
          <declname>integrator</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d3b/classtudat_1_1propagators_1_1HybridPropagationTerminationCondition" kindref="compound">HybridPropagationTerminationCondition</ref> &gt;</type>
          <declname>hyrbidTerminationCondition</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>secondToLastTime</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>lastTime</declname>
        </param>
        <param>
          <type>const StateType &amp;</type>
          <declname>secondToLastState</declname>
        </param>
        <param>
          <type>const StateType &amp;</type>
          <declname>lastState</declname>
        </param>
        <param>
          <type>TimeType &amp;</type>
          <declname>endTime</declname>
        </param>
        <param>
          <type>StateType &amp;</type>
          <declname>endState</declname>
        </param>
        <briefdescription>
<para>Function that propagates to an exact final condition (within tolerance) for hybrid termination condition. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that propagates to an exact final condition (within tolerance) for hybrid termination condition. Determines the termination time/state for each of the constituent termination condition, and chooses the hybrid termiantion time/state accordingly <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integrator</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical integrator that is used for propagation. Upon input to this function, the integrator is rolled back to the secondToLastTime/secondToLastState </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hyrbidTerminationCondition</parametername>
</parameternamelist>
<parameterdescription>
<para>Termination condition that is to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondToLastTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Second to last time (e.g. last time at which integration did not exceed termination condition) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which integration first exceeded termination condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondToLastState</parametername>
</parameternamelist>
<parameterdescription>
<para>Second to last state (e.g. state at last time where integration did not exceed termination condition) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastState</parametername>
</parameternamelist>
<parameterdescription>
<para>State at time where integration first exceeded termination condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which exact termination condition is met (returned by reference). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endState</parametername>
</parameternamelist>
<parameterdescription>
<para>State at time where exact termination condition is met (returned by reference). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" line="172" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" bodystart="172" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="d8/d73/integrateEquations_8h_1aeaeb7c91395604d352af00d57b8e9e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateType</type>
            <defval>Eigen::MatrixXd</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeStepType</type>
            <defval>TimeType</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tudat::propagators::getFinalStateForExactTerminationCondition</definition>
        <argsstring>(const std::shared_ptr&lt; numerical_integrators::NumericalIntegrator&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt; integrator, const std::shared_ptr&lt; PropagationTerminationCondition &gt; terminationCondition, const TimeType secondToLastTime, const TimeType lastTime, const StateType &amp;secondToLastState, const StateType &amp;lastState, TimeType &amp;endTime, StateType &amp;endState, const bool isOnlyTerminationCondition=true)</argsstring>
        <name>getFinalStateForExactTerminationCondition</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/d9b/classtudat_1_1numerical__integrators_1_1NumericalIntegrator" kindref="compound">numerical_integrators::NumericalIntegrator</ref>&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt;</type>
          <declname>integrator</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d39/classtudat_1_1propagators_1_1PropagationTerminationCondition" kindref="compound">PropagationTerminationCondition</ref> &gt;</type>
          <declname>terminationCondition</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>secondToLastTime</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>lastTime</declname>
        </param>
        <param>
          <type>const StateType &amp;</type>
          <declname>secondToLastState</declname>
        </param>
        <param>
          <type>const StateType &amp;</type>
          <declname>lastState</declname>
        </param>
        <param>
          <type>TimeType &amp;</type>
          <declname>endTime</declname>
        </param>
        <param>
          <type>StateType &amp;</type>
          <declname>endState</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isOnlyTerminationCondition</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function that propagates to an exact final condition (within tolerance) for arbitrary termination condition. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that propagates to an exact final condition (within tolerance) for arbitrary termination condition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integrator</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical integrator that is used for propagation. Upon input to this function, the integrator is at the lastTime/lastState </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminationCondition</parametername>
</parameternamelist>
<parameterdescription>
<para>Termination condition that is to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondToLastTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Second to last time (e.g. last time at which integration did not exceed termination condition) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which integration first exceeded termination condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondToLastState</parametername>
</parameternamelist>
<parameterdescription>
<para>Second to last state (e.g. state at last time where integration did not exceed termination condition) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastState</parametername>
</parameternamelist>
<parameterdescription>
<para>State at time where integration first exceeded termination condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which exact termination condition is met (returned by reference). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endState</parametername>
</parameternamelist>
<parameterdescription>
<para>State at time where exact termination condition is met (returned by reference). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" line="282" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" bodystart="282" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="d8/d73/integrateEquations_8h_1a2c7bea86248968146854f7171a51a1b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateType</type>
            <defval>Eigen::MatrixXd</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeStepType</type>
            <defval>TimeType</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::propagateToExactTerminationCondition</definition>
        <argsstring>(const std::shared_ptr&lt; numerical_integrators::NumericalIntegrator&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt; integrator, const std::shared_ptr&lt; PropagationTerminationCondition &gt; propagationTerminationCondition, const TimeStepType timeStep, const std::function&lt; Eigen::VectorXd() &gt; dependentVariableFunction, std::map&lt; TimeType, StateType &gt; &amp;solutionHistory, std::map&lt; TimeType, Eigen::VectorXd &gt; &amp;dependentVariableHistory, const double currentCpuTime)</argsstring>
        <name>propagateToExactTerminationCondition</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/d9b/classtudat_1_1numerical__integrators_1_1NumericalIntegrator" kindref="compound">numerical_integrators::NumericalIntegrator</ref>&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt;</type>
          <declname>integrator</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d39/classtudat_1_1propagators_1_1PropagationTerminationCondition" kindref="compound">PropagationTerminationCondition</ref> &gt;</type>
          <declname>propagationTerminationCondition</declname>
        </param>
        <param>
          <type>const TimeStepType</type>
          <declname>timeStep</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::VectorXd() &gt;</type>
          <declname>dependentVariableFunction</declname>
        </param>
        <param>
          <type>std::map&lt; TimeType, StateType &gt; &amp;</type>
          <declname>solutionHistory</declname>
        </param>
        <param>
          <type>std::map&lt; TimeType, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariableHistory</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentCpuTime</declname>
        </param>
        <briefdescription>
<para>Function that propagates to an exact final condition (within tolerance) for arbitrary termination condition. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that propagates to an exact final condition (within tolerance) for arbitrary termination condition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integrator</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical integrator that is used for propagation. Upon input to this function, the integrator is at the final time/state encountered by the propagation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagationTerminationCondition</parametername>
</parameternamelist>
<parameterdescription>
<para>Termination condition that is to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeStep</parametername>
</parameternamelist>
<parameterdescription>
<para>Last time step taken by integrator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariableFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning dependent variables (obtained from environment and state derivative model). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutionHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>History of state variables that are to be saved given as map (time as key; returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariableHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>History of dependent variables that are to be saved given as map (time as key; returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentCpuTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Current run time of propagation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" line="374" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" bodystart="374" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="d8/d73/integrateEquations_8h_1aece0ed8470202b4bb2cbe391610f7896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateType</type>
            <defval>Eigen::MatrixXd</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeStepType</type>
            <defval>TimeType</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d3/d1d/classtudat_1_1propagators_1_1PropagationTerminationDetails" kindref="compound">PropagationTerminationDetails</ref> &gt;</type>
        <definition>std::shared_ptr&lt; PropagationTerminationDetails &gt; tudat::propagators::integrateEquationsFromIntegrator</definition>
        <argsstring>(const std::shared_ptr&lt; numerical_integrators::NumericalIntegrator&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt; integrator, const TimeStepType initialTimeStep, const std::shared_ptr&lt; PropagationTerminationCondition &gt; propagationTerminationCondition, std::map&lt; TimeType, StateType &gt; &amp;solutionHistory, std::map&lt; TimeType, Eigen::VectorXd &gt; &amp;dependentVariableHistory, std::map&lt; TimeType, double &gt; &amp;cumulativeComputationTimeHistory, const std::function&lt; Eigen::VectorXd() &gt; dependentVariableFunction=std::function&lt; Eigen::VectorXd() &gt;(), const std::function&lt; void(StateType &amp;) &gt; statePostProcessingFunction=std::function&lt; void(StateType &amp;) &gt;(), const int saveFrequency=TUDAT_NAN, const TimeType printInterval=TUDAT_NAN, const std::chrono::steady_clock::time_point initialClockTime=std::chrono::steady_clock::now())</argsstring>
        <name>integrateEquationsFromIntegrator</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/d9b/classtudat_1_1numerical__integrators_1_1NumericalIntegrator" kindref="compound">numerical_integrators::NumericalIntegrator</ref>&lt; TimeType, StateType, StateType, TimeStepType &gt; &gt;</type>
          <declname>integrator</declname>
        </param>
        <param>
          <type>const TimeStepType</type>
          <declname>initialTimeStep</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d39/classtudat_1_1propagators_1_1PropagationTerminationCondition" kindref="compound">PropagationTerminationCondition</ref> &gt;</type>
          <declname>propagationTerminationCondition</declname>
        </param>
        <param>
          <type>std::map&lt; TimeType, StateType &gt; &amp;</type>
          <declname>solutionHistory</declname>
        </param>
        <param>
          <type>std::map&lt; TimeType, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariableHistory</declname>
        </param>
        <param>
          <type>std::map&lt; TimeType, double &gt; &amp;</type>
          <declname>cumulativeComputationTimeHistory</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::VectorXd() &gt;</type>
          <declname>dependentVariableFunction</declname>
          <defval>std::function&lt; Eigen::VectorXd() &gt;()</defval>
        </param>
        <param>
          <type>const std::function&lt; void(StateType &amp;) &gt;</type>
          <declname>statePostProcessingFunction</declname>
          <defval>std::function&lt; void(StateType &amp;) &gt;()</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>saveFrequency</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const std::chrono::steady_clock::time_point</type>
          <declname>initialClockTime</declname>
          <defval>std::chrono::steady_clock::now()</defval>
        </param>
        <briefdescription>
<para>Function to numerically integrate a given first order differential equation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to numerically integrate a given first order differential equation, with the state derivative a function of a single independent variable and the current state <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integrator</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical integrator used for propagation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTimeStep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> step to use for first step of numerical integration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagationTerminationCondition</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to determine when/how the propagation is to be stopped at the current time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutionHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>History of state variables that are to be saved given as map (time as key; returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariableHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>History of dependent variables that are to be saved given as map (time as key; returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cumulativeComputationTimeHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>History of cumulative computation times that are to be saved given as map (time as key; returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariableFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning dependent variables (obtained from environment and state derivative model). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statePostProcessingFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to post-process state after numerical integration (obtained from state derivative model). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>saveFrequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency at which to save the numerical integrated states (in units of i.e. per n integration time steps, with n = saveFrequency). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>printInterval</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency with which to print progress to console (nan = never). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialClockTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial clock time from which to determine cumulative computation time. By default now(), i.e. the moment at which this function is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Event that triggered the termination of the propagation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" line="473" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" bodystart="473" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="d8/d73/integrateEquations_8h_1aa61c0b48b0a3f3bba93a98097a303552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::shared_ptr&lt; <ref refid="d3/d1d/classtudat_1_1propagators_1_1PropagationTerminationDetails" kindref="compound">PropagationTerminationDetails</ref> &gt;</type>
        <definition>template std::shared_ptr&lt; PropagationTerminationDetails &gt; tudat::propagators::integrateEquationsFromIntegrator&lt; Eigen::MatrixXd, double, double &gt;</definition>
        <argsstring>(const std::shared_ptr&lt; numerical_integrators::NumericalIntegrator&lt; double, Eigen::MatrixXd, Eigen::MatrixXd, double &gt; &gt; integrator, const double initialTimeStep, const std::shared_ptr&lt; PropagationTerminationCondition &gt; propagationTerminationCondition, std::map&lt; double, Eigen::MatrixXd &gt; &amp;solutionHistory, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariableHistory, std::map&lt; double, double &gt; &amp;cumulativeComputationTimeHistory, const std::function&lt; Eigen::VectorXd() &gt; dependentVariableFunction, const std::function&lt; void(Eigen::MatrixXd &amp;) &gt; statePostProcessingFunction, const int saveFrequency, const double printInterval, const std::chrono::steady_clock::time_point initialClockTime)</argsstring>
        <name>integrateEquationsFromIntegrator&lt; Eigen::MatrixXd, double, double &gt;</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/d9b/classtudat_1_1numerical__integrators_1_1NumericalIntegrator" kindref="compound">numerical_integrators::NumericalIntegrator</ref>&lt; double, Eigen::MatrixXd, Eigen::MatrixXd, double &gt; &gt;</type>
          <declname>integrator</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTimeStep</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d39/classtudat_1_1propagators_1_1PropagationTerminationCondition" kindref="compound">PropagationTerminationCondition</ref> &gt;</type>
          <declname>propagationTerminationCondition</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::MatrixXd &gt; &amp;</type>
          <declname>solutionHistory</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariableHistory</declname>
        </param>
        <param>
          <type>std::map&lt; double, double &gt; &amp;</type>
          <declname>cumulativeComputationTimeHistory</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::VectorXd() &gt;</type>
          <declname>dependentVariableFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; void(Eigen::MatrixXd &amp;) &gt;</type>
          <declname>statePostProcessingFunction</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>saveFrequency</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
        </param>
        <param>
          <type>const std::chrono::steady_clock::time_point</type>
          <declname>initialClockTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" line="641" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" declline="641" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d8/d73/integrateEquations_8h_1a3bc6088adc6e0247a53b3714df488edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::shared_ptr&lt; <ref refid="d3/d1d/classtudat_1_1propagators_1_1PropagationTerminationDetails" kindref="compound">PropagationTerminationDetails</ref> &gt;</type>
        <definition>template std::shared_ptr&lt; PropagationTerminationDetails &gt; tudat::propagators::integrateEquationsFromIntegrator&lt; Eigen::VectorXd, double, double &gt;</definition>
        <argsstring>(const std::shared_ptr&lt; numerical_integrators::NumericalIntegrator&lt; double, Eigen::VectorXd, Eigen::VectorXd, double &gt; &gt; integrator, const double initialTimeStep, const std::shared_ptr&lt; PropagationTerminationCondition &gt; propagationTerminationCondition, std::map&lt; double, Eigen::VectorXd &gt; &amp;solutionHistory, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariableHistory, std::map&lt; double, double &gt; &amp;cumulativeComputationTimeHistory, const std::function&lt; Eigen::VectorXd() &gt; dependentVariableFunction, const std::function&lt; void(Eigen::VectorXd &amp;) &gt; statePostProcessingFunction, const int saveFrequency, const double printInterval, const std::chrono::steady_clock::time_point initialClockTime)</argsstring>
        <name>integrateEquationsFromIntegrator&lt; Eigen::VectorXd, double, double &gt;</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/d9b/classtudat_1_1numerical__integrators_1_1NumericalIntegrator" kindref="compound">numerical_integrators::NumericalIntegrator</ref>&lt; double, Eigen::VectorXd, Eigen::VectorXd, double &gt; &gt;</type>
          <declname>integrator</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTimeStep</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d39/classtudat_1_1propagators_1_1PropagationTerminationCondition" kindref="compound">PropagationTerminationCondition</ref> &gt;</type>
          <declname>propagationTerminationCondition</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>solutionHistory</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariableHistory</declname>
        </param>
        <param>
          <type>std::map&lt; double, double &gt; &amp;</type>
          <declname>cumulativeComputationTimeHistory</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::VectorXd() &gt;</type>
          <declname>dependentVariableFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; void(Eigen::VectorXd &amp;) &gt;</type>
          <declname>statePostProcessingFunction</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>saveFrequency</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
        </param>
        <param>
          <type>const std::chrono::steady_clock::time_point</type>
          <declname>initialClockTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" line="656" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/integrateEquations.h" declline="656" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d1/d7f/nBodyEnckeStateDerivative_8h_1a9630edc723457ba56e5ce9f8d2e695c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>StateScalarType</type>
        <definition>StateScalarType tudat::propagators::calculateEnckeQFunction</definition>
        <argsstring>(const StateScalarType qValue)</argsstring>
        <name>calculateEnckeQFunction</name>
        <param>
          <type>const StateScalarType</type>
          <declname>qValue</declname>
        </param>
        <briefdescription>
<para>Function to calculate Encke&apos;s function, to be used during propagation using Encke&apos;s method. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate Encke&apos;s function, to be used during propagation using Encke&apos;s method <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>qValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of free parameter in Encke&apos;s function (typically denoted as q) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of Encke&apos;s function for given free parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyEnckeStateDerivative.h" line="36" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyEnckeStateDerivative.h" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="df/d2c/nBodyGaussKeplerStateDerivative_8h_1a87d66488fde2c3440a9e5ae81e77eb61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::propagators::computeGaussPlanetaryEquationsForKeplerElements</definition>
        <argsstring>(const Eigen::Vector6d &amp;currentOsculatingKeplerElements, const Eigen::Vector3d &amp;accelerationsInRswFrame, const double semiLatusRectum, const double distance, const double meanMotion, const double orbitalAngularMomentum)</argsstring>
        <name>computeGaussPlanetaryEquationsForKeplerElements</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>currentOsculatingKeplerElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInRswFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>semiLatusRectum</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>meanMotion</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>orbitalAngularMomentum</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the Gauss planetary equations for Kepler elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the Gauss planetary equations for Kepler elements, providing the time-derivatives of the Kepler elements from the accelerations expressed in an RSW frame (see Vallado, 2001). This function takes a number of precomputed quantities as input, to reduce computational burden <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentOsculatingKeplerElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current osculating Kepler elements of the body for which the Gauss equations are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInRswFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in RSW frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiLatusRectum</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-latus rectum of osculating orbit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance from propagated body to its central body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meanMotion</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantaneous mean motion of body w.r.t. its central body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orbitalAngularMomentum</parametername>
</parameternamelist>
<parameterdescription>
<para>Norm of orbital angular momentum vector of body, w.r.t. its central body </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of osculating Kepler elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyGaussKeplerStateDerivative.cpp" line="20" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyGaussKeplerStateDerivative.cpp" bodystart="20" bodyend="73" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyGaussKeplerStateDerivative.h" declline="38" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/d2c/nBodyGaussKeplerStateDerivative_8h_1a6d290098441dc79e1852ec6de4147bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::propagators::computeGaussPlanetaryEquationsForKeplerElements</definition>
        <argsstring>(const Eigen::Vector6d &amp;currentOsculatingKeplerElements, const Eigen::Vector3d &amp;accelerationsInRswFrame, const double centralBodyGravitationalParameter)</argsstring>
        <name>computeGaussPlanetaryEquationsForKeplerElements</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>currentOsculatingKeplerElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInRswFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the Gauss planetary equations for Kepler elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the Gauss planetary equations for Kepler elements, providing the time-derivatives of the Kepler elements from the accelerations expressed in an RSW frame (see Vallado, 2001). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentOsculatingKeplerElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current osculating Kepler elements of the body for which the Gauss equations are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInRswFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in RSW frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of sum of central body and body for which orbit is propagated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of osculating Kepler elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyGaussKeplerStateDerivative.cpp" line="76" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyGaussKeplerStateDerivative.cpp" bodystart="76" bodyend="97" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyGaussKeplerStateDerivative.h" declline="56" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/d2c/nBodyGaussKeplerStateDerivative_8h_1a5dd45ba1e407a1437fcae520e386ed05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::propagators::computeGaussPlanetaryEquationsForKeplerElements</definition>
        <argsstring>(const Eigen::Vector6d &amp;currentOsculatingKeplerElements, const Eigen::Vector6d &amp;currentCartesianState, const Eigen::Vector3d &amp;accelerationsInInertialFrame, const double centralBodyGravitationalParameter)</argsstring>
        <name>computeGaussPlanetaryEquationsForKeplerElements</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>currentOsculatingKeplerElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>currentCartesianState</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInInertialFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the Gauss planetary equations for Kepler elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the Gauss planetary equations for Kepler elements, providing the time-derivatives of the Kepler elements from the accelerations expressed in an RSW frame (see Vallado, 2001). This function takes the accelerations in the inertial frame, as well as the Cartesian inertial state, and converts the accelerations to the RSW frame. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentOsculatingKeplerElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current osculating Kepler elements of the body for which the Gauss equations are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentCartesianState</parametername>
</parameternamelist>
<parameterdescription>
<para>Current Cartesian state of the body for which the Gauss equations are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInInertialFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in inertial frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of sum of central body and body for which orbit is propagated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of osculating Kepler elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyGaussKeplerStateDerivative.cpp" line="100" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyGaussKeplerStateDerivative.cpp" bodystart="100" bodyend="111" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyGaussKeplerStateDerivative.h" declline="73" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d9/d23/nBodyGaussModifiedEquinoctialStateDerivative_8h_1a866f10fcee075ad30159b287b47e56cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::propagators::computeGaussPlanetaryEquationsForModifiedEquinoctialElements</definition>
        <argsstring>(const Eigen::Vector6d &amp;osculatingModifiedEquinoctialElements, const Eigen::Vector3d &amp;accelerationsInRswFrame, const double centralBodyGravitationalParameter)</argsstring>
        <name>computeGaussPlanetaryEquationsForModifiedEquinoctialElements</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>osculatingModifiedEquinoctialElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInRswFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the Gauss planetary equations for modified equinictial elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the Gauss planetary equations for modified equinictial elements, providing the time-derivatives of the modified equinictial elements from the accelerations expressed in an RSW frame (see Vallado, 2001). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>osculatingModifiedEquinoctialElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current osculating modified equinoctial elements of the body for which the Gauss equations are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInRswFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in RSW frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of sum of central body and body for which orbit is propagated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of osculating dified equinictial elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyGaussModifiedEquinoctialStateDerivative.cpp" line="20" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyGaussModifiedEquinoctialStateDerivative.cpp" bodystart="20" bodyend="75" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyGaussModifiedEquinoctialStateDerivative.h" declline="34" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d2f/nBodyStateDerivative_8h_1a859ba859231f8fa3838c7e614d6eede0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::function&lt; double() &gt; &gt;</type>
        <definition>std::vector&lt; std::function&lt; double() &gt; &gt; tudat::propagators::removeCentralGravityAccelerations</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;centralBodies, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, basic_astrodynamics::AccelerationMap &amp;accelerationModelsPerBody)</argsstring>
        <name>removeCentralGravityAccelerations</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationModelsPerBody</declname>
        </param>
        <briefdescription>
<para>Function to remove the central gravity acceleration from an AccelerationMap. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to remove the central gravity acceleration from an AccelerationMap. This is crucial for propagation methods in which the deviation from a reference Kepler orbit is propagated. If the central gravity is a spherical harmonic acceleration, the point mass term is removed by setting the C(0,0) coefficnet to 0 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of names of bodies that are to be integrated numerically. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of names of bodies of which the central terms are to be removed (per entry of bodiesToIntegrate) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModelsPerBody</parametername>
</parameternamelist>
<parameterdescription>
<para>A map containing the list of accelerations acting on each body, identifying the body being acted on and the body acted on by an acceleration. The map has as key a string denoting the name of the body the list of accelerations, provided as the value corresponding to a key, is acting on. This map-value is again a map with string as key, denoting the body exerting the acceleration, and as value a pointer to an acceleration model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Functions returning the gravitational parameters of the central terms that were removed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyStateDerivative.cpp" line="20" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyStateDerivative.cpp" bodystart="20" bodyend="132" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyStateDerivative.h" declline="62" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="db/d2f/nBodyStateDerivative_8h_1a3918245bb3c6b63c34b537e35feca6f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; tudat::propagators::determineEphemerisUpdateorder</definition>
        <argsstring>(std::vector&lt; std::string &gt; integratedBodies, std::vector&lt; std::string &gt; centralBodies, std::vector&lt; std::string &gt; ephemerisOrigins)</argsstring>
        <name>determineEphemerisUpdateorder</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>integratedBodies</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>ephemerisOrigins</declname>
        </param>
        <briefdescription>
<para>Function to determine in which order the ephemerides are to be updated. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to determine in which order the ephemerides are to be updated. The order depends on the dependencies between the ephemeris/integration origins. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integratedBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies that are numerically integrated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of origins w.r.t. the integratedBodies&apos; translational dynamics is propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisOrigins</parametername>
</parameternamelist>
<parameterdescription>
<para>Origin of the Ephemeris objects of the integratedBodies. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyStateDerivative.cpp" line="135" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyStateDerivative.cpp" bodystart="135" bodyend="228" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyStateDerivative.h" declline="75" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d3/d86/nBodyUnifiedStateModelExponentialMapStateDerivative_8h_1a637d2733004650bb0c171c6e0b1f972b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector7d</type>
        <definition>Eigen::Vector7d tudat::propagators::computeStateDerivativeForUnifiedStateModelExponentialMap</definition>
        <argsstring>(const Eigen::Vector7d &amp;currentUnifiedStateModelElements, const Eigen::Vector3d &amp;accelerationsInRswFrame, const double sineLambdaParameter, const double cosineLambdaParameter, const double gammaParameter, const Eigen::Vector3d &amp;rotationalVelocityVector, const Eigen::Vector3d &amp;pParameterVector)</argsstring>
        <name>computeStateDerivativeForUnifiedStateModelExponentialMap</name>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>currentUnifiedStateModelElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInRswFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sineLambdaParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cosineLambdaParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gammaParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>rotationalVelocityVector</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>pParameterVector</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the equations of motion for the unifies state model with exponential map (USMEM) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the state derivative for the unified state model with exponential map.</para>
<para>Function to evaluate the equations of motion for the unifies state model with exponential map (USMEM), providing the time-derivatives of USMEM elements from the accelerations expressed in an RSW frame (see Vallado, 2001). This function takes a number of precomputed quantities as input, to reduce computational burden <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUnifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current USMEM elements of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInRswFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in RSW frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineLambdaParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Sine of the right ascension of latitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineLambdaParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Cosine of the right ascension of latitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gammaParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the parameter gamma (see Vittaldev, 2010) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationalVelocityVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotational velocity of the local orbital frame w.r.t. the inertial frame (see Vittaldev, 2010) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pParameterVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the vector gamma (see Vittaldev, 2010) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of USMEM elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelExponentialMapStateDerivative.cpp" line="27" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelExponentialMapStateDerivative.cpp" bodystart="27" bodyend="54" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyUnifiedStateModelExponentialMapStateDerivative.h" declline="40" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d3/d86/nBodyUnifiedStateModelExponentialMapStateDerivative_8h_1a569aedd14236e241f2dadb3406b0339c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector7d</type>
        <definition>Eigen::Vector7d tudat::propagators::computeStateDerivativeForUnifiedStateModelExponentialMap</definition>
        <argsstring>(const Eigen::Vector7d &amp;currentUnifiedStateModelElements, const Eigen::Vector3d &amp;accelerationsInRswFrame, const double centralBodyGravitationalParameter)</argsstring>
        <name>computeStateDerivativeForUnifiedStateModelExponentialMap</name>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>currentUnifiedStateModelElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInRswFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the equations of motion for the unifies state model with exponential map (USMEM) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the state derivative for the unified state model with exponential map.</para>
<para>Function to evaluate the equations of motion for the unifies state model with exponential map (USMEM), providing the time-derivatives of USMEM elements from the accelerations expressed in an RSW frame (see Vallado, 2001). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUnifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current USMEM elements of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInRswFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in RSW frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of sum of central body and body for which orbit is propagated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of USMEM elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelExponentialMapStateDerivative.cpp" line="57" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelExponentialMapStateDerivative.cpp" bodystart="57" bodyend="95" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyUnifiedStateModelExponentialMapStateDerivative.h" declline="59" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d3/d86/nBodyUnifiedStateModelExponentialMapStateDerivative_8h_1a4878245dc94c81120619999e63b6a3f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector7d</type>
        <definition>Eigen::Vector7d tudat::propagators::computeStateDerivativeForUnifiedStateModelExponentialMap</definition>
        <argsstring>(const Eigen::Vector7d &amp;currentUnifiedStateModelElements, const Eigen::Vector6d &amp;currentCartesianState, const Eigen::Vector3d &amp;accelerationsInInertialFrame, const double centralBodyGravitationalParameter)</argsstring>
        <name>computeStateDerivativeForUnifiedStateModelExponentialMap</name>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>currentUnifiedStateModelElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>currentCartesianState</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInInertialFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the equations of motion for the unifies state model with exponential map (USMEM) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the state derivative for the unified state model with exponential map.</para>
<para>Function to evaluate the equations of motion for the unifies state model with exponential map (USMEM), providing the time-derivatives of USMEM elements from the accelerations expressed in an RSW frame (see Vallado, 2001). This function takes the accelerations in the inertial frame, as well as the Cartesian inertial state, and converts the accelerations to the RSW frame. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUnifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current USMEM elements of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentCartesianState</parametername>
</parameternamelist>
<parameterdescription>
<para>Current Cartesian state of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInInertialFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in inertial frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of sum of central body and body for which orbit is propagated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of USMEM elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelExponentialMapStateDerivative.cpp" line="98" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelExponentialMapStateDerivative.cpp" bodystart="98" bodyend="108" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyUnifiedStateModelExponentialMapStateDerivative.h" declline="76" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d7/d56/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative_8h_1a7ee631ca179acc76d7619b3c37e19f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector7d</type>
        <definition>Eigen::Vector7d tudat::propagators::computeStateDerivativeForUnifiedStateModelModifiedRodriguesParameters</definition>
        <argsstring>(const Eigen::Vector7d &amp;currentUnifiedStateModelElements, const Eigen::Vector3d &amp;accelerationsInRswFrame, const double sineLambdaParameter, const double cosineLambdaParameter, const double gammaParameter, const Eigen::Vector3d &amp;rotationalVelocityVector, const Eigen::Vector3d &amp;pParameterVector)</argsstring>
        <name>computeStateDerivativeForUnifiedStateModelModifiedRodriguesParameters</name>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>currentUnifiedStateModelElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInRswFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sineLambdaParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cosineLambdaParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gammaParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>rotationalVelocityVector</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>pParameterVector</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the equations of motion for the unifies state model with modified rodrigues parameters (USM6) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the state derivative for the unified state model with modified rodrigues parameters.</para>
<para>Function to evaluate the equations of motion for the unifies state model with modified rodrigues parameters (USM6), providing the time-derivatives of USM6 elements from the accelerations expressed in an RSW frame (see Vallado, 2001). This function takes a number of precomputed quantities as input, to reduce computational burden <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUnifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current USM6 elements of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInRswFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in RSW frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineLambdaParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Sine of the right ascension of latitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineLambdaParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Cosine of the right ascension of latitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gammaParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the parameter gamma (see Vittaldev, 2010) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationalVelocityVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotational velocity of the local orbital frame w.r.t. the inertial frame (see Vittaldev, 2010) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pParameterVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the vector gamma (see Vittaldev, 2010) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of USM6 elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative.cpp" line="22" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative.cpp" bodystart="22" bodyend="49" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative.h" declline="40" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d7/d56/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative_8h_1a9fb3d4130bcede7339ee4ca9896702e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector7d</type>
        <definition>Eigen::Vector7d tudat::propagators::computeStateDerivativeForUnifiedStateModelModifiedRodriguesParameters</definition>
        <argsstring>(const Eigen::Vector7d &amp;currentUnifiedStateModelElements, const Eigen::Vector3d &amp;accelerationsInRswFrame, const double centralBodyGravitationalParameter)</argsstring>
        <name>computeStateDerivativeForUnifiedStateModelModifiedRodriguesParameters</name>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>currentUnifiedStateModelElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInRswFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the equations of motion for the unifies state model with modified rodrigues parameters (USM6) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the state derivative for the unified state model with modified rodrigues parameters.</para>
<para>Function to evaluate the equations of motion for the unifies state model with modified rodrigues parameters (USM6), providing the time-derivatives of USM6 elements from the accelerations expressed in an RSW frame (see Vallado, 2001). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUnifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current USM6 elements of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInRswFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in RSW frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of sum of central body and body for which orbit is propagated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of USM6 elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative.cpp" line="52" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative.cpp" bodystart="52" bodyend="108" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative.h" declline="59" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d7/d56/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative_8h_1a72c906568284b4d3f85bfa391cc15472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector7d</type>
        <definition>Eigen::Vector7d tudat::propagators::computeStateDerivativeForUnifiedStateModelModifiedRodriguesParameters</definition>
        <argsstring>(const Eigen::Vector7d &amp;currentUnifiedStateModelElements, const Eigen::Vector6d &amp;currentCartesianState, const Eigen::Vector3d &amp;accelerationsInInertialFrame, const double centralBodyGravitationalParameter)</argsstring>
        <name>computeStateDerivativeForUnifiedStateModelModifiedRodriguesParameters</name>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>currentUnifiedStateModelElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>currentCartesianState</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInInertialFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the equations of motion for the unifies state model with modified rodrigues parameters (USM6) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the state derivative for the unified state model with modified rodrigues parameters.</para>
<para>Function to evaluate the equations of motion for the unifies state model with modified rodrigues parameters (USM6), providing the time-derivatives of USM6 elements from the accelerations expressed in an RSW frame (see Vallado, 2001). This function takes the accelerations in the inertial frame, as well as the Cartesian inertial state, and converts the accelerations to the RSW frame. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUnifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current USM6 elements of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentCartesianState</parametername>
</parameternamelist>
<parameterdescription>
<para>Current Cartesian state of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInInertialFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in inertial frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of sum of central body and body for which orbit is propagated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of USM6 elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative.cpp" line="111" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative.cpp" bodystart="111" bodyend="121" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyUnifiedStateModelModifiedRodriguesParametersStateDerivative.h" declline="76" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/d86/nBodyUnifiedStateModelQuaternionsStateDerivative_8h_1a20aa35f6c6a1fd2f925a3a719fad8016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector7d</type>
        <definition>Eigen::Vector7d tudat::propagators::computeStateDerivativeForUnifiedStateModelQuaternions</definition>
        <argsstring>(const Eigen::Vector7d &amp;currentUnifiedStateModelElements, const Eigen::Vector3d &amp;accelerationsInRswFrame, const double sineLambdaParameter, const double cosineLambdaParameter, const double gammaParameter, const Eigen::Vector3d &amp;rotationalVelocityVector, const Eigen::Vector3d &amp;pParameterVector)</argsstring>
        <name>computeStateDerivativeForUnifiedStateModelQuaternions</name>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>currentUnifiedStateModelElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInRswFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sineLambdaParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cosineLambdaParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gammaParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>rotationalVelocityVector</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>pParameterVector</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the equations of motion for the unifies state model with quaternions (USM7) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the state derivative for the unified state model with quaternions.</para>
<para>Function to evaluate the equations of motion for the unifies state model with quaternions (USM7), providing the time-derivatives of USM7 elements from the accelerations expressed in an RSW frame (see Vallado, 2001). This function takes a number of precomputed quantities as input, to reduce computational burden <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUnifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current USM7 elements of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInRswFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in RSW frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineLambdaParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Sine of the right ascension of latitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineLambdaParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Cosine of the right ascension of latitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gammaParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the parameter gamma (see Vittaldev, 2010) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationalVelocityVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotational velocity of the local orbital frame w.r.t. the inertial frame (see Vittaldev, 2010) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pParameterVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the vector gamma (see Vittaldev, 2010) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of USM7 elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelQuaternionsStateDerivative.cpp" line="22" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelQuaternionsStateDerivative.cpp" bodystart="22" bodyend="49" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyUnifiedStateModelQuaternionsStateDerivative.h" declline="38" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/d86/nBodyUnifiedStateModelQuaternionsStateDerivative_8h_1aef63229248cd8f2455851ec9a5bdaa3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector7d</type>
        <definition>Eigen::Vector7d tudat::propagators::computeStateDerivativeForUnifiedStateModelQuaternions</definition>
        <argsstring>(const Eigen::Vector7d &amp;currentUnifiedStateModelElements, const Eigen::Vector3d &amp;accelerationsInRswFrame, const double centralBodyGravitationalParameter)</argsstring>
        <name>computeStateDerivativeForUnifiedStateModelQuaternions</name>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>currentUnifiedStateModelElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInRswFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the equations of motion for the unifies state model with quaternions (USM7) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the state derivative for the unified state model with quaternions.</para>
<para>Function to evaluate the equations of motion for the unifies state model with quaternions (USM7), providing the time-derivatives of USM7 elements from the accelerations expressed in an RSW frame (see Vallado, 2001). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUnifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current USM7 elements of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInRswFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in RSW frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of sum of central body and body for which orbit is propagated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of USM7 elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelQuaternionsStateDerivative.cpp" line="52" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelQuaternionsStateDerivative.cpp" bodystart="52" bodyend="90" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyUnifiedStateModelQuaternionsStateDerivative.h" declline="57" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/d86/nBodyUnifiedStateModelQuaternionsStateDerivative_8h_1ab8e6b637c39632ec85e1a0d598d9dc00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector7d</type>
        <definition>Eigen::Vector7d tudat::propagators::computeStateDerivativeForUnifiedStateModelQuaternions</definition>
        <argsstring>(const Eigen::Vector7d &amp;currentUnifiedStateModelElements, const Eigen::Vector6d &amp;currentCartesianState, const Eigen::Vector3d &amp;accelerationsInInertialFrame, const double centralBodyGravitationalParameter)</argsstring>
        <name>computeStateDerivativeForUnifiedStateModelQuaternions</name>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>currentUnifiedStateModelElements</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>currentCartesianState</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>accelerationsInInertialFrame</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to evaluate the equations of motion for the unifies state model with quaternions (USM7) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate the state derivative for the unified state model with quaternions.</para>
<para>Function to evaluate the equations of motion for the unifies state model with quaternions (USM7), providing the time-derivatives of USM7 elements from the accelerations expressed in an RSW frame (see Vallado, 2001). This function takes the accelerations in the inertial frame, as well as the Cartesian inertial state, and converts the accelerations to the RSW frame. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUnifiedStateModelElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Current USM7 elements of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentCartesianState</parametername>
</parameternamelist>
<parameterdescription>
<para>Current Cartesian state of the body for which the equations of motion are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationsInInertialFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerations acting on body, expressed in inertial frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of sum of central body and body for which orbit is propagated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivatives of USM7 elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelQuaternionsStateDerivative.cpp" line="93" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/nBodyUnifiedStateModelQuaternionsStateDerivative.cpp" bodystart="93" bodyend="103" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/nBodyUnifiedStateModelQuaternionsStateDerivative.h" declline="74" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/de8/propagateCovariance_8h_1a6615dd2827489400e5fe61cae95d8bef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::getFullVariationalEquationsSolutionHistory</definition>
        <argsstring>(std::map&lt; double, Eigen::MatrixXd &gt; &amp;fullVariationalEquationsSolutionHistory, const std::shared_ptr&lt; CombinedStateTransitionAndSensitivityMatrixInterface &gt; stateTransitionInterface, const std::vector&lt; double &gt; evaluationTimes)</argsstring>
        <name>getFullVariationalEquationsSolutionHistory</name>
        <param>
          <type>std::map&lt; double, Eigen::MatrixXd &gt; &amp;</type>
          <declname>fullVariationalEquationsSolutionHistory</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
          <declname>stateTransitionInterface</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>evaluationTimes</declname>
        </param>
        <briefdescription>
<para>Function to retrueve full state transition and sensitivity matrices at epochs. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrueve full state transition and sensitivity matrices at epochs from associated interface object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fullVariationalEquationsSolutionHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>List of combined state transition and sensitivity matrices, given at the epochs where the state covariance is to be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateTransitionInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that is used to obtain state transition and sensitivity matrices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluationTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>Times at which the variational equations are to be evaluated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" line="11" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" bodystart="11" bodyend="21" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/propagateCovariance.h" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/de8/propagateCovariance_8h_1a3867842a18e837133b28f3eb905bb9c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::getFullVariationalEquationsSolutionHistory</definition>
        <argsstring>(std::map&lt; double, Eigen::MatrixXd &gt; &amp;fullVariationalEquationsSolutionHistory, const std::shared_ptr&lt; CombinedStateTransitionAndSensitivityMatrixInterface &gt; stateTransitionInterface, const double timeStep, const double initialTime, const double finalTime)</argsstring>
        <name>getFullVariationalEquationsSolutionHistory</name>
        <param>
          <type>std::map&lt; double, Eigen::MatrixXd &gt; &amp;</type>
          <declname>fullVariationalEquationsSolutionHistory</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
          <declname>stateTransitionInterface</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeStep</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <briefdescription>
<para>Function to retrueve full state transition and sensitivity matrices at epochs. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrueve full state transition and sensitivity matrices at epochs from associated interface object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fullVariationalEquationsSolutionHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>List of combined state transition and sensitivity matrices, given at the epochs where the state covariance is to be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateTransitionInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that is used to obtain state transition and sensitivity matrices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeStep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> step with which full state transition and sensitivity matrices is to be provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial time at which full state transition and sensitivity matrices is to be provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Final time at which full state transition and sensitivity matrices is to be provided </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" line="24" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" bodystart="24" bodyend="41" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/propagateCovariance.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/de8/propagateCovariance_8h_1a7b7981c3ca7bc09affd7bb8102544255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateCovariance</definition>
        <argsstring>(std::map&lt; double, Eigen::MatrixXd &gt; &amp;propagatedCovariance, const Eigen::MatrixXd &amp;initialCovariance, const std::map&lt; double, Eigen::MatrixXd &gt; &amp;fullVariationalEquationsSolutionHistory)</argsstring>
        <name>propagateCovariance</name>
        <param>
          <type>std::map&lt; double, Eigen::MatrixXd &gt; &amp;</type>
          <declname>propagatedCovariance</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>initialCovariance</declname>
        </param>
        <param>
          <type>const std::map&lt; double, Eigen::MatrixXd &gt; &amp;</type>
          <declname>fullVariationalEquationsSolutionHistory</declname>
        </param>
        <briefdescription>
<para>Function to propagate full covariance at the initial time to state covariance at later times. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to propagate full covariance at the initial time to state covariance at later times <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatedCovariance</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state covariances at epochs (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialCovariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Full covariance at initial time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullVariationalEquationsSolutionHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>List of combined state transition and sensitivity matrices, given at the epochs where the state covariance is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" line="44" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" bodystart="44" bodyend="55" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/propagateCovariance.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/de8/propagateCovariance_8h_1a8de5e822362e103f099acb7e1ecb029f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateCovariance</definition>
        <argsstring>(std::map&lt; double, Eigen::MatrixXd &gt; &amp;propagatedCovariance, const Eigen::MatrixXd &amp;initialCovariance, const std::shared_ptr&lt; CombinedStateTransitionAndSensitivityMatrixInterface &gt; stateTransitionInterface, const std::vector&lt; double &gt; evaluationTimes)</argsstring>
        <name>propagateCovariance</name>
        <param>
          <type>std::map&lt; double, Eigen::MatrixXd &gt; &amp;</type>
          <declname>propagatedCovariance</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>initialCovariance</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
          <declname>stateTransitionInterface</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>evaluationTimes</declname>
        </param>
        <briefdescription>
<para>Function to propagate full covariance at the initial time to state covariance at later times. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to propagate full covariance at the initial time to state covariance at later times <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatedCovariance</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state covariances at epochs (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialCovariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Full covariance at initial time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateTransitionInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that is used to obtain state transition and sensitivity matrices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluationTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>Times at which the covariance is to be evaluated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" line="58" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" bodystart="58" bodyend="73" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/propagateCovariance.h" declline="74" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/de8/propagateCovariance_8h_1aab100129cfc15f8b52f4995478357fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; double, Eigen::MatrixXd &gt;</type>
        <definition>std::map&lt; double, Eigen::MatrixXd &gt; tudat::propagators::propagateCovariance</definition>
        <argsstring>(const Eigen::MatrixXd &amp;initialCovariance, const std::shared_ptr&lt; CombinedStateTransitionAndSensitivityMatrixInterface &gt; stateTransitionInterface, const std::vector&lt; double &gt; evaluationTimes)</argsstring>
        <name>propagateCovariance</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>initialCovariance</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
          <declname>stateTransitionInterface</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>evaluationTimes</declname>
        </param>
        <briefdescription>
<para>Function to propagate full covariance at the initial time to state formal errors at later times. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" line="75" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" bodystart="75" bodyend="84" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/propagateCovariance.h" declline="81" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d6/de8/propagateCovariance_8h_1abf146ac63c18db08964f45754f118ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateCovariance</definition>
        <argsstring>(std::map&lt; double, Eigen::MatrixXd &gt; &amp;propagatedCovariance, const Eigen::MatrixXd &amp;initialCovariance, const std::shared_ptr&lt; CombinedStateTransitionAndSensitivityMatrixInterface &gt; stateTransitionInterface, const double timeStep, const double initialTime, const double finalTime)</argsstring>
        <name>propagateCovariance</name>
        <param>
          <type>std::map&lt; double, Eigen::MatrixXd &gt; &amp;</type>
          <declname>propagatedCovariance</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>initialCovariance</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
          <declname>stateTransitionInterface</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeStep</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <briefdescription>
<para>Function to propagate full covariance at the initial time to state covariance at later times. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to propagate full covariance at the initial time to state covariance at later times <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatedCovariance</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state covariances at epochs (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialCovariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Full covariance at initial time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateTransitionInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that is used to obtain state transition and sensitivity matrices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeStep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> step with which covariance is to be provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial time at which covariance is to be provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Final time at which covariance is to be provided </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" line="87" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" bodystart="87" bodyend="105" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/propagateCovariance.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/de8/propagateCovariance_8h_1a98469a848265824bafa2dcaba6815fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateFormalErrors</definition>
        <argsstring>(std::map&lt; double, Eigen::VectorXd &gt; &amp;propagatedFormalErrors, const Eigen::MatrixXd &amp;initialCovariance, const std::shared_ptr&lt; CombinedStateTransitionAndSensitivityMatrixInterface &gt; stateTransitionInterface, const std::vector&lt; double &gt; evaluationTimes)</argsstring>
        <name>propagateFormalErrors</name>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>propagatedFormalErrors</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>initialCovariance</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
          <declname>stateTransitionInterface</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>evaluationTimes</declname>
        </param>
        <briefdescription>
<para>Function to propagate full covariance at the initial time to state formal errors at later times. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to propagate full covariance at the initial time to state formal errors at later times <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatedFormalErrors</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state formal errors at epochs (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialCovariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Full covariance at initial time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateTransitionInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that is used to obtain state transition and sensitivity matrices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluationTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>Times at which the covariance is to be evaluated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" line="108" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" bodystart="108" bodyend="123" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/propagateCovariance.h" declline="113" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/de8/propagateCovariance_8h_1a8936cb76731518cda161669c3c32d487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; double, Eigen::VectorXd &gt;</type>
        <definition>std::map&lt; double, Eigen::VectorXd &gt; tudat::propagators::propagateFormalErrors</definition>
        <argsstring>(const Eigen::MatrixXd &amp;initialCovariance, const std::shared_ptr&lt; CombinedStateTransitionAndSensitivityMatrixInterface &gt; stateTransitionInterface, const std::vector&lt; double &gt; evaluationTimes)</argsstring>
        <name>propagateFormalErrors</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>initialCovariance</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
          <declname>stateTransitionInterface</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>evaluationTimes</declname>
        </param>
        <briefdescription>
<para>Function to propagate full covariance at the initial time to state formal errors at later times. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" line="126" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" bodystart="126" bodyend="134" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/propagateCovariance.h" declline="120" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d6/de8/propagateCovariance_8h_1aabf5837cebf57e804e1f97eaab702820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateFormalErrors</definition>
        <argsstring>(std::map&lt; double, Eigen::VectorXd &gt; &amp;propagatedFormalErrors, const Eigen::MatrixXd &amp;initialCovariance, const std::shared_ptr&lt; CombinedStateTransitionAndSensitivityMatrixInterface &gt; stateTransitionInterface, const double timeStep, const double initialTime, const double finalTime)</argsstring>
        <name>propagateFormalErrors</name>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>propagatedFormalErrors</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>initialCovariance</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
          <declname>stateTransitionInterface</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeStep</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <briefdescription>
<para>Function to propagate full covariance at the initial time to state formal errors at later times. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to propagate full covariance at the initial time to state formal errors at later times <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatedFormalErrors</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state formal errors at epochs (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialCovariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Full covariance at initial time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateTransitionInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that is used to obtain state transition and sensitivity matrices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeStep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> step with which formal errors is to be provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial time at which formal errors is to be provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Final time at which formal errors is to be provided </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" line="137" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/propagateCovariance.cpp" bodystart="137" bodyend="154" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/propagateCovariance.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d4/ddd/rotationalMotionExponentialMapStateDerivative_8h_1a8dada086aaba2e3b4d7c49fa97200c65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector4d</type>
        <definition>Eigen::Vector4d tudat::propagators::calculateExponentialMapDerivative</definition>
        <argsstring>(const Eigen::Vector4d &amp;currentExponentialMapToBaseFrame, const Eigen::Vector3d &amp;angularVelocityVectorInBodyFixedFrame)</argsstring>
        <name>calculateExponentialMapDerivative</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>currentExponentialMapToBaseFrame</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>angularVelocityVectorInBodyFixedFrame</declname>
        </param>
        <briefdescription>
<para>Function to obtain the time derivative of an exponential map (in vector representation) of body-fixed to inertial frame. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to obtain the time derivative of exponantial map of body-fixed to inertial frame.</para>
<para>Function to obtain the time derivative of an exponential map (in vector representation) of body-fixed to inertial frame <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentExponentialMapToBaseFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>ExponentialMap (in vector representation) that define the rotation from body-fixed to inertial frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angularVelocityVectorInBodyFixedFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Current angular velocity vector of body, expressed in its body-fixed frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivative of an exponential map (in vector representation) of body-fixed to inertial frame </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionExponentialMapStateDerivative.cpp" line="21" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionExponentialMapStateDerivative.cpp" bodystart="21" bodyend="60" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/rotationalMotionExponentialMapStateDerivative.h" declline="34" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d3/d9e/rotationalMotionModifiedRodriguesParametersStateDerivative_8h_1a6cdcf9e463eaebe9f9ee5b74ae4beddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector4d</type>
        <definition>Eigen::Vector4d tudat::propagators::calculateModifiedRodriguesParametersDerivative</definition>
        <argsstring>(const Eigen::Vector4d &amp;currentModiefiedRodriguesParametersToBaseFrame, const Eigen::Vector3d &amp;angularVelocityVectorInBodyFixedFrame)</argsstring>
        <name>calculateModifiedRodriguesParametersDerivative</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>currentModiefiedRodriguesParametersToBaseFrame</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>angularVelocityVectorInBodyFixedFrame</declname>
        </param>
        <briefdescription>
<para>Function to obtain the time derivative of modified Rodrigues parameters (in vector representation) of body-fixed to inertial frame. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to obtain the time derivative of modified Rodrigues parameters of body-fixed to inertial frame.</para>
<para>Function to obtain the time derivative of modified Rodrigues parameters (in vector representation) of body-fixed to inertial frame. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentModiefiedRodriguesParametersToBaseFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Modified Rodrigues parameters (in vector representation) that define the rotation from body-fixed to inertial frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angularVelocityVectorInBodyFixedFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Current angular velocity vector of body, expressed in its body-fixed frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivative of modified Rodrigues parameters (in vector representation) of body-fixed to inertial frame </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionModifiedRodriguesParametersStateDerivative.cpp" line="21" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionModifiedRodriguesParametersStateDerivative.cpp" bodystart="21" bodyend="41" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/rotationalMotionModifiedRodriguesParametersStateDerivative.h" declline="32" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/db9/rotationalMotionQuaternionsStateDerivative_8h_1a5b9612d5a420715db6f644924607a2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix4d</type>
        <definition>Eigen::Matrix4d tudat::propagators::getQuaterionToQuaternionRateMatrix</definition>
        <argsstring>(const Eigen::Vector3d &amp;angularVelocityVectorInBodyFixedFrame)</argsstring>
        <name>getQuaterionToQuaternionRateMatrix</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>angularVelocityVectorInBodyFixedFrame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to obtain the matrix by which a quaternion vector is to be pre-multiplied to obtain this quaternion&apos;s time-derivative.</para>
<para>Function to obtain the matrix by which a quaternion vector (representing body-fixed to inertial frame rotation) is to be pre-multiplied to obtain this quaternion&apos;s time-derivative. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angularVelocityVectorInBodyFixedFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Current angular velocity vector of body, expressed in its body-fixed frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix by which a quaternion vector (representing body-fixed to inertial frame rotation) is to be pre-multiplied to obtain this quaternion&apos;s time-derivative.</para>
</simplesect>
Function to obtain the matrix by which a quaternion vector is to be pre-multiplied to obtain this quaternion&apos;s time-derivative. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionQuaternionsStateDerivative.cpp" line="22" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionQuaternionsStateDerivative.cpp" bodystart="22" bodyend="44" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/rotationalMotionQuaternionsStateDerivative.h" declline="33" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/db9/rotationalMotionQuaternionsStateDerivative_8h_1ab06f19d75ba33ceb0b3d2d90a5ce3e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 4, 3 &gt;</type>
        <definition>Eigen::Matrix&lt; double, 4, 3 &gt; tudat::propagators::getAngularVelocityToQuaternionRateMatrix</definition>
        <argsstring>(const Eigen::Vector4d &amp;quaternionVector)</argsstring>
        <name>getAngularVelocityToQuaternionRateMatrix</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>quaternionVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to obtain the matrix by which an angular velocity vector is to be pre-multiplied to obtain the quaternion&apos;s time-derivative.</para>
<para>Function to obtain the matrix by which an angular velocity vector of body (expressed in its body-fixed frame) is to be pre-multiplied to obtain the quaternion&apos;s time-derivative. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quaternionVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Current quaternion vector, representing body-fixed to inertial frame rotation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix by which an angular velocity vector of body (expressed in its body-fixed frame) is to be pre-multiplied to obtain the quaternion&apos;s time-derivative.</para>
</simplesect>
Function to obtain the matrix by which an angular velocity vector is to be pre-multiplied to obtain the quaternion&apos;s time-derivative. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionQuaternionsStateDerivative.cpp" line="48" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionQuaternionsStateDerivative.cpp" bodystart="48" bodyend="69" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/rotationalMotionQuaternionsStateDerivative.h" declline="44" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="db/db9/rotationalMotionQuaternionsStateDerivative_8h_1adad860daf60980bfc7becc645ab9533b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector4d</type>
        <definition>Eigen::Vector4d tudat::propagators::calculateQuaternionDerivative</definition>
        <argsstring>(const Eigen::Vector4d &amp;currentQuaternionsToBaseFrame, const Eigen::Vector3d &amp;angularVelocityVectorInBodyFixedFrame)</argsstring>
        <name>calculateQuaternionDerivative</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>currentQuaternionsToBaseFrame</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>angularVelocityVectorInBodyFixedFrame</declname>
        </param>
        <briefdescription>
<para>Function to obtain the time derivative of a quaternion (in vector representation) of body-fixed to inertial frame. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to obtain the time derivative of quaternions of body-fixed to inertial frame.</para>
<para>Function to obtain the time derivative of a quaternion (in vector representation) of body-fixed to inertial frame <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentQuaternionsToBaseFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternions (in vector representation) that define the rotation from body-fixed to inertial frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angularVelocityVectorInBodyFixedFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Current angular velocity vector of body, expressed in its body-fixed frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivative of a quaternion (in vector representation) of body-fixed to inertial frame </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionQuaternionsStateDerivative.cpp" line="72" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionQuaternionsStateDerivative.cpp" bodystart="72" bodyend="76" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/rotationalMotionQuaternionsStateDerivative.h" declline="54" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d09/rotationalMotionStateDerivative_8h_1accddc721f4996031f6e96b7fcd70d238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::propagators::evaluateRotationalEquationsOfMotion</definition>
        <argsstring>(const Eigen::Matrix3d &amp;inertiaTensor, const Eigen::Vector3d &amp;totalTorque, const Eigen::Vector3d &amp;angularVelocityVector, const Eigen::Matrix3d &amp;inertiaTensorTimeDerivative=Eigen::Matrix3d::Zero())</argsstring>
        <name>evaluateRotationalEquationsOfMotion</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>inertiaTensor</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>totalTorque</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>angularVelocityVector</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>inertiaTensorTimeDerivative</declname>
          <defval>Eigen::Matrix3d::Zero()</defval>
        </param>
        <briefdescription>
<para>Function to evaluated the classical rotational equations of motion (Euler equations) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluated the classical rotational equations of motion (Euler equations). The function returns the time-derivative of a body&apos;s angular velocity vector, expressed in its body-fixed frame <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inertiaTensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Inertia tensor of body, expressed in its body-fixed frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>totalTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Total torque acting on body, expressed in its body-fixed frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angularVelocityVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Current angular velocity vector of body, expressed in its body-fixed frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inertiaTensorTimeDerivative</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> derivative of inertiaTensor (default zero) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time-derivative of a body&apos;s angular velocity vector, expressed in its body-fixed frame </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionStateDerivative.cpp" line="20" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/rotationalMotionStateDerivative.cpp" bodystart="20" bodyend="26" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/rotationalMotionStateDerivative.h" declline="52" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d8/d00/singleStateTypeDerivative_8h_1a77b73f3a9da5e96b3b9359aa52ef4a0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::propagators::getSingleIntegrationSize</definition>
        <argsstring>(const IntegratedStateType stateType)</argsstring>
        <name>getSingleIntegrationSize</name>
        <param>
          <type>const IntegratedStateType</type>
          <declname>stateType</declname>
        </param>
        <briefdescription>
<para>Get size of state for single propagated state of given type. </para>
        </briefdescription>
        <detaileddescription>
<para>Get size of state for single propagated state of given type (i.e. 6 for translational state). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size of single state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/singleStateTypeDerivative.cpp" line="19" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/singleStateTypeDerivative.cpp" bodystart="19" bodyend="39" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/singleStateTypeDerivative.h" declline="43" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d8/d00/singleStateTypeDerivative_8h_1a4722216320cb61f1feb8fb5810ecead7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::propagators::getSingleIntegrationDifferentialEquationOrder</definition>
        <argsstring>(const IntegratedStateType stateType)</argsstring>
        <name>getSingleIntegrationDifferentialEquationOrder</name>
        <param>
          <type>const IntegratedStateType</type>
          <declname>stateType</declname>
        </param>
        <briefdescription>
<para>Get order of differential equation for governing equations of dynamics of given type. </para>
        </briefdescription>
        <detaileddescription>
<para>Get order of differential equation for governing equations of dynamics of given type (i.e. 2 for translational state). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Order of differential equations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/singleStateTypeDerivative.cpp" line="42" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/singleStateTypeDerivative.cpp" bodystart="42" bodyend="62" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/singleStateTypeDerivative.h" declline="51" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d8/d00/singleStateTypeDerivative_8h_1aad034f1b8312f1557c11323d48ac1d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::propagators::getGeneralizedAccelerationSize</definition>
        <argsstring>(const IntegratedStateType stateType)</argsstring>
        <name>getGeneralizedAccelerationSize</name>
        <param>
          <type>const IntegratedStateType</type>
          <declname>stateType</declname>
        </param>
        <briefdescription>
<para>Function to get the size of the generalized acceleration for a given state type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the size of the generalized acceleration (e.g. acceleration for translational dynamics, torque for rotational dynamics, mass rate for mass) for a given state type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateType</parametername>
</parameternamelist>
<parameterdescription>
<para>State type for which generalized acceleration size is to be determined </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Generalized acceleration size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/singleStateTypeDerivative.cpp" line="65" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/propagators/singleStateTypeDerivative.cpp" bodystart="65" bodyend="85" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/singleStateTypeDerivative.h" declline="60" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d6/d71/propagator_8h_1ae9c26e6318002fa5aadc8d8e10d8150c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const IntegratedStateType &amp;integratedStateType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const IntegratedStateType &amp;</type>
          <declname>integratedStateType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>IntegratedStateType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="279" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="279" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="d6/d71/propagator_8h_1a97bce526c8a25694e0c6e97f5454a0e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, IntegratedStateType &amp;integratedStateType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>IntegratedStateType &amp;</type>
          <declname>integratedStateType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>IntegratedStateType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="285" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="d6/d71/propagator_8h_1ac918f2956de74c792920e1947c51d812" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const TranslationalPropagatorType &amp;translationalPropagatorType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const TranslationalPropagatorType &amp;</type>
          <declname>translationalPropagatorType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>TranslationalPropagatorType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="309" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="d6/d71/propagator_8h_1a71d0153d94aa51260a4eae0b04ebce31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, TranslationalPropagatorType &amp;translationalPropagatorType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>TranslationalPropagatorType &amp;</type>
          <declname>translationalPropagatorType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>TranslationalPropagatorType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="315" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="d6/d71/propagator_8h_1a2c340ad678d48e5fc6547862525b640e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const RotationalPropagatorType &amp;rotationalPropagatorType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const RotationalPropagatorType &amp;</type>
          <declname>rotationalPropagatorType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>RotationalPropagatorType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="335" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="d6/d71/propagator_8h_1a3aab10dd4692c5d5ceb8e14eed267341" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, RotationalPropagatorType &amp;rotationalPropagatorType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>RotationalPropagatorType &amp;</type>
          <declname>rotationalPropagatorType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>RotationalPropagatorType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="341" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="d6/d71/propagator_8h_1a5750599101f0ca4da716e9821b440cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; MultiTypePropagatorSettings&lt; StateScalarType &gt; &gt; &amp;multiTypePropagatorSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d44/classtudat_1_1propagators_1_1MultiTypePropagatorSettings" kindref="compound">MultiTypePropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &amp;</type>
          <declname>multiTypePropagatorSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d7/d44/classtudat_1_1propagators_1_1MultiTypePropagatorSettings" kindref="compound">MultiTypePropagatorSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="351" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="351" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="d6/d71/propagator_8h_1a544a5256334bb87e8909eb47b132f9fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; MultiTypePropagatorSettings&lt; StateScalarType &gt; &gt; &amp;multiTypePropagatorSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/d44/classtudat_1_1propagators_1_1MultiTypePropagatorSettings" kindref="compound">MultiTypePropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &amp;</type>
          <declname>multiTypePropagatorSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d7/d44/classtudat_1_1propagators_1_1MultiTypePropagatorSettings" kindref="compound">MultiTypePropagatorSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="374" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="374" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="d6/d71/propagator_8h_1aab80ccf141200f21302b98652aa9f294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &amp;singleArcPropagatorSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &amp;</type>
          <declname>singleArcPropagatorSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="448" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="448" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="d6/d71/propagator_8h_1a3171e96f9827a9eb770159ea653a9d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &amp;singleArcPropagatorSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &amp;</type>
          <declname>singleArcPropagatorSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" line="539" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/propagator.h" bodystart="539" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="d4/d84/termination_8h_1a37f3cddde609fafbd9cf1df0fc93bad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; PropagationHybridTerminationSettings &gt; &amp;hybridTerminationSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/db7/classtudat_1_1propagators_1_1PropagationHybridTerminationSettings" kindref="compound">PropagationHybridTerminationSettings</ref> &gt; &amp;</type>
          <declname>hybridTerminationSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="de/db7/classtudat_1_1propagators_1_1PropagationHybridTerminationSettings" kindref="compound">PropagationHybridTerminationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/termination.cpp" line="25" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/termination.cpp" bodystart="25" bodyend="37" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/termination.h" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d4/d84/termination_8h_1ade3f77684c898828a1b59344e38217cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; PropagationHybridTerminationSettings &gt; &amp;hybridTerminationSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/db7/classtudat_1_1propagators_1_1PropagationHybridTerminationSettings" kindref="compound">PropagationHybridTerminationSettings</ref> &gt; &amp;</type>
          <declname>hybridTerminationSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="de/db7/classtudat_1_1propagators_1_1PropagationHybridTerminationSettings" kindref="compound">PropagationHybridTerminationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/termination.cpp" line="40" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/termination.cpp" bodystart="40" bodyend="60" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/termination.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d4/d84/termination_8h_1a1e99bde43c6dbb890f1b8ee397938db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; PropagationTerminationSettings &gt; &amp;terminationSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt; &amp;</type>
          <declname>terminationSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/termination.cpp" line="66" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/termination.cpp" bodystart="66" bodyend="113" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/termination.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d4/d84/termination_8h_1a9571d3a79c943be67f7d2f6bf8b26e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; PropagationTerminationSettings &gt; &amp;terminationSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt; &amp;</type>
          <declname>terminationSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/termination.cpp" line="116" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/termination.cpp" bodystart="116" bodyend="196" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/termination.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="da/d89/variable_8h_1ada4267f3c7a08f6ed84731008dde4278" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const VariableType &amp;variableType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const VariableType &amp;</type>
          <declname>variableType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>VariableType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" line="41" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="da/d89/variable_8h_1ad00b2bb7a1839ac62c17e725a4b2a6b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, VariableType &amp;variableType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>VariableType &amp;</type>
          <declname>variableType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>VariableType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" line="47" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="da/d89/variable_8h_1a1dd55991db95e680a6dc2a19d60e648e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const PropagationDependentVariables &amp;dependentVariable)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const PropagationDependentVariables &amp;</type>
          <declname>dependentVariable</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>PropagationDependentVariables</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" line="111" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="da/d89/variable_8h_1a524796b9652ee6999fe8a8e3bdffd1e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, PropagationDependentVariables &amp;dependentVariable)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>PropagationDependentVariables &amp;</type>
          <declname>dependentVariable</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>PropagationDependentVariables</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" line="117" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="da/d89/variable_8h_1acedf2e354ce0db53c598bcded205a09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; VariableSettings &gt; &amp;variableSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d2/d58/classtudat_1_1propagators_1_1VariableSettings" kindref="compound">VariableSettings</ref> &gt; &amp;</type>
          <declname>variableSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d2/d58/classtudat_1_1propagators_1_1VariableSettings" kindref="compound">VariableSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref></computeroutput> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/variable.cpp" line="28" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/variable.cpp" bodystart="28" bodyend="66" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" declline="126" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="da/d89/variable_8h_1adcd3de61cc8f7a1e5202dcfd091ba9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; VariableSettings &gt; &amp;variableSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d2/d58/classtudat_1_1propagators_1_1VariableSettings" kindref="compound">VariableSettings</ref> &gt; &amp;</type>
          <declname>variableSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d2/d58/classtudat_1_1propagators_1_1VariableSettings" kindref="compound">VariableSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/variable.cpp" line="69" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/variable.cpp" bodystart="69" bodyend="105" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" declline="129" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="da/d89/variable_8h_1abe6677364c7dbaf86348c88473fb6df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &amp;dependentVariableSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &amp;</type>
          <declname>dependentVariableSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/variable.cpp" line="111" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/variable.cpp" bodystart="111" bodyend="225" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="da/d89/variable_8h_1a8b975099403890b8998af5c254d36f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &amp;dependentVariableSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &amp;</type>
          <declname>dependentVariableSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/variable.cpp" line="228" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/variable.cpp" bodystart="228" bodyend="332" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/variable.h" declline="139" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="df/db0/variationalEquationsSolver_8h_1ac7f0245197808be9097b98fae6c5cef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::setVariationalEquationsSolution</definition>
        <argsstring>(std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, Eigen::Dynamic &gt; &gt; &amp;numericalIntegrationResult, std::vector&lt; std::map&lt; double, Eigen::MatrixXd &gt; &gt; &amp;variationalEquationsSolution, const std::pair&lt; int, int &gt; stateTransitionStartIndices, const std::pair&lt; int, int &gt; sensitivityStartIndices, const int stateTransitionMatrixSize, const int parameterSetSize)</argsstring>
        <name>setVariationalEquationsSolution</name>
        <param>
          <type>std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, Eigen::Dynamic &gt; &gt; &amp;</type>
          <declname>numericalIntegrationResult</declname>
        </param>
        <param>
          <type>std::vector&lt; std::map&lt; double, Eigen::MatrixXd &gt; &gt; &amp;</type>
          <declname>variationalEquationsSolution</declname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <declname>stateTransitionStartIndices</declname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <declname>sensitivityStartIndices</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>stateTransitionMatrixSize</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>parameterSetSize</declname>
        </param>
        <briefdescription>
<para>Function to separate the time histories of the sensitivity and state transition matrices from a full numerical solution. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to separate the time histories of the sensitivity and state transition matrices from a full numerical solution, in which the solution is represented as a single matrix block per time value. NOTE: numericalIntegrationResult contents are deleted by this function (all information is conserved in variationalEquationsSolution. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numericalIntegrationResult</parametername>
</parameternamelist>
<parameterdescription>
<para>Full time history from which separate matrix histories are to be retrieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>variationalEquationsSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of two matrix histories (returned by reference). First vector entry is state transition matrix history, second entry is sensitivity matrix history. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateTransitionStartIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>First row and column (first and second) of state transition matrix in entries of numericalIntegrationResult. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensitivityStartIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>First row and column (first and second) of sensitivity matrix in entries of numericalIntegrationResult. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateTransitionMatrixSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size (rows and columns are equal) of state transition matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterSetSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in sensitivity matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/variationalEquationsSolver.h" line="231" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/variationalEquationsSolver.h" bodystart="231" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="df/db0/variationalEquationsSolver_8h_1a0d69981cef75d1ae6533bbabdfbecf05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::createStateTransitionAndSensitivityMatrixInterpolator</definition>
        <argsstring>(std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; double, Eigen::MatrixXd &gt; &gt; &amp;stateTransitionMatrixInterpolator, std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; double, Eigen::MatrixXd &gt; &gt; &amp;sensitivityMatrixInterpolator, std::vector&lt; std::map&lt; double, Eigen::MatrixXd &gt; &gt; &amp;variationalEquationsSolution, const bool clearRawSolution=1)</argsstring>
        <name>createStateTransitionAndSensitivityMatrixInterpolator</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; double, Eigen::MatrixXd &gt; &gt; &amp;</type>
          <declname>stateTransitionMatrixInterpolator</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; double, Eigen::MatrixXd &gt; &gt; &amp;</type>
          <declname>sensitivityMatrixInterpolator</declname>
        </param>
        <param>
          <type>std::vector&lt; std::map&lt; double, Eigen::MatrixXd &gt; &gt; &amp;</type>
          <declname>variationalEquationsSolution</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearRawSolution</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Function to create interpolators for state transition and sensitivity matrices from numerical results. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create interpolators for state transition and sensitivity matrices from numerical results. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateTransitionMatrixInterpolator</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolator object for state transition matrix (returned by reference). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensitivityMatrixInterpolator</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolator object for sensitivity matrix (returned by reference). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>variationalEquationsSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of two matrix histories. First vector entry is state transition matrix history, second entry is sensitivity matrix history. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearRawSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether to clear entries of variationalEquationsSolution after creation of interpolators. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/variationalEquationsSolver.cpp" line="35" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/variationalEquationsSolver.cpp" bodystart="35" bodyend="67" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/variationalEquationsSolver.h" declline="273" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="df/db0/variationalEquationsSolver_8h_1a838c0ef46d51de625b85bf778c7a86c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tudat::propagators::checkPropagatorSettingsAndParameterEstimationConsistency</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; StateScalarType &gt; &gt; parametersToEstimate)</argsstring>
        <name>checkPropagatorSettingsAndParameterEstimationConsistency</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to check the consistency between propagation settings of equations of motion, and estimated parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check the consistency between propagation settings of equations of motion, and estimated parameters. In particular, it is presently required that the set of propagated states is equal to the set of estimated states. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for propagation of equations of motion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing all parameters that are to be estimated and their current settings and values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if settings are consistent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/variationalEquationsSolver.h" line="291" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/variationalEquationsSolver.h" bodystart="291" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="df/db0/variationalEquationsSolver_8h_1a8e293c7909e04140ecb65bac19ae4fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tudat::propagators::checkMultiArcPropagatorSettingsAndParameterEstimationConsistency</definition>
        <argsstring>(const std::shared_ptr&lt; MultiArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; StateScalarType &gt; &gt; parametersToEstimate, const std::vector&lt; double &gt; arcStartTimes)</argsstring>
        <name>checkMultiArcPropagatorSettingsAndParameterEstimationConsistency</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/de9/classtudat_1_1propagators_1_1MultiArcPropagatorSettings" kindref="compound">MultiArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>arcStartTimes</declname>
        </param>
        <briefdescription>
<para>Function to check the consistency between multi-arc propagation settings of equations of motion, and estimated parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check the consistency between multi-arc propagation settings of equations of motion, and estimated parameters. In particular, it is presently required that the set of propagated states is equal to the set of estimated states. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for propagation of equations of motion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing all parameters that are to be estimated and their current settings and values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcStartTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>Times at which the dynamics arcs start </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if settings are consistent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/variationalEquationsSolver.h" line="430" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/variationalEquationsSolver.h" bodystart="430" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="df/db0/variationalEquationsSolver_8h_1ab635e693f64ed7d87cd5c7d64178db32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::setPropagatorSettingsMultiArcStatesInEstimatedDynamicalParameters</definition>
        <argsstring>(const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; StateScalarType &gt; &gt; parametersToEstimate, const std::shared_ptr&lt; MultiArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings)</argsstring>
        <name>setPropagatorSettingsMultiArcStatesInEstimatedDynamicalParameters</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/de9/classtudat_1_1propagators_1_1MultiArcPropagatorSettings" kindref="compound">MultiArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <briefdescription>
<para>Function to transfer the initial multi-arc states from propagator settings to associated initial state estimation parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to transfer the initial multi-arc states from propagator settings to associated initial state estimation parameters. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Full set of estimated parameters to which the initial states are to be transferred </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-arc propagator settings from which the initial states are to be taken </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/variationalEquationsSolver.h" line="968" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/variationalEquationsSolver.h" bodystart="968" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1aea473216f9b7f8814ca29fa64d38f216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::checkValidityOfRequiredEnvironmentUpdates</definition>
        <argsstring>(const std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; &amp;requestedUpdates, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>checkValidityOfRequiredEnvironmentUpdates</name>
        <param>
          <type>const std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; &amp;</type>
          <declname>requestedUpdates</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to check validity of existing environment. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check whether the requested environment updates are possible with the existing environment, i.e. if all environment models that are to be updated exist in the bodies. The function throws an error if environment cannot be updated as requested., <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>requestedUpdates</parametername>
</parameternamelist>
<parameterdescription>
<para>List of environment updates that are required </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects used in the simulations.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Function to check whether the requested environment updates are possible with the existing environment. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" line="23" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" bodystart="23" bodyend="126" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1ab286fb90e4745c35b8e8ac9dd7db683b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::removePropagatedStatesFomEnvironmentUpdates</definition>
        <argsstring>(std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; &amp;environmentModelsToUpdate, const std::map&lt; IntegratedStateType, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &gt; &amp;integratedStateList)</argsstring>
        <name>removePropagatedStatesFomEnvironmentUpdates</name>
        <param>
          <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; &amp;</type>
          <declname>environmentModelsToUpdate</declname>
        </param>
        <param>
          <type>const std::map&lt; IntegratedStateType, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &gt; &amp;</type>
          <declname>integratedStateList</declname>
        </param>
        <briefdescription>
<para>Function that removes propagated states from the updated environment variables. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that removes propagated states from the updated environment variables <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>environmentModelsToUpdate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of environment models to be updated, this data structure is modified by this function and returned by reference </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratedStateList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of states that are numerically integrated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" line="129" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" bodystart="129" bodyend="197" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1a6eb638e50adb11d882e6d15477152a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; tudat::propagators::createRotationalEquationsOfMotionEnvironmentUpdaterSettings</definition>
        <argsstring>(const basic_astrodynamics::TorqueModelMap &amp;torqueModels, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createRotationalEquationsOfMotionEnvironmentUpdaterSettings</name>
        <param>
          <type>const basic_astrodynamics::TorqueModelMap &amp;</type>
          <declname>torqueModels</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Get list of required environment model update settings from torque models. </para>
        </briefdescription>
        <detaileddescription>
<para>Get list of required environment model update settings from torque models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>torqueModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of torque models used in simulation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects used in the simulations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of required environment model update settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" line="201" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" bodystart="201" bodyend="263" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1abb3bc72eeed3b4a7ae28f4d40f85f1be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; tudat::propagators::createTranslationalEquationsOfMotionEnvironmentUpdaterSettings</definition>
        <argsstring>(const basic_astrodynamics::AccelerationMap &amp;translationalAccelerationModels, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createTranslationalEquationsOfMotionEnvironmentUpdaterSettings</name>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>translationalAccelerationModels</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Get list of required environment model update settings from translational acceleration models. </para>
        </briefdescription>
        <detaileddescription>
<para>Get list of required environment model update settings from translational acceleration models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>translationalAccelerationModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of acceleration models used in simulation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects used in the simulations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of required environment model update settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" line="268" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" bodystart="268" bodyend="497" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1aa92f83a6adc70003a5990885ec6ee332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; tudat::propagators::createMassPropagationEnvironmentUpdaterSettings</definition>
        <argsstring>(const std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; basic_astrodynamics::MassRateModel &gt; &gt; &gt; massRateModels, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createMassPropagationEnvironmentUpdaterSettings</name>
        <param>
          <type>const std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; <ref refid="d2/df8/classtudat_1_1basic__astrodynamics_1_1MassRateModel" kindref="compound">basic_astrodynamics::MassRateModel</ref> &gt; &gt; &gt;</type>
          <declname>massRateModels</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Get list of required environment model update settings from mass rate models. </para>
        </briefdescription>
        <detaileddescription>
<para>Get list of required environment model update settings from mass rate models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>massRateModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of mass rate models used in simulation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects used in the simulations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of required environment model update settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" line="501" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" bodystart="501" bodyend="543" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="82" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1ada61a9ef4e07b0f5cdb24a66f270388d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::checkAndModifyEnvironmentForDependentVariableSaving</definition>
        <argsstring>(const EnvironmentModelsToUpdate updateType, const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; dependentVariableSaveSettings, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>checkAndModifyEnvironmentForDependentVariableSaving</name>
        <param>
          <type>const EnvironmentModelsToUpdate</type>
          <declname>updateType</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariableSaveSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to update environment to allow all required updates to be made. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to update environment to allow all required updates to be made. It checks whether a flight conditions object needs to be updated, and creates a FlightConditions object for the associated body if it is not. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>updateType</parametername>
</parameternamelist>
<parameterdescription>
<para>List of environment models that are to be updated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariableSaveSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Dependent variables that are to be saved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment (updated by function if needed). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" line="546" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" bodystart="546" bodyend="597" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1ae49fbb70af9bbfc70ac39db450c5ec24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; tudat::propagators::createEnvironmentUpdaterSettingsForDependentVariables</definition>
        <argsstring>(const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; dependentVariableSaveSettings, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createEnvironmentUpdaterSettingsForDependentVariables</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariableSaveSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create environment update settings for a single dependent variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create environment update settings for a single dependent variable <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dependentVariableSaveSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for single dependent variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of required environment model updates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" line="601" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" bodystart="601" bodyend="831" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="107" declcolumn="2"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1a4c4c066148fa97733377d313651dbf7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; tudat::propagators::createEnvironmentUpdaterSettings</definition>
        <argsstring>(const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariableSaveSettings, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createEnvironmentUpdaterSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariableSaveSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Create environment update settings for dependent variables. </para>
        </briefdescription>
        <detaileddescription>
<para>Create environment update settings for dependent variables <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dependentVariableSaveSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for dependent variables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of required environment model updates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" line="834" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" bodystart="834" bodyend="852" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="119" declcolumn="2"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1af6e0eecbcb52355e961acd80cef45473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; tudat::propagators::createEnvironmentUpdaterSettings</definition>
        <argsstring>(const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createEnvironmentUpdaterSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Create environment update settings for termination settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Create environment update settings for termination settings <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>terminationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for propagation termination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of required environment model updates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" line="855" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" bodystart="855" bodyend="897" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="131" declcolumn="2"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1a50a7a04ab8f4f4f6174d13dd46da0cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt; propagators::EnvironmentModelsToUpdate,std::vector&lt; std::string &gt; &gt; tudat::propagators::createEnvironmentUpdaterSettings</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies, const bool isPartOfMultiTypePropagation=false)</argsstring>
        <name>createEnvironmentUpdaterSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isPartOfMultiTypePropagation</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get list of required environment model update settings from a list of propagation settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Get list of required environment model update settings from a list of propagation settings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object providing the full settings for the dynamics that are to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects used in the simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isPartOfMultiTypePropagation</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether propagation uses multiple types of dynamics </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of updates required when propagating dynamics defined by propagatorSettings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" line="147" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" bodystart="147" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1a6606dc9c49816e55455fea23860b5660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; tudat::propagators::createFullEnvironmentUpdaterSettings</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createFullEnvironmentUpdaterSettings</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create &apos;brute-force&apos; update settings, in which each environment model is updated. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create &apos;brute-force&apos; update settings, in which each environment model (i.e. each member of the Body objects that can be updated) is updated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects used in the simulations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of environment model updates, so that each updatable model is updated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" line="901" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createEnvironmentUpdater.cpp" bodystart="901" bodyend="970" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="261" declcolumn="2"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1ac9a998f133aed5d34e7772ec4c3b6453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d5/d0b/classtudat_1_1propagators_1_1EnvironmentUpdater" kindref="compound">propagators::EnvironmentUpdater</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; propagators::EnvironmentUpdater&lt; StateScalarType, TimeType &gt; &gt; tudat::propagators::createEnvironmentUpdaterForDynamicalEquations</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createEnvironmentUpdaterForDynamicalEquations</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Create environment updater from a list of propagation settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Get environment updater from a list of propagation settings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object providing the full settings for the dynamics that are to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects used in the simulations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object that updates the environment in bodies, as per thhe requirements set by propagatorSettings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" line="275" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" bodystart="275" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1aaeaf2dd61709aa41518e0dc33f369c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::shared_ptr&lt; <ref refid="d5/d0b/classtudat_1_1propagators_1_1EnvironmentUpdater" kindref="compound">propagators::EnvironmentUpdater</ref>&lt; double, double &gt; &gt;</type>
        <definition>template std::shared_ptr&lt; propagators::EnvironmentUpdater&lt; double, double &gt; &gt; tudat::propagators::createEnvironmentUpdaterForDynamicalEquations&lt; double, double &gt;</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; double &gt; &gt; propagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createEnvironmentUpdaterForDynamicalEquations&lt; double, double &gt;</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" line="293" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="293" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/createEnvironmentUpdater_8h_1a49b08417f5239a4d4c2ea31d31b33f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt;</type>
        <definition>template std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; tudat::propagators::createEnvironmentUpdaterSettings&lt; double &gt;</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; double &gt; &gt; propagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies, const bool isPartOfMultiTypePropagation)</argsstring>
        <name>createEnvironmentUpdaterSettings&lt; double &gt;</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isPartOfMultiTypePropagation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" line="297" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createEnvironmentUpdater.h" declline="297" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1a4ca964b318a0022d9daeef268ca541f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="dc/d59/classtudat_1_1propagators_1_1CentralBodyData" kindref="compound">CentralBodyData</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; CentralBodyData&lt; StateScalarType, TimeType &gt; &gt; tudat::propagators::createCentralBodyData</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;centralBodies, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createCentralBodyData</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create object handling frame origin transformations during numerical integration. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create object handling frame origin transformations during numerical integration (needed by <ref refid="d6/d9c/classtudat_1_1propagators_1_1NBodyStateDerivative" kindref="compound">NBodyStateDerivative</ref>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>centralBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Names of central bodies, belonging to the entries in the bodiesToIntegrate vector of same index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Names of bodies that are to be integrated numerically. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects used in simulation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object handling frame origin transformations during numerical integration </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" line="57" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" bodystart="57" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1a6a83e9e4dda2bd2fd155410476be4471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; tudat::propagators::createTranslationalStateDerivativeModel</definition>
        <argsstring>(const std::shared_ptr&lt; TranslationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; translationPropagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies, const TimeType propagationStartTime)</argsstring>
        <name>createTranslationalStateDerivativeModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">TranslationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>translationPropagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>propagationStartTime</declname>
        </param>
        <briefdescription>
<para>Function to create a translational state derivative model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a translational state derivative model from propagation settings and environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>translationPropagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the translational dynamics model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects in the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagationStartTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> from which numerical propagation starts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Translational state derivative model (instance of derived class of <ref refid="d6/d9c/classtudat_1_1propagators_1_1NBodyStateDerivative" kindref="compound">NBodyStateDerivative</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" line="140" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" bodystart="140" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1a53b0a37e5fc9700ecc980880c0acede0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; tudat::propagators::createRotationalStateDerivativeModel</definition>
        <argsstring>(const std::shared_ptr&lt; RotationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; rotationPropagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies, const TimeType startTime)</argsstring>
        <name>createRotationalStateDerivativeModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/d74/classtudat_1_1propagators_1_1RotationalStatePropagatorSettings" kindref="compound">RotationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>rotationPropagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>startTime</declname>
        </param>
        <briefdescription>
<para>Function to create a rotational dynamics state derivative model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a rotational dynamics state derivative model from propagation settings and environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rotationPropagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the rotational dynamics model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects in the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startTime</parametername>
</parameternamelist>
<parameterdescription>
<para>propagation start time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotational dynamics state derivative model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" line="265" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" bodystart="265" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1a2bd6408f57285ca54f8ce252858baac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; tudat::propagators::createBodyMassStateDerivativeModel</definition>
        <argsstring>(const std::shared_ptr&lt; MassPropagatorSettings&lt; StateScalarType &gt; &gt; massPropagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createBodyMassStateDerivativeModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/de7/classtudat_1_1propagators_1_1MassPropagatorSettings" kindref="compound">MassPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>massPropagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create a mass state derivative model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a mass state derivative model from propagation settings and environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>massPropagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the mass dynamics model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects in the environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mass state derivative model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" line="318" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" bodystart="318" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1ac440e745c7d1e870fce5e5e7a9aa861a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; tudat::propagators::createStateDerivativeModel</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies, const TimeType propagationStartTime)</argsstring>
        <name>createStateDerivativeModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>propagationStartTime</declname>
        </param>
        <briefdescription>
<para>Function to create a state derivative model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a state derivative model from propagation settings and the environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the dynamical model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects in the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagationStartTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> from which numerical propagation starts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State derivative model (instance of required derived class of <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" line="337" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" bodystart="337" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1aa84dcc561716e1a5a5b08e11833075ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::setMultiTypePropagationClosure</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>setMultiTypePropagationClosure</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function that finalized multi-type propagator creation by ensuring that any mutual dependencies are correctly set. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that finalized multi-type propagator creation by ensuring that any mutual dependencies are correctly set <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the numerical propagation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" line="434" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" bodystart="434" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1aa46007d17623bb4eeb2dd7a2a692cc31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; tudat::propagators::createStateDerivativeModels</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies, const TimeType propagationStartTime)</argsstring>
        <name>createStateDerivativeModels</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>propagationStartTime</declname>
        </param>
        <briefdescription>
<para>Function to create a list of state derivative models. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a list of state derivative models from propagation settings and the environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the dynamical model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects in the environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagationStartTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> from which numerical propagation starts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of state derivative models (instances of required derived class of <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" line="541" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" bodystart="541" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1a12132fad589750067ff52205730e7b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt;</type>
        <definition>std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt;SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; tudat::propagators::getStateDerivativeModelMapFromVector</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &amp;stateDerivativeModelList)</argsstring>
        <name>getStateDerivativeModelMapFromVector</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModelList</declname>
        </param>
        <briefdescription>
<para>Function to convert a list of state derivative models to a map sorted by state type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert a list of state derivative models to a map sorted by state type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateDerivativeModelList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state derivative models </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of state derivative models </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" line="637" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" bodystart="637" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1a9bb834c87e91d919b82918227b43e3c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt;</type>
        <definition>std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt;SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; tudat::propagators::createStateDerivativeModelMap</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies, const TimeType propagationStartTime)</argsstring>
        <name>createStateDerivativeModelMap</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>propagationStartTime</declname>
        </param>
        <briefdescription>
<para>Function to create a map of state derivative models. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a map of state derivative models from propagation settings and the environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the dynamical model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects in the environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagationStartTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> from which numerical propagation starts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of state derivative models (instances of required derived class of <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" line="663" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" bodystart="663" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1a096cbc9bcea35c57ede37eb533884ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d9b/classtudat_1_1numerical__integrators_1_1NumericalIntegrator" kindref="compound">numerical_integrators::NumericalIntegrator</ref>&lt; double, Eigen::Vector6d &gt; &gt;</type>
        <definition>std::shared_ptr&lt; numerical_integrators::NumericalIntegrator&lt; double, Eigen::Vector6d &gt; &gt; tudat::propagators::createCR3BPIntegrator</definition>
        <argsstring>(const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const double massParameter, const Eigen::Vector6d &amp;initialState)</argsstring>
        <name>createCR3BPIntegrator</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>massParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>initialState</declname>
        </param>
        <briefdescription>
<para>Function to create an integrator to propagate the dynamics (in normalized units) in CR3BP. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an integrator to propagate the dynamics (in normalized units) in Circularly Restricted Three-Body Problem. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the numerical integration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Normalized mass parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialState</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial normalized state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integrator object for propagation of CR3BP with requested settings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createStateDerivativeModel.cpp" line="29" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createStateDerivativeModel.cpp" bodystart="29" bodyend="44" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" declline="680" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/dd8/createStateDerivativeModel_8h_1a72fcfb1504c891ea273a03c3333ec953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; double, Eigen::Vector6d &gt;</type>
        <definition>std::map&lt; double, Eigen::Vector6d &gt; tudat::propagators::performCR3BPIntegration</definition>
        <argsstring>(const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const double massParameter, const Eigen::Vector6d &amp;initialState, const double finalTime, const bool propagateToExactFinalTime=false)</argsstring>
        <name>performCR3BPIntegration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>massParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>initialState</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>propagateToExactFinalTime</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Function to propagate the dynamics (in normalized units) in CR3BP. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to propagate the dynamics (in normalized units) in Circularly Restricted Three-Body Problem. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the numerical integration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Normalized mass parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialState</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial normalized state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>End time for the numerical integration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagateToExactFinalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether to terminate exactly on the final time (if true), or on the first step that exceeds the final time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Propagated state history of normalized dynamics in CR3BP. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createStateDerivativeModel.cpp" line="47" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createStateDerivativeModel.cpp" bodystart="47" bodyend="93" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createStateDerivativeModel.h" declline="696" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddf/dynamicsSimulator_8h_1a6ba01319f05015aa4cd935ca1be6eaed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; tudat::propagators::getInitialStatesOfBodiesFromFrameManager</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const std::vector&lt; std::string &gt; &amp;centralBodies, const simulation_setup::SystemOfBodies &amp;bodies, const TimeType initialTime, const std::shared_ptr&lt; ephemerides::ReferenceFrameManager &gt; frameManager)</argsstring>
        <name>getInitialStatesOfBodiesFromFrameManager</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/d1b/classtudat_1_1ephemerides_1_1ReferenceFrameManager" kindref="compound">ephemerides::ReferenceFrameManager</ref> &gt;</type>
          <declname>frameManager</declname>
        </param>
        <briefdescription>
<para>Function to get the states of a set of bodies, w.r.t. some set of central bodies, at the requested time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the states of a set of bodies, w.r.t. some set of central bodies, at the requested time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies for which to retrieve state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Origins w.r.t. which to retrieve states of bodiesToIntegrate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies to use in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which to retrieve states. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameManager</parametername>
</parameternamelist>
<parameterdescription>
<para>OBject with which to calculate frame origin translations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Initial state vector (with 6 Cartesian elements per body, in order of bodiesToIntegrate vector). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" line="50" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" bodystart="50" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddf/dynamicsSimulator_8h_1a1957e263950e54104e8e29735b7a6bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; tudat::propagators::getInitialRotationalStatesOfBodies</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const std::vector&lt; std::string &gt; &amp;baseOrientations, const simulation_setup::SystemOfBodies &amp;bodies, const TimeType initialTime)</argsstring>
        <name>getInitialRotationalStatesOfBodies</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>baseOrientations</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>initialTime</declname>
        </param>
        <briefdescription>
<para>Function to get the rotational states states of a set of bodies, at the requested time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the rotational states states of a set of bodies, at the requested time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies for which to retrieve rotational state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baseOrientations</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference base frame orientation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies to use in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which to retrieve states. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Initial rotational state vector (with 7 elements: 4 for quaternion; 3 for angular velocity) per body, in order of bodiesToIntegrate vector). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" line="100" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" bodystart="100" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddf/dynamicsSimulator_8h_1af54b8a6f427fae77e14067bb0eb7a21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; tudat::propagators::getInitialStatesOfBodies</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const std::vector&lt; std::string &gt; &amp;centralBodies, const simulation_setup::SystemOfBodies &amp;bodies, const TimeType initialTime)</argsstring>
        <name>getInitialStatesOfBodies</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>initialTime</declname>
        </param>
        <briefdescription>
<para>Function to get the states of a set of bodies, w.r.t. some set of central bodies, at the requested time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the states of a set of bodies, w.r.t. some set of central bodies, at the requested time, creates frameManager from input data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies for which to retrieve state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Origins w.r.t. which to retrieve states of bodiesToIntegrate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies to use in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which to retrieve states. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Initial state vector (with 6 Cartesian elements per body, in order of bodiesToIntegrate vector). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" line="147" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" bodystart="147" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddf/dynamicsSimulator_8h_1a099c31e2d69b33744632bb582022cf37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; tudat::propagators::getInitialStateOfBody</definition>
        <argsstring>(const std::string &amp;bodyToIntegrate, const std::string &amp;centralBody, const simulation_setup::SystemOfBodies &amp;bodies, const TimeType initialTime)</argsstring>
        <name>getInitialStateOfBody</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToIntegrate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>initialTime</declname>
        </param>
        <briefdescription>
<para>Function to get the states of single body, w.r.t. some central body, at the requested time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the states of single body, w.r.t. some central body, at the requested time. This function creates frameManager from input data to perform all required conversions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Body for which to retrieve state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Origin w.r.t. which to retrieve state of bodyToIntegrate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies to use in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which to retrieve state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Initial state vector of bodyToIntegrate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" line="170" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" bodystart="170" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddf/dynamicsSimulator_8h_1a8661c9a545152e5dcc456ab1669a77fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; tudat::propagators::getInitialRotationalStateOfBody</definition>
        <argsstring>(const std::string &amp;bodyToIntegrate, const std::string &amp;baseOrientation, const simulation_setup::SystemOfBodies &amp;bodies, const TimeType initialTime)</argsstring>
        <name>getInitialRotationalStateOfBody</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToIntegrate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>baseOrientation</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>initialTime</declname>
        </param>
        <briefdescription>
<para>Function to get the rotational states state of a body, at the requested time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the rotational states state of a body, at the requested time.. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Body for which to retrieve rotational state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baseOrientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference base frame orientation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies to use in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which to retrieve states. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Initial rotational state vector (with 7 elements: 4 for quaternion; 3 for angular velocity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" line="190" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" bodystart="190" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddf/dynamicsSimulator_8h_1a185be1873743e800394bbb01e323261b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; tudat::propagators::getInitialArcWiseStateOfBody</definition>
        <argsstring>(const std::string &amp;bodyToIntegrate, const std::vector&lt; std::string &gt; &amp;centralBodies, const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; TimeType &gt; arcStartTimes)</argsstring>
        <name>getInitialArcWiseStateOfBody</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToIntegrate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; TimeType &gt;</type>
          <declname>arcStartTimes</declname>
        </param>
        <briefdescription>
<para>Function to get the state of single body, w.r.t. some central body, at a set of requested times, concatanated into one vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the states of single body, w.r.t. some central body, at a set of requested times, concatanated into one vector. This function creates frameManager from input data to perform all required conversions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Body for which to retrieve state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Origins w.r.t. which to retrieve state of bodyToIntegrate (per arc). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies to use in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcStartTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>List of times at which to retrieve states. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Initial state vectosr of bodyToIntegrate at requested times. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" line="212" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" bodystart="212" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddf/dynamicsSimulator_8h_1a606dc28ec4fc33e8f4231ff5c7ec1b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt;</type>
        <definition>std::vector&lt; Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; tudat::propagators::getInitialStatesPerArc</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; PropagatorSettings&lt; StateScalarType &gt; &gt; &gt; propagatorSettings)</argsstring>
        <name>getInitialStatesPerArc</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">PropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <briefdescription>
<para>Function to get a vector of initial states from a vector of propagator settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a vector of initial states from a vector of propagator settings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>List of propagator settings </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of initial states, as retrieved from propagatorSettings list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" line="967" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" bodystart="967" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddf/dynamicsSimulator_8h_1aaccf97f595d50289db3f01ef345fa7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; tudat::propagators::getArcInitialStateFromPreviousArcResult</definition>
        <argsstring>(const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;previousArcDynamicsSolution, const double currentArcInitialTime)</argsstring>
        <name>getArcInitialStateFromPreviousArcResult</name>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>previousArcDynamicsSolution</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentArcInitialTime</declname>
        </param>
        <briefdescription>
<para>Function to get the initial state of a translational state arc from the previous state&apos;s numerical solution. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the initial state of a translational state arc from the previous state&apos;s numerical solution <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>previousArcDynamicsSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical solution of previous arc </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentArcInitialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Start time of current arc </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interpolated initial state of current arc </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" line="987" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/dynamicsSimulator.h" bodystart="987" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="db/de7/propagationCR3BPFullProblem_8h_1aee40f4e95b66f63481e81efcc0cabd37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/d68/classtudat_1_1simulation__setup_1_1BodyListSettings" kindref="compound">simulation_setup::BodyListSettings</ref></type>
        <definition>simulation_setup::BodyListSettings tudat::propagators::setupBodySettingsCR3BP</definition>
        <argsstring>(const double distancePrimarySecondary, const std::string &amp;namePrimaryBody, const std::string &amp;nameSecondaryBody, const std::string &amp;frameOrientation=&quot;ECLIPJ2000&quot;, const double primaryGravitationalParameter=TUDAT_NAN, const double secondaryGravitationalParameter=TUDAT_NAN)</argsstring>
        <name>setupBodySettingsCR3BP</name>
        <param>
          <type>const double</type>
          <declname>distancePrimarySecondary</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>namePrimaryBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameSecondaryBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>primaryGravitationalParameter</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>secondaryGravitationalParameter</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" line="23" column="36" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" bodystart="23" bodyend="90" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationCR3BPFullProblem.h" declline="23" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="db/de7/propagationCR3BPFullProblem_8h_1a23fe2bf8c623d724d599a7d37cd867d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref></type>
        <definition>simulation_setup::SystemOfBodies tudat::propagators::setupBodyMapCR3BP</definition>
        <argsstring>(const double distancePrimarySecondary, const std::string &amp;namePrimaryBody, const std::string &amp;nameSecondaryBody, const std::string &amp;nameBodyToPropagate, const std::string &amp;frameOrientation=&quot;ECLIPJ2000&quot;, const double primaryGravitationalParameter=TUDAT_NAN, const double secondaryGravitationalParameter=TUDAT_NAN)</argsstring>
        <name>setupBodyMapCR3BP</name>
        <param>
          <type>const double</type>
          <declname>distancePrimarySecondary</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>namePrimaryBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameSecondaryBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameBodyToPropagate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>primaryGravitationalParameter</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>secondaryGravitationalParameter</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
<para>Setup CR3BP system of bodies. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to directly setup CR3BP bodies.</para>
<para>Setup CR3BP system of bodies. The two primaries, as well as the third, smaller body to be propagated are defined in the system of bodies. The two primaries are in circular orbit about their barycenter, orbiting it with the same mean motion, so that they stay aligned during propagation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distancePrimarySecondary</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance between primaries [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>namePrimaryBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the primary body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameSecondaryBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the secondary body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the third, smaller body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameOrientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Orientation of frame in which to propagate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primaryGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of primary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondaryGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of secondary </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Body Map modelling the CR3BP. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" line="93" column="34" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" bodystart="93" bodyend="113" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationCR3BPFullProblem.h" declline="45" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="db/de7/propagationCR3BPFullProblem_8h_1aabf742679d614d0b753e59574757d7fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>basic_astrodynamics::AccelerationMap</type>
        <definition>basic_astrodynamics::AccelerationMap tudat::propagators::setupAccelerationMapCR3BP</definition>
        <argsstring>(const std::string &amp;namePrimaryBody, const std::string &amp;nameSecondaryBody, const std::string &amp;nameBodyToPropagate, const std::string &amp;centralBody, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>setupAccelerationMapCR3BP</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>namePrimaryBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameSecondaryBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameBodyToPropagate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Setup CR3BP acceleration map. </para>
        </briefdescription>
        <detaileddescription>
<para>Setup CR3BP acceleration map. Define the acceleration map for the CR3BP, from the corresponding system of bodies. The only accelerations acting on the system are point-mass gravity from the two primaries. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>namePrimaryBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the primary body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameSecondaryBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the secondary body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the third, smaller body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Central bodys for the propagation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>CR3BP system of bodies. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Acceleration map for the CR3BP. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" line="117" column="38" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" bodystart="117" bodyend="138" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationCR3BPFullProblem.h" declline="65" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="db/de7/propagationCR3BPFullProblem_8h_1a746a4b64e3f3348b3f8f9fd9fdccc03e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateCR3BPFromEnvironment</definition>
        <argsstring>(const double initialTime, const double finalPropagationTime, const Eigen::Vector6d &amp;initialState, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; &amp;bodiesCR3BP, std::map&lt; double, Eigen::Vector6d &gt; &amp;stateHistory, const bool outputInNormalizedCoordinates=false)</argsstring>
        <name>propagateCR3BPFromEnvironment</name>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalPropagationTime</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>initialState</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesCR3BP</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>stateHistory</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>outputInNormalizedCoordinates</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Propagate CR3BP from CR3BP environment. </para>
        </briefdescription>
        <detaileddescription>
<para>Propagate CR3BP from CR3BP environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial time for the propagation [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalPropagationTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Final time at which the propagation ends [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialState</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state of the third, smaller body to be propagated (Cartesian position in velocity in m and m/s) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation (the initial time and time-step have to be defined as dimensional times, their conversion to adimensional times is implemented within the function). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the CR3BP. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesCR3BP</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the two primaries defining the CR3BP. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateHistory</parametername>
</parameternamelist>
<parameterdescription>
<para>Propagated states of the CR3BP (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputInNormalizedCoordinates</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether output is to be in dimensionless quantities (if true) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" line="143" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" bodystart="143" bodyend="222" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationCR3BPFullProblem.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/de7/propagationCR3BPFullProblem_8h_1ac21a44a601827f9a2f24c101b2462f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateCR3BPAndFullDynamicsProblem</definition>
        <argsstring>(const double initialTime, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; propagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; &amp;bodiesCR3BP, std::map&lt; double, Eigen::Vector6d &gt; &amp;directPropagationResult, std::map&lt; double, Eigen::Vector6d &gt; &amp;cr3bpPropagationResult, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariableValues)</argsstring>
        <name>propagateCR3BPAndFullDynamicsProblem</name>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesCR3BP</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>directPropagationResult</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>cr3bpPropagationResult</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariableValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" line="224" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" bodystart="224" bodyend="249" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationCR3BPFullProblem.h" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/de7/propagationCR3BPFullProblem_8h_1af1503cdc68abbe69c4fd66d932be6b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateCR3BPAndFullDynamicsProblem</definition>
        <argsstring>(const double initialTime, const double finalTime, const Eigen::Vector6d &amp;initialState, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const basic_astrodynamics::AccelerationMap &amp;accelerationModelMap, const std::vector&lt; std::string &gt; &amp;bodiesToPropagate, const std::vector&lt; std::string &gt; &amp;centralBodies, const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; &amp;bodiesCR3BP, std::map&lt; double, Eigen::Vector6d &gt; &amp;directPropagation, std::map&lt; double, Eigen::Vector6d &gt; &amp;cr3bpPropagation)</argsstring>
        <name>propagateCR3BPAndFullDynamicsProblem</name>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>initialState</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationModelMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesCR3BP</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>directPropagation</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>cr3bpPropagation</declname>
        </param>
        <briefdescription>
<para>Propagate the CR3BP and the full dynamics problem. </para>
        </briefdescription>
        <detaileddescription>
<para>Propagate the CR3BP and the full dynamics problem <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial time for the propagation [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Final time at which the propagation ends [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialState</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state of the third, smaller body to be propagated (Cartesian position in velocity in m and m/s) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation (the initial time and time-step have to be defined as dimensional times, their conversion to adimensional times is implemented within the function). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModelMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration map for the CR3BP. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Bodies to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Central bodies for the propagation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body Map for the CR3BP. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesCR3BP</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the two primaries defining the CR3BP. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directPropagation</parametername>
</parameternamelist>
<parameterdescription>
<para>Propagated states of the full dynamics problem (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cr3bpPropagation</parametername>
</parameternamelist>
<parameterdescription>
<para>Propagated states of the CR3BP, converted to dimensional coordinates (returned by reference) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" line="252" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" bodystart="252" bodyend="275" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationCR3BPFullProblem.h" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/de7/propagationCR3BPFullProblem_8h_1a963fbaaaca6caad7446d72bf129296fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::propagators::getFinalStateDifferenceFullPropagationWrtCR3BP</definition>
        <argsstring>(const double initialTime, const double finalTime, const Eigen::Vector6d &amp;initialState, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const basic_astrodynamics::AccelerationMap &amp;accelerationModelMap, const std::vector&lt; std::string &gt; &amp;bodiesToPropagate, const std::vector&lt; std::string &gt; &amp;centralBodies, const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; &amp;bodiesCR3BP)</argsstring>
        <name>getFinalStateDifferenceFullPropagationWrtCR3BP</name>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>initialState</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationModelMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesCR3BP</declname>
        </param>
        <briefdescription>
<para>Propagate the CR3BP and the full dynamics problem and compute the state difference at the end of the propagation. </para>
        </briefdescription>
        <detaileddescription>
<para>Propagate the CR3BP and the full dynamics problem and compute the state difference at the end of the propagation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial time for the propagation [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Final time at which the propagation ends [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialState</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state of the third, smaller body to be propagated (Cartesian position in velocity in m and m/s) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation (the initial time and time-step have to be defined as dimensional times, their conversion to adimensional times is implemented within the function). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModelMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration map for the CR3BP. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Bodies to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Central bodies for the propagation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body Map for the CR3BP. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesCR3BP</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the two primaries defining the CR3BP. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State difference between the full dynamics problem and the CR3BP at the final propagation time (expressed in inertial cartesian coordinates). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" line="278" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationCR3BPFullProblem.cpp" bodystart="278" bodyend="300" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationCR3BPFullProblem.h" declline="150" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d97/propagationLambertTargeterFullProblem_8h_1a33b0bee2bf05287797f8530764d5a575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref></type>
        <definition>simulation_setup::SystemOfBodies tudat::propagators::setupBodyMapFromEphemeridesForLambertTargeter</definition>
        <argsstring>(const std::string &amp;nameCentralBody, const std::string &amp;nameBodyToPropagate, const std::vector&lt; std::string &gt; &amp;departureAndArrivalBodies)</argsstring>
        <name>setupBodyMapFromEphemeridesForLambertTargeter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameCentralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameBodyToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>departureAndArrivalBodies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to setup a system of bodies corresponding to the assumptions of the Lambert targeter, using default ephemerides for the central, departure and arrival bodies.</para>
<para>Function to setup Lambert targeter map. The system of bodies contains the central body, the body to be propagated and the departure and arrival bodies. The positions of the departure and arrival bodies are directly retrived from ephemerides. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nameCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureAndArrivalBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the departure and arrival bodies. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Body map for the Lambert targeter</para>
</simplesect>
Function to setup a system of bodies corresponding to the assumptions of the Lambert targeter, using default ephemerides for the central, departure and arrival bodies. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" line="37" column="34" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" bodystart="37" bodyend="77" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLambertTargeterFullProblem.h" declline="44" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="dc/d97/propagationLambertTargeterFullProblem_8h_1ad9486405363cc7d486e3b11dc4cda729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref></type>
        <definition>simulation_setup::SystemOfBodies tudat::propagators::setupBodyMapFromUserDefinedEphemeridesForLambertTargeter</definition>
        <argsstring>(const std::string &amp;nameCentralBody, const std::string &amp;nameBodyToPropagate, const std::vector&lt; std::string &gt; &amp;departureAndArrivalBodies, const std::vector&lt; ephemerides::EphemerisPointer &gt; &amp;ephemerisVectorDepartureAndArrivalBodies)</argsstring>
        <name>setupBodyMapFromUserDefinedEphemeridesForLambertTargeter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameCentralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameBodyToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>departureAndArrivalBodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; ephemerides::EphemerisPointer &gt; &amp;</type>
          <declname>ephemerisVectorDepartureAndArrivalBodies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to setup a system of bodies corresponding to the assumptions of the patched conics trajectory, the ephemerides of the transfer bodies being provided as inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" line="83" column="34" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" bodystart="83" bodyend="132" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLambertTargeterFullProblem.h" declline="50" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="dc/d97/propagationLambertTargeterFullProblem_8h_1a795137a6b59e57afb5b0e6ea8d81901b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref></type>
        <definition>simulation_setup::SystemOfBodies tudat::propagators::setupBodyMapFromUserDefinedStatesForLambertTargeter</definition>
        <argsstring>(const std::string &amp;nameCentralBody, const std::string &amp;nameBodyToPropagate, const std::vector&lt; std::string &gt; &amp;departureAndArrivalBodies, const Eigen::Vector3d &amp;cartesianPositionAtDeparture, const Eigen::Vector3d &amp;cartesianPositionAtArrival)</argsstring>
        <name>setupBodyMapFromUserDefinedStatesForLambertTargeter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameCentralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameBodyToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>departureAndArrivalBodies</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtDeparture</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtArrival</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to setup a system of bodies corresponding to the assumptions of the Lambert targeter, using default ephemerides for the central body only, while the positions of departure and arrival bodies are provided as inputs.</para>
<para>Function to setup a Lambert targeter map. The system of bodies contains the central, departure and arrival bodies and the body to be propagated. The positions of the departure and arrival bodies are defined by the user and provided as inputs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nameCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureAndArrivalBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the departure and arrival bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the position coordinates of the departure body [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the position coordinates of the arrival body [m]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Body map for the Lambert targeter.</para>
</simplesect>
Function to setup a system of bodies corresponding to the assumptions of the Lambert targeter, using default ephemerides for the central body only, while the positions of departure and arrival bodies are provided as inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" line="139" column="34" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" bodystart="139" bodyend="174" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLambertTargeterFullProblem.h" declline="68" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="dc/d97/propagationLambertTargeterFullProblem_8h_1a7efe4ec3bbeba57019be046e69bdc7a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>basic_astrodynamics::AccelerationMap</type>
        <definition>basic_astrodynamics::AccelerationMap tudat::propagators::setupAccelerationMapLambertTargeter</definition>
        <argsstring>(const std::string &amp;nameCentralBody, const std::string &amp;nameBodyToPropagate, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>setupAccelerationMapLambertTargeter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameCentralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameBodyToPropagate</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to directly setup an acceleration map for the Lambert targeter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to directly setup an acceleration map for the Lambert targeter. Only the central body exerts a point-mass gravity acceleration on the body to be propagated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nameCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the Lambert targeter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Acceleration map for the Lambert targeter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" line="179" column="38" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" bodystart="179" bodyend="205" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLambertTargeterFullProblem.h" declline="85" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="dc/d97/propagationLambertTargeterFullProblem_8h_1a44d9aa8bdad44a47bb9ed63dc82e3f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::propagators::computeCartesianStateFromKeplerianOrbit</definition>
        <argsstring>(const Eigen::Vector6d &amp;initialState, const double finalPropagationTime, const double gravitationalParameter)</argsstring>
        <name>computeCartesianStateFromKeplerianOrbit</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>initialState</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalPropagationTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Function to determine the cartesian state at a given time for a keplerian orbit, based on the initial state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to determine the cartesian state at a given time for a keplerian orbit, based on the initial state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialState</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial cartesian state on this orbit (x-position coordinate [m], y-position coordinate [m], z-position coordinate [m], x-velocity coordinate [m/s], y-velocity coordinate [m/s], z-velocity coordinate [m/s]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalPropagationTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Final time at which the cartesian state has to be calculated [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>gravitation parameter defining the keplerian orbit [m^3 s^-2]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector containing the cartesian state at a given time for a keplerian orbit. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" line="212" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" bodystart="212" bodyend="268" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLambertTargeterFullProblem.h" declline="101" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d97/propagationLambertTargeterFullProblem_8h_1a87f341d441b0391fc149f23f44c66565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateLambertTargeterAndFullProblem</definition>
        <argsstring>(const double timeOfFlight, const double initialTime, const simulation_setup::SystemOfBodies &amp;bodies, const std::string &amp;centralBody, std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; propagatorSettings, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, std::map&lt; double, Eigen::Vector6d &gt; &amp;lambertTargeterResult, std::map&lt; double, Eigen::Vector6d &gt; &amp;fullProblemResult, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariableResult, const std::vector&lt; std::string &gt; &amp;departureAndArrivalBodies, const double centralBodyGravitationalParameter, const Eigen::Vector3d &amp;cartesianPositionAtDeparture, const Eigen::Vector3d &amp;cartesianPositionAtArrival)</argsstring>
        <name>propagateLambertTargeterAndFullProblem</name>
        <param>
          <type>const double</type>
          <declname>timeOfFlight</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>lambertTargeterResult</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>fullProblemResult</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariableResult</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>departureAndArrivalBodies</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtDeparture</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtArrival</declname>
        </param>
        <briefdescription>
<para>Function to propagate the full dynamics problem and the Lambert targeter solution. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to propagate the full dynamics problem and the Lambert targeter solution. The function computes the cartesian state as a function of time in two different ways: from the Lambert targeter and from the propagation of the full dynamics problem. The propagator settings for the full problem propagation are directly provided as inputs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeOfFlight</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> of flight [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial time of the propagation [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body for the Lambert targeter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Propagator settings for the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambertTargeterResult</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of the cartesian state obtained with the Lambert targeter as a function of time (modified within the function). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResult</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of the cartesian state obtained after propagation of the full dynamics problem as a function of time (modified within the function). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at departure [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at arrival [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the central body [m^3 s^-2]. If not provided as input, it is retrieved from the system of bodies. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" line="273" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" bodystart="273" bodyend="443" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLambertTargeterFullProblem.h" declline="128" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d97/propagationLambertTargeterFullProblem_8h_1a509a6fefcc514a24c29c1293ca3a6101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateLambertTargeterAndFullProblem</definition>
        <argsstring>(const double timeOfFlight, const double initialTime, const simulation_setup::SystemOfBodies &amp;bodies, const basic_astrodynamics::AccelerationMap &amp;accelerationModelMap, const std::string &amp;bodyToPropagate, const std::string &amp;centralBody, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, std::map&lt; double, Eigen::Vector6d &gt; &amp;lambertTargeterResult, std::map&lt; double, Eigen::Vector6d &gt; &amp;fullProblemResult, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariableResult, const std::vector&lt; std::string &gt; &amp;departureAndArrivalBodies, const bool terminationSphereOfInfluence, const Eigen::Vector3d &amp;cartesianPositionAtDeparture, const Eigen::Vector3d &amp;cartesianPositionAtArrival, const double departureBodyGravitationalParameter, const double arrivalBodyGravitationalParameter, const double centralBodyGravitationalParameter, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const TranslationalPropagatorType propagator=cowell)</argsstring>
        <name>propagateLambertTargeterAndFullProblem</name>
        <param>
          <type>const double</type>
          <declname>timeOfFlight</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationModelMap</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>lambertTargeterResult</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>fullProblemResult</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariableResult</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>departureAndArrivalBodies</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>terminationSphereOfInfluence</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtDeparture</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtArrival</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>departureBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>arrivalBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <briefdescription>
<para>Function to propagate the full dynamics problem and the Lambert targeter solution. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to propagate the full dynamics problem and the Lambert targeter solution. The function computes the cartesian state as a function of time in two different ways: from the Lambert targeter and from the propagation of the full dynamics problem. The propagator settings are defined inside the function from the propagator type and dependent variables to save provided as inputs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeOfFlight</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> of flight [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial time of the propagation [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModelMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body for the Lambert targeter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambertTargeterResult</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of the cartesian state obtained with the Lambert targeter as a function of time (modified within the function). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResult</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of the cartesian state obtained after propagation of the full dynamics problem as a function of time (modified within the function). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminationSphereOfInfluence</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the propagation stops at the position of the departure and arrival body (false) or at the sphere of influence of the departure and arrival body (true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at departure [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at arrival [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the departure body [m^3 s^-2]. If not provided as input, it is retrieved from the system of bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arrivalBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the arrival body [m^3 s^-2]. If not provided as input, it is retrieved from the system of bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the central body [m^3 s^-2]. If not provided as input, it is retrieved from the system of bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariablesToSave</parametername>
</parameternamelist>
<parameterdescription>
<para>List of dependent variables to be saved during the full problem propagation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of propagator to be used for the propagation of the full dynamics problem. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" line="447" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" bodystart="447" bodyend="628" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLambertTargeterFullProblem.h" declline="175" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d97/propagationLambertTargeterFullProblem_8h_1a080b2626b5a9acf46c07024f352dd4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::Vector6d, Eigen::Vector6d &gt;</type>
        <definition>std::pair&lt; Eigen::Vector6d, Eigen::Vector6d &gt; tudat::propagators::getDifferenceFullPropagationWrtLambertTargeterAtDepartureAndArrival</definition>
        <argsstring>(const Eigen::Vector3d &amp;cartesianPositionAtDeparture, const Eigen::Vector3d &amp;cartesianPositionAtArrival, const double timeOfFlight, const double initialTime, const simulation_setup::SystemOfBodies &amp;bodies, const basic_astrodynamics::AccelerationMap &amp;accelerationModelMap, const std::string &amp;bodyToPropagate, const std::string &amp;centralBody, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const std::vector&lt; std::string &gt; &amp;departureAndArrivalBodies, const bool terminationSphereOfInfluence, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const TranslationalPropagatorType propagator=cowell)</argsstring>
        <name>getDifferenceFullPropagationWrtLambertTargeterAtDepartureAndArrival</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtDeparture</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtArrival</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeOfFlight</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationModelMap</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>departureAndArrivalBodies</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>terminationSphereOfInfluence</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the difference in cartesian state between Lambert targeter solution and full dynamics problem, both at departure and at arrival.</para>
<para>Function to compute the difference in cartesian state between Lambert targeter solution and full dynamics problem, both at departure and at arrival. The function returns a pair of vectors, the first one being the difference in state at departure and the second one the difference in state at arrival. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at departure [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at arrival [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeOfFlight</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> of flight [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial time of the propagation [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModelMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Names of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Names of the central body of propagation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminationSphereOfInfluence</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the propagation stops at the position of the departure and arrival body (false) or at the sphere of influence of the departure and arrival body (true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of vectors containing the difference between the Lambert targeter and the full problem cartesian states (at departure and at arrival respectively).</para>
</simplesect>
Function to compute the difference in cartesian state between Lambert targeter solution and full dynamics problem, both at departure and at arrival. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" line="633" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLambertTargeterFullProblem.cpp" bodystart="633" bodyend="671" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLambertTargeterFullProblem.h" declline="217" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1aafaaa09c3313e6a1e8a483eda7712cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputType</type>
          </param>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>OutputType</type>
        <definition>OutputType tudat::propagators::evaluateBivariateReferenceFunction</definition>
        <argsstring>(const std::function&lt; OutputType(const InputType &amp;, const InputType &amp;) &gt; functionToEvaluate, const std::function&lt; InputType() &gt; firstInput, const std::function&lt; InputType() &gt; secondInput)</argsstring>
        <name>evaluateBivariateReferenceFunction</name>
        <param>
          <type>const std::function&lt; OutputType(const InputType &amp;, const InputType &amp;) &gt;</type>
          <declname>functionToEvaluate</declname>
        </param>
        <param>
          <type>const std::function&lt; InputType() &gt;</type>
          <declname>firstInput</declname>
        </param>
        <param>
          <type>const std::function&lt; InputType() &gt;</type>
          <declname>secondInput</declname>
        </param>
        <briefdescription>
<para>Function to evaluate a function with two input variables (by reference) from function pointers. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate a function with two input variables (by reference) from function pointers that return these two input variables. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToEvaluate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that is to be evaluated with input from function pointers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstInput</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning first input to functionToEvaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondInput</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning second input to functionToEvaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output from functionToEvaluate, using functions firstInput and secondInput as input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" line="43" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" bodystart="43" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a7547c501ed1a257dbe0338d35be1acce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputType</type>
          </param>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>OutputType</type>
        <definition>OutputType tudat::propagators::evaluateReferenceFunction</definition>
        <argsstring>(const std::function&lt; OutputType(const InputType &amp;) &gt; functionToEvaluate, const std::function&lt; InputType() &gt; firstInput)</argsstring>
        <name>evaluateReferenceFunction</name>
        <param>
          <type>const std::function&lt; OutputType(const InputType &amp;) &gt;</type>
          <declname>functionToEvaluate</declname>
        </param>
        <param>
          <type>const std::function&lt; InputType() &gt;</type>
          <declname>firstInput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" line="52" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1abe7108f6b522460d9ad882094342a9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputType</type>
          </param>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>OutputType</type>
        <definition>OutputType tudat::propagators::evaluateBivariateFunction</definition>
        <argsstring>(const std::function&lt; OutputType(const InputType, const InputType) &gt; functionToEvaluate, const std::function&lt; InputType() &gt; firstInput, const std::function&lt; InputType() &gt; secondInput)</argsstring>
        <name>evaluateBivariateFunction</name>
        <param>
          <type>const std::function&lt; OutputType(const InputType, const InputType) &gt;</type>
          <declname>functionToEvaluate</declname>
        </param>
        <param>
          <type>const std::function&lt; InputType() &gt;</type>
          <declname>firstInput</declname>
        </param>
        <param>
          <type>const std::function&lt; InputType() &gt;</type>
          <declname>secondInput</declname>
        </param>
        <briefdescription>
<para>Function to evaluate a function with two input variables from function pointers. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate a function with two input variables from function pointers that return these two input variables. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToEvaluate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that is to be evaluated with input from function pointers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstInput</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning first input to functionToEvaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondInput</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning second input to functionToEvaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output from functionToEvaluate, using functions firstInput and secondInput as input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" line="69" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" bodystart="69" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a2ff276be1334d1abe2d521d3f864faca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputType</type>
          </param>
          <param>
            <type>typename FirstInputType</type>
          </param>
          <param>
            <type>typename SecondInputType</type>
          </param>
          <param>
            <type>typename ThirdInputType</type>
          </param>
        </templateparamlist>
        <type>OutputType</type>
        <definition>OutputType tudat::propagators::evaluateTrivariateFunction</definition>
        <argsstring>(const std::function&lt; OutputType(const FirstInputType &amp;, const SecondInputType, const ThirdInputType) &gt; functionToEvaluate, const std::function&lt; FirstInputType() &gt; firstInput, const std::function&lt; SecondInputType() &gt; secondInput, const std::function&lt; ThirdInputType() &gt; thirdInput)</argsstring>
        <name>evaluateTrivariateFunction</name>
        <param>
          <type>const std::function&lt; OutputType(const FirstInputType &amp;, const SecondInputType, const ThirdInputType) &gt;</type>
          <declname>functionToEvaluate</declname>
        </param>
        <param>
          <type>const std::function&lt; FirstInputType() &gt;</type>
          <declname>firstInput</declname>
        </param>
        <param>
          <type>const std::function&lt; SecondInputType() &gt;</type>
          <declname>secondInput</declname>
        </param>
        <param>
          <type>const std::function&lt; ThirdInputType() &gt;</type>
          <declname>thirdInput</declname>
        </param>
        <briefdescription>
<para>Function to evaluate a function with three input variables from function pointers. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate a function with three input variables from function pointers that return these three input variables. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToEvaluate</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that is to be evaluated with input from function pointers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstInput</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning first input to functionToEvaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondInput</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning second input to functionToEvaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thirdInput</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning third input to functionToEvaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output from functionToEvaluate, using functions firstInput, secondInput and thirdInput as input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" line="88" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1aa9fd24ce7f7e9a54b8006faa195774eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::propagators::getNormsOfAccelerationDifferencesFromLists</definition>
        <argsstring>(const std::function&lt; Eigen::VectorXd() &gt; firstAccelerationFunction, const std::function&lt; Eigen::VectorXd() &gt; secondAccelerationFunction)</argsstring>
        <name>getNormsOfAccelerationDifferencesFromLists</name>
        <param>
          <type>const std::function&lt; Eigen::VectorXd() &gt;</type>
          <declname>firstAccelerationFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::VectorXd() &gt;</type>
          <declname>secondAccelerationFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="165" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="165" bodyend="191" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="98" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a6156bdce86aa3196437fa29eccee7a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::propagators::getDependentVariableSaveSize</definition>
        <argsstring>(const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &amp;singleDependentVariableSaveSettings)</argsstring>
        <name>getDependentVariableSaveSize</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &amp;</type>
          <declname>singleDependentVariableSaveSettings</declname>
        </param>
        <briefdescription>
<para>Funtion to get the size of a dependent variable save settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Funtion to get the size of a dependent variable save settings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>singleDependentVariableSaveSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Save settings for a dependent variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size of requested dependent variable to save (equal to the size of the associated dependent variable, or equal to 1 if the property <computeroutput>component_</computeroutput> is set). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="194" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="194" bodyend="205" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="110" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1acf98fbc942c8dc1fd11dcdb4bf5d834e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::propagators::getDependentVariableSize</definition>
        <argsstring>(const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; dependentVariableSettings)</argsstring>
        <name>getDependentVariableSize</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariableSettings</declname>
        </param>
        <briefdescription>
<para>Funtion to get the size of a dependent variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Funtion to get the size (i.e. number of values in variable: one for altitude, three for position, etc.) of a dependent variable <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dependentVariableSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Dependent variable type for which size is to be determined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size of requested dependent variable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="208" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="208" bodyend="401" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a378c1cd0b7e2834eed7aca74f29aac9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::propagators::getVectorRepresentationForRotationMatrix</definition>
        <argsstring>(const Eigen::Matrix3d &amp;currentRotationMatrix)</argsstring>
        <name>getVectorRepresentationForRotationMatrix</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>currentRotationMatrix</declname>
        </param>
        <briefdescription>
<para>Get the vector representation of a rotation matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the vector representation of a rotation matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentRotationMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation matrix that is to be put into vector rerpesentation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Column vector consisting of transpose of concatenated rows of currentRotationMatrix input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="21" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="21" bodyend="33" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="129" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a56c046be1e1dd566383feec21b2a9f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::propagators::getVectorRepresentationForRotationMatrixFunction</definition>
        <argsstring>(const std::function&lt; Eigen::Matrix3d() &gt; rotationFunction)</argsstring>
        <name>getVectorRepresentationForRotationMatrixFunction</name>
        <param>
          <type>const std::function&lt; Eigen::Matrix3d() &gt;</type>
          <declname>rotationFunction</declname>
        </param>
        <briefdescription>
<para>Get the vector representation of a rotation matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the vector representation of a rotation matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rotationFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the rotation matrix that is to be put into vector rerpesentation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Column vector consisting of transpose of concatenated rows of rotationFunction input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="36" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="36" bodyend="40" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="138" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1afe9a5c13072a5e879664cd5badc18455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::propagators::getVectorRepresentationForRotationQuaternion</definition>
        <argsstring>(const std::function&lt; Eigen::Quaterniond() &gt; rotationFunction)</argsstring>
        <name>getVectorRepresentationForRotationQuaternion</name>
        <param>
          <type>const std::function&lt; Eigen::Quaterniond() &gt;</type>
          <declname>rotationFunction</declname>
        </param>
        <briefdescription>
<para>Get the vector representation of a quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the vector representation of a quaternion. Quaternion is converted to a rotation matrix, which is then put into a vector representation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rotationFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the quaternion that is to be put inot vector rerpesentation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Column vector consisting of transpose of concatenated rows of matrix representation of rotationFunction input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="43" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="43" bodyend="47" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="148" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a1294c2df8fe739564377eb60e1fba459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::propagators::getMatrixFromVectorRotationRepresentation</definition>
        <argsstring>(const Eigen::VectorXd vectorRepresentation)</argsstring>
        <name>getMatrixFromVectorRotationRepresentation</name>
        <param>
          <type>const Eigen::VectorXd</type>
          <declname>vectorRepresentation</declname>
        </param>
        <briefdescription>
<para>Get the 3x3 matrix representation from a vector with 9 entries. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the matrix representation from a vector with 9 entries. The vector is the transpose of the concatenated rows of the associated matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vectorRepresentation</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector representation of 3x3 matrix (transpose of the concatenated rows of the associated matrix) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix from 3x3 vector representation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="50" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="50" bodyend="66" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="160" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a82a3d3ae081777ff9e0e99256719cf7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond tudat::propagators::getQuaternionFromVectorRotationRepresentation</definition>
        <argsstring>(const Eigen::VectorXd vectorRepresentation)</argsstring>
        <name>getQuaternionFromVectorRotationRepresentation</name>
        <param>
          <type>const Eigen::VectorXd</type>
          <declname>vectorRepresentation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the quaternion formulation of an orthonormal matrix, from input of a vector with 9 entries corresponding to matrix entries.</para>
<para>et the quaternion formulation of an orthonormal matrix, from input of a vector with 9 entries corresponding to matrix entries. The input vector is the transpose of the concatenated rows of the associated (orthonormal) matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vectorRepresentation</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector representation of 3x3 matrix (transpose of the concatenated rows of the associated matrix) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Quaternion representation of orthonormal matrix obtained from 3x3 vector representation.</para>
</simplesect>
Get the quaternion formulation of an orthonormal matrix, from input of a vector with 9 entries corresponding to matrix entries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="71" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="71" bodyend="75" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="172" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1abd93daa953bf2774e1b4f28ad6b4ffcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::getMatrixInOutputVectorRepresentation</definition>
        <argsstring>(const Eigen::MatrixXd &amp;matrix, Eigen::VectorXd &amp;vector)</argsstring>
        <name>getMatrixInOutputVectorRepresentation</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Function to convert a matrix to the format used to save dependent variables. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert a matrix to the format used to save dependent variables <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix that is to be converted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector storage format of matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="78" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="78" bodyend="87" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="181" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1aaee9b550ca06c9451cef5e4ca6bd6bfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::getOutputVectorInMatrixRepresentation</definition>
        <argsstring>(const Eigen::VectorXd &amp;vector, Eigen::MatrixXd &amp;matrix, const int rows, const int columns)</argsstring>
        <name>getOutputVectorInMatrixRepresentation</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
<para>Function to convert a vector dependent variable output to its original matrix representation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert a vector dependent variable output to its original matrix representation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector dependent variable output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Original matrix representation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in matrix output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columns</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in matrix output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="90" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="90" bodyend="103" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="192" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1ac5ddb204b35d288fe3ab979784520136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::propagators::getVectorFunctionFromBlockFunction</definition>
        <argsstring>(const std::function&lt; void(Eigen::Block&lt; Eigen::MatrixXd &gt;) &gt; blockFunction, const int numberOfRows, const int numberOfColumns)</argsstring>
        <name>getVectorFunctionFromBlockFunction</name>
        <param>
          <type>const std::function&lt; void(Eigen::Block&lt; Eigen::MatrixXd &gt;) &gt;</type>
          <declname>blockFunction</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfRows</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfColumns</declname>
        </param>
        <briefdescription>
<para>Function to retrieve matrix block function output in vector representation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve matrix block function output in vector representation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blockFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that returns (by reference) a matrix block </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in matrix output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfColumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in matrix output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Block-matrix in vector representation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="106" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="106" bodyend="117" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="204" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1ae69b75eb2a89ca6f12da8cee4eb3cfc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::propagators::computeEquilibriumFayRiddellHeatFluxFromProperties</definition>
        <argsstring>(const std::shared_ptr&lt; aerodynamics::AtmosphericFlightConditions &gt; flightConditions, const std::shared_ptr&lt; system_models::VehicleSystems &gt; vehicleSystems)</argsstring>
        <name>computeEquilibriumFayRiddellHeatFluxFromProperties</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/da9/classtudat_1_1aerodynamics_1_1AtmosphericFlightConditions" kindref="compound">aerodynamics::AtmosphericFlightConditions</ref> &gt;</type>
          <declname>flightConditions</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/dc7/classtudat_1_1system__models_1_1VehicleSystems" kindref="compound">system_models::VehicleSystems</ref> &gt;</type>
          <declname>vehicleSystems</declname>
        </param>
        <briefdescription>
<para>Function to compute the Fay-Riddell equilibrium heat flux from body properties. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the Fay-Riddell equilibrium heat flux from body properties <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flightConditions</parametername>
</parameternamelist>
<parameterdescription>
<para>Object describing the current atmospheric flight conditions of the vehicle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vehicleSystems</parametername>
</parameternamelist>
<parameterdescription>
<para>Object describing the physical properties of the vehicle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Equilibrium heat flux according to Fay-Riddell model </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="120" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="120" bodyend="128" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="215" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a70737c402150dd59dcb47199ff637736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
        <definition>std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; tudat::propagators::getSphericalHarmonicAccelerationForDependentVariables</definition>
        <argsstring>(const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; dependentVariableSettings, const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;stateDerivativeModels, const bool allowThirdBodyAcceleration=false)</argsstring>
        <name>getSphericalHarmonicAccelerationForDependentVariables</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariableSettings</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModels</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allowThirdBodyAcceleration</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Function to retrieve relevant spherical harmonic acceleration model for dependent variable setting. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve relevant spherical harmonic acceleration model for dependent variable setting <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dependentVariableSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for dependent variable, associatedBody_ defines body undergoing acceleration, secondaryBody_ body exerting acceleration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDerivativeModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state derivative models from which acceleration is to be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Relevant spherical harmonic acceleration model for dependent variable setting </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" line="229" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" bodystart="229" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1ac5991eee11f3bab5a489534925620bbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::function&lt; Eigen::VectorXd() &gt;, int &gt;</type>
        <definition>std::pair&lt; std::function&lt; Eigen::VectorXd( ) &gt;, int &gt; tudat::propagators::getVectorDependentVariableFunction</definition>
        <argsstring>(const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; dependentVariableSettings, const simulation_setup::SystemOfBodies &amp;bodies, const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;stateDerivativeModels=std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt;(), const std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt; &amp;stateDerivativePartials=std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt;())</argsstring>
        <name>getVectorDependentVariableFunction</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariableSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModels</declname>
          <defval>std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt;()</defval>
        </param>
        <param>
          <type>const std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt; &amp;</type>
          <declname>stateDerivativePartials</declname>
          <defval>std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create a function returning a requested dependent variable value (of type VectorXd). </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a function returning a requested dependent variable value (of type VectorXd), retrieved from environment and/or state derivative models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dependentVariableSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for dependent variable that is to be returned by function created here. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies to use in simulations (containing full environment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDerivativeModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state derivative models used in simulations (sorted by dynamics type as key). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDerivativePartials</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state derivative partials used in simulations (sorted by dynamics type as key). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function returning requested dependent variable. NOTE: The environment and state derivative models need to be updated to current state and independent variable before computation is performed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" line="320" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" bodystart="320" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1ae8fb074db5fb059139f553538611e409" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::propagators::elementAtIndexFunction</definition>
        <argsstring>(const std::function&lt; Eigen::VectorXd() &gt; &amp;vectorFunction, const int index)</argsstring>
        <name>elementAtIndexFunction</name>
        <param>
          <type>const std::function&lt; Eigen::VectorXd() &gt; &amp;</type>
          <declname>vectorFunction</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Acces element at index function. </para>
        </briefdescription>
        <detaileddescription>
<para>Acces element at index function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vectorFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>The function returning an Eigen vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to be accessed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of vector at index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" line="1141" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" bodystart="1141" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1ad945cbf4c5efff514c01b2d168bd23e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::function&lt; double() &gt;</type>
        <definition>std::function&lt; double( ) &gt; tudat::propagators::getDoubleDependentVariableFunction</definition>
        <argsstring>(const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; dependentVariableSettings, const simulation_setup::SystemOfBodies &amp;bodies, const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;stateDerivativeModels=std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt;(), const std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt; &amp;stateDerivativePartials=std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt;())</argsstring>
        <name>getDoubleDependentVariableFunction</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariableSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModels</declname>
          <defval>std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt;()</defval>
        </param>
        <param>
          <type>const std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt; &amp;</type>
          <declname>stateDerivativePartials</declname>
          <defval>std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create a function returning a requested dependent variable value (of type double). </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a function returning a requested dependent variable value (of type double), retrieved from environment and/or state derivative models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dependentVariableSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for dependent variable that is to be returned by function created here. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies to use in simulations (containing full environment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDerivativeModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state derivative models used in simulations (sorted by dynamics type as key). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDerivativePartials</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state derivative partials used in simulations (sorted by dynamics type as key). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function returning requested dependent variable. NOTE: The environment and state derivative models need to be updated to current state and independent variable before computation is performed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" line="1158" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" bodystart="1158" bodyend="1661"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a6d8e1879e287ee674fa998c06add4c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::propagators::getVectorFromDoubleFunction</definition>
        <argsstring>(const std::function&lt; double() &gt; &amp;doubleFunction)</argsstring>
        <name>getVectorFromDoubleFunction</name>
        <param>
          <type>const std::function&lt; double() &gt; &amp;</type>
          <declname>doubleFunction</declname>
        </param>
        <briefdescription>
<para>Function to return a vector containing only one value given by doubleFunction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doubleFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the double value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector containing only one element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="132" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="132" bodyend="137" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="1670" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a969ce2a2b54f7ac627f8746a665815e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::propagators::evaluateListOfVectorFunctions</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; std::function&lt; Eigen::VectorXd() &gt;, int &gt; &gt; vectorFunctionList, const int totalSize)</argsstring>
        <name>evaluateListOfVectorFunctions</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::function&lt; Eigen::VectorXd() &gt;, int &gt; &gt;</type>
          <declname>vectorFunctionList</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>totalSize</declname>
        </param>
        <briefdescription>
<para>Function to evaluate a set of vector-returning functions and concatenate the results. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate a set of vector-returning functions and concatenate the results. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vectorFunctionList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of functions returning vector variables (pairs denote function and return vector size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>totalSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Total size of concatenated vector (used as input for efficiency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Concatenated results from input functions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" line="140" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutput.cpp" bodystart="140" bodyend="163" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="1679" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1a84e6eff981812aad508fd559c375f78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::function&lt; Eigen::VectorXd() &gt;, std::map&lt; int, std::string &gt; &gt;</type>
        <definition>std::pair&lt; std::function&lt; Eigen::VectorXd( ) &gt;, std::map&lt; int, std::string &gt; &gt; tudat::propagators::createDependentVariableListFunction</definition>
        <argsstring>(const std::shared_ptr&lt; DependentVariableSaveSettings &gt; saveSettings, const simulation_setup::SystemOfBodies &amp;bodies, const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;stateDerivativeModels=std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt;())</argsstring>
        <name>createDependentVariableListFunction</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>saveSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModels</declname>
          <defval>std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create a function that evaluates a list of dependent variables and concatenates the results. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a function that evaluates a list of dependent variables and concatenates the results. Dependent variables functions are created inside this function from a list of settings on their required types/properties. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>saveSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing types and other properties of dependent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies to use in simulations (containing full environment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDerivativeModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state derivative models used in simulations (sorted by dynamics type as key) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair with function returning requested dependent variable values, and list variable names with start entries. NOTE: The environment and state derivative models need to be updated to current state and independent variable before computation is performed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" line="1696" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" bodystart="1696" bodyend="1755"/>
      </memberdef>
      <memberdef kind="function" id="d4/db4/propagationOutput_8h_1aec052ae5bf149e552d02d1ec4b76ee34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::pair&lt; std::function&lt; Eigen::VectorXd() &gt;, std::map&lt; int, std::string &gt; &gt;</type>
        <definition>template std::pair&lt; std::function&lt; Eigen::VectorXd() &gt;, std::map&lt; int, std::string &gt; &gt; tudat::propagators::createDependentVariableListFunction&lt; double, double &gt;</definition>
        <argsstring>(const std::shared_ptr&lt; DependentVariableSaveSettings &gt; saveSettings, const simulation_setup::SystemOfBodies &amp;bodies, const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleStateTypeDerivative&lt; double, double &gt; &gt; &gt; &gt; &amp;stateDerivativeModels)</argsstring>
        <name>createDependentVariableListFunction&lt; double, double &gt;</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>saveSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">SingleStateTypeDerivative</ref>&lt; double, double &gt; &gt; &gt; &gt; &amp;</type>
          <declname>stateDerivativeModels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" line="1757" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutput.h" declline="1757" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a3a20cd54a01669a1d2e3ca2894130f24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; DependentVariableSaveSettings &gt; tudat::propagators::createDependentVariableSaveSettings</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt; dependentVariables, const bool printDependentVariableTypes=true)</argsstring>
        <name>createDependentVariableSaveSettings</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;</type>
          <declname>dependentVariables</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>printDependentVariableTypes</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>@get_docstring(createDependentVariableSaveSettings.__docstring__) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="520" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="520" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a3df5799e564d3ab09903b5b73d40d728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::propagators::getVariableName</definition>
        <argsstring>(const VariableType variableType)</argsstring>
        <name>getVariableName</name>
        <param>
          <type>const VariableType</type>
          <declname>variableType</declname>
        </param>
        <briefdescription>
<para>Function to get a string representing a &apos;named identification&apos; of a variable type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a string representing a &apos;named identification&apos; of a variable type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String with variable type id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutputSettings.cpp" line="20" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutputSettings.cpp" bodystart="20" bodyend="41" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" declline="534" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1acb696a801d7626dfd48673ac15575200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::propagators::getVariableId</definition>
        <argsstring>(const std::shared_ptr&lt; VariableSettings &gt; variableSettings)</argsstring>
        <name>getVariableId</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d2/d58/classtudat_1_1propagators_1_1VariableSettings" kindref="compound">VariableSettings</ref> &gt;</type>
          <declname>variableSettings</declname>
        </param>
        <briefdescription>
<para>Function to get a string representing a &apos;named identification&apos; of a variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a string representing a &apos;named identification&apos; of a variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variableSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String with variable id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutputSettings.cpp" line="44" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutputSettings.cpp" bodystart="44" bodyend="56" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" declline="542" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a842d67c70d368931a7f800aded13cd7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::propagators::getDependentVariableName</definition>
        <argsstring>(const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; dependentVariableSettings)</argsstring>
        <name>getDependentVariableName</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariableSettings</declname>
        </param>
        <briefdescription>
<para>Function to get a string representing a &apos;named identification&apos; of a dependent variable type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a string representing a &apos;named identification&apos; of a dependent variable type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagationDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Dependent variable type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String with dependent variable type id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutputSettings.cpp" line="60" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutputSettings.cpp" bodystart="60" bodyend="242" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" declline="550" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a33defef6944af8c873a6be8913a61d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::propagators::getDependentVariableId</definition>
        <argsstring>(const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; dependentVariableSettings)</argsstring>
        <name>getDependentVariableId</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariableSettings</declname>
        </param>
        <briefdescription>
<para>Function to get a string representing a &apos;named identification&apos; of a dependent variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a string representing a &apos;named identification&apos; of a dependent variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dependentVariableSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Dependent variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String with dependent variable id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutputSettings.cpp" line="246" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationOutputSettings.cpp" bodystart="246" bodyend="333" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" declline="558" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1ae7e2ba79b9a1ccff822d864438adf802" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::machNumberDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;bodyWithAtmosphere)</argsstring>
        <name>machNumberDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyWithAtmosphere</declname>
        </param>
        <briefdescription>
<para>@get_docstring(machNumberDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="562" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="562" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a0a0084afad70cf5a231167f8c8ca052f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::altitudeDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>altitudeDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(altitudeDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="571" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="571" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1ace53fb7f61463f6eba9992cef5052703" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::airspeedDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;bodyWithAtmosphere)</argsstring>
        <name>airspeedDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyWithAtmosphere</declname>
        </param>
        <briefdescription>
<para>@get_docstring(airspeedDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="580" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="580" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a54de64816b1a71f1337618d534a04c27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::densityDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;bodyWithAtmosphere)</argsstring>
        <name>densityDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyWithAtmosphere</declname>
        </param>
        <briefdescription>
<para>@get_docstring(densityDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="589" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="589" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1aa2454d3ccef4b5d3020ebd0b83069235" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::relativeSpeedDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;relativeBody)</argsstring>
        <name>relativeSpeedDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>relativeBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(relativeSpeedDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="598" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="598" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1aafd3c4309d0f3111300a8296278aa710" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::relativePositionDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;relativeBody)</argsstring>
        <name>relativePositionDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>relativeBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(relativePositionDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="607" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="607" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a6f1be077a3876b0ce6543decd6854641" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::relativeDistanceDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;relativeBody)</argsstring>
        <name>relativeDistanceDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>relativeBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(relativeDistanceDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="616" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="616" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a45258546705557de3afcca4784fa96c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::relativeVelocityDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;bodyWithAtmosphere)</argsstring>
        <name>relativeVelocityDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyWithAtmosphere</declname>
        </param>
        <briefdescription>
<para>@get_docstring(relativeVelocityDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="625" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="625" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a67c399197c372241a1360f03ce55fca8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::keplerianStateDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>keplerianStateDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(keplerianStateDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="634" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="634" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1ae1e64d7ec8fe0333b82a33cf2289f70d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::modifiedEquinoctialStateDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>modifiedEquinoctialStateDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(modifiedEquinoctialStateDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="643" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="643" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1ae3fc4bbe37396e8101a14c2ab4b5be54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::singleAccelerationDependentVariable</definition>
        <argsstring>(const basic_astrodynamics::AvailableAcceleration accelerationModelType, const std::string &amp;bodyUndergoingAcceleration, const std::string &amp;bodyExertingAcceleration)</argsstring>
        <name>singleAccelerationDependentVariable</name>
        <param>
          <type>const basic_astrodynamics::AvailableAcceleration</type>
          <declname>accelerationModelType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <briefdescription>
<para>@get_docstring(singleAccelerationDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="654" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="654" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a282e6a003b76dc14316b643ce4c7a3b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::singleAccelerationNormDependentVariable</definition>
        <argsstring>(const basic_astrodynamics::AvailableAcceleration accelerationModelType, const std::string &amp;bodyUndergoingAcceleration, const std::string &amp;bodyExertingAcceleration)</argsstring>
        <name>singleAccelerationNormDependentVariable</name>
        <param>
          <type>const basic_astrodynamics::AvailableAcceleration</type>
          <declname>accelerationModelType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <briefdescription>
<para>@get_docstring(singleAccelerationNormDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="665" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="665" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1aaa826414a77a98a1f3cef63ed623dc5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::sphericalHarmonicAccelerationTermsDependentVariable</definition>
        <argsstring>(const std::string &amp;bodyUndergoingAcceleration, const std::string &amp;bodyExertingAcceleration, const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;componentIndices)</argsstring>
        <name>sphericalHarmonicAccelerationTermsDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;</type>
          <declname>componentIndices</declname>
        </param>
        <briefdescription>
<para>@get_docstring(sphericalHarmonicAccelerationTermsDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="676" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="676" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a1a424c9444ccc3f2ed73d6ce0c7eeb72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::sphericalHarmonicAccelerationTermsNormDependentVariable</definition>
        <argsstring>(const std::string &amp;bodyUndergoingAcceleration, const std::string &amp;bodyExertingAcceleration, const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;componentIndices)</argsstring>
        <name>sphericalHarmonicAccelerationTermsNormDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;</type>
          <declname>componentIndices</declname>
        </param>
        <briefdescription>
<para>@get_docstring(sphericalHarmonicAccelerationTermsNormDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="687" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="687" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a4745f99222947cd183e6a30e8f16a8eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::totalGravityFieldVariationAccelerationContributionVariable</definition>
        <argsstring>(const std::string &amp;bodyUndergoingAcceleration, const std::string &amp;bodyExertingAcceleration)</argsstring>
        <name>totalGravityFieldVariationAccelerationContributionVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <briefdescription>
<para>@get_docstring(totalGravityFieldVariationAccelerationContributionVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="698" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="698" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1ada78ed5da3e61a55349f7e9590c83a47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::singleGravityFieldVariationAccelerationContributionVariable</definition>
        <argsstring>(const std::string &amp;bodyUndergoingAcceleration, const std::string &amp;bodyExertingAcceleration, const gravitation::BodyDeformationTypes deformationType, const std::string &amp;identifier=&quot;&quot;)</argsstring>
        <name>singleGravityFieldVariationAccelerationContributionVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const gravitation::BodyDeformationTypes</type>
          <declname>deformationType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(singleGravityFieldVariationAccelerationContributionVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="707" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="707" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1aefef62979c472698fd5815365cd43fe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::singleGravityFieldVariationSeparateTermsAccelerationContributionVariable</definition>
        <argsstring>(const std::string &amp;bodyUndergoingAcceleration, const std::string &amp;bodyExertingAcceleration, const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;componentIndices, const gravitation::BodyDeformationTypes deformationType, const std::string &amp;identifier=&quot;&quot;)</argsstring>
        <name>singleGravityFieldVariationSeparateTermsAccelerationContributionVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;</type>
          <declname>componentIndices</declname>
        </param>
        <param>
          <type>const gravitation::BodyDeformationTypes</type>
          <declname>deformationType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(singleGravityFieldVariationSeparateTermsAccelerationContributionVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="718" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="718" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1ae8820cfc28c9cde6a796766045138448" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::totalAccelerationDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>totalAccelerationDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(totalAccelerationDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="730" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="730" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1ae59ae2bdf24b362f4fc7b5fc441ccef9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::totalAccelerationNormDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>totalAccelerationNormDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(totalAccelerationNormDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="738" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="738" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1af5728ad21a5ea9f54885f0cc11c45cf3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::aerodynamicForceCoefficientDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>aerodynamicForceCoefficientDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(aerodynamicForceCoefficientDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="746" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="746" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a2a0adeddf84e7ede4514f4178bc06482" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::aerodynamicMomentCoefficientDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>aerodynamicMomentCoefficientDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(aerodynamicMomentCoefficientDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="754" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="754" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a326244f300d8dbf46974998c32dc457b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::inertialToBodyFixedRotationMatrixVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>inertialToBodyFixedRotationMatrixVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(inertialToBodyFixedRotationMatrixVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="762" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="762" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a359ff4390abab974e7cf83ed739be11e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::intermediateAerodynamicRotationMatrixVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const reference_frames::AerodynamicsReferenceFrames baseFrame, const reference_frames::AerodynamicsReferenceFrames targetFrame)</argsstring>
        <name>intermediateAerodynamicRotationMatrixVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const reference_frames::AerodynamicsReferenceFrames</type>
          <declname>baseFrame</declname>
        </param>
        <param>
          <type>const reference_frames::AerodynamicsReferenceFrames</type>
          <declname>targetFrame</declname>
        </param>
        <briefdescription>
<para>@get_docstring(intermediateAerodynamicRotationMatrixVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="770" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="770" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1af6ba250b03fde5073f2a4f8dea69186f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::latitudeDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>latitudeDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(latitudeDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="780" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="780" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a12ad12386e2f4795ea5eb1be4ee92592" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::geodeticLatitudeDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>geodeticLatitudeDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(geodeticLatitudeDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="789" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="789" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a8dbbeecd61e2ef8fa5ba14a6c3a8d683" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::longitudeDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>longitudeDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(longitudeDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="798" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="798" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a7ecb05427ab39f594b9605af7fec20ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::headingDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>headingDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(headingDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="807" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="807" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a2878662d0f821e5bbddfe535da7494d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::flightPathAngleDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>flightPathAngleDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(flightPathAngleDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="816" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="816" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a58f28eb92c56dec58745a07f94c06463" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::angleOfAttackDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>angleOfAttackDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(angleOfAttackDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="825" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="825" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a40b972589f4f8536d984552f1974fd7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::sideslipAngleDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>sideslipAngleDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(sideslipAngleDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="834" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="834" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1aef16133cc507bba907f5020fd5a5eec0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::bankAngleDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>bankAngleDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(bankAngleDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="843" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="843" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a1ca4bdfbc4d73107c7138976ab78576c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::bodyFixedAirspeedBasedVelocityVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>bodyFixedAirspeedBasedVelocityVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(bodyFixedAirspeedBasedVelocityVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="852" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="852" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a251b8cde2e9731d46eea1280b2c015d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::bodyFixedGroundspeedBasedVelocityVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>bodyFixedGroundspeedBasedVelocityVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(bodyFixedGroundspeedBasedVelocityVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="861" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="861" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a31b3df75aa1ab98189c2a3a6750073df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::lvlhToInertialFrameRotationMatrixVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>lvlhToInertialFrameRotationMatrixVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(lvlhToInertialFrameRotationMatrixVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="870" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="870" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a0554786f08724f8bd89c5a1f41eb0a79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::periapsisAltitudeVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>periapsisAltitudeVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(periapsisAltitudeVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="879" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="879" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a40b2b22e670fc241c064cb7346f2ddae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::singleTorqueNormVariable</definition>
        <argsstring>(const basic_astrodynamics::AvailableTorque torqueModelType, const std::string &amp;bodyUndergoingTorque, const std::string &amp;bodyExertingTorque)</argsstring>
        <name>singleTorqueNormVariable</name>
        <param>
          <type>const basic_astrodynamics::AvailableTorque</type>
          <declname>torqueModelType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyExertingTorque</declname>
        </param>
        <briefdescription>
<para>@get_docstring(singleTorqueNormVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="888" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="888" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1aa225fa74bd9782a220e11b68c7c0a310" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::singleTorqueVariable</definition>
        <argsstring>(const basic_astrodynamics::AvailableTorque torqueModelType, const std::string &amp;bodyUndergoingTorque, const std::string &amp;bodyExertingTorque)</argsstring>
        <name>singleTorqueVariable</name>
        <param>
          <type>const basic_astrodynamics::AvailableTorque</type>
          <declname>torqueModelType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyExertingTorque</declname>
        </param>
        <briefdescription>
<para>@get_docstring(singleTorqueVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="898" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="898" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1abbbc4b8f8eb16c054e6f688a72288e59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::controlSurfaceDeflectionDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;controlSurface)</argsstring>
        <name>controlSurfaceDeflectionDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>controlSurface</declname>
        </param>
        <briefdescription>
<para>@get_docstring(controlSurfaceDeflectionDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="908" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="908" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a88e5f2cc767cd033d2b98a1a1e69afe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::radiationPressureDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;radiatingBody)</argsstring>
        <name>radiationPressureDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>radiatingBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(radiationPressureDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="917" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="917" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a5b7d33f75532e04885b975e66b75479e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::localTemperatureDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>localTemperatureDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(localTemperatureDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="926" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="926" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a6e4fa82a5b113d5fbe747dd51cc21c99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::localDynamicPressureDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>localDynamicPressureDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(localDynamicPressureDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="934" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="934" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a4636c1c8aa6e7df17284014b1a160613" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::localAerodynamicHeatRateDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>localAerodynamicHeatRateDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(localAerodynamicHeatRateDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="943" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="943" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a24d8ca5d99624d65409d35635dfdc50a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::totalAerodynamicGLoadDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>totalAerodynamicGLoadDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(totalAerodynamicGLoadDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="952" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="952" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1af4159a67d714620498e92d63bcfa7ecb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::stagnationPointHeatFluxDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>stagnationPointHeatFluxDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(stagnationPointHeatFluxDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="961" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="961" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1ace8e7f1794f4922c8700248b9e90e601" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::totalMassRateDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>totalMassRateDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(totalMassRateDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="970" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="970" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1ab109afcd9620317e5f2ddc3904798b2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::totalTorqueNormDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>totalTorqueNormDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(totalTorqueNormDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="978" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="978" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a682ed8a941eaa309ea1a56fbbbdb3d6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::totalTorqueDependentVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>totalTorqueDependentVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(totalTorqueDependentVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="986" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="986" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1aad6c6da0aca573dfe3201aa2ad64805e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::centralBodyFixedSphericalPositionVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>centralBodyFixedSphericalPositionVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(centralBodyFixedSphericalPositionVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="994" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="994" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1af0fa6d0511410078b707e8806c5ef103" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::centralBodyFixedCartesianPositionVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>centralBodyFixedCartesianPositionVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(centralBodyFixedCartesianPositionVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="1003" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="1003" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1abe65d76575c4b995c263730e1ca76ec7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::eulerAnglesToBodyFixed313Variable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>eulerAnglesToBodyFixed313Variable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(eulerAnglesToBodyFixed313Variable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="1012" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="1012" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a39c8763f34aef9facc94f0dc173133e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::bodyMassVariable</definition>
        <argsstring>(const std::string &amp;associatedBody)</argsstring>
        <name>bodyMassVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(bodyMassVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="1020" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="1020" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1aea221617847b4c7efa36784b838e94ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::radiationPressureCoefficientVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;emittingBody)</argsstring>
        <name>radiationPressureCoefficientVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>emittingBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(radiationPressureCoefficientVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="1028" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="1028" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a1b29380c564eda0caab86f2f5969b16e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::dynamicPressureVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>dynamicPressureVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(dynamicPressureVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="1037" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="1037" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a462083563209300face5c88d8104eb31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::aerodynamicGLoadVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>aerodynamicGLoadVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(aerodynamicGLoadVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="1046" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="1046" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="d0/d7d/propagationOutputSettings_8h_1a19f21259e1cf5583f63ec7b8f856009f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; tudat::propagators::atmosphericTemperatureVariable</definition>
        <argsstring>(const std::string &amp;associatedBody, const std::string &amp;centralBody)</argsstring>
        <name>atmosphericTemperatureVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>@get_docstring(atmosphericTemperatureVariable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" line="1055" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationOutputSettings.h" bodystart="1055" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a5aaa7d3ff64147440951f282752d3199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; tudat::propagators::getDefaultMinimumPericenterRadii</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;bodyNames)</argsstring>
        <name>getDefaultMinimumPericenterRadii</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodyNames</declname>
        </param>
        <briefdescription>
<para>Function to get default minimum pericenter radii for a list of bodies. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get default minimum pericenter radii for a list of bodiess.</para>
<para>Function to get default minimum pericenter radii for a list of bodies <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyNames</parametername>
</parameternamelist>
<parameterdescription>
<para>List of names of bodies for which periapsis radii are to be returned (only the eight planets + Pluto supported) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of minimum pericenter radii </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="44" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="44" bodyend="92" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="29" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1aba5294afbcd5ed998be3fdb0b67a66ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref></type>
        <definition>simulation_setup::SystemOfBodies tudat::propagators::setupBodyMapFromEphemeridesForPatchedConicsTrajectory</definition>
        <argsstring>(const std::string &amp;nameCentralBody, const std::string &amp;nameBodyToPropagate, const std::vector&lt; std::string &gt; &amp;nameTransferBodies)</argsstring>
        <name>setupBodyMapFromEphemeridesForPatchedConicsTrajectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameCentralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameBodyToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>nameTransferBodies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to setup a system of bodies corresponding to the assumptions of a patched conics trajectory, using default ephemerides for the central and transfer bodies.</para>
<para>Function to setup a system of bodies for the patched conics trajectory. The system of bodies contains the central body, the transfer bodies and the body to be propagated. The positions of the central and transfer bodies are directly retrieved from ephemerides. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nameCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameTransferBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the transfer bodies. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Body map for the patched conics trajectory.</para>
</simplesect>
Function to setup a system of bodies corresponding to the assumptions of a patched conics trajectory, using default ephemerides for the central and transfer bodies. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="97" column="34" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="97" bodyend="139" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="41" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a21e44da22df08416a61118cbe9f0955b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref></type>
        <definition>simulation_setup::SystemOfBodies tudat::propagators::setupBodyMapFromUserDefinedEphemeridesForPatchedConicsTrajectory</definition>
        <argsstring>(const std::string &amp;nameCentralBody, const std::string &amp;nameBodyToPropagate, const std::vector&lt; std::string &gt; &amp;nameTransferBodies, const std::vector&lt; ephemerides::EphemerisPointer &gt; &amp;ephemerisVectorTransferBodies, const std::vector&lt; double &gt; &amp;gravitationalParametersTransferBodies, const std::string &amp;frameOrientation=&quot;J2000&quot;)</argsstring>
        <name>setupBodyMapFromUserDefinedEphemeridesForPatchedConicsTrajectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameCentralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameBodyToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>nameTransferBodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; ephemerides::EphemerisPointer &gt; &amp;</type>
          <declname>ephemerisVectorTransferBodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>gravitationalParametersTransferBodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameOrientation</declname>
          <defval>&quot;J2000&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to setup a system of bodies corresponding to the assumptions of the patched conics trajectory, the ephemerides of the transfer bodies being provided as inputs.</para>
<para>Function to setup a system of bodies for the patched conics trajectory. The system of bodies contains the central body, the transfer bodies and the body to be propagated. Default ephemeris is used for the central body but the ephemerides of the transfer bodies need to be provided as inputs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nameCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameTransferBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the transfer bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisVectorTransferBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the ephemeris pointers of the different transfer bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParametersTransferBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the gravitational parameters of the transfer bodies [m^3 s^-2]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Body map for the patched conics trajectory.</para>
</simplesect>
Function to setup a system of bodies corresponding to the assumptions of the patched conics trajectory, the ephemerides of the transfer bodies being provided as inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="145" column="34" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="145" bodyend="197" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="60" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a322b2d7aa13a57b53137c047a37d3238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; basic_astrodynamics::AccelerationMap &gt;</type>
        <definition>std::vector&lt; basic_astrodynamics::AccelerationMap &gt; tudat::propagators::setupAccelerationMapPatchedConicsTrajectory</definition>
        <argsstring>(const double numberOfLegs, const std::string &amp;nameCentralBody, const std::string &amp;nameBodyToPropagate, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>setupAccelerationMapPatchedConicsTrajectory</name>
        <param>
          <type>const double</type>
          <declname>numberOfLegs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameCentralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameBodyToPropagate</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to directly setup a vector of acceleration maps for a patched conics trajectory. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to directly setup a vector of acceleration maps for a patched conics trajectory. For each leg, only the central body exerts a point-mass gravity acceleration on the body to be propagated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numberOfLegs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of legs of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Acceleration map for the patched conics trajectory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="202" column="14" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="202" bodyend="216" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="79" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a85d5fc7aac31a97cb5a59dea6213e3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="df/d5c/classtudat_1_1transfer__trajectories_1_1Trajectory" kindref="compound">transfer_trajectories::Trajectory</ref></type>
        <definition>transfer_trajectories::Trajectory tudat::propagators::createTransferTrajectoryObject</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; &amp;transferBodyOrder, const std::string &amp;centralBody, const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;transferLegTypes, const std::vector&lt; double &gt; trajectoryIndependentVariables, const std::vector&lt; double &gt; minimumPericenterRadii, const bool includeDepartureDeltaV, const double departureSemiMajorAxis, const double departureEccentricity, const bool includeArrivalDeltaV, const double arrivalSemiMajorAxis, const double arrivalEccentricity)</argsstring>
        <name>createTransferTrajectoryObject</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>transferBodyOrder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;</type>
          <declname>transferLegTypes</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>trajectoryIndependentVariables</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>minimumPericenterRadii</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>includeDepartureDeltaV</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>departureSemiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>departureEccentricity</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>includeArrivalDeltaV</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>arrivalSemiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>arrivalEccentricity</declname>
        </param>
        <briefdescription>
<para>Function to create the trajectory from the system of bodies. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create the trajectory from the system of bodies. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map from which the trajectory is to be defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transferBodyOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the transfer bodies involved in the trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transferLegTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the leg types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trajectoryIndependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing all the defining variables for the whole trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumPericenterRadii</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the minimum distance between the spacecraft and the body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>includeDepartureDeltaV</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether to include the Delta V at departure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureSemiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of the departure leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureEccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity of the departure leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>includeArrivalDeltaV</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether to include the Delta V at arrival. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arrivalSemiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of the arrival leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arrivalEccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity of the arrival leg. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Trajectory defined from the system of bodies. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="221" column="35" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="221" bodyend="272" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="103" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1aa719b05546f3a0d3f21894ae763b0655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateMgaWithoutDsmAndFullProblem</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; departureAndArrivalBodies, const std::string centralBody, const Eigen::Vector3d cartesianPositionAtDeparture, const Eigen::Vector3d cartesianPositionAtArrival, const double initialTime, const double timeOfFlight, const std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; propagatorSettings, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &amp;integratorSettings, std::map&lt; double, Eigen::Vector6d &gt; &amp;patchedConicsResult, std::map&lt; double, Eigen::Vector6d &gt; &amp;fullProblemResult, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariableResultCurrentLeg)</argsstring>
        <name>propagateMgaWithoutDsmAndFullProblem</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt;</type>
          <declname>departureAndArrivalBodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>cartesianPositionAtDeparture</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>cartesianPositionAtArrival</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeOfFlight</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>patchedConicsResult</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>fullProblemResult</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariableResultCurrentLeg</declname>
        </param>
        <briefdescription>
<para>Function to both calculate a patched conics leg without DSM and propagate the full dynamics problem. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to both calculate a patched conics leg without DSM and propagate the full dynamics problem. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the patched conics leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureAndArrivalBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the departure and arrival bodies of the leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at the leg departure [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at the leg arrival [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at departure [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeOfFlight</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> of flight for the leg [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Propagator settings for the propagation of the full dynamics problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration settings for the full problem propagation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patchedConicsResult</parametername>
</parameternamelist>
<parameterdescription>
<para>Patched conics solution for the leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResult</parametername>
</parameternamelist>
<parameterdescription>
<para>propagation results of the full problem over the leg. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="275" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="275" bodyend="299" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1aa343f80b2ccd27adf5a21fabf19c79f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateMga1DsmVelocityAndFullProblem</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; departureAndArrivalBodies, const std::string &amp;dsm, const std::string &amp;centralBody, const Eigen::Vector3d cartesianPositionAtDeparture, const Eigen::Vector3d cartesianPositionDSM, const Eigen::Vector3d cartesianPositionAtArrival, const double initialTime, const double timeDsm, const double timeArrival, const transfer_trajectories::TransferLegType &amp;legType, const std::vector&lt; double &gt; &amp;trajectoryVariableVector, const double semiMajorAxis, const double eccentricity, Eigen::Vector3d &amp;velocityAfterDeparture, Eigen::Vector3d &amp;velocityBeforeArrival, const std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; propagatorSettingsBeforeDsm, const std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; propagatorSettingsAfterDsm, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &amp;integratorSettings, std::map&lt; double, Eigen::Vector6d &gt; &amp;patchedConicsResultFromDepartureToDsm, std::map&lt; double, Eigen::Vector6d &gt; &amp;fullProblemResultFromDepartureToDsm, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariablesFromDepartureToDsm, std::map&lt; double, Eigen::Vector6d &gt; &amp;patchedConicsResultFromDsmToArrival, std::map&lt; double, Eigen::Vector6d &gt; &amp;fullProblemResultFromDsmToArrival, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariablesFromDsmToArrival)</argsstring>
        <name>propagateMga1DsmVelocityAndFullProblem</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt;</type>
          <declname>departureAndArrivalBodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dsm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>cartesianPositionAtDeparture</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>cartesianPositionDSM</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>cartesianPositionAtArrival</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeDsm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeArrival</declname>
        </param>
        <param>
          <type>const transfer_trajectories::TransferLegType &amp;</type>
          <declname>legType</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>trajectoryVariableVector</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>velocityAfterDeparture</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>velocityBeforeArrival</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt;</type>
          <declname>propagatorSettingsBeforeDsm</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt;</type>
          <declname>propagatorSettingsAfterDsm</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>patchedConicsResultFromDepartureToDsm</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>fullProblemResultFromDepartureToDsm</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariablesFromDepartureToDsm</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>patchedConicsResultFromDsmToArrival</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>fullProblemResultFromDsmToArrival</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariablesFromDsmToArrival</declname>
        </param>
        <briefdescription>
<para>Function to both calculate a patched conics leg including a DSM and propagate the corresponding full dynamics problem. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to both calculate a patched conics leg including a DSM and propagate the corresponding full dynamics problem. The patched conics leg with DSM is calculated using the velocity formulation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the patched conics leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureAndArrivalBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the departure and arrival bodies of the leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dsm</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the DSM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at the leg departure [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionDSM</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at the DSM location [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at the leg arrival [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at departure [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeDsm</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which the DSM is to be performed [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeArrival</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at arrival [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trajectoryVariableVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Trajectory variable vector characterising the leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis at trajectory departure (only used for a departure leg and not a swing-by one) [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity at trajectory departure (only used for a departure leg and not a swing-by one). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocityAfterDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity coordinates of the body to be propagated just after the swing-by it has performed about the departure body of the leg [m/s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocityBeforeArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity coordinates of the body to be propagated just before it reaches the arrival body of the leg [m/s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettingsBeforeDsm</parametername>
</parameternamelist>
<parameterdescription>
<para>Propagator settings for the full problem propagation from the departure body to the DSM location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettingsAfterDsm</parametername>
</parameternamelist>
<parameterdescription>
<para>propagators settings for the full problem propagation from the DSM location to the arrival body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation of the full dynamics problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patchedConicsResultFromDepartureToDsm</parametername>
</parameternamelist>
<parameterdescription>
<para>Patched conics solution for the first part of the leg (from departure body to DSM). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResultFromDepartureToDsm</parametername>
</parameternamelist>
<parameterdescription>
<para>propagation results of the full dynamics problem for the first part of the leg (from departure body to DSM). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patchedConicsResultFromDsmToArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Patched conics solution for the second part of the leg (from DSM to arrival body). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResultFromDsmToArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>propagation results of the full dynamics problem for the second part of the leg (from DSM to arrival body). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="304" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="304" bodyend="414" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="178" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a2795120670e1356dd4b15f290b7e8621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateMga1DsmPositionAndFullProblem</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; departureAndArrivalBodies, const std::string &amp;dsm, const std::string &amp;centralBody, const Eigen::Vector3d cartesianPositionAtDeparture, const Eigen::Vector3d cartesianPositionDSM, const Eigen::Vector3d cartesianPositionAtArrival, const double initialTime, const double timeDsm, const double timeArrival, const transfer_trajectories::TransferLegType &amp;legType, const std::vector&lt; double &gt; &amp;trajectoryVariableVector, const double minimumPericenterRadius, const double semiMajorAxis, const double eccentricity, Eigen::Vector3d &amp;velocityAfterDeparture, Eigen::Vector3d &amp;velocityBeforeArrival, const std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; propagatorSettingsBeforeDsm, const std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; propagatorSettingsAfterDsm, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &amp;integratorSettings, std::map&lt; double, Eigen::Vector6d &gt; &amp;patchedConicsResultFromDepartureToDsm, std::map&lt; double, Eigen::Vector6d &gt; &amp;fullProblemResultFromDepartureToDsm, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariablesFromDepartureToDsm, std::map&lt; double, Eigen::Vector6d &gt; &amp;patchedConicsResultFromDsmToArrival, std::map&lt; double, Eigen::Vector6d &gt; &amp;fullProblemResultFromDsmToArrival, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariablesFromDsmToArrival)</argsstring>
        <name>propagateMga1DsmPositionAndFullProblem</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt;</type>
          <declname>departureAndArrivalBodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dsm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>cartesianPositionAtDeparture</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>cartesianPositionDSM</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>cartesianPositionAtArrival</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeDsm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeArrival</declname>
        </param>
        <param>
          <type>const transfer_trajectories::TransferLegType &amp;</type>
          <declname>legType</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>trajectoryVariableVector</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>minimumPericenterRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>velocityAfterDeparture</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>velocityBeforeArrival</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt;</type>
          <declname>propagatorSettingsBeforeDsm</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt;</type>
          <declname>propagatorSettingsAfterDsm</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>patchedConicsResultFromDepartureToDsm</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>fullProblemResultFromDepartureToDsm</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariablesFromDepartureToDsm</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>patchedConicsResultFromDsmToArrival</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>fullProblemResultFromDsmToArrival</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariablesFromDsmToArrival</declname>
        </param>
        <briefdescription>
<para>Function to both calculate a patched conics leg including a DSM and propagate the corresponding full dynamics problem. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to both calculate a patched conics leg including a DSM and propagate the corresponding full dynamics problem. The patched conics leg with DSM is calculated using the position formulation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>bodies Body map for the patched conics leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureAndArrivalBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the departure and arrival bodies of the leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dsm</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the DSM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at the leg departure [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionDSM</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at the DSM location [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to be propagated at the leg arrival [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at departure [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeDsm</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which the DSM is to be performed [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeArrival</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at arrival [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trajectoryVariableVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Trajectory variable vector characterising the leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumPericenterRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum pericenter radius (only used for a swing-by leg and not a trajectory departure one). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis at trajectory departure (only used for a departure leg and not a swing-by one) [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity at trajectory departure (only used for a departure leg and not a swing-by one). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocityAfterDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity coordinates of the body to be propagated just after the swing-by it has performed about the departure body of the leg [m/s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocityBeforeArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity coordinates of the body to be propagated just before it reaches the arrival body of the leg [m/s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettingsBeforeDsm</parametername>
</parameternamelist>
<parameterdescription>
<para>Propagator settings for the full problem propagation from the departure body to the DSM location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettingsAfterDsm</parametername>
</parameternamelist>
<parameterdescription>
<para>propagators settings for the full problem propagation from the DSM location to the arrival body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation of the full dynamics problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patchedConicsResultFromDepartureToDsm</parametername>
</parameternamelist>
<parameterdescription>
<para>Patched conics solution for the first part of the leg (from departure body to DSM). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResultFromDepartureToDsm</parametername>
</parameternamelist>
<parameterdescription>
<para>propagation results of the full dynamics problem for the first part of the leg (from departure body to DSM). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patchedConicsResultFromDsmToArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Patched conics solution for the second part of the leg (from DSM to arrival body). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResultFromDsmToArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>propagation results of the full dynamics problem for the second part of the leg (from DSM to arrival body). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="419" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="419" bodyend="538" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="241" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a37197e69657a32abf7e38cbfd0e23680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">propagators::PropagationTerminationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; propagators::PropagationTerminationSettings &gt; tudat::propagators::getSingleLegPartSphereOfInfluenceTerminationSettings</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const std::string &amp;bodyToPropagate, const std::string &amp;centralBody, const std::string &amp;departureBody, const std::string &amp;arrivalBody, const double initialTimeCurrentLeg, const double finalTimeCurrentLeg, const bool useBackwardLegToDepartureBody, const double terminationDistanceScaler=1.0)</argsstring>
        <name>getSingleLegPartSphereOfInfluenceTerminationSettings</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>departureBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arrivalBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTimeCurrentLeg</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTimeCurrentLeg</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useBackwardLegToDepartureBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>terminationDistanceScaler</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="691" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="691" bodyend="818" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="271" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a1c2a59ce1992bdb4574af72b59a12ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">propagators::PropagationTerminationSettings</ref> &gt;, std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">propagators::PropagationTerminationSettings</ref> &gt; &gt;</type>
        <definition>std::pair&lt; std::shared_ptr&lt; propagators::PropagationTerminationSettings &gt;, std::shared_ptr&lt; propagators::PropagationTerminationSettings &gt; &gt; tudat::propagators::getSingleLegSphereOfInfluenceTerminationSettings</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const std::string &amp;bodyToPropagate, const std::string &amp;centralBody, const std::string &amp;departureBody, const std::string &amp;arrivalBody, const double initialTimeCurrentLeg, const double finalTimeCurrentLeg, const double terminationDistanceScaler=1.0)</argsstring>
        <name>getSingleLegSphereOfInfluenceTerminationSettings</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>departureBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arrivalBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTimeCurrentLeg</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTimeCurrentLeg</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>terminationDistanceScaler</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="822" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="822" bodyend="840" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="283" declcolumn="2"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a960aa114fb5c8b15aaeede240a78e53d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;,std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; &gt; tudat::propagators::getPatchedConicPropagatorSettings</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; basic_astrodynamics::AccelerationMap &gt; &amp;accelerationMap, const std::vector&lt; std::string &gt; &amp;transferBodyOrder, const std::string &amp;centralBody, const std::string &amp;bodyToPropagate, const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;legTypeVector, const std::vector&lt; double &gt; &amp;trajectoryVariableVector, const std::vector&lt; double &gt; &amp;minimumPericenterRadiiVector, const std::vector&lt; double &gt; &amp;semiMajorAxesVector, const std::vector&lt; double &gt; &amp;eccentricitiesVector, const std::vector&lt; std::shared_ptr&lt; DependentVariableSaveSettings &gt; &gt; dependentVariablesToSave, const TranslationalPropagatorType propagator, const bool terminationSphereOfInfluence, const double terminationDistanceScaler=1.0)</argsstring>
        <name>getPatchedConicPropagatorSettings</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; basic_astrodynamics::AccelerationMap &gt; &amp;</type>
          <declname>accelerationMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>transferBodyOrder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;</type>
          <declname>legTypeVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>trajectoryVariableVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>minimumPericenterRadiiVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>semiMajorAxesVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>eccentricitiesVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt; &gt;</type>
          <declname>dependentVariablesToSave</declname>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>terminationSphereOfInfluence</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>terminationDistanceScaler</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Function to calculate the patched conics trajectory and to propagate the corresponding full problem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="845" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="845" bodyend="1021" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="295" declcolumn="2"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a5850afb278176976cb346f1114fdd9cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::propagateKeplerianOrbitLegAndFullProblem</definition>
        <argsstring>(const double timeOfFlight, const double initialTime, const simulation_setup::SystemOfBodies &amp;bodies, const std::string &amp;centralBody, const std::vector&lt; std::string &gt; &amp;departureAndArrivalBodies, const Eigen::Vector3d &amp;velocityAfterDeparture, const std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; propagatorSettings, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, std::map&lt; double, Eigen::Vector6d &gt; &amp;keplerianOrbitResult, std::map&lt; double, Eigen::Vector6d &gt; &amp;fullProblemResult, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariables, const double centralBodyGravitationalParameter, const Eigen::Vector3d &amp;cartesianPositionAtDeparture)</argsstring>
        <name>propagateKeplerianOrbitLegAndFullProblem</name>
        <param>
          <type>const double</type>
          <declname>timeOfFlight</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>departureAndArrivalBodies</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>velocityAfterDeparture</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>keplerianOrbitResult</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>fullProblemResult</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariables</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtDeparture</declname>
        </param>
        <briefdescription>
<para>Function to propagate the motion of a body over a trajectory leg, both along a keplerian orbit and in a full dynamics problem. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to propagate the motion of a body over a trajectory leg, both along a keplerian orbit and in a full dynamics problem. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeOfFlight</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> of flight during which the body has to be propagated [s] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial time [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map defining the problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the keplerian trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureAndArrivalBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the departure and arrival bodies of the leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocityAfterDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity coordinates of the body to be propagated just after the swing-by it has performed about the departure body of the leg [m/s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Propagator settings for the propagation of the full dynamics problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation of the full dynamics problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keplerianOrbitResult</parametername>
</parameternamelist>
<parameterdescription>
<para>Keplerian orbit solution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResult</parametername>
</parameternamelist>
<parameterdescription>
<para>propagation results of the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the central body [m^3 s^-2]. If not provided as input, it is retrieved from the system of bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of the body to the propagated at the leg departure [m]. If not provided as input, it is retrieved from the ephemerides. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="543" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="543" bodyend="689" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="331" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a1f2bfcf4e5a117cfed82eb451fde5cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::fullPropagationPatchedConicsTrajectory</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; &amp;transferBodyOrder, const std::string &amp;patchedConicCentralBody, const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;legTypeVector, const std::vector&lt; double &gt; &amp;trajectoryVariableVector, const std::vector&lt; double &gt; &amp;minimumPericenterRadiiVector, const std::vector&lt; double &gt; &amp;semiMajorAxesVector, const std::vector&lt; double &gt; &amp;eccentricitiesVector, const std::vector&lt; std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; &gt; propagatorSettings, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &amp;integratorSettings, std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;patchedConicsResultForEachLeg, std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;fullProblemResultForEachLeg, std::map&lt; int, std::map&lt; double, Eigen::VectorXd &gt; &gt; &amp;dependentVariableResultForEachLeg)</argsstring>
        <name>fullPropagationPatchedConicsTrajectory</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>transferBodyOrder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>patchedConicCentralBody</declname>
        </param>
        <param>
          <type>const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;</type>
          <declname>legTypeVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>trajectoryVariableVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>minimumPericenterRadiiVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>semiMajorAxesVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>eccentricitiesVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
          <declname>patchedConicsResultForEachLeg</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
          <declname>fullProblemResultForEachLeg</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::map&lt; double, Eigen::VectorXd &gt; &gt; &amp;</type>
          <declname>dependentVariableResultForEachLeg</declname>
        </param>
        <briefdescription>
<para>Function to calculate the patched conics trajectory and to propagate the corresponding full problem. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate the patched conics trajectory and to propagate the corresponding full problem. The propagator settings to be used for the propagation of the full dynamics problem are directly provided as inputs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transferBodyOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the transfer bodies involved in the trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patchedConicCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legTypeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the leg types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trajectoryVariableVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing all the defining variables for the whole trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumPericenterRadiiVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the minimum distance between the spacecraft and the body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the semi-major axes of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricitiesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the eccentricities of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing a pair of propagator settings for each leg (one for the backward and the other for the forward propagation) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation of the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patchedConicsResultForEachLeg</parametername>
</parameternamelist>
<parameterdescription>
<para>Patched conics solution along each leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResultForEachLeg</parametername>
</parameternamelist>
<parameterdescription>
<para>Full problem propagation results along each leg. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="1024" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="1024" bodyend="1205" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="365" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a84a416db10534e742414471b47b20291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::fullPropagationPatchedConicsTrajectory</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; basic_astrodynamics::AccelerationMap &gt; &amp;accelerationMap, const std::vector&lt; std::string &gt; &amp;transferBodyOrder, const std::string &amp;centralBody, const std::string &amp;bodyToPropagate, const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;legTypeVector, const std::vector&lt; double &gt; &amp;trajectoryVariableVector, const std::vector&lt; double &gt; &amp;minimumPericenterRadiiVector, const std::vector&lt; double &gt; &amp;semiMajorAxesVector, const std::vector&lt; double &gt; &amp;eccentricitiesVector, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &amp;integratorSettings, std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;patchedConicsResultForEachLeg, std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;fullProblemResultForEachLeg, std::map&lt; int, std::map&lt; double, Eigen::VectorXd &gt; &gt; &amp;dependentVariableResultForEachLeg, const bool terminationSphereOfInfluence=false, const std::vector&lt; std::shared_ptr&lt; DependentVariableSaveSettings &gt; &gt; dependentVariablesToSave=std::vector&lt; std::shared_ptr&lt; DependentVariableSaveSettings &gt; &gt;(), const TranslationalPropagatorType propagator=cowell)</argsstring>
        <name>fullPropagationPatchedConicsTrajectory</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; basic_astrodynamics::AccelerationMap &gt; &amp;</type>
          <declname>accelerationMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>transferBodyOrder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;</type>
          <declname>legTypeVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>trajectoryVariableVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>minimumPericenterRadiiVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>semiMajorAxesVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>eccentricitiesVector</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
          <declname>patchedConicsResultForEachLeg</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
          <declname>fullProblemResultForEachLeg</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::map&lt; double, Eigen::VectorXd &gt; &gt; &amp;</type>
          <declname>dependentVariableResultForEachLeg</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>terminationSphereOfInfluence</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt; &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <briefdescription>
<para>Function to calculate the patched conics trajectory and to propagate the corresponding full problem. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate the patched conics trajectory and to propagate the corresponding full problem. The propagator settings for the full problem propagation are defined inside the function from the propagator type and dependent variables to save which are provided as inputs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of acceleration maps for each leg to propagate the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transferBodyOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the transfer bodies involved in the trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legTypeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the leg types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trajectoryVariableVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing all the defining variables for the whole trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumPericenterRadiiVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the minimum distance between the spacecraft and the body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the semi-major axes of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricitiesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the eccentricities of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation of the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patchedConicsResultForEachLeg</parametername>
</parameternamelist>
<parameterdescription>
<para>Patched conics solution along each leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResultForEachLeg</parametername>
</parameternamelist>
<parameterdescription>
<para>Full problem propagation results along each leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminationSphereOfInfluence</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the propagation stops at the exact position (false) or at the sphere of influence (true) of the departure and arrival body of each leg of the trajectory. The default value is false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariablesToSave</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the dependent variables to be saved during the full problem propagation for each leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of propagator to be used for the full problem propagation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="1208" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="1208" bodyend="1241" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="406" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a42c5825e08aecfb05a31aa75f58aef16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::fullPropagationPatchedConicsTrajectory</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const basic_astrodynamics::AccelerationMap &amp;accelerationMap, const std::vector&lt; std::string &gt; &amp;transferBodyOrder, const std::string &amp;centralBody, const std::string &amp;bodyToPropagate, const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;legTypeVector, const std::vector&lt; double &gt; &amp;trajectoryVariableVector, const std::vector&lt; double &gt; &amp;minimumPericenterRadiiVector, const std::vector&lt; double &gt; &amp;semiMajorAxesVector, const std::vector&lt; double &gt; &amp;eccentricitiesVector, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &amp;integratorSettings, std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;patchedConicsResultForEachLeg, std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;fullProblemResultForEachLeg, std::map&lt; int, std::map&lt; double, Eigen::VectorXd &gt; &gt; &amp;dependentVariableResultForEachLeg, const bool terminationSphereOfInfluence=false, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const TranslationalPropagatorType propagator=cowell)</argsstring>
        <name>fullPropagationPatchedConicsTrajectory</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>transferBodyOrder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;</type>
          <declname>legTypeVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>trajectoryVariableVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>minimumPericenterRadiiVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>semiMajorAxesVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>eccentricitiesVector</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
          <declname>patchedConicsResultForEachLeg</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::map&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
          <declname>fullProblemResultForEachLeg</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::map&lt; double, Eigen::VectorXd &gt; &gt; &amp;</type>
          <declname>dependentVariableResultForEachLeg</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>terminationSphereOfInfluence</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate the patched conics trajectory and to propagate the corresponding full problem with the same acceleration map for every leg.</para>
<para>Function to calculate the patched conics trajectory and to propagate the corresponding full problem with the same acceleration map for every leg. The propagator settings for the full problem propagation are defined inside the function from the propagator type and dependent variables to save provided as inputs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration map (to be used for every leg) to propagate the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transferBodyOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the transfer bodies involved in the trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legTypeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the leg types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trajectoryVariableVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing all the defining variables for the whole trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumPericenterRadiiVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the minimum distance between the spacecraft and the body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the semi-major axes of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricitiesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the eccentricities of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation of the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patchedConicsResultForEachLeg</parametername>
</parameternamelist>
<parameterdescription>
<para>Patched conics solution along each leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullProblemResultForEachLeg</parametername>
</parameternamelist>
<parameterdescription>
<para>Full problem propagation results along each leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminationSphereOfInfluence</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the propagation stops at the exact position (false) or at the sphere of influence (true) of the departure and arrival body of each leg of the trajectory. The default value is false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariablesToSave</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the dependent variables to be saved during the full problem propagation for each leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of propagator to be used for the full problem propagation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Function to calculate the patched conics trajectory and to propagate the corresponding full problem with the same acceleration map for every leg. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="1246" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="1246" bodyend="1286" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="452" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a1b0564e6a69998b4b2d4a301f2400f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, std::pair&lt; Eigen::Vector6d, Eigen::Vector6d &gt; &gt;</type>
        <definition>std::map&lt; int, std::pair&lt; Eigen::Vector6d, Eigen::Vector6d &gt; &gt; tudat::propagators::getDifferenceFullProblemWrtPatchedConicsTrajectory</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; &amp;transferBodyOrder, const std::string &amp;centralBody, const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;legTypeVector, const std::vector&lt; double &gt; &amp;trajectoryVariableVector, const std::vector&lt; double &gt; &amp;minimumPericenterRadiiVector, const std::vector&lt; double &gt; &amp;semiMajorAxesVector, const std::vector&lt; double &gt; &amp;eccentricitiesVector, const std::vector&lt; std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; &gt; propagatorSettings, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &amp;integratorSettings)</argsstring>
        <name>getDifferenceFullProblemWrtPatchedConicsTrajectory</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>transferBodyOrder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;</type>
          <declname>legTypeVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>trajectoryVariableVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>minimumPericenterRadiiVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>semiMajorAxesVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>eccentricitiesVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>integratorSettings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the difference in cartesian state between patched conics trajectory and full dynamics problem, at both departure and arrival positions for each leg.</para>
<para>Function to compute the difference in cartesian state between patched conics trajectory and full dynamics problem, at both departure and arrival positions for each leg. The propagator settings to be used for the propagation of the full dynamics problem are directly provided as inputs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transferBodyOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the transfer bodies involved in the trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legTypeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the leg types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trajectoryVariableVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing all the defining variables for the whole trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumPericenterRadiiVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the minimum distance between the spacecraft and the body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the semi-major axes of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricitiesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the eccentricities of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing a pair of propagator settings for each leg (one for the backward and the other for the forward propagation) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation of the full problem. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of vector pairs. Each vector pair contains the difference in cartesian state between patched conics trajectory and full problem for a given leg, at departure and arrival respectively.</para>
</simplesect>
Function to compute the difference in cartesian state between patched conics trajectory and full dynamics problem, at both departure and arrival positions for each leg. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="1346" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="1346" bodyend="1391" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="492" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a18731b09daa53acd1b0c3346d12ba004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, std::pair&lt; Eigen::Vector6d, Eigen::Vector6d &gt; &gt;</type>
        <definition>std::map&lt; int, std::pair&lt; Eigen::Vector6d, Eigen::Vector6d &gt; &gt; tudat::propagators::getDifferenceFullProblemWrtPatchedConicsTrajectory</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; basic_astrodynamics::AccelerationMap &gt; &amp;accelerationMap, const std::vector&lt; std::string &gt; &amp;transferBodyOrder, const std::string &amp;centralBody, const std::string &amp;bodyToPropagate, const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;legTypeVector, const std::vector&lt; double &gt; &amp;trajectoryVariableVector, const std::vector&lt; double &gt; &amp;minimumPericenterRadiiVector, const std::vector&lt; double &gt; &amp;semiMajorAxesVector, const std::vector&lt; double &gt; &amp;eccentricitiesVector, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &amp;integratorSettings, const bool terminationSphereOfInfluence=false, const std::vector&lt; std::shared_ptr&lt; DependentVariableSaveSettings &gt; &gt; dependentVariablesToSave=std::vector&lt; std::shared_ptr&lt; DependentVariableSaveSettings &gt; &gt;(), const TranslationalPropagatorType propagator=cowell)</argsstring>
        <name>getDifferenceFullProblemWrtPatchedConicsTrajectory</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; basic_astrodynamics::AccelerationMap &gt; &amp;</type>
          <declname>accelerationMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>transferBodyOrder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;</type>
          <declname>legTypeVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>trajectoryVariableVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>minimumPericenterRadiiVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>semiMajorAxesVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>eccentricitiesVector</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>terminationSphereOfInfluence</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt; &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the difference in cartesian state between patched conics trajectory and full dynamics problem, at both departure and arrival positions for each leg.</para>
<para>Function to compute the difference in cartesian state between patched conics trajectory and full dynamics problem, at both departure and arrival positions for each leg. The propagator settings for the full problem propagation are defined inside the function from the propagator type and dependent variables to save provided as inputs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of acceleration maps for each leg, to be used to propagate the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transferBodyOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the transfer bodies involved in the trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legTypeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the leg types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trajectoryVariableVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing all the defining variables for the whole trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumPericenterRadiiVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the minimum distance between the spacecraft and the body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the semi-major axes of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricitiesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the eccentricities of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation of the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminationSphereOfInfluence</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the propagation stops at the exact position (false) or at the sphere of influence (true) of the departure and arrival body of each leg of the trajectory. The default value is false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariablesToSave</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the dependent variables to be saved during the full problem propagation for each leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of propagator to be used for the full problem propagation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of vector pairs. Each vector pair contains the difference in cartesian state between patched conics trajectory and full problem for a given leg, at departure and arrival respectively.</para>
</simplesect>
Function to compute the difference in cartesian state between patched conics trajectory and full dynamics problem, at both departure and arrival positions for each leg. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="1290" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="1290" bodyend="1340" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="532" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="db/dd1/propagationPatchedConicFullProblem_8h_1a64c5ab982b22ec665712b544dbd024c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, std::pair&lt; Eigen::Vector6d, Eigen::Vector6d &gt; &gt;</type>
        <definition>std::map&lt; int, std::pair&lt; Eigen::Vector6d, Eigen::Vector6d &gt; &gt; tudat::propagators::getDifferenceFullProblemWrtPatchedConicsTrajectory</definition>
        <argsstring>(simulation_setup::SystemOfBodies &amp;bodies, const basic_astrodynamics::AccelerationMap &amp;accelerationMap, const std::vector&lt; std::string &gt; &amp;transferBodyOrder, const std::string &amp;centralBody, const std::string &amp;bodyToPropagate, const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;legTypeVector, const std::vector&lt; double &gt; &amp;trajectoryVariableVector, const std::vector&lt; double &gt; &amp;minimumPericenterRadiiVector, const std::vector&lt; double &gt; &amp;semiMajorAxesVector, const std::vector&lt; double &gt; &amp;eccentricitiesVector, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &amp;integratorSettings, const bool terminationSphereOfInfluence, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const TranslationalPropagatorType propagator=cowell)</argsstring>
        <name>getDifferenceFullProblemWrtPatchedConicsTrajectory</name>
        <param>
          <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>transferBodyOrder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::vector&lt; transfer_trajectories::TransferLegType &gt; &amp;</type>
          <declname>legTypeVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>trajectoryVariableVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>minimumPericenterRadiiVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>semiMajorAxesVector</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>eccentricitiesVector</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>terminationSphereOfInfluence</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the difference in cartesian state between patched conics trajectory and full dynamics problem, at both departure and arrival positions for each leg, using the same accelerations for each leg.</para>
<para>Function to compute the difference in cartesian state between patched conics trajectory and full dynamics problem, at both departure and arrival positions for each leg when using the same accelerations for each leg. The propagator settings for the full problem propagation are defined inside the function from the propagator type and dependent variables to save provided as inputs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Body map for the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration map (to be used for every leg) to propagate the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transferBodyOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the names of the transfer bodies involved in the trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body of the patched conics trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToPropagate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body to be propagated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legTypeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the leg types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trajectoryVariableVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing all the defining variables for the whole trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumPericenterRadiiVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the minimum distance between the spacecraft and the body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the semi-major axes of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricitiesVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the eccentricities of the departure and arrival legs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrator settings for the propagation of the full problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminationSphereOfInfluence</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the propagation stops at the exact position (false) or at the sphere of influence (true) of the departure and arrival body of each leg of the trajectory. The default value is false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentVariablesToSave</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the dependent variables to be saved during the full problem propagation for each leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagator</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of propagator to be used for the full problem propagation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of vector pairs. Each vector pair contains the difference in cartesian state between patched conics trajectory and full problem for a given leg, at departure and arrival respectively.</para>
</simplesect>
Function to compute the difference in cartesian state between patched conics trajectory and full dynamics problem, at both departure and arrival positions for each leg, using the same accelerations for each leg. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" line="1398" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationPatchedConicFullProblem.cpp" bodystart="1398" bodyend="1441" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationPatchedConicFullProblem.h" declline="575" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a8b9257ad9e7d7b6d72291817093e0143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int tudat::propagators::getConcatenatedStateSize</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &gt; &amp;singleArcPropagatorSettings)</argsstring>
        <name>getConcatenatedStateSize</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &gt; &amp;</type>
          <declname>singleArcPropagatorSettings</declname>
        </param>
        <briefdescription>
<para>Function to get the total size of multi-arc initial state vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the total size of multi-arc initial state vector, e.g. the size of the single-arc initial states, concatenated into a single vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>singleArcPropagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>ist of single-arc propagation settings for which the concatenated initial state size is to be determined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Total size of multi-arc initial state vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="269" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="269" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a9130e84512f6ce71756bdf651716d8d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; tudat::propagators::getConcatenatedInitialStates</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &gt; &amp;singleArcPropagatorSettings)</argsstring>
        <name>getConcatenatedInitialStates</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &gt; &amp;</type>
          <declname>singleArcPropagatorSettings</declname>
        </param>
        <briefdescription>
<para>Function to concatenate the initial states for a list of single-arc propagations into a single list. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to concatenate the initial states for a list of single-arc propagations into a single list. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>singleArcPropagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>List of single-arc propagation settings for which the initial states are to be concatenated into a single vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector with concatenated initial states from singleArcPropagatorSettings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="290" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="290" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a7107c53758ba0ca779be8cb5b187ccb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="dc/de9/classtudat_1_1propagators_1_1MultiArcPropagatorSettings" kindref="compound">MultiArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; MultiArcPropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::multiArcPropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &gt; &amp;singleArcSettings, const bool transferInitialStateInformationPerArc=0)</argsstring>
        <name>multiArcPropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &gt; &amp;</type>
          <declname>singleArcSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transferInitialStateInformationPerArc</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="474" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="474" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1aa5615cc8a3992e301154b244771bf0f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="df/d4d/classtudat_1_1propagators_1_1HybridArcPropagatorSettings" kindref="compound">HybridArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; HybridArcPropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::hybridArcPropagatorSettings</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; singleArcPropagatorSettings, const std::shared_ptr&lt; MultiArcPropagatorSettings&lt; StateScalarType &gt; &gt; multiArcPropagatorSettings)</argsstring>
        <name>hybridArcPropagatorSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>singleArcPropagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/de9/classtudat_1_1propagators_1_1MultiArcPropagatorSettings" kindref="compound">MultiArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>multiArcPropagatorSettings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="590" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="590" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1ae05434fc440ff9e2bac3e1b82a8b269d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">TranslationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; TranslationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::translationalStatePropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;centralBodies, const basic_astrodynamics::AccelerationMap &amp;accelerationsMap, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyStates, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const TranslationalPropagatorType propagator=cowell, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>translationalStatePropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationsMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyStates</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="837" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="837" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a9d2dde0c868b6b70c1b6128caefb7525" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">TranslationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; TranslationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::translationalStatePropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;centralBodies, const basic_astrodynamics::AccelerationMap &amp;accelerationsMap, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyStates, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const TranslationalPropagatorType propagator=cowell, const std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt; &amp;dependentVariablesToSave=std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>translationalStatePropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationsMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyStates</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt; &amp;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="855" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="855" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a07bd6cf0b77f27da980a09a51f21c9e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">TranslationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; TranslationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::translationalStatePropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;centralBodies, const simulation_setup::SelectedAccelerationMap &amp;accelerationSettingsMap, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyStates, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const TranslationalPropagatorType propagator=cowell, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>translationalStatePropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const simulation_setup::SelectedAccelerationMap &amp;</type>
          <declname>accelerationSettingsMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyStates</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="880" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="880" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a061fb74a50ce4780020767419f04dee5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">TranslationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; TranslationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::translationalStatePropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;centralBodies, const simulation_setup::SelectedAccelerationMap &amp;accelerationSettingsMap, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyStates, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const TranslationalPropagatorType propagator=cowell, const std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt; &amp;dependentVariablesToSave=std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>translationalStatePropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const simulation_setup::SelectedAccelerationMap &amp;</type>
          <declname>accelerationSettingsMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyStates</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt; &amp;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="898" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="898" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a307f95e3868389b8aa424279bded25ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">TranslationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; TranslationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::translationalStatePropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;centralBodies, const basic_astrodynamics::AccelerationMap &amp;accelerationsMap, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyStates, const double endTime, const TranslationalPropagatorType propagator=cowell, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>translationalStatePropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationsMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyStates</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>endTime</declname>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="922" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="922" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a479734f238e0159417630800452853a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">TranslationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; TranslationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::translationalStatePropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;centralBodies, const basic_astrodynamics::AccelerationMap &amp;accelerationsMap, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyStates, const double endTime, const TranslationalPropagatorType propagator=cowell, const std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt; &amp;dependentVariablesToSave=std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>translationalStatePropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationsMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyStates</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>endTime</declname>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt; &amp;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="940" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="940" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1af6838075b5394c972d6e5cd82d746100" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">TranslationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; TranslationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::translationalStatePropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;centralBodies, const simulation_setup::SelectedAccelerationMap &amp;accelerationSettingsMap, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyStates, const double endTime, const TranslationalPropagatorType propagator=cowell, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>translationalStatePropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <param>
          <type>const simulation_setup::SelectedAccelerationMap &amp;</type>
          <declname>accelerationSettingsMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyStates</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>endTime</declname>
        </param>
        <param>
          <type>const TranslationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>cowell</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="964" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="964" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1aa888da478a37f942dc33c20dc6a803eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="dd/d74/classtudat_1_1propagators_1_1RotationalStatePropagatorSettings" kindref="compound">RotationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; RotationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::rotationalStatePropagatorSettings</definition>
        <argsstring>(const basic_astrodynamics::TorqueModelMap &amp;torqueModelMap, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyStates, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const RotationalPropagatorType propagator=quaternions, const std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt; dependentVariablesToSave=std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>rotationalStatePropagatorSettings</name>
        <param>
          <type>const basic_astrodynamics::TorqueModelMap &amp;</type>
          <declname>torqueModelMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyStates</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const RotationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>quaternions</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1100" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1100" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a4c5ad7955a71918959c26bd184044537" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="dd/d74/classtudat_1_1propagators_1_1RotationalStatePropagatorSettings" kindref="compound">RotationalStatePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; RotationalStatePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::rotationalStatePropagatorSettings</definition>
        <argsstring>(const simulation_setup::SelectedTorqueMap &amp;torqueSettingsMap, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyStates, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const RotationalPropagatorType propagator=quaternions, const std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt; dependentVariablesToSave=std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>rotationalStatePropagatorSettings</name>
        <param>
          <type>const simulation_setup::SelectedTorqueMap &amp;</type>
          <declname>torqueSettingsMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyStates</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const RotationalPropagatorType</type>
          <declname>propagator</declname>
          <defval>quaternions</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1116" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1116" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1af762c4cbc002b95e85131f13f90e2004" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="df/de7/classtudat_1_1propagators_1_1MassPropagatorSettings" kindref="compound">MassPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; MassPropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::massPropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; bodiesWithMassToPropagate, const std::map&lt; std::string, std::shared_ptr&lt; basic_astrodynamics::MassRateModel &gt; &gt; &amp;massRateModels, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyMasses, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>massPropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt;</type>
          <declname>bodiesWithMassToPropagate</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::shared_ptr&lt; <ref refid="d2/df8/classtudat_1_1basic__astrodynamics_1_1MassRateModel" kindref="compound">basic_astrodynamics::MassRateModel</ref> &gt; &gt; &amp;</type>
          <declname>massRateModels</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyMasses</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1286" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1286" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1ad87becf649ad09bc63a41eff1f3f9004" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="df/de7/classtudat_1_1propagators_1_1MassPropagatorSettings" kindref="compound">MassPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; MassPropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::massPropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; bodiesWithMassToPropagate, const std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; basic_astrodynamics::MassRateModel &gt; &gt; &gt; &amp;massRateModels, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyMasses, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>massPropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt;</type>
          <declname>bodiesWithMassToPropagate</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; <ref refid="d2/df8/classtudat_1_1basic__astrodynamics_1_1MassRateModel" kindref="compound">basic_astrodynamics::MassRateModel</ref> &gt; &gt; &gt; &amp;</type>
          <declname>massRateModels</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyMasses</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1301" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1301" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1abc5513eba2aa0764a72cdeee67e56295" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="df/de7/classtudat_1_1propagators_1_1MassPropagatorSettings" kindref="compound">MassPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; MassPropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::massPropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; bodiesWithMassToPropagate, const simulation_setup::SelectedMassRateModelMap &amp;massRateSettings, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyMasses, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>massPropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt;</type>
          <declname>bodiesWithMassToPropagate</declname>
        </param>
        <param>
          <type>const simulation_setup::SelectedMassRateModelMap &amp;</type>
          <declname>massRateSettings</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyMasses</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1317" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1317" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a5eb7cfe505a2bedd16d7347861efc6e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="df/de7/classtudat_1_1propagators_1_1MassPropagatorSettings" kindref="compound">MassPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; MassPropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::massPropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; bodiesWithMassToPropagate, const std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; basic_astrodynamics::MassRateModel &gt; &gt; &gt; &amp;massRateModels, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyMasses, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt; dependentVariablesToSave=std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>massPropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt;</type>
          <declname>bodiesWithMassToPropagate</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; <ref refid="d2/df8/classtudat_1_1basic__astrodynamics_1_1MassRateModel" kindref="compound">basic_astrodynamics::MassRateModel</ref> &gt; &gt; &gt; &amp;</type>
          <declname>massRateModels</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyMasses</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1332" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1332" bodyend="1345"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a27ff67a7307aa87538515369e3099574" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="df/de7/classtudat_1_1propagators_1_1MassPropagatorSettings" kindref="compound">MassPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; MassPropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::massPropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; bodiesWithMassToPropagate, const simulation_setup::SelectedMassRateModelMap &amp;massRateSettings, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;initialBodyMasses, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt; dependentVariablesToSave=std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>massPropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt;</type>
          <declname>bodiesWithMassToPropagate</declname>
        </param>
        <param>
          <type>const simulation_setup::SelectedMassRateModelMap &amp;</type>
          <declname>massRateSettings</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>initialBodyMasses</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1348" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1348" bodyend="1360"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a94d0249adf2867e985fb7f63cc921c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; tudat::propagators::convertScalarToVectorStateFunction</definition>
        <argsstring>(const std::function&lt; StateScalarType(const TimeType, const StateScalarType) &gt; stateDerivativeFunction, const TimeType currentTime, const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;currentStateVector)</argsstring>
        <name>convertScalarToVectorStateFunction</name>
        <param>
          <type>const std::function&lt; StateScalarType(const TimeType, const StateScalarType) &gt;</type>
          <declname>stateDerivativeFunction</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>currentTime</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>currentStateVector</declname>
        </param>
        <briefdescription>
<para>Function to evaluate a floating point state-derivative function as though it was a vector state function. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate a floating point state-derivative function as though it was a vector state function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateDerivativeFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to compute the state derivative, as a function of current time and state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which to evaluate the state derivative function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentStateVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of size 1 containing the current state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current state derivative (as vector of size 1). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1371" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1371" bodyend="1382"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a513e226bc0dc3d2651f7dc8ca730dbdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="dc/de9/classtudat_1_1propagators_1_1MultiArcPropagatorSettings" kindref="compound">MultiArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; MultiArcPropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::getExtendedMultiPropagatorSettings</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; singleArcSettings, const std::shared_ptr&lt; MultiArcPropagatorSettings&lt; StateScalarType &gt; &gt; multiArcSettings, const int numberofArcs)</argsstring>
        <name>getExtendedMultiPropagatorSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>singleArcSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/de9/classtudat_1_1propagators_1_1MultiArcPropagatorSettings" kindref="compound">MultiArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>multiArcSettings</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberofArcs</declname>
        </param>
        <briefdescription>
<para>Function to create multi-arc propagator settings by merging an existing multi-arc with single-arc settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create multi-arc propagator settings by merging an existing multi-arc with single-arc settings. The single-arc settings are converted to multi-arc, and the single-arc propagated bodies are appended at the beginning of the vector of propagated bodies. Currently, only translational dynamics is supported. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>singleArcSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Single-arc settings that are to be added (to the head of the list of propagated bodies) of the input multi-arc settings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiArcSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-arc settings that are to be extended </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberofArcs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of arcs in which the single-arc dynamics is to be split </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Multi-arc propagator settings by merging an existing multi-arc with single-arc settings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1478" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1478" bodyend="1591"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a5ea558ad3898f8f30bc9bf942f198794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int tudat::propagators::getMultiTypePropagatorStateSize</definition>
        <argsstring>(const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &gt; &gt; &amp;propagatorSettingsList)</argsstring>
        <name>getMultiTypePropagatorStateSize</name>
        <param>
          <type>const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>propagatorSettingsList</declname>
        </param>
        <briefdescription>
<para>Function to retrieve the state size for a list of propagator settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the initial state for a list of propagator settings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettingsList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of propagator settings (sorted by type as key). Map value provides list of propagator settings for given type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector of initial states, sorted in order of IntegratedStateType, and then in the order of the vector of <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref> of given type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1602" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1602" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a3115fa0bdb31abdfd4c01b8dee3f8f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int tudat::propagators::getMultiTypePropagatorConventionalStateSize</definition>
        <argsstring>(const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &gt; &gt; &amp;propagatorSettingsList)</argsstring>
        <name>getMultiTypePropagatorConventionalStateSize</name>
        <param>
          <type>const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>propagatorSettingsList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1622" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1622" bodyend="1639"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1adefe80408801e0220bfc466da942a016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; tudat::propagators::createCombinedInitialState</definition>
        <argsstring>(const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &gt; &gt; &amp;propagatorSettingsList)</argsstring>
        <name>createCombinedInitialState</name>
        <param>
          <type>const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>propagatorSettingsList</declname>
        </param>
        <briefdescription>
<para>Function to retrieve the initial state for a list of propagator settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the initial state for a list of propagator settings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettingsList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of propagator settings (sorted by type as key). Map value provides list of propagator settings for given type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector of initial states, sorted in order of IntegratedStateType, and then in the order of the vector of <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref> of given type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1650" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1650" bodyend="1676"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1adf500eb8fcac79aa7ea0daeb4e1070a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d7/d44/classtudat_1_1propagators_1_1MultiTypePropagatorSettings" kindref="compound">MultiTypePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; MultiTypePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::multiTypePropagatorSettings</definition>
        <argsstring>(const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &gt; &gt; propagatorSettingsMap, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>multiTypePropagatorSettings</name>
        <param>
          <type>const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &gt; &gt;</type>
          <declname>propagatorSettingsMap</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1883" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1883" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a64ad9cdc9498cadb6711381810bee68d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d7/d44/classtudat_1_1propagators_1_1MultiTypePropagatorSettings" kindref="compound">MultiTypePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; MultiTypePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::multiTypePropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &gt; propagatorSettingsVector, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const std::shared_ptr&lt; DependentVariableSaveSettings &gt; dependentVariablesToSave=std::shared_ptr&lt; DependentVariableSaveSettings &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>multiTypePropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &gt;</type>
          <declname>propagatorSettingsVector</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">DependentVariableSaveSettings</ref> &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1896" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1896" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a8187fa025235854fe6413377cea6305d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d7/d44/classtudat_1_1propagators_1_1MultiTypePropagatorSettings" kindref="compound">MultiTypePropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; MultiTypePropagatorSettings&lt; StateScalarType &gt; &gt; tudat::propagators::multiTypePropagatorSettings</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; &gt; propagatorSettingsVector, const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt; dependentVariablesToSave=std::vector&lt; std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; &gt;(), const double printInterval=TUDAT_NAN)</argsstring>
        <name>multiTypePropagatorSettings</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt; &gt;</type>
          <declname>propagatorSettingsVector</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;</type>
          <declname>dependentVariablesToSave</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>printInterval</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1908" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1908" bodyend="1918"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1af90566c130a35d9bffe2e067bf9d9892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>basic_astrodynamics::AccelerationMap</type>
        <definition>basic_astrodynamics::AccelerationMap tudat::propagators::getAccelerationMapFromPropagatorSettings</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; singleArcPropagatorSettings)</argsstring>
        <name>getAccelerationMapFromPropagatorSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>singleArcPropagatorSettings</declname>
        </param>
        <briefdescription>
<para>Function to retrieve list of accelerations from propagator settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve list of accelerations from propagator settings. Extracts the translational dynamics elements, and the associated acceleration models <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>singleArcPropagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Propagator settings </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of acceleration models </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="1951" column="38" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="1951" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1acb1b4c6024fad5370a9d7778e103e358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; IntegratedStateType, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &gt;</type>
        <definition>std::map&lt; IntegratedStateType, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &gt; tudat::propagators::getIntegratedTypeAndBodyList</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings)</argsstring>
        <name>getIntegratedTypeAndBodyList</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <briefdescription>
<para>Function to retrieve the list of integrated state types and reference ids. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the list of integrated state types and reference ids. For translational and rotational dynamics, the id refers only to the body being propagated (and the second entry of the pair is empty: &quot;&quot;). For proper time propagation, a body and a reference point may be provided, resulting in non-empty first and second pair entries. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings that are to be used for the propagation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of integrated state types and reference ids </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="2000" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="2000" bodyend="2126"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a316bd9f2afb5b3089ee29eb2214a0194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::resetSingleArcInitialStates</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::map&lt; propagators::IntegratedStateType, std::map&lt; std::pair&lt; std::string, std::string &gt;, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; currentArcInitialStates)</argsstring>
        <name>resetSingleArcInitialStates</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::map&lt; propagators::IntegratedStateType, std::map&lt; std::pair&lt; std::string, std::string &gt;, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt;</type>
          <declname>currentArcInitialStates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="2129" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" bodystart="2129" bodyend="2175"/>
      </memberdef>
      <memberdef kind="function" id="db/da1/propagationSettings_8h_1a0303fcbb7fdef347619b6756594f386d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::map&lt; IntegratedStateType, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &gt;</type>
        <definition>template std::map&lt; IntegratedStateType, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &gt; tudat::propagators::getIntegratedTypeAndBodyList&lt; double &gt;</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; double &gt; &gt; propagatorSettings)</argsstring>
        <name>getIntegratedTypeAndBodyList&lt; double &gt;</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" line="2178" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationSettings.h" declline="2178" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7f/propagationTermination_8h_1a2e91b55ec5e6b8b4d09223941cf4ddd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d39/classtudat_1_1propagators_1_1PropagationTerminationCondition" kindref="compound">PropagationTerminationCondition</ref> &gt;</type>
        <definition>std::shared_ptr&lt; PropagationTerminationCondition &gt; tudat::propagators::createPropagationTerminationConditions</definition>
        <argsstring>(const std::shared_ptr&lt; PropagationTerminationSettings &gt; terminationSettings, const simulation_setup::SystemOfBodies &amp;bodies, const double initialTimeStep)</argsstring>
        <name>createPropagationTerminationConditions</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTimeStep</declname>
        </param>
        <briefdescription>
<para>Function to create propagation termination conditions from associated settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create propagation termination conditions from associated settings <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>terminationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for propagation termination conditions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that contains all environment models </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTimeStep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> step at first call of numerical integration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object used to check whether propagation is to be stopped or not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationTermination.cpp" line="118" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationTermination.cpp" bodystart="118" bodyend="211" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTermination.h" declline="401" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d0b/propagationTerminationSettings_8h_1a84b7e00c1466367d1ddd6d88999bc92b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; PropagationTerminationSettings &gt; tudat::propagators::propagationDependentVariableTerminationSettings</definition>
        <argsstring>(const std::shared_ptr&lt; SingleDependentVariableSaveSettings &gt; dependentVariableSettings, const double limitValue, const bool useAsLowerLimit, const bool checkTerminationToExactCondition=false, const std::shared_ptr&lt; root_finders::RootFinderSettings &gt; terminationRootFinderSettings=nullptr)</argsstring>
        <name>propagationDependentVariableTerminationSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d95/classtudat_1_1propagators_1_1SingleDependentVariableSaveSettings" kindref="compound">SingleDependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariableSettings</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>limitValue</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useAsLowerLimit</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>checkTerminationToExactCondition</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d7b/classtudat_1_1root__finders_1_1RootFinderSettings" kindref="compound">root_finders::RootFinderSettings</ref> &gt;</type>
          <declname>terminationRootFinderSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" line="258" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" bodystart="258" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="db/d0b/propagationTerminationSettings_8h_1a302d03c09d71a9425b667b0ee72be15a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; PropagationTerminationSettings &gt; tudat::propagators::propagationTimeTerminationSettings</definition>
        <argsstring>(const double terminationTime, const bool checkTerminationToExactCondition=false)</argsstring>
        <name>propagationTimeTerminationSettings</name>
        <param>
          <type>const double</type>
          <declname>terminationTime</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>checkTerminationToExactCondition</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" line="270" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" bodystart="270" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="db/d0b/propagationTerminationSettings_8h_1a87d22532a94714827ea7d3ae476416df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; PropagationTerminationSettings &gt; tudat::propagators::propagationCPUTimeTerminationSettings</definition>
        <argsstring>(const double cpuTerminationTime)</argsstring>
        <name>propagationCPUTimeTerminationSettings</name>
        <param>
          <type>const double</type>
          <declname>cpuTerminationTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" line="278" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" bodystart="278" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="db/d0b/propagationTerminationSettings_8h_1a59b7ff9797ee8af885bd6ce60bd9583d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; PropagationTerminationSettings &gt; tudat::propagators::propagationHybridTerminationSettings</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; PropagationTerminationSettings &gt; &gt; terminationSettings, const bool fulfillSingleCondition=false)</argsstring>
        <name>propagationHybridTerminationSettings</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt; &gt;</type>
          <declname>terminationSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>fulfillSingleCondition</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" line="285" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" bodystart="285" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="db/d0b/propagationTerminationSettings_8h_1a71d11cc6a5bfa1968b01347a44f96e56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d0e/classtudat_1_1propagators_1_1PropagationTerminationSettings" kindref="compound">PropagationTerminationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; PropagationTerminationSettings &gt; tudat::propagators::popagationCustomTerminationSettings</definition>
        <argsstring>(const std::function&lt; bool(const double) &gt; checkStopCondition)</argsstring>
        <name>popagationCustomTerminationSettings</name>
        <param>
          <type>const std::function&lt; bool(const double) &gt;</type>
          <declname>checkStopCondition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" line="293" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationTerminationSettings.h" bodystart="293" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1a752cd4bbc288860ddb495e7ec2e35d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &gt; tudat::propagators::createStateInterpolator</definition>
        <argsstring>(const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &amp;stateMap)</argsstring>
        <name>createStateInterpolator</name>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &amp;</type>
          <declname>stateMap</declname>
        </param>
        <briefdescription>
<para>Function to create an interpolator for the new translational state of a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an interpolator for the new translational state of a body. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateMap</parametername>
</parameternamelist>
<parameterdescription>
<para>New state history, w.r.t. the required ephemeris origin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lagrange interpolator (order 6) that produces the required continuous state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="38" column="1" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1aa6bac42ef83212e91add703410239f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateTimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
          <param>
            <type>typename EphemerisTimeType</type>
          </param>
          <param>
            <type>typename EphemerisScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::resetIntegratedEphemerisOfBody</definition>
        <argsstring>(const std::map&lt; StateTimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &amp;ephemerisInput, const std::shared_ptr&lt; ephemerides::TabulatedCartesianEphemeris&lt; EphemerisScalarType, EphemerisTimeType &gt; &gt; tabulatedEphemeris)</argsstring>
        <name>resetIntegratedEphemerisOfBody</name>
        <param>
          <type>const std::map&lt; StateTimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &amp;</type>
          <declname>ephemerisInput</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d8e/classtudat_1_1ephemerides_1_1TabulatedCartesianEphemeris" kindref="compound">ephemerides::TabulatedCartesianEphemeris</ref>&lt; EphemerisScalarType, EphemerisTimeType &gt; &gt;</type>
          <declname>tabulatedEphemeris</declname>
        </param>
        <briefdescription>
<para>Function to reset the tabulated ephemeris of a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to reset the tabulated ephemeris of a body <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ephemerisInput</parametername>
</parameternamelist>
<parameterdescription>
<para>New state history that is to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tabulatedEphemeris</parametername>
</parameternamelist>
<parameterdescription>
<para>Ephemeris in which the ephemerisInput is to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="48" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="48" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1ad4fa5fc631f6bb52610c869f23efc38c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::resetIntegratedEphemerisOfBody</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &amp;ephemerisInput, const std::string &amp;bodyToIntegrate)</argsstring>
        <name>resetIntegratedEphemerisOfBody</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &amp;</type>
          <declname>ephemerisInput</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToIntegrate</declname>
        </param>
        <briefdescription>
<para>Function to reset the tabulated ephemeris of a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to reset the tabulated ephemeris of a body, this requires the requested body to possess an ephemeris of type TabulatedCartesianEphemeris&lt; StateScalarType, TimeType &gt; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies used in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisInput</parametername>
</parameternamelist>
<parameterdescription>
<para>New state history of the body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which the ephemeris is to be reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="70" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="70" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1af9cb6a8fe0be07bdaaf3748f505be86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::convertNumericalSolutionToEphemerisInput</definition>
        <argsstring>(const int bodyIndex, const int startIndex, const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;equationsOfMotionNumericalSolution, std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &amp;ephemerisTable, const std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; integrationToEphemerisFrameFunction=nullptr)</argsstring>
        <name>convertNumericalSolutionToEphemerisInput</name>
        <param>
          <type>const int</type>
          <declname>bodyIndex</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <param>
          <type>std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &amp;</type>
          <declname>ephemerisTable</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt;</type>
          <declname>integrationToEphemerisFrameFunction</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Function to convert output of translational motion to input for the ephemeris. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert output of translational motion from the numerical integrator to the required input for the ephemeris. It extracts the state history of a single body from the full list of integrated states Additionally, it changes the origin of the reference frame in which the states are given, by using the integrationToEphemerisFrameFunction input variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of integrated body for which the state is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in entries of equationsOfMotionNumericalSolution where the translational states start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Full numerical solution of numerical integrator, already converted to Cartesian states (w.r.t. the integration origin of the body of bodyIndex) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisTable</parametername>
</parameternamelist>
<parameterdescription>
<para>State history of body bodyIndex w.r.t. the origin with which its ephemeris is defined (returned by reference). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrationToEphemerisFrameFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to provide the state of the ephemeris origin of the current body w.r.t. its integration origin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="160" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="160" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1a6ace192c2ddf95aef2ee5c147e2b5c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::getSingleBodyStateHistoryFromPropagationOutpiut</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const int translationalStateStartIndex, const std::string &amp;bodyForWhichToRetrieveState, const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;equationsOfMotionNumericalSolution, std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &amp;ephemerisInput, int &amp;bodyIndex, const std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt; &amp;integrationToEphemerisFrameFunctions=std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt;())</argsstring>
        <name>getSingleBodyStateHistoryFromPropagationOutpiut</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>translationalStateStartIndex</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyForWhichToRetrieveState</declname>
        </param>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <param>
          <type>std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; &gt; &amp;</type>
          <declname>ephemerisInput</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>bodyIndex</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt; &amp;</type>
          <declname>integrationToEphemerisFrameFunctions</declname>
          <defval>std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to extract the numerical solution for the translational dynamics of a single body from full propagation history. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to extract the numerical solution for the translational dynamics of a single body from full propagation history. Function can perform frame translation if required. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of names of bodies which are numericall integrated (in the order in which they are in the equationsOfMotionNumericalSolution map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>translationalStateStartIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in entries of equationsOfMotionNumericalSolution where the translational states start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyForWhichToRetrieveState</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which the states are to be extracted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical solution of dynamics, with translational results in Cartesian elements w.r.t. integratation origins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisInput</parametername>
</parameternamelist>
<parameterdescription>
<para>State history of requested body (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of bodyForWhichToRetrieveState in bodiesToIntegrate (returned by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrationToEphemerisFrameFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to provide the states of the ephemeris origins of each body w.r.t. their respective integration origins. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="210" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="210" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1acd1c56c9bcf545edabca6baa4be0646f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::createAndSetInterpolatorsForEphemerides</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const int startIndex, const std::vector&lt; std::string &gt; &amp;ephemerisUpdateOrder, const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;equationsOfMotionNumericalSolution, const std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt; &amp;integrationToEphemerisFrameFunctions=std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt;())</argsstring>
        <name>createAndSetInterpolatorsForEphemerides</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>ephemerisUpdateOrder</declname>
        </param>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt; &amp;</type>
          <declname>integrationToEphemerisFrameFunctions</declname>
          <defval>std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Create and reset ephemerides interpolator. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates and resets the interpolator for the ephemerides of the integrated bodies from the numerical integration results. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies used in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of names of bodies which are numericall integrated (in the order in which they are in the equationsOfMotionNumericalSolution map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in entries of equationsOfMotionNumericalSolution where the translational states start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisUpdateOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Order in which to update the ephemeris objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical solution of translational equations of motion, in Cartesian elements w.r.t. integratation origins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrationToEphemerisFrameFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to provide the states of the ephemeris origins of each body w.r.t. their respective integration origins. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="259" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="259" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1aa385f29a53c56f6f84448fee293e8eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::resetIntegratedEphemerides</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;equationsOfMotionNumericalSolution, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const std::pair&lt; unsigned int, unsigned int &gt; startIndexAndSize, std::vector&lt; std::string &gt; ephemerisUpdateOrder=std::vector&lt; std::string &gt;(), const std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt; &amp;integrationToEphemerisFrameFunctions=std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt;())</argsstring>
        <name>resetIntegratedEphemerides</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const std::pair&lt; unsigned int, unsigned int &gt;</type>
          <declname>startIndexAndSize</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>ephemerisUpdateOrder</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt; &amp;</type>
          <declname>integrationToEphemerisFrameFunctions</declname>
          <defval>std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Resets the ephemerides of the integrated bodies from the numerical integration results. </para>
        </briefdescription>
        <detaileddescription>
<para>Resets the ephemerides of the integrated bodies from the numerical integration results, and performs associated computation for ephemeris-dependent environment variables. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies used in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of names of bodies which are numerically integrated (in the order in which they are in the equationsOfMotionNumericalSolution map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndexAndSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair with start index and total (contiguous) size of integrated states in entries of equationsOfMotionNumericalSolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisUpdateOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Order in which to update the ephemeris objects (empty if arbitrary). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical solution of translational equations of motion, in Cartesian elements w.r.t. integratation origins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrationToEphemerisFrameFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to provide the states of the ephemeris origins of each body w.r.t. their respective integration origins. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="302" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="302" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1a6631f96192e2181d80d3bfdc34e4beea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::resetMultiArcIntegratedEphemerides</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; &amp;equationsOfMotionNumericalSolution, const std::vector&lt; double &gt; arcStartTimes, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const std::pair&lt; unsigned int, unsigned int &gt; startIndexAndSize, std::vector&lt; std::string &gt; ephemerisUpdateOrder=std::vector&lt; std::string &gt;(), const std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt; &amp;integrationToEphemerisFrameFunctions=std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt;())</argsstring>
        <name>resetMultiArcIntegratedEphemerides</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>arcStartTimes</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const std::pair&lt; unsigned int, unsigned int &gt;</type>
          <declname>startIndexAndSize</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>ephemerisUpdateOrder</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt; &amp;</type>
          <declname>integrationToEphemerisFrameFunctions</declname>
          <defval>std::map&lt; std::string, std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType) &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Resets the ephemerides of the integrated bodies from the numerical multi-arc integration results. </para>
        </briefdescription>
        <detaileddescription>
<para>Resets the ephemerides of the integrated bodies from the numerical multi-arc integration results, and performs associated computation for ephemeris-dependent environment variables. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies used in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical multi-arc solution of translational equations of motion, in Cartesian elements w.r.t. integratation origins (one vector entry represents one arc). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcStartTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>List of start times of the propagation arcs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of names of bodies which are numerically integrated (in the order in which they are in the equationsOfMotionNumericalSolution map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndexAndSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair with start index and total (contiguous) size of integrated states in entries of equationsOfMotionNumericalSolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisUpdateOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Order in which to update the ephemeris objects (empty if arbitrary). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrationToEphemerisFrameFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to provide the states of the ephemeris origins of each body w.r.t. their respective integration origins. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="358" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="358" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1a7e55bd87e522292899e80ac0f8d255c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::resetIntegratedRotationalEphemerisOfBody</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 7, 1 &gt; &gt; &gt; rotationalEphemerisInterpolator, const std::string bodyToIntegrate)</argsstring>
        <name>resetIntegratedRotationalEphemerisOfBody</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 7, 1 &gt; &gt; &gt;</type>
          <declname>rotationalEphemerisInterpolator</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyToIntegrate</declname>
        </param>
        <briefdescription>
<para>Function to reset the tabulated rotational ephemeris of a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to reset the tabulatedrotational ephemeris of a body, this requires the requested body to possess a rotational ephemeris of type TabulatedRotationalEphemeris&lt; StateScalarType, TimeType &gt; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies used in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationalEphemerisInterpolator</parametername>
</parameternamelist>
<parameterdescription>
<para>New rotational state history of the body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which the rotational ephemeris is to be reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="443" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="443" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1acd2975ad211f544eb5c2b68dab4d2c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::convertNumericalSolutionToRotationalEphemerisInput</definition>
        <argsstring>(const int startIndex, const int bodyIndex, std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 7, 1 &gt; &gt; &amp;ephemerisTable, const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;equationsOfMotionNumericalSolution)</argsstring>
        <name>convertNumericalSolutionToRotationalEphemerisInput</name>
        <param>
          <type>const int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>bodyIndex</declname>
        </param>
        <param>
          <type>std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 7, 1 &gt; &gt; &amp;</type>
          <declname>ephemerisTable</declname>
        </param>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <briefdescription>
<para>Function to convert output of rotational motion to input for the rotational ephemeris. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert output of rotational motion from the numerical integrator to the required input for the rotational ephemeris. It extracts the state history of a single body from the full list of integrated states. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in entries of equationsOfMotionNumericalSolution where the rotational states start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of integrated body for which the state is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemerisTable</parametername>
</parameternamelist>
<parameterdescription>
<para>State history of body bodyIndex w.r.t. the origin with which its ephemeris is defined (returned by reference). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Full numerical solution of numerical integrator, already converted to Cartesian states (w.r.t. the integration origin of the body of bodyIndex) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="487" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="487" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1a69768174e31d57ea6ff4a5b55453ab05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 7, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 7, 1 &gt; &gt; &gt; tudat::propagators::createRotationalStateInterpolator</definition>
        <argsstring>(const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 7, 1 &gt; &gt; &amp;stateMap)</argsstring>
        <name>createRotationalStateInterpolator</name>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, 7, 1 &gt; &gt; &amp;</type>
          <declname>stateMap</declname>
        </param>
        <briefdescription>
<para>Function to create an interpolator for the new rotational state of a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an interpolator for the new rotational state of a body. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateMap</parametername>
</parameternamelist>
<parameterdescription>
<para>New rotational state history. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lagrange interpolator (order 6) that produces the required continuous rotational state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="519" column="1" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" declline="519" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1a555700aa918a4eeacb07d7d5e1328869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::createAndSetInterpolatorsForRotationalEphemerides</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const int startIndex, const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;equationsOfMotionNumericalSolution)</argsstring>
        <name>createAndSetInterpolatorsForRotationalEphemerides</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <briefdescription>
<para>Function to reset the tabulated rotational ephemeris of a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to reset the tabulated rotational ephemeris of a body <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies used in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of names of bodies for which rotational state is numerically integrated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in the state vector where the rotational state starts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>New rotational state history that is to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="531" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="531" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1aa0581e3fc8657103b8a4bfd72dea6276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::resetIntegratedRotationalEphemerides</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;equationsOfMotionNumericalSolution, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const std::pair&lt; unsigned int, unsigned int &gt; startIndexAndSize)</argsstring>
        <name>resetIntegratedRotationalEphemerides</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const std::pair&lt; unsigned int, unsigned int &gt;</type>
          <declname>startIndexAndSize</declname>
        </param>
        <briefdescription>
<para>Resets the rotational ephemerides of a set of bodies from the numerical integration results. </para>
        </briefdescription>
        <detaileddescription>
<para>Resets the rotational ephemerides of a set of bodies from the numerical integration results, and performs associated computation for ephemeris-dependent environment variables. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies used in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical solution of rotational equations of motion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of names of bodies which are numerically integrated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndexAndSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair with start index and total (contiguous) size of integrated states in entries of equationsOfMotionNumericalSolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="566" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="566" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1ae177212aaf0263e05ee88e3e52d63dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::resetIntegratedBodyMass</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;equationsOfMotionNumericalSolution, const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const std::pair&lt; unsigned int, unsigned int &gt; startIndexAndSize)</argsstring>
        <name>resetIntegratedBodyMass</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const std::pair&lt; unsigned int, unsigned int &gt;</type>
          <declname>startIndexAndSize</declname>
        </param>
        <briefdescription>
<para>Resets the mass models of the integrated bodies from the numerical integration results. </para>
        </briefdescription>
        <detaileddescription>
<para>Resets the mass models of the integrated bodies from the numerical integration results. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies used in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical solution of the body masses. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of names of bodies for which mass is numerically integrated (in the order in which they are in the equationsOfMotionNumericalSolution map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndexAndSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair with start index and total (contiguous) size of integrated states in entries of equationsOfMotionNumericalSolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="595" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="595" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1a562c744ab99ec747b7dad0600b6dd272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::propagators::checkTranslationalStatesFeasibility</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;bodiesToIntegrate, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>checkTranslationalStatesFeasibility</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodiesToIntegrate</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function checking feasibility of resetting the translational dynamics. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check the feasibility of resetting the translational dynamics of a set of bodies. Function throws error if not feasible. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodiesToIntegrate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies to integrate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies used in simulations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" line="22" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" bodystart="22" bodyend="66" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" declline="923" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1a8b3b336dd299accb023d18d174e1864e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d3/db5/classtudat_1_1propagators_1_1IntegratedStateProcessor" kindref="compound">IntegratedStateProcessor</ref>&lt; TimeType, StateScalarType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; IntegratedStateType,std::vector&lt; std::shared_ptr&lt; IntegratedStateProcessor&lt; TimeType, StateScalarType &gt; &gt; &gt; &gt; tudat::propagators::createIntegratedStateProcessors</definition>
        <argsstring>(const std::shared_ptr&lt; SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; ephemerides::ReferenceFrameManager &gt; frameManager, const int startIndex=0)</argsstring>
        <name>createIntegratedStateProcessors</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/d1b/classtudat_1_1ephemerides_1_1ReferenceFrameManager" kindref="compound">ephemerides::ReferenceFrameManager</ref> &gt;</type>
          <declname>frameManager</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>startIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Function to create list objects for processing numerically integrated results. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create list objects for processing numerically integrated results, so that all results are set in the environment models (i.e. resetting tabulated ephemeris for translational dynamics). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the propagation that is used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that represents the environemnt </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameManager</parametername>
</parameternamelist>
<parameterdescription>
<para>Object for providinf conversion functions between different ephemeris origins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of state vector where the state entries handled with propagatorSettings starts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List objects for processing numerically integrated results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="942" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="942" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1ac62080103493a5e8ef90261d107f7b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::resetIntegratedStates</definition>
        <argsstring>(const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;equationsOfMotionNumericalSolution, const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; IntegratedStateProcessor&lt; TimeType, StateScalarType &gt; &gt; &gt; &gt; integratedStateProcessors)</argsstring>
        <name>resetIntegratedStates</name>
        <param>
          <type>const std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <param>
          <type>const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d3/db5/classtudat_1_1propagators_1_1IntegratedStateProcessor" kindref="compound">IntegratedStateProcessor</ref>&lt; TimeType, StateScalarType &gt; &gt; &gt; &gt;</type>
          <declname>integratedStateProcessors</declname>
        </param>
        <briefdescription>
<para>Function resetting dynamical properties of environment from numerical dynamics solution. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to reset the dynamical properties of the environment from the numerically integrated dynamics solution <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Solution produced by the numerical integration, in the &apos;conventional form&apos; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative_1aeab2b2a9eae937200a5def64dcf18960" kindref="member">SingleStateTypeDerivative::convertToOutputSolution</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integratedStateProcessors</parametername>
</parameternamelist>
<parameterdescription>
<para>List of objects (per dynamics type) used to process integrated results into environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="1092" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="1092" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5b/setNumericallyIntegratedStates_8h_1a06c6e5104d8379d14e9163d257ba3125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::propagators::resetIntegratedMultiArcStatesWithEqualArcDynamics</definition>
        <argsstring>(const std::vector&lt; std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; &amp;equationsOfMotionNumericalSolution, const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; IntegratedStateProcessor&lt; TimeType, StateScalarType &gt; &gt; &gt; &gt; integratedStateProcessors, const std::vector&lt; double &gt; &amp;arcStartTimes)</argsstring>
        <name>resetIntegratedMultiArcStatesWithEqualArcDynamics</name>
        <param>
          <type>const std::vector&lt; std::map&lt; TimeType, Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; &amp;</type>
          <declname>equationsOfMotionNumericalSolution</declname>
        </param>
        <param>
          <type>const std::map&lt; IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d3/db5/classtudat_1_1propagators_1_1IntegratedStateProcessor" kindref="compound">IntegratedStateProcessor</ref>&lt; TimeType, StateScalarType &gt; &gt; &gt; &gt;</type>
          <declname>integratedStateProcessors</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>arcStartTimes</declname>
        </param>
        <briefdescription>
<para>Function resetting dynamical properties of environment from numerical multi-arc dynamics solution. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to reset the dynamical properties of the environment from the numerically integrated multi-arc dynamics solution <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>equationsOfMotionNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Solution produced by the numerical integration, in the &apos;conventional form&apos;. One vector entry contains the data for one arc </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative_1aeab2b2a9eae937200a5def64dcf18960" kindref="member">SingleStateTypeDerivative::convertToOutputSolution</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integratedStateProcessors</parametername>
</parameternamelist>
<parameterdescription>
<para>List of objects (per dynamics type) used to process integrated results into environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcStartTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>List of start times of the propagation arcs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" line="1121" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/setNumericallyIntegratedStates.h" bodystart="1121" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="db/d6e/setNumericallyIntegratedStates_8cpp_1af7289291b4fec10ea41e8e0f2a2573f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; double, Eigen::Matrix&lt; double, 6, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; double, Eigen::Matrix&lt; double, 6, 1 &gt; &gt; &gt; tudat::propagators::createStateInterpolator</definition>
        <argsstring>(const std::map&lt; double, Eigen::Matrix&lt; double, 6, 1 &gt; &gt; &amp;stateMap)</argsstring>
        <name>createStateInterpolator</name>
        <param>
          <type>const std::map&lt; double, Eigen::Matrix&lt; double, 6, 1 &gt; &gt; &amp;</type>
          <declname>stateMap</declname>
        </param>
        <briefdescription>
<para>Function to create an interpolator for the new translational state of a body. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" line="71" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="db/d6e/setNumericallyIntegratedStates_8cpp_1a7600337b602bb3ffe16262d0e2d107dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; double, Eigen::Matrix&lt; long double, 6, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; double, Eigen::Matrix&lt; long double, 6, 1 &gt; &gt; &gt; tudat::propagators::createStateInterpolator</definition>
        <argsstring>(const std::map&lt; double, Eigen::Matrix&lt; long double, 6, 1 &gt; &gt; &amp;stateMap)</argsstring>
        <name>createStateInterpolator</name>
        <param>
          <type>const std::map&lt; double, Eigen::Matrix&lt; long double, 6, 1 &gt; &gt; &amp;</type>
          <declname>stateMap</declname>
        </param>
        <briefdescription>
<para>Function to create an interpolator for the new translational state of a body. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" line="81" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="db/d6e/setNumericallyIntegratedStates_8cpp_1a5c08db9d6b3ed740d8f201470cef9b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>, Eigen::Matrix&lt; long double, 6, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; Time, Eigen::Matrix&lt; long double, 6, 1 &gt; &gt; &gt; tudat::propagators::createStateInterpolator</definition>
        <argsstring>(const std::map&lt; Time, Eigen::Matrix&lt; long double, 6, 1 &gt; &gt; &amp;stateMap)</argsstring>
        <name>createStateInterpolator</name>
        <param>
          <type>const std::map&lt; <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>, Eigen::Matrix&lt; long double, 6, 1 &gt; &gt; &amp;</type>
          <declname>stateMap</declname>
        </param>
        <briefdescription>
<para>Function to create an interpolator for the new translational state of a body. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" line="90" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="db/d6e/setNumericallyIntegratedStates_8cpp_1a79345245361129e5387e280654551d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>, Eigen::Matrix&lt; double, 6, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; Time, Eigen::Matrix&lt; double, 6, 1 &gt; &gt; &gt; tudat::propagators::createStateInterpolator</definition>
        <argsstring>(const std::map&lt; Time, Eigen::Matrix&lt; double, 6, 1 &gt; &gt; &amp;stateMap)</argsstring>
        <name>createStateInterpolator</name>
        <param>
          <type>const std::map&lt; <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>, Eigen::Matrix&lt; double, 6, 1 &gt; &gt; &amp;</type>
          <declname>stateMap</declname>
        </param>
        <briefdescription>
<para>Function to create an interpolator for the new translational state of a body. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" line="100" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="db/d6e/setNumericallyIntegratedStates_8cpp_1a05f4ebe09052c737cee8a34db62bd0f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; double, Eigen::Matrix&lt; double, 7, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; double, Eigen::Matrix&lt; double, 7, 1 &gt; &gt; &gt; tudat::propagators::createRotationalStateInterpolator</definition>
        <argsstring>(const std::map&lt; double, Eigen::Matrix&lt; double, 7, 1 &gt; &gt; &amp;stateMap)</argsstring>
        <name>createRotationalStateInterpolator</name>
        <param>
          <type>const std::map&lt; double, Eigen::Matrix&lt; double, 7, 1 &gt; &gt; &amp;</type>
          <declname>stateMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" line="109" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="db/d6e/setNumericallyIntegratedStates_8cpp_1acf9d3f1ce858d9edfed26423ec883829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; double, Eigen::Matrix&lt; long double, 7, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; double, Eigen::Matrix&lt; long double, 7, 1 &gt; &gt; &gt; tudat::propagators::createRotationalStateInterpolator</definition>
        <argsstring>(const std::map&lt; double, Eigen::Matrix&lt; long double, 7, 1 &gt; &gt; &amp;stateMap)</argsstring>
        <name>createRotationalStateInterpolator</name>
        <param>
          <type>const std::map&lt; double, Eigen::Matrix&lt; long double, 7, 1 &gt; &gt; &amp;</type>
          <declname>stateMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" line="116" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="db/d6e/setNumericallyIntegratedStates_8cpp_1ac69a9f7c806b982a5d5f60dc2cb6f328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>, Eigen::Matrix&lt; double, 7, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; Time, Eigen::Matrix&lt; double, 7, 1 &gt; &gt; &gt; tudat::propagators::createRotationalStateInterpolator</definition>
        <argsstring>(const std::map&lt; Time, Eigen::Matrix&lt; double, 7, 1 &gt; &gt; &amp;stateMap)</argsstring>
        <name>createRotationalStateInterpolator</name>
        <param>
          <type>const std::map&lt; <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>, Eigen::Matrix&lt; double, 7, 1 &gt; &gt; &amp;</type>
          <declname>stateMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" line="123" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="db/d6e/setNumericallyIntegratedStates_8cpp_1a329a5458574e3727f54bfe02c165e863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>, Eigen::Matrix&lt; long double, 7, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; Time, Eigen::Matrix&lt; long double, 7, 1 &gt; &gt; &gt; tudat::propagators::createRotationalStateInterpolator</definition>
        <argsstring>(const std::map&lt; Time, Eigen::Matrix&lt; long double, 7, 1 &gt; &gt; &amp;stateMap)</argsstring>
        <name>createRotationalStateInterpolator</name>
        <param>
          <type>const std::map&lt; <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>, Eigen::Matrix&lt; long double, 7, 1 &gt; &gt; &amp;</type>
          <declname>stateMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" line="130" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/setNumericallyIntegratedStates.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/propagators/bodyMassStateDerivative.h" line="28" column="1"/>
  </compounddef>
</doxygen>
