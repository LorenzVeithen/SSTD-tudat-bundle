<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d2/df9/namespacetudat_1_1observation__models" kind="namespace" language="C++">
    <compoundname>tudat::observation_models</compoundname>
    <innerclass refid="da/dbf/classtudat_1_1observation__models_1_1AngularPositionObservationModel" prot="public">tudat::observation_models::AngularPositionObservationModel</innerclass>
    <innerclass refid="dd/db4/classtudat_1_1observation__models_1_1FirstOrderLightTimeCorrectionCalculator" prot="public">tudat::observation_models::FirstOrderLightTimeCorrectionCalculator</innerclass>
    <innerclass refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" prot="public">tudat::observation_models::LightTimeCorrection</innerclass>
    <innerclass refid="de/d5a/classtudat_1_1observation__models_1_1EulerAngle313ObservationModel" prot="public">tudat::observation_models::EulerAngle313ObservationModel</innerclass>
    <innerclass refid="df/d3a/classtudat_1_1observation__models_1_1LightTimeCorrectionFunctionWrapper" prot="public">tudat::observation_models::LightTimeCorrectionFunctionWrapper</innerclass>
    <innerclass refid="d2/db1/classtudat_1_1observation__models_1_1LightTimeCalculator" prot="public">tudat::observation_models::LightTimeCalculator</innerclass>
    <innerclass refid="d2/d93/classtudat_1_1observation__models_1_1NWayRangeObservationModel" prot="public">tudat::observation_models::NWayRangeObservationModel</innerclass>
    <innerclass refid="d8/dab/classtudat_1_1observation__models_1_1ObservationBias" prot="public">tudat::observation_models::ObservationBias</innerclass>
    <innerclass refid="d8/de9/classtudat_1_1observation__models_1_1ConstantObservationBias" prot="public">tudat::observation_models::ConstantObservationBias</innerclass>
    <innerclass refid="db/d53/classtudat_1_1observation__models_1_1ConstantArcWiseObservationBias" prot="public">tudat::observation_models::ConstantArcWiseObservationBias</innerclass>
    <innerclass refid="d9/d74/classtudat_1_1observation__models_1_1ConstantRelativeObservationBias" prot="public">tudat::observation_models::ConstantRelativeObservationBias</innerclass>
    <innerclass refid="d3/d92/classtudat_1_1observation__models_1_1ConstantRelativeArcWiseObservationBias" prot="public">tudat::observation_models::ConstantRelativeArcWiseObservationBias</innerclass>
    <innerclass refid="dd/dce/classtudat_1_1observation__models_1_1MultiTypeObservationBias" prot="public">tudat::observation_models::MultiTypeObservationBias</innerclass>
    <innerclass refid="d6/d5d/classtudat_1_1observation__models_1_1ObservationManagerBase" prot="public">tudat::observation_models::ObservationManagerBase</innerclass>
    <innerclass refid="d5/d9a/classtudat_1_1observation__models_1_1ObservationManager" prot="public">tudat::observation_models::ObservationManager</innerclass>
    <innerclass refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" prot="public">tudat::observation_models::ObservationModel</innerclass>
    <innerclass refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" prot="public">tudat::observation_models::ObservationSimulatorBase</innerclass>
    <innerclass refid="d1/d05/classtudat_1_1observation__models_1_1ObservationSimulator" prot="public">tudat::observation_models::ObservationSimulator</innerclass>
    <innerclass refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" prot="public">tudat::observation_models::ObservationViabilityCalculator</innerclass>
    <innerclass refid="d7/daf/classtudat_1_1observation__models_1_1MinimumElevationAngleCalculator" prot="public">tudat::observation_models::MinimumElevationAngleCalculator</innerclass>
    <innerclass refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator" prot="public">tudat::observation_models::BodyAvoidanceAngleCalculator</innerclass>
    <innerclass refid="df/d9a/classtudat_1_1observation__models_1_1OccultationCalculator" prot="public">tudat::observation_models::OccultationCalculator</innerclass>
    <innerclass refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" prot="public">tudat::observation_models::ObservationViabilitySettings</innerclass>
    <innerclass refid="d0/d5e/classtudat_1_1observation__models_1_1OneWayDifferencedRangeObservationModel" prot="public">tudat::observation_models::OneWayDifferencedRangeObservationModel</innerclass>
    <innerclass refid="d7/da8/classtudat_1_1observation__models_1_1DopplerProperTimeRateInterface" prot="public">tudat::observation_models::DopplerProperTimeRateInterface</innerclass>
    <innerclass refid="db/d32/classtudat_1_1observation__models_1_1CustomDopplerProperTimeRateInterface" prot="public">tudat::observation_models::CustomDopplerProperTimeRateInterface</innerclass>
    <innerclass refid="dc/d4c/classtudat_1_1observation__models_1_1DirectFirstOrderDopplerProperTimeRateInterface" prot="public">tudat::observation_models::DirectFirstOrderDopplerProperTimeRateInterface</innerclass>
    <innerclass refid="d4/df8/classtudat_1_1observation__models_1_1OneWayDopplerObservationModel" prot="public">tudat::observation_models::OneWayDopplerObservationModel</innerclass>
    <innerclass refid="d9/d35/classtudat_1_1observation__models_1_1OneWayRangeObservationModel" prot="public">tudat::observation_models::OneWayRangeObservationModel</innerclass>
    <innerclass refid="d6/d55/classtudat_1_1observation__models_1_1PositionObservationModel" prot="public">tudat::observation_models::PositionObservationModel</innerclass>
    <innerclass refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" prot="public">tudat::observation_models::ObservationSimulationTimeSettings</innerclass>
    <innerclass refid="dd/d0d/structtudat_1_1observation__models_1_1TabulatedObservationSimulationTimeSettings" prot="public">tudat::observation_models::TabulatedObservationSimulationTimeSettings</innerclass>
    <innerclass refid="d7/d57/structtudat_1_1observation__models_1_1ArcLimitedObservationSimulationTimeSettings" prot="public">tudat::observation_models::ArcLimitedObservationSimulationTimeSettings</innerclass>
    <innerclass refid="d7/d67/classtudat_1_1observation__models_1_1TwoWayDopplerObservationModel" prot="public">tudat::observation_models::TwoWayDopplerObservationModel</innerclass>
    <innerclass refid="d1/d07/classtudat_1_1observation__models_1_1VelocityObservationModel" prot="public">tudat::observation_models::VelocityObservationModel</innerclass>
    <innerclass refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" prot="public">tudat::observation_models::LightTimeCorrectionSettings</innerclass>
    <innerclass refid="df/ded/classtudat_1_1observation__models_1_1FirstOrderRelativisticLightTimeCorrectionSettings" prot="public">tudat::observation_models::FirstOrderRelativisticLightTimeCorrectionSettings</innerclass>
    <innerclass refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" prot="public">tudat::observation_models::ObservationBiasSettings</innerclass>
    <innerclass refid="d8/dbd/classtudat_1_1observation__models_1_1MultipleObservationBiasSettings" prot="public">tudat::observation_models::MultipleObservationBiasSettings</innerclass>
    <innerclass refid="da/de5/classtudat_1_1observation__models_1_1ConstantObservationBiasSettings" prot="public">tudat::observation_models::ConstantObservationBiasSettings</innerclass>
    <innerclass refid="d5/d67/classtudat_1_1observation__models_1_1ArcWiseConstantObservationBiasSettings" prot="public">tudat::observation_models::ArcWiseConstantObservationBiasSettings</innerclass>
    <innerclass refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" prot="public">tudat::observation_models::ObservationSettings</innerclass>
    <innerclass refid="db/db7/classtudat_1_1observation__models_1_1DopplerProperTimeRateSettings" prot="public">tudat::observation_models::DopplerProperTimeRateSettings</innerclass>
    <innerclass refid="d7/d5a/classtudat_1_1observation__models_1_1DirectFirstOrderDopplerProperTimeRateSettings" prot="public">tudat::observation_models::DirectFirstOrderDopplerProperTimeRateSettings</innerclass>
    <innerclass refid="d3/d2b/classtudat_1_1observation__models_1_1OneWayDopplerObservationSettings" prot="public">tudat::observation_models::OneWayDopplerObservationSettings</innerclass>
    <innerclass refid="d1/db8/classtudat_1_1observation__models_1_1TwoWayDopplerObservationSettings" prot="public">tudat::observation_models::TwoWayDopplerObservationSettings</innerclass>
    <innerclass refid="d3/d88/classtudat_1_1observation__models_1_1OneWayDifferencedRangeRateObservationSettings" prot="public">tudat::observation_models::OneWayDifferencedRangeRateObservationSettings</innerclass>
    <innerclass refid="dc/dc4/classtudat_1_1observation__models_1_1NWayRangeObservationSettings" prot="public">tudat::observation_models::NWayRangeObservationSettings</innerclass>
    <innerclass refid="d0/d93/classtudat_1_1observation__models_1_1ObservationModelCreator" prot="public">tudat::observation_models::ObservationModelCreator</innerclass>
    <innerclass refid="d8/dca/classtudat_1_1observation__models_1_1ObservationModelCreator_3_011_00_01ObservationScalarType_00_01TimeType_01_4" prot="public">tudat::observation_models::ObservationModelCreator&lt; 1, ObservationScalarType, TimeType &gt;</innerclass>
    <innerclass refid="d0/deb/classtudat_1_1observation__models_1_1ObservationModelCreator_3_012_00_01ObservationScalarType_00_01TimeType_01_4" prot="public">tudat::observation_models::ObservationModelCreator&lt; 2, ObservationScalarType, TimeType &gt;</innerclass>
    <innerclass refid="d9/d5f/classtudat_1_1observation__models_1_1ObservationModelCreator_3_013_00_01ObservationScalarType_00_01TimeType_01_4" prot="public">tudat::observation_models::ObservationModelCreator&lt; 3, ObservationScalarType, TimeType &gt;</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d3/dd2/lightTimeCorrection_8h_1aabbb594fc72baa01e93bac9d75fbdf18" prot="public" static="no" strong="no">
        <type></type>
        <name>LightTimeCorrectionType</name>
        <enumvalue id="d3/dd2/lightTimeCorrection_8h_1aabbb594fc72baa01e93bac9d75fbdf18acc1c9d2534e83763d642b4b17f2da4c4" prot="public">
          <name>first_order_relativistic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/dd2/lightTimeCorrection_8h_1aabbb594fc72baa01e93bac9d75fbdf18adef08e4b619b42b5e5dca0c1e55b685e" prot="public">
          <name>function_wrapper_light_time_correction</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum defining different types of light time corrections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/corrections/lightTimeCorrection.h" line="24" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/corrections/lightTimeCorrection.h" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="enum" id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6e" prot="public" static="no" strong="no">
        <type></type>
        <name>LinkEndType</name>
        <enumvalue id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6ea8958b017ca522fa79bb8fb3c6131ddb2" prot="public">
          <name>unidentified_link_end</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6ea4cc10adf65380d9a109282d02e528cd2" prot="public">
          <name>transmitter</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6ea903fdbe095f54a24058b43a2291d35ed" prot="public">
          <name>reflector1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6eabcb9c2777a6908ac039ca93479e7355a" prot="public">
          <name>reflector</name>
          <initializer>= reflector1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6ea3153d477a61bdc41e15044cca2cd93ed" prot="public">
          <name>retransmitter</name>
          <initializer>= reflector</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6ea452fabbde246d78a435551b72f51efa8" prot="public">
          <name>reflector2</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6ea1ca63b77a116f233aef5f8458594a939" prot="public">
          <name>reflector3</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6ea0c7242ea6f95ac8933d8ab20892bf417" prot="public">
          <name>reflector4</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6eaa388ca7a02a60251a1c87f7abf672a3e" prot="public">
          <name>receiver</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d88/linkTypeDefs_8h_1a48c0d529a455bf73ae57991768625e6ea8db585213b6ddf85ae516f1caec6174e" prot="public">
          <name>observed_body</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum defining different link end types. </para>
        </briefdescription>
        <detaileddescription>
<para>Enum defining different roles that a given link end can play in an observation model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" line="28" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" bodystart="29" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="da/d33/observableTypes_8h_1adcbe1f4fdc29700cf58f3c59faf9cc6b" prot="public" static="no" strong="no">
        <type></type>
        <name>ObservableType</name>
        <enumvalue id="da/d33/observableTypes_8h_1adcbe1f4fdc29700cf58f3c59faf9cc6ba7ff1aabbbdb52a08d350edded2539755" prot="public">
          <name>one_way_range</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d33/observableTypes_8h_1adcbe1f4fdc29700cf58f3c59faf9cc6bab301fce3c09a14cc1a6b66300b9140d0" prot="public">
          <name>angular_position</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d33/observableTypes_8h_1adcbe1f4fdc29700cf58f3c59faf9cc6baedf9822e33fca8433dbcf52555fa3eff" prot="public">
          <name>position_observable</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d33/observableTypes_8h_1adcbe1f4fdc29700cf58f3c59faf9cc6ba3c2fd63b639f9f7e7310d0a87d83b75a" prot="public">
          <name>one_way_doppler</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d33/observableTypes_8h_1adcbe1f4fdc29700cf58f3c59faf9cc6bad8dd5c53b601337baa26f91e041deaab" prot="public">
          <name>one_way_differenced_range</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d33/observableTypes_8h_1adcbe1f4fdc29700cf58f3c59faf9cc6ba0943e1d0f059d41814324dd3c126224b" prot="public">
          <name>n_way_range</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d33/observableTypes_8h_1adcbe1f4fdc29700cf58f3c59faf9cc6baa4d0f59e4821eac877c3ca77c36fbf3c" prot="public">
          <name>two_way_doppler</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d33/observableTypes_8h_1adcbe1f4fdc29700cf58f3c59faf9cc6ba73caaf48e9e500b5392723e06f77aff8" prot="public">
          <name>euler_angle_313_observable</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d33/observableTypes_8h_1adcbe1f4fdc29700cf58f3c59faf9cc6baf0633f9baf07351bc5d502c2308c9d91" prot="public">
          <name>velocity_observable</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for types of observations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observableTypes.h" line="28" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observableTypes.h" bodystart="29" bodyend="39"/>
      </memberdef>
      <memberdef kind="enum" id="dc/d05/observationBias_8h_1ad525d85982bb54188f936ad03ce24d8c" prot="public" static="no" strong="no">
        <type></type>
        <name>ObservationBiasTypes</name>
        <enumvalue id="dc/d05/observationBias_8h_1ad525d85982bb54188f936ad03ce24d8caefb4cb3fb8bd31b7edec80ab82a7674d" prot="public">
          <name>multiple_observation_biases</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d05/observationBias_8h_1ad525d85982bb54188f936ad03ce24d8ca45e15e89387a5856f72c28e66ac05d50" prot="public">
          <name>constant_absolute_bias</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d05/observationBias_8h_1ad525d85982bb54188f936ad03ce24d8cac63c000f1dfe769a333614fff9f9b1e6" prot="public">
          <name>constant_relative_bias</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d05/observationBias_8h_1ad525d85982bb54188f936ad03ce24d8ca02b832ee79ca1423a26749573cdd3326" prot="public">
          <name>arc_wise_constant_absolute_bias</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d05/observationBias_8h_1ad525d85982bb54188f936ad03ce24d8ca9f306d161b609188fc417cf35341c030" prot="public">
          <name>arc_wise_constant_relative_bias</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum listing types of observation biases that are availabe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationBias.h" line="37" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationBias.h" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="enum" id="d8/d9d/observationViabilityCalculator_8h_1a63a8de8ac0709f12d5dbba342fc1c11e" prot="public" static="no" strong="no">
        <type></type>
        <name>ObservationViabilityType</name>
        <enumvalue id="d8/d9d/observationViabilityCalculator_8h_1a63a8de8ac0709f12d5dbba342fc1c11ea3df9e5ab44a0f2eeec7fa278fa61a03b" prot="public">
          <name>minimum_elevation_angle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d9d/observationViabilityCalculator_8h_1a63a8de8ac0709f12d5dbba342fc1c11eaa97db57dcb6370f8f147b9a4ad91d3f2" prot="public">
          <name>body_avoidance_angle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d9d/observationViabilityCalculator_8h_1a63a8de8ac0709f12d5dbba342fc1c11ea9c97a9166eb2e3fc579850d188ef1aa9" prot="public">
          <name>body_occultation</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum defining possible checks which can be performed for observation viability,. </para>
        </briefdescription>
        <detaileddescription>
<para>Enum defining possible checks which can be performed for observation viability, the string and double parameter shown in the comments are used to define it when making an <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="285" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="286" bodyend="290"/>
      </memberdef>
      <memberdef kind="enum" id="d1/d9f/simulateObservations_8h_1a55d73d6b475f52edd9b4eb820586ac4f" prot="public" static="no" strong="no">
        <type></type>
        <name>ObservationSimulationTimesTypes</name>
        <enumvalue id="d1/d9f/simulateObservations_8h_1a55d73d6b475f52edd9b4eb820586ac4fa4d03fda5f81e35dc6e274bc27799ae02" prot="public">
          <name>tabulated_observation_simulation_times</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="29" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="db/dfe/createObservationModel_8h_1a8bb3ee234fb2c070bc7d92b75c83d653" prot="public" static="no" strong="no">
        <type></type>
        <name>DopplerProperTimeRateType</name>
        <enumvalue id="db/dfe/createObservationModel_8h_1a8bb3ee234fb2c070bc7d92b75c83d653a0d94cde34a58c3ba3f1473d254baaa64" prot="public">
          <name>custom_doppler_proper_time_rate</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/dfe/createObservationModel_8h_1a8bb3ee234fb2c070bc7d92b75c83d653a0ca7249fa30729505f69d7fef013f06b" prot="public">
          <name>direct_first_order_doppler_proper_time_rate</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum defining all possible types of proper time rate computations in one-way Doppler. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="301" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="302" bodyend="305"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="da/d28/lightTimeSolution_8h_1adf404f2c6e195cb590c459f373329a13" prot="public" static="no">
        <type>std::function&lt; double(const Eigen::Vector6d &amp;, const Eigen::Vector6d &amp;, const double, const double) &gt;</type>
        <definition>typedef std::function&lt; double(const Eigen::Vector6d &amp;, const Eigen::Vector6d &amp;, const double, const double) &gt; tudat::observation_models::LightTimeCorrectionFunction</definition>
        <argsstring></argsstring>
        <name>LightTimeCorrectionFunction</name>
        <briefdescription>
<para>Typedef for function calculating light-time correction in light-time calculation loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/lightTimeSolution.h" line="44" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/lightTimeSolution.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/d88/linkTypeDefs_8h_1aa00ca2596cd60ee93b0d9bc887cc7b20" prot="public" static="no">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>typedef std::pair&lt; std::string, std::string &gt; tudat::observation_models::LinkEndId</definition>
        <argsstring></argsstring>
        <name>LinkEndId</name>
        <briefdescription>
<para>Typedef for the identifier of a given link-end (body and reference points) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" line="43" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/d88/linkTypeDefs_8h_1a7a66b5e78e636627f69a082a10c57b52" prot="public" static="no">
        <type>std::map&lt; LinkEndType, LinkEndId &gt;</type>
        <definition>typedef std::map&lt; LinkEndType, LinkEndId &gt; tudat::observation_models::LinkEnds</definition>
        <argsstring></argsstring>
        <name>LinkEnds</name>
        <briefdescription>
<para>Typedef for list of link ends, with associated role, used for a single observation (model). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" line="46" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d9d/observationViabilityCalculator_8h_1a18ada8c5f18bf59309f229c6722502b2" prot="public" static="no">
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; ObservableType, std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; &gt; &gt; tudat::observation_models::PerObservableObservationViabilityCalculatorList</definition>
        <argsstring></argsstring>
        <name>PerObservableObservationViabilityCalculatorList</name>
        <briefdescription>
<para>Typedef for a list of observation viability calculators, sorted by observable type and link ends. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="386" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d9d/observationViabilityCalculator_8h_1a4268685524911e1eb0b327a675b0f54c" prot="public" static="no">
        <type>std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; &gt; tudat::observation_models::PerLinkEndsObservationViabilityCalculatorList</definition>
        <argsstring></argsstring>
        <name>PerLinkEndsObservationViabilityCalculatorList</name>
        <briefdescription>
<para>Typedef for a list of observation viability calculators for a single observable type, sorted by and link ends. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="390" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d9d/observationViabilityCalculator_8h_1ae2c14f912665f35eec55b54460fc5c72" prot="public" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">observation_models::ObservationViabilitySettings</ref> &gt; &gt;</type>
        <definition>typedef std::vector&lt; std::shared_ptr&lt; observation_models::ObservationViabilitySettings &gt; &gt; tudat::observation_models::ObservationViabilitySettingsList</definition>
        <argsstring></argsstring>
        <name>ObservationViabilitySettingsList</name>
        <briefdescription>
<para>Typedef for vector of <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="393" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/d1e/createLightTimeCorrection_8h_1a7815150884278d81fb705db355c2e207" prot="public" static="no">
        <type>std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt; &gt; tudat::observation_models::LightTimeCorrectionSettingsMap</definition>
        <argsstring></argsstring>
        <name>LightTimeCorrectionSettingsMap</name>
        <briefdescription>
<para>Typedef for a list of list time correction settings per link end. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCorrection.h" line="72" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCorrection.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/dfe/createObservationModel_8h_1a3544e408f697ba11a8df72cb085a8c15" prot="public" static="no">
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSettings &gt; &gt; &gt; tudat::observation_models::SortedObservationSettingsMap</definition>
        <argsstring></argsstring>
        <name>SortedObservationSettingsMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Typedef of list of observation models per obserable type and link ends: note that ObservableType key must be consistent with contents of <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> pointers. The ObservationSettingsMap may be used as well, which contains the same type of information. This typedef, however, has some advantages in terms of book-keeping when creating observation models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="711" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/dfe/createObservationModel_8h_1aead215d608d67ee8315816d98e3915d4" prot="public" static="no">
        <type>std::multimap&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt; &gt;</type>
        <definition>typedef std::multimap&lt; LinkEnds, std::shared_ptr&lt; ObservationSettings &gt; &gt; tudat::observation_models::ObservationSettingsMap</definition>
        <argsstring></argsstring>
        <name>ObservationSettingsMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Typedef of list of observation models per link ends. Multiple observation models for a single set of link ends are allowed, since this typedef represents a multimap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="715" column="23" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/dfe/createObservationModel_8h_1af807200c66c0049042a7304b747a860e" prot="public" static="no">
        <type>std::vector&lt; std::pair&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt; &gt; &gt;</type>
        <definition>typedef std::vector&lt; std::pair&lt; LinkEnds, std::shared_ptr&lt; ObservationSettings &gt; &gt; &gt; tudat::observation_models::ObservationSettingsVector</definition>
        <argsstring></argsstring>
        <name>ObservationSettingsVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="717" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/dfe/createObservationModel_8h_1a21c3d63c8d66792044017e5a3a54b256" prot="public" static="no">
        <type>std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; ObservationSettings &gt; &gt; &gt; tudat::observation_models::ObservationSettingsListPerLinkEnd</definition>
        <argsstring></argsstring>
        <name>ObservationSettingsListPerLinkEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="719" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="719" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d3/dab/observation_8h_1ab0e09b7091a6d7b12ed8aa188b5de49c" prot="public" static="yes" mutable="no">
        <type>std::map&lt; ObservableType, std::string &gt;</type>
        <definition>std::map&lt; ObservableType, std::string &gt; tudat::observation_models::observationTypes</definition>
        <argsstring></argsstring>
        <name>observationTypes</name>
        <initializer>=
{
    { one_way_range, &quot;oneWayRange&quot; },
    { angular_position, &quot;angularPosition&quot; },
    { position_observable, &quot;positionObservable&quot; },
    { one_way_doppler, &quot;oneWayDoppler&quot; },
    { one_way_differenced_range, &quot;oneWayDifferencedRange&quot; },
    { n_way_range, &quot;nWayRange&quot; },
    { two_way_doppler, &quot;twoWayDoppler&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>ObservableType</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="28" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/dab/observation_8h_1ab462aea7452705402715729fa0fd916c" prot="public" static="yes" mutable="no">
        <type>std::map&lt; std::string, ObservableType &gt;</type>
        <definition>std::map&lt; std::string, ObservableType &gt; tudat::observation_models::observationTypesInverse</definition>
        <argsstring></argsstring>
        <name>observationTypesInverse</name>
        <initializer>=
{
    { &quot;oneWayRange&quot;, one_way_range },
    { &quot;angularPosition&quot;, angular_position },
    { &quot;positionObservable&quot;, position_observable },
    { &quot;oneWayDoppler&quot;, one_way_doppler },
    { &quot;oneWayDifferencedRange&quot;, one_way_differenced_range },
    { &quot;nWayRange&quot;, n_way_range },
    { &quot;twoWayDoppler&quot;, two_way_doppler }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>ObservableType</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="40" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/dab/observation_8h_1ac25a7783d366e7269e39b292a66d1075" prot="public" static="yes" mutable="no">
        <type>std::map&lt; ObservationBiasTypes, std::string &gt;</type>
        <definition>std::map&lt; ObservationBiasTypes, std::string &gt; tudat::observation_models::observationBiasTypes</definition>
        <argsstring></argsstring>
        <name>observationBiasTypes</name>
        <initializer>=
{

    { multiple_observation_biases, &quot;multipleObservationBiases&quot; },
    { constant_absolute_bias, &quot;constantAbsoluteBias&quot; },
    { constant_relative_bias, &quot;constantRelativeBias&quot; },
    { arc_wise_constant_absolute_bias, &quot;arcWiseConstantAbsoluteBias&quot; },
    { arc_wise_constant_relative_bias, &quot;arcWiseConstantRelativeBias&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>ObservableType</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="64" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/dab/observation_8h_1a17981074ac1361a20d9121010e5941e2" prot="public" static="yes" mutable="no">
        <type>std::map&lt; LinkEndType, std::string &gt;</type>
        <definition>std::map&lt; LinkEndType, std::string &gt; tudat::observation_models::linkEndTypes</definition>
        <argsstring></argsstring>
        <name>linkEndTypes</name>
        <initializer>=
{
    { transmitter, &quot;transmitter&quot; },
    { reflector1, &quot;reflector1&quot; },
    { reflector, &quot;reflector&quot; },
    { reflector2, &quot;reflector2&quot; },
    { reflector3, &quot;reflector3&quot; },
    { reflector4, &quot;reflector4&quot; },
    { receiver, &quot;receiver&quot; },
    { observed_body, &quot;observedBody&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>LinkEndType</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="88" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/dab/observation_8h_1a20552e6e34fd871d04b601dbb7b23385" prot="public" static="yes" mutable="no">
        <type>std::map&lt; std::string, LinkEndType &gt;</type>
        <definition>std::map&lt; std::string, LinkEndType &gt; tudat::observation_models::linkEndTypesInverse</definition>
        <argsstring></argsstring>
        <name>linkEndTypesInverse</name>
        <initializer>=
{
    { &quot;transmitter&quot;, transmitter,  },
    { &quot;reflector1&quot;, reflector1 },
    { &quot;reflector&quot;, reflector },
    { &quot;reflector2&quot;, reflector2 },
    { &quot;reflector3&quot;, reflector3 },
    { &quot;reflector4&quot;, reflector4 },
    { &quot;receiver&quot;, receiver },
    { &quot;observedBody&quot;, observed_body }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>LinkEndType</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="101" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/dab/observation_8h_1a83c274fe1b0a19cfaac25b0127a22e92" prot="public" static="yes" mutable="no">
        <type>std::map&lt; DopplerProperTimeRateType, std::string &gt;</type>
        <definition>std::map&lt; DopplerProperTimeRateType, std::string &gt; tudat::observation_models::dopplerProperTimeRateTypes</definition>
        <argsstring></argsstring>
        <name>dopplerProperTimeRateTypes</name>
        <initializer>=
{
    { direct_first_order_doppler_proper_time_rate, &quot;firsOrderProperTimeRate&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>LinkEndType</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="127" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/dab/observation_8h_1a077ecc7139fd412b827e8d6a7a18dbea" prot="public" static="yes" mutable="no">
        <type>std::map&lt; LightTimeCorrectionType, std::string &gt;</type>
        <definition>std::map&lt; LightTimeCorrectionType, std::string &gt; tudat::observation_models::lichtTimeCorrectionTypes</definition>
        <argsstring></argsstring>
        <name>lichtTimeCorrectionTypes</name>
        <initializer>=
{
    { first_order_relativistic, &quot;firsOrderRelativistic&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>LinkEndType</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="145" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/d28/lightTimeSolution_8h_1a2c2cb4a6a19b0d0a5eedaf4c59ee4efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ObservationScalarType</type>
        <definition>ObservationScalarType tudat::observation_models::getDefaultLightTimeTolerance</definition>
        <argsstring>()</argsstring>
        <name>getDefaultLightTimeTolerance</name>
        <briefdescription>
<para>Function to retrieve the default tolerance for the light-time equation solution. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the default tolerance for the light-time equation solution. This tolerance denotes the difference between two subsequent light time solutions (in s) that is deemed acceptable for convergence/ <simplesect kind="return"><para>Default light-time tolerance for given template arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/lightTimeSolution.h" line="38" column="23" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/lightTimeSolution.h" declline="38" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d7/d88/linkTypeDefs_8h_1a26067a990d533058e724a069371357ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::observation_models::getLinkEndTypeString</definition>
        <argsstring>(const LinkEndType linkEndType)</argsstring>
        <name>getLinkEndTypeString</name>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndType</declname>
        </param>
        <briefdescription>
<para>Function to get a string identifier for a link end type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a string identifier for a link end type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEndType</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum identifier for a link end type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String identifier for a link end type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" line="20" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" bodystart="20" bodyend="52" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" declline="54" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/d88/linkTypeDefs_8h_1af68a14412a540764ab36d1e14289b9df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::observation_models::getLinkEndsString</definition>
        <argsstring>(const LinkEnds linkEnds)</argsstring>
        <name>getLinkEndsString</name>
        <param>
          <type>const LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <briefdescription>
<para>Function to get a string identifier for a set of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a string identifier for a set of link ends <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends for which string identifier is to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String identifier for a link ends </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" line="55" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" bodystart="55" bodyend="77" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" declline="62" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/d88/linkTypeDefs_8h_1ae96f147e4012900c1fd6cb5a2432a605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::observation_models::getNWayLinkIndexFromLinkEndType</definition>
        <argsstring>(const LinkEndType linkEndType, const int numberOfLinkEnds)</argsstring>
        <name>getNWayLinkIndexFromLinkEndType</name>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndType</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfLinkEnds</declname>
        </param>
        <briefdescription>
<para>Function to get the link end index (0=transmitter, numberOfLinkEnds-1=receiver) of a link end in n-way observable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the link end index (0=transmitter, numberOfLinkEnds-1=receiver) of a link end in n-way observable <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEndType</parametername>
</parameternamelist>
<parameterdescription>
<para>Link end type for which index is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of link ends in n-way observable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested link end index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" line="80" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" bodystart="80" bodyend="101" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" declline="71" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d7/d88/linkTypeDefs_8h_1aca316fc4c76cc63ba10f1127fa1d96fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LinkEndType</type>
        <definition>LinkEndType tudat::observation_models::getNWayLinkEnumFromIndex</definition>
        <argsstring>(const int linkEndIndex, const int numberOfLinkEnds)</argsstring>
        <name>getNWayLinkEnumFromIndex</name>
        <param>
          <type>const int</type>
          <declname>linkEndIndex</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfLinkEnds</declname>
        </param>
        <briefdescription>
<para>Function to get the link end type enum of a link end in n-way observable from link index. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the link end type enum of a link end in n-way observable from link index (0=transmitter, numberOfLinkEnds-1=receiver) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEndIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Link end index for which type is to be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of link ends in n-way observable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested link end type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" line="104" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" bodystart="104" bodyend="131" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" declline="81" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/d88/linkTypeDefs_8h_1acf0593e8a82eaa79a4b7caaade070069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; tudat::observation_models::getNWayLinkEndIndicesFromLinkEndId</definition>
        <argsstring>(const LinkEndId &amp;linkEndid, const LinkEnds &amp;linkEnds)</argsstring>
        <name>getNWayLinkEndIndicesFromLinkEndId</name>
        <param>
          <type>const LinkEndId &amp;</type>
          <declname>linkEndid</declname>
        </param>
        <param>
          <type>const LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <briefdescription>
<para>Function to get the list of indices in link-end list for n-way observables that match a given link end id. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the list of indices in link-end list for n-way observables that matches a given link end id.</para>
<para>Function to get the list of indices in link-end list for n-way observables that match a given link end id. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEndid</parametername>
</parameternamelist>
<parameterdescription>
<para>Link end id for which the link-end indices in linkEnds are to be determined </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>N-way link ends </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of indices (transmitter = 0, receiver = linkEnds.size( ) - 1 ) at which linkEndid occurs in linkEnds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" line="134" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" bodystart="134" bodyend="139" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" declline="90" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/d88/linkTypeDefs_8h_1a4363b71486029cd898d970cd9299729a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; tudat::observation_models::getNWayLinkEndIndicesFromLinkEndId</definition>
        <argsstring>(const std::vector&lt; LinkEndType &gt; &amp;linkEndTypes, const LinkEnds &amp;linkEnds)</argsstring>
        <name>getNWayLinkEndIndicesFromLinkEndId</name>
        <param>
          <type>const std::vector&lt; LinkEndType &gt; &amp;</type>
          <declname>linkEndTypes</declname>
        </param>
        <param>
          <type>const LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <briefdescription>
<para>Function to get the list of indices in link-end list for n-way observables that match a list of link-end types. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the list of indices in link-end list for n-way observables that matches a list of link-end types.</para>
<para>Function to get the list of indices in link-end list for n-way observables that match a list of link-end types. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEndTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>List of link end types for which the link-end indices in linkEnds are to be determined </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>N-way link ends </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of indices (transmitter = 0, receiver = linkEnds.size( ) - 1 ) at which linkEndTypes occurs in linkEnds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" line="142" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" bodystart="142" bodyend="150" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" declline="99" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/d88/linkTypeDefs_8h_1a91201680be1e41c231b971236fd9cdac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; LinkEndType &gt;</type>
        <definition>std::vector&lt; LinkEndType &gt; tudat::observation_models::getNWayLinkIndicesFromLinkEndId</definition>
        <argsstring>(const LinkEndId &amp;linkEndid, const LinkEnds &amp;linkEnds)</argsstring>
        <name>getNWayLinkIndicesFromLinkEndId</name>
        <param>
          <type>const LinkEndId &amp;</type>
          <declname>linkEndid</declname>
        </param>
        <param>
          <type>const LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <briefdescription>
<para>Function to get the list of link end types in link-end list for n-way observables that match a given link end id. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the list of link end types in link-end list for n-way observables that match a given link end id. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEndid</parametername>
</parameternamelist>
<parameterdescription>
<para>Link end id for which the link-end indices in linkEnds are to be determined </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>N-way link ends </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of link end type at which linkEndid occurs in linkEnds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" line="153" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/linkTypeDefs.cpp" bodystart="153" bodyend="166" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/linkTypeDefs.h" declline="108" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="da/d33/observableTypes_8h_1a31922c75c32ca397423d59217e7ad078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::VectorXd, std::pair&lt; std::vector&lt; double &gt;, LinkEndType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::VectorXd, std::pair&lt; std::vector&lt; double &gt;, LinkEndType &gt; &gt; &gt; &gt; tudat::observation_models::getTudatCompatibleObservationsAndTimes</definition>
        <argsstring>(const std::vector&lt; std::tuple&lt; ObservableType, LinkEnds, Eigen::VectorXd, std::vector&lt; double &gt;, LinkEndType &gt; &gt; &amp;tudatpyObservationsAndTimes)</argsstring>
        <name>getTudatCompatibleObservationsAndTimes</name>
        <param>
          <type>const std::vector&lt; std::tuple&lt; ObservableType, LinkEnds, Eigen::VectorXd, std::vector&lt; double &gt;, LinkEndType &gt; &gt; &amp;</type>
          <declname>tudatpyObservationsAndTimes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" line="23" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" bodystart="23" bodyend="38" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observableTypes.h" declline="43" declcolumn="2"/>
      </memberdef>
      <memberdef kind="function" id="da/d33/observableTypes_8h_1adf318c2d0648dce4e7ec05c34caa5eaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::observation_models::getObservableName</definition>
        <argsstring>(const ObservableType observableType, const int numberOfLinkEnds)</argsstring>
        <name>getObservableName</name>
        <param>
          <type>const ObservableType</type>
          <declname>observableType</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfLinkEnds</declname>
        </param>
        <briefdescription>
<para>Function to get the name (string) associated with a given observable type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the name (string) associated with a given observable type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of link ends in observable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name of observable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" line="42" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" bodystart="42" bodyend="109" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observableTypes.h" declline="54" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="da/d33/observableTypes_8h_1a61a517b47244d42b9d65a8bd71180dce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ObservableType</type>
        <definition>ObservableType tudat::observation_models::getObservableType</definition>
        <argsstring>(const std::string &amp;observableName)</argsstring>
        <name>getObservableType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>observableName</declname>
        </param>
        <briefdescription>
<para>Function to get the observable type.ssociated with the name (string) of observable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the observable type.ssociated with the name (string) of observable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observableName</parametername>
</parameternamelist>
<parameterdescription>
<para>of observable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type of observable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" line="112" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" bodystart="112" bodyend="157" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observableTypes.h" declline="62" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="da/d33/observableTypes_8h_1abfeff8375a940bdac5df8cfe5ceb6568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::observation_models::getObservableSize</definition>
        <argsstring>(const ObservableType observableType)</argsstring>
        <name>getObservableSize</name>
        <param>
          <type>const ObservableType</type>
          <declname>observableType</declname>
        </param>
        <briefdescription>
<para>Function to get the size of an observable of a given type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the size of an observable of a given type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size of observable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" line="160" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" bodystart="160" bodyend="198" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observableTypes.h" declline="70" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d33/observableTypes_8h_1abe36151acc9b1e059d2df54fc55eb74e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; tudat::observation_models::getLinkEndIndicesForLinkEndTypeAtObservable</definition>
        <argsstring>(const ObservableType observableType, const LinkEndType linkEndType, const int numberOfLinkEnds)</argsstring>
        <name>getLinkEndIndicesForLinkEndTypeAtObservable</name>
        <param>
          <type>const ObservableType</type>
          <declname>observableType</declname>
        </param>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndType</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfLinkEnds</declname>
        </param>
        <briefdescription>
<para>Function to get the indices in link end times/states for a given link end type and observable type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the indices in link end times/states for a given link end type and observable type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable for which link end indices are to be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of link end for which link end indices are to be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of link ends in observable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Indices in link end times/states for given link end type and observable type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" line="201" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" bodystart="201" bodyend="369" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observableTypes.h" declline="80" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="da/d33/observableTypes_8h_1a51e9874fbe470281df0b0480243324ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::checkObservationResidualDiscontinuities</definition>
        <argsstring>(Eigen::Block&lt; Eigen::VectorXd &gt; observationBlock, const ObservableType observableType)</argsstring>
        <name>checkObservationResidualDiscontinuities</name>
        <param>
          <type>Eigen::Block&lt; Eigen::VectorXd &gt;</type>
          <declname>observationBlock</declname>
        </param>
        <param>
          <type>const ObservableType</type>
          <declname>observableType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" line="371" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observableTypes.cpp" bodystart="371" bodyend="397" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observableTypes.h" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d05/observationBias_8h_1ae46c1044122fb52308bd5a149234ea72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
          </param>
        </templateparamlist>
        <type>ObservationBiasTypes</type>
        <definition>ObservationBiasTypes tudat::observation_models::getObservationBiasType</definition>
        <argsstring>(const std::shared_ptr&lt; ObservationBias&lt; ObservationSize &gt; &gt; biasObject)</argsstring>
        <name>getObservationBiasType</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/dab/classtudat_1_1observation__models_1_1ObservationBias" kindref="compound">ObservationBias</ref>&lt; ObservationSize &gt; &gt;</type>
          <declname>biasObject</declname>
        </param>
        <briefdescription>
<para>Function to retrieve the type of an observation bias. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the type of an observation bias. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>biasObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Bias for which the type is to be determined </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bias type for biasObject. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationBias.h" line="657" column="22" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationBias.h" bodystart="657" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="d4/d31/observationModel_8h_1a501999207fad0dc68962a0dc14b6c49f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tudat::observation_models::getSizeOneObservationAtDoublePrecision</definition>
        <argsstring>(std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 1, 1 &gt;(const TimeType, const observation_models::LinkEndType) &gt; observationFunction, const double currentTime, const LinkEndType referenceLinkEnd)</argsstring>
        <name>getSizeOneObservationAtDoublePrecision</name>
        <param>
          <type>std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 1, 1 &gt;(const TimeType, const observation_models::LinkEndType) &gt;</type>
          <declname>observationFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
        </param>
        <param>
          <type>const LinkEndType</type>
          <declname>referenceLinkEnd</declname>
        </param>
        <briefdescription>
<para>Function to compute an observation of size 1 at double precision, with double precision input. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute an observation at double precision, with double precision input, from an observation function templated at state scalar and time type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that computes the observation as a function of observation time and reference link end time, templated by the state and time scalar type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which to evaluate the observation function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceLinkEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference link end for the observation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Observation computed by observationFunction, cast to double precision, with input time at double precision </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationModel.h" line="313" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationModel.h" bodystart="313" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="d4/d31/observationModel_8h_1ac8f4c31fe677f77d0116b2f28fa58100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::function&lt; double(const double, const observation_models::LinkEndType) &gt;</type>
        <definition>std::function&lt; double( const double, const observation_models::LinkEndType ) &gt; tudat::observation_models::getSizeOneObservationFunctionAtDoublePrecision</definition>
        <argsstring>(std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 1, 1 &gt;(const TimeType, const observation_models::LinkEndType) &gt; observationFunction)</argsstring>
        <name>getSizeOneObservationFunctionAtDoublePrecision</name>
        <param>
          <type>std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 1, 1 &gt;(const TimeType, const observation_models::LinkEndType) &gt;</type>
          <declname>observationFunction</declname>
        </param>
        <briefdescription>
<para>Function to generate a function that computes a size 1 observation at double precision, from a templated observation function. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate a function that computes a size 1 observation at double precision, from a templated observation function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that computes the observation as a function of observation time and reference link end time, templated by the state and time scalar type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function that computes the observation as a function of observation time and reference link end time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationModel.h" line="328" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationModel.h" bodystart="328" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="d4/d31/observationModel_8h_1af80ea8781277e10c85985babfca09431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 1, 1 &gt; const TimeType, const observation_models::LinkEndType) &gt;</type>
        <definition>std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 1, 1 &gt; const TimeType, const observation_models::LinkEndType ) &gt; tudat::observation_models::getSizeOneObservationFunctionFromObservationModel</definition>
        <argsstring>(const std::shared_ptr&lt; ObservationModel&lt; 1, ObservationScalarType, TimeType &gt; &gt; observationModel)</argsstring>
        <name>getSizeOneObservationFunctionFromObservationModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>&lt; 1, ObservationScalarType, TimeType &gt; &gt;</type>
          <declname>observationModel</declname>
        </param>
        <briefdescription>
<para>Function to generate a function that computes an observation from an <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate a function that produces an observation, only applicable for observation models of size one. This function uses std::bind to link the computeObservations function of the observationModel to the output of this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation model for which the observation function is to be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function that computes the observation as a function of observation time and reference link end time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationModel.h" line="345" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationModel.h" bodystart="345" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="d4/d31/observationModel_8h_1a3b6ff06b6f66ffbbf8805695cdc0bd62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::function&lt; double(const double, const observation_models::LinkEndType) &gt;</type>
        <definition>std::function&lt; double( const double, const observation_models::LinkEndType ) &gt; tudat::observation_models::getSizeOneObservationFunctionAtDoublePrecisionFromObservationModel</definition>
        <argsstring>(const std::shared_ptr&lt; ObservationModel&lt; 1, ObservationScalarType, TimeType &gt; &gt; observationModel)</argsstring>
        <name>getSizeOneObservationFunctionAtDoublePrecisionFromObservationModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>&lt; 1, ObservationScalarType, TimeType &gt; &gt;</type>
          <declname>observationModel</declname>
        </param>
        <briefdescription>
<para>Function to generate a function that computes an observation at double precision from an <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate a function that computes an observation at double precision, only applicable for observation models of size one. This function uses std::bind to link the computeObservations function of the observationModel to the output of this function, casting in/and output to double precisiono if needed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation model for which the observation function is to be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function that computes the observation as a function of observation time and reference link end time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationModel.h" line="361" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationModel.h" bodystart="361" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="d4/d31/observationModel_8h_1ac42ea4641ebb5278b86964f023c756a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>Eigen::Dynamic</defval>
          </param>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d8/dab/classtudat_1_1observation__models_1_1ObservationBias" kindref="compound">ObservationBias</ref>&lt; ObservationSize &gt; &gt; &gt;</type>
        <definition>std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationBias&lt; ObservationSize &gt; &gt; &gt; tudat::observation_models::extractObservationBiasList</definition>
        <argsstring>(std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationModel&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; &gt; observationModels)</argsstring>
        <name>extractObservationBiasList</name>
        <param>
          <type>std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; &gt;</type>
          <declname>observationModels</declname>
        </param>
        <briefdescription>
<para>Function to extract a list of observtion bias models from a list of observation models. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to extract a list of observtion bias models from a list of observation models. Function iterates over input map of observationModels, extracts the bias from it and adds it to the list of bias objects if it is not nullptr. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation models (per LinkEnds) from which the bias objects are to be extracted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of observation bias objects (per LinkEnds), as extracted from observationModels (nullptr bias objects not added to list). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationModel.h" line="377" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationModel.h" bodystart="377" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="d2/d4c/observationSimulator_8h_1a2b0c8fd92bca1b6850f279c51cb1aede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, bool &gt;</type>
        <definition>std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, bool &gt; tudat::observation_models::simulateObservationWithCheck</definition>
        <argsstring>(const TimeType &amp;observationTime, const std::shared_ptr&lt; ObservationModel&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; observationModel, const LinkEndType linkEndAssociatedWithTime, const std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; linkViabilityCalculators=std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt;())</argsstring>
        <name>simulateObservationWithCheck</name>
        <param>
          <type>const TimeType &amp;</type>
          <declname>observationTime</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt;</type>
          <declname>observationModel</declname>
        </param>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndAssociatedWithTime</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;</type>
          <declname>linkViabilityCalculators</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to simulate an observable, checking whether it is viable according to settings passed to this function. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate an observable, checking whether it is viable according to settings passed to this function (if viability calculators are passed to this function). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which observable is to be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Model used to compute observable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndAssociatedWithTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Model Reference link end for observable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkViabilityCalculators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Observation at given time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationSimulator.h" line="39" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationSimulator.h" bodystart="39" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="d2/d4c/observationSimulator_8h_1ac1443d23f58af90cd6a1be0cb6f38743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::vector&lt; TimeType &gt; &gt;</type>
        <definition>std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::vector&lt; TimeType &gt; &gt; tudat::observation_models::simulateObservationsWithCheck</definition>
        <argsstring>(const std::vector&lt; TimeType &gt; &amp;observationTimes, const std::shared_ptr&lt; ObservationModel&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; observationModel, const LinkEndType linkEndAssociatedWithTime, const std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; linkViabilityCalculators=std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt;())</argsstring>
        <name>simulateObservationsWithCheck</name>
        <param>
          <type>const std::vector&lt; TimeType &gt; &amp;</type>
          <declname>observationTimes</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt;</type>
          <declname>observationModel</declname>
        </param>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndAssociatedWithTime</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;</type>
          <declname>linkViabilityCalculators</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to simulate observables, checking whether they are viable according to settings passed to this function. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate observables, checking whether they are viable according to settings passed to this function (if viability calculators are passed to this function). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>Times at which observables are to be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Model used to compute observables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndAssociatedWithTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Model Reference link end for observables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkViabilityCalculators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Observations at given time (concatenated in an Eigen vector) and associated times. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationSimulator.h" line="75" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationSimulator.h" bodystart="75" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="d2/d4c/observationSimulator_8h_1a971b2af4f0f2c7a4df38c1a420edb4e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt;</type>
        <definition>std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; tudat::observation_models::simulateObservationsWithCheckAndLinkEndIdOutput</definition>
        <argsstring>(const std::vector&lt; TimeType &gt; &amp;observationTimes, const std::shared_ptr&lt; ObservationModel&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; observationModel, const LinkEndType linkEndAssociatedWithTime, const std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; linkViabilityCalculators=std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt;())</argsstring>
        <name>simulateObservationsWithCheckAndLinkEndIdOutput</name>
        <param>
          <type>const std::vector&lt; TimeType &gt; &amp;</type>
          <declname>observationTimes</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt;</type>
          <declname>observationModel</declname>
        </param>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndAssociatedWithTime</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;</type>
          <declname>linkViabilityCalculators</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to simulate observables, checking whether they are viable according to settings passed to this function. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate observables, checking whether they are viable according to settings passed to this function (if viability calculators are passed to this function). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>Times at which observables are to be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Model used to compute observables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndAssociatedWithTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Model Reference link end for observables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkViabilityCalculators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Observations at given times (concatenated in an Eigen vector), with associated times and reference link end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationSimulator.h" line="116" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationSimulator.h" bodystart="116" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="d8/d9d/observationViabilityCalculator_8h_1aaa660336c8679c1c54debbb93b01f2d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tudat::observation_models::isObservationViable</definition>
        <argsstring>(const std::vector&lt; Eigen::Vector6d &gt; &amp;states, const std::vector&lt; double &gt; &amp;times, const LinkEnds &amp;linkEnds, const std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; &gt; &amp;viabilityCalculators)</argsstring>
        <name>isObservationViable</name>
        <param>
          <type>const std::vector&lt; Eigen::Vector6d &gt; &amp;</type>
          <declname>states</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>times</declname>
        </param>
        <param>
          <type>const LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt; &gt; &amp;</type>
          <declname>viabilityCalculators</declname>
        </param>
        <briefdescription>
<para>Function to check whether an observation is viable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check whether an observation is viable. The input from which the viability of an observation is calculated are a vector of times and states of the link ends involved in the observation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>times</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of times of the link ends involved in the observation, in the order as provided by the function computeObservationsAndLinkEndData of the associated <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>states</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of states of the link ends involved in the observation, in the order as provided by the function computeObservationsAndLinkEndData of the associated <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends for current observation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viabilityCalculators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of viability calculators, for each set of link ends (function retrieves vector for linkEnds input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if observation is viable, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observationViabilityCalculator.cpp" line="20" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observationViabilityCalculator.cpp" bodystart="20" bodyend="32" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d8/d9d/observationViabilityCalculator_8h_1af66c0ea21c03c06d46b9f21b26c60382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tudat::observation_models::isObservationViable</definition>
        <argsstring>(const std::vector&lt; Eigen::Vector6d &gt; &amp;states, const std::vector&lt; double &gt; &amp;times, const std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; &amp;viabilityCalculators)</argsstring>
        <name>isObservationViable</name>
        <param>
          <type>const std::vector&lt; Eigen::Vector6d &gt; &amp;</type>
          <declname>states</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>times</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt; &amp;</type>
          <declname>viabilityCalculators</declname>
        </param>
        <briefdescription>
<para>Function to check whether an observation is viable. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check whether an observation is viable. The input from which the viability of an observation is calculated are a vector of times and states of the link ends involved in the observation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>times</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of times of the link ends involved in the observation, in the order as provided by the function computeObservationsAndLinkEndData of the associated <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>states</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of states of the link ends involved in the observation, in the order as provided by the function computeObservationsAndLinkEndData of the associated <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viabilityCalculators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of viability calculators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if observation is viable, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observationViabilityCalculator.cpp" line="35" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/observationViabilityCalculator.cpp" bodystart="35" bodyend="51" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d8/d9d/observationViabilityCalculator_8h_1a2182d8b2856f016078da9e5e938776b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationViabilitySettings &gt; tudat::observation_models::elevationAngleViabilitySettings</definition>
        <argsstring>(const std::pair&lt; std::string, std::string &gt; associatedLinkEnd, const double elevationAngle)</argsstring>
        <name>elevationAngleViabilitySettings</name>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt;</type>
          <declname>associatedLinkEnd</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>elevationAngle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="359" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="359" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="d8/d9d/observationViabilityCalculator_8h_1acbdb5c8f095292f8044f4241e3ae44bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationViabilitySettings &gt; tudat::observation_models::bodyAvoidanceAngleViabilitySettings</definition>
        <argsstring>(const std::pair&lt; std::string, std::string &gt; associatedLinkEnd, const std::string bodyToAvoid, const double avoidanceAngle)</argsstring>
        <name>bodyAvoidanceAngleViabilitySettings</name>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt;</type>
          <declname>associatedLinkEnd</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyToAvoid</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>avoidanceAngle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="367" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="367" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="d8/d9d/observationViabilityCalculator_8h_1ac71e3038b89d120628b46648f60cdeb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationViabilitySettings &gt; tudat::observation_models::bodyOccultationViabilitySettings</definition>
        <argsstring>(const std::pair&lt; std::string, std::string &gt; associatedLinkEnd, const double occultingBody)</argsstring>
        <name>bodyOccultationViabilitySettings</name>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt;</type>
          <declname>associatedLinkEnd</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>occultingBody</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" line="376" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/observationViabilityCalculator.h" bodystart="376" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7b/oneWayDopplerObservationModel_8h_1a71c750556ecf68e38aa9ccf4420afccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ObservationScalarType</type>
        <definition>ObservationScalarType tudat::observation_models::calculateLineOfSightVelocityAsCFraction</definition>
        <argsstring>(const Eigen::Matrix&lt; ObservationScalarType, 3, 1 &gt; &amp;lineOfSightUnitVector, const Eigen::Matrix&lt; ObservationScalarType, 3, 1 &gt; &amp;velocityVector)</argsstring>
        <name>calculateLineOfSightVelocityAsCFraction</name>
        <param>
          <type>const Eigen::Matrix&lt; ObservationScalarType, 3, 1 &gt; &amp;</type>
          <declname>lineOfSightUnitVector</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; ObservationScalarType, 3, 1 &gt; &amp;</type>
          <declname>velocityVector</declname>
        </param>
        <briefdescription>
<para>Function to compute the component of a (velocity) vector projected along a unit vector, divided by speed of light. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the component of a (velocity) vector projected along a unit vector, divided by speed of light. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lineOfSightUnitVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Unit vector along which velocityVector is to be projected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocityVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector for which component along lineOfSightUnitVector is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The component of a (velocity) vector projected along a unit vector, divided by speed of light. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/oneWayDopplerObservationModel.h" line="42" column="23" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/oneWayDopplerObservationModel.h" bodystart="42" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7b/oneWayDopplerObservationModel_8h_1a2f4757226dec9124c633059db6fa8e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ObservationScalarType</type>
        <definition>ObservationScalarType tudat::observation_models::calculateLineOfSightVelocityAsCFractionFromTransmitterStateFunction</definition>
        <argsstring>(const Eigen::Matrix&lt; ObservationScalarType, 3, 1 &gt; &amp;receiverPosition, const std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt;(const double) &gt; &amp;transmitterStateFunction, const TimeType currentTime)</argsstring>
        <name>calculateLineOfSightVelocityAsCFractionFromTransmitterStateFunction</name>
        <param>
          <type>const Eigen::Matrix&lt; ObservationScalarType, 3, 1 &gt; &amp;</type>
          <declname>receiverPosition</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt;(const double) &gt; &amp;</type>
          <declname>transmitterStateFunction</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>currentTime</declname>
        </param>
        <briefdescription>
<para>Function to compute component of transmitter velocity projected along line-of-sight vector, divided by speed of light. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute component of transmitter velocity projected along line-of-sight vector, divided by speed of light, from the receiver position and transmitter state function. The unit vector is computed in the direction from the transmitter to the receiver <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>receiverPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of receiver </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitterStateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the Cartesian state of the transmitter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which transmitterStateFunction is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Component of transmitter velocity projected along line-of-sight vector to receiver, divided by speed of light. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/oneWayDopplerObservationModel.h" line="60" column="23" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/oneWayDopplerObservationModel.h" bodystart="60" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7b/oneWayDopplerObservationModel_8h_1af900a4d4aab9318602c1837883ddef79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ObservationScalarType</type>
        <definition>ObservationScalarType tudat::observation_models::calculateLineOfSightVelocityAsCFractionFromReceiverStateFunction</definition>
        <argsstring>(const std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt;(const double) &gt; &amp;receiverStateFunction, const Eigen::Matrix&lt; ObservationScalarType, 3, 1 &gt; &amp;transmitterPosition, const TimeType currentTime)</argsstring>
        <name>calculateLineOfSightVelocityAsCFractionFromReceiverStateFunction</name>
        <param>
          <type>const std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt;(const double) &gt; &amp;</type>
          <declname>receiverStateFunction</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; ObservationScalarType, 3, 1 &gt; &amp;</type>
          <declname>transmitterPosition</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>currentTime</declname>
        </param>
        <briefdescription>
<para>Function to compute component of transmitter velocity projected along line-of-sight vector, divided by speed of light. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute component of transmitter velocity projected along line-of-sight vector, divided by speed of light, from the receiver state function and transmitter position. The unit vector is computed in the direction from the transmitter to the receiver <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>receiverStateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the Cartesian state of the receiver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitterPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position of transmitter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which transmitterStateFunction is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Component of transmitter velocity projected along line-of-sight vector to receiver, divided by speed of light. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/oneWayDopplerObservationModel.h" line="81" column="23" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/oneWayDopplerObservationModel.h" bodystart="81" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7b/oneWayDopplerObservationModel_8h_1ae26f64018ec430a5e083200730ceb467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ObservationScalarType</type>
        <definition>ObservationScalarType tudat::observation_models::computeOneWayFirstOrderDopplerTaylorSeriesExpansion</definition>
        <argsstring>(Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt; &amp;transmitterState, Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt; &amp;receiverState, Eigen::Matrix&lt; ObservationScalarType, 1, 3 &gt; &amp;lightTimeWrtTransmitterPositionPartial, Eigen::Matrix&lt; ObservationScalarType, 1, 3 &gt; &amp;lightTimeWrtReceiverPositionPartial, const int taylorSeriesOrder)</argsstring>
        <name>computeOneWayFirstOrderDopplerTaylorSeriesExpansion</name>
        <param>
          <type>Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt; &amp;</type>
          <declname>transmitterState</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt; &amp;</type>
          <declname>receiverState</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; ObservationScalarType, 1, 3 &gt; &amp;</type>
          <declname>lightTimeWrtTransmitterPositionPartial</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; ObservationScalarType, 1, 3 &gt; &amp;</type>
          <declname>lightTimeWrtReceiverPositionPartial</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>taylorSeriesOrder</declname>
        </param>
        <briefdescription>
<para>Function to compute first-order (radial) Doppler term from a Taylor series expansion. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute first-order (radial) Doppler term from a Taylor series expansion. The function computes the (dt1/dt2 -1) term, with t2 the coordinate reception time and t1 the coordinate transmission time of the signal. Light time corrections are not included in this function. The Taylor series of the denominator of dt1/dt2 is used in the calculation, to an order that is provided as input. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transmitterState</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of the transmitter at t1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiverState</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of the receiver at t2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeWrtTransmitterPositionPartial</parametername>
</parameternamelist>
<parameterdescription>
<para>Light time partial w.r.t. transmitter position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeWrtReceiverPositionPartial</parametername>
</parameternamelist>
<parameterdescription>
<para>Light time partial w.r.t. receiver position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>taylorSeriesOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Order to which Taylor series is to be expanded </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>First-order Doppler effect for electromagnetic signal transmission from transmitter to receiver as: (dt1/dt2 -1) with t2 the coordinate reception time and t1 the coordinate transmission time of the signal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/oneWayDopplerObservationModel.h" line="106" column="23" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/oneWayDopplerObservationModel.h" bodystart="106" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7b/oneWayDopplerObservationModel_8h_1a570f419b86cb86688d1c504239a05fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>ObservationScalarType</type>
        <definition>ObservationScalarType tudat::observation_models::computeDopplerProperTimeInfluenceTaylorSeriesExpansion</definition>
        <argsstring>(const ObservationScalarType transmitterProperTimeRateDifference, const ObservationScalarType receiverProperTimeRateDifference, const int taylorSeriesOrder)</argsstring>
        <name>computeDopplerProperTimeInfluenceTaylorSeriesExpansion</name>
        <param>
          <type>const ObservationScalarType</type>
          <declname>transmitterProperTimeRateDifference</declname>
        </param>
        <param>
          <type>const ObservationScalarType</type>
          <declname>receiverProperTimeRateDifference</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>taylorSeriesOrder</declname>
        </param>
        <briefdescription>
<para>Function to compute proper time contribution one-way Doppler term from a Taylor series expansion. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute proper time contribution one-way Doppler term from a Taylor series expansion. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transmitterProperTimeRateDifference</parametername>
</parameternamelist>
<parameterdescription>
<para>Derivative of deviation between proper and coordinate time (Delta - t) w.r.t. coordinate time t at transmitter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiverProperTimeRateDifference</parametername>
</parameternamelist>
<parameterdescription>
<para>Derivative of deviation between proper and coordinate time (Delta - t) w.r.t. coordinate time t at receiver </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>taylorSeriesOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Order to which Taylor series is to be expanded </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/oneWayDopplerObservationModel.h" line="146" column="23" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/oneWayDopplerObservationModel.h" bodystart="146" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1a1bc3601152f5503690061380ad597f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt;</type>
        <definition>std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;,std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; tudat::observation_models::simulateSingleObservationSet</definition>
        <argsstring>(const std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; TimeType &gt; &gt; observationsToSimulate, const std::shared_ptr&lt; ObservationModel&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; observationModel, const std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; currentObservationViabilityCalculators=std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt;())</argsstring>
        <name>simulateSingleObservationSet</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; TimeType &gt; &gt;</type>
          <declname>observationsToSimulate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/df7/classtudat_1_1observation__models_1_1ObservationModel" kindref="compound">ObservationModel</ref>&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt;</type>
          <declname>observationModel</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;</type>
          <declname>currentObservationViabilityCalculators</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to compute observations at times defined by settings object using a given observation model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute observations at times defined by settings object using a given observation model <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationsToSimulate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that computes/defines settings for observation times/reference link end </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation model that is to be used to compute observations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentObservationViabilityCalculators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of observable values and observation time (with associated reference link end) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="142" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="142" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1a3a3e9568803c4b19baddae3518cb5e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt;</type>
        <definition>std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;,std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; tudat::observation_models::simulateSingleObservationSet</definition>
        <argsstring>(const std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; TimeType &gt; &gt; observationsToSimulate, const std::shared_ptr&lt; ObservationSimulator&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; observationSimulator, const LinkEnds &amp;linkEnds, const std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; currentObservationViabilityCalculators=std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt;())</argsstring>
        <name>simulateSingleObservationSet</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; TimeType &gt; &gt;</type>
          <declname>observationsToSimulate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d05/classtudat_1_1observation__models_1_1ObservationSimulator" kindref="compound">ObservationSimulator</ref>&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt;</type>
          <declname>observationSimulator</declname>
        </param>
        <param>
          <type>const LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;</type>
          <declname>currentObservationViabilityCalculators</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to simulate observations for single observable and single set of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate observations for single observable and single set of link ends. From the observation time settings and the observation simulator, the required observations are simulated and returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationsToSimulate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that computes/defines settings for observation times/reference link end </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationSimulator</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation simulator for observable for which observations are to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link end set for which observations are to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentObservationViabilityCalculators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of first: vector of observations; second: vector of times at which observations are taken (reference to link end defined in observationsToSimulate). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="248" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="248" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1a34a2d0a2faebfb6681ce3ac1ab7044d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; TimeType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; TimeType &gt; &gt; &gt; &gt; tudat::observation_models::createObservationSimulationTimeSettingsMap</definition>
        <argsstring>(const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &amp;originalMap)</argsstring>
        <name>createObservationSimulationTimeSettingsMap</name>
        <param>
          <type>const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &amp;</type>
          <declname>originalMap</declname>
        </param>
        <briefdescription>
<para>Function to generate <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref> objects from simple time list input. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref> objects, as required for observation simulation from simulateSingleObservationSet from simple time vectors input. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>originalMap</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation times per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="dd/d0d/structtudat_1_1observation__models_1_1TabulatedObservationSimulationTimeSettings" kindref="compound">TabulatedObservationSimulationTimeSettings</ref> objects from time list input (originalMap) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="288" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="288" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1ac9bf6bff686dd41223bcbccd19c21e95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;,std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt; tudat::observation_models::simulateObservations</definition>
        <argsstring>(const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &amp;observationsToSimulate, const std::map&lt; ObservableType, std::shared_ptr&lt; ObservationSimulatorBase&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;observationSimulators, const PerObservableObservationViabilityCalculatorList viabilityCalculatorList=PerObservableObservationViabilityCalculatorList())</argsstring>
        <name>simulateObservations</name>
        <param>
          <type>const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &amp;</type>
          <declname>observationsToSimulate</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::shared_ptr&lt; <ref refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" kindref="compound">ObservationSimulatorBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;</type>
          <declname>observationSimulators</declname>
        </param>
        <param>
          <type>const PerObservableObservationViabilityCalculatorList</type>
          <declname>viabilityCalculatorList</declname>
          <defval>PerObservableObservationViabilityCalculatorList()</defval>
        </param>
        <briefdescription>
<para>Function to simulate observations from set of observables and link and sets and simple vectors of requested times. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate observations from set of observables and link and sets and simple vectors of requested times. Function calls function for creation of <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref> and subsequently uses these for function call to observation simulation function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationsToSimulate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation times per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationSimulators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of Observation simulators per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Simulated observatoon values and associated times for requested observable types and link end sets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="325" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="325" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1a5da44366d61fb38f083522c22432886a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;,std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt; tudat::observation_models::simulateObservations</definition>
        <argsstring>(const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; TimeType &gt; &gt; &gt; &gt; &amp;observationsToSimulate, const std::map&lt; ObservableType, std::shared_ptr&lt; ObservationSimulatorBase&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;observationSimulators, const PerObservableObservationViabilityCalculatorList viabilityCalculatorList=PerObservableObservationViabilityCalculatorList())</argsstring>
        <name>simulateObservations</name>
        <param>
          <type>const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>observationsToSimulate</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::shared_ptr&lt; <ref refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" kindref="compound">ObservationSimulatorBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;</type>
          <declname>observationSimulators</declname>
        </param>
        <param>
          <type>const PerObservableObservationViabilityCalculatorList</type>
          <declname>viabilityCalculatorList</declname>
          <defval>PerObservableObservationViabilityCalculatorList()</defval>
        </param>
        <briefdescription>
<para>Function to simulate observations from set of observables and link and sets. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate observations from set of observables, link ends and observation time settings Iterates over all observables and link ends and simulates observations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationsToSimulate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation time settings per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationSimulators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of Observation simulators per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viabilityCalculatorList</parametername>
</parameternamelist>
<parameterdescription>
<para>List (per observable type and per link ends) of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Simulated observatoon values and associated times for requested observable types and link end sets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="351" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="351" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1ab33eb9b497c80918c9085be2fdd14bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;,std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt; tudat::observation_models::simulateObservationsWithNoise</definition>
        <argsstring>(const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; TimeType &gt; &gt; &gt; &gt; &amp;observationsToSimulate, const std::map&lt; ObservableType, std::shared_ptr&lt; ObservationSimulatorBase&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;observationSimulators, const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::function&lt; Eigen::VectorXd(const double) &gt; &gt; &gt; &amp;noiseFunctions, const PerObservableObservationViabilityCalculatorList viabilityCalculatorList=PerObservableObservationViabilityCalculatorList())</argsstring>
        <name>simulateObservationsWithNoise</name>
        <param>
          <type>const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>observationsToSimulate</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::shared_ptr&lt; <ref refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" kindref="compound">ObservationSimulatorBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;</type>
          <declname>observationSimulators</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::function&lt; Eigen::VectorXd(const double) &gt; &gt; &gt; &amp;</type>
          <declname>noiseFunctions</declname>
        </param>
        <param>
          <type>const PerObservableObservationViabilityCalculatorList</type>
          <declname>viabilityCalculatorList</declname>
          <defval>PerObservableObservationViabilityCalculatorList()</defval>
        </param>
        <briefdescription>
<para>Function to simulate observations with observation noise from set of observables and link and sets. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate observations with observation noise from set of observables, link ends and observation time settings Iterates over all observables and link ends, simulates observations and adds noise according to given noise function. This function allows different noise functions to be defined for each observable/link ends combination <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationsToSimulate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation time settings per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationSimulators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of Observation simulators per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noiseFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>Double map with functions that return the observation noise as a function of observation time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viabilityCalculatorList</parametername>
</parameternamelist>
<parameterdescription>
<para>List (per observable type and per link ends) of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Simulated observatoon values and associated times for requested observable types and link end sets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="471" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="471" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1af05e3b083df81af33f98cfecd7a2d8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::observation_models::getIdenticallyAndIndependentlyDistributedNoise</definition>
        <argsstring>(const std::function&lt; double(const double) &gt; noiseFunction, const int observationSize, const double evaluationTime)</argsstring>
        <name>getIdenticallyAndIndependentlyDistributedNoise</name>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>noiseFunction</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>observationSize</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>evaluationTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/simulateObservations.cpp" line="9" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/simulateObservations.cpp" bodystart="9" bodyend="20" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" declline="545" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1a6e8ec01cbd34c6bb1764660ef49d189f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;,std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt; tudat::observation_models::simulateObservationsWithNoise</definition>
        <argsstring>(const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; TimeType &gt; &gt; &gt; &gt; &amp;observationsToSimulate, const std::map&lt; ObservableType, std::shared_ptr&lt; ObservationSimulatorBase&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;observationSimulators, const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::function&lt; double(const double) &gt; &gt; &gt; &amp;noiseFunctions, const PerObservableObservationViabilityCalculatorList viabilityCalculatorList=PerObservableObservationViabilityCalculatorList())</argsstring>
        <name>simulateObservationsWithNoise</name>
        <param>
          <type>const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>observationsToSimulate</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::shared_ptr&lt; <ref refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" kindref="compound">ObservationSimulatorBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;</type>
          <declname>observationSimulators</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::function&lt; double(const double) &gt; &gt; &gt; &amp;</type>
          <declname>noiseFunctions</declname>
        </param>
        <param>
          <type>const PerObservableObservationViabilityCalculatorList</type>
          <declname>viabilityCalculatorList</declname>
          <defval>PerObservableObservationViabilityCalculatorList()</defval>
        </param>
        <briefdescription>
<para>Function to simulate observations with observation noise from set of observables and link and sets. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate observations with observation noise from set of observables, link ends and observation time settings Iterates over all observables and link ends, simulates observations and adds noise according to given noise function. This function allows different noise functions to be defined for each observable/link ends combination. However, the noise functions required as input are defined as doubles. For multi-valued observables (e.g. angular position), the noise function will be equal for all entries. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationsToSimulate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation time settings per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationSimulators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of Observation simulators per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noiseFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>Double map with functions that return the observation noise as a function of observation time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viabilityCalculatorList</parametername>
</parameternamelist>
<parameterdescription>
<para>List (per observable type and per link ends) of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Simulated observatoon values and associated times for requested observable types and link end sets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="568" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="568" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1afd0140111ba28984404ee73e5f6cacdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;,std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt; tudat::observation_models::simulateObservationsWithNoise</definition>
        <argsstring>(const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; TimeType &gt; &gt; &gt; &gt; &amp;observationsToSimulate, const std::map&lt; ObservableType, std::shared_ptr&lt; ObservationSimulatorBase&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;observationSimulators, const std::map&lt; ObservableType, std::function&lt; Eigen::VectorXd(const double) &gt; &gt; &amp;noiseFunctions, const PerObservableObservationViabilityCalculatorList viabilityCalculatorList=PerObservableObservationViabilityCalculatorList())</argsstring>
        <name>simulateObservationsWithNoise</name>
        <param>
          <type>const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>observationsToSimulate</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::shared_ptr&lt; <ref refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" kindref="compound">ObservationSimulatorBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;</type>
          <declname>observationSimulators</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::function&lt; Eigen::VectorXd(const double) &gt; &gt; &amp;</type>
          <declname>noiseFunctions</declname>
        </param>
        <param>
          <type>const PerObservableObservationViabilityCalculatorList</type>
          <declname>viabilityCalculatorList</declname>
          <defval>PerObservableObservationViabilityCalculatorList()</defval>
        </param>
        <briefdescription>
<para>Function to simulate observations with observation noise from set of observables and link and sets. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate observations with observation noise from set of observables, link ends and observation time settings Iterates over all observables and link ends, simulates observations and adds noise according to given noise function. This function allows different noise functions to be defined for each observable, but independent of link end. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationsToSimulate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation time settings per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationSimulators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of Observation simulators per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noiseFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>Map with functions that return the observation noise as a function of observation time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viabilityCalculatorList</parametername>
</parameternamelist>
<parameterdescription>
<para>List (per observable type and per link ends) of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Simulated observatoon values and associated times for requested observable types and link end sets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="613" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="613" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1a91a90735f771e38ec43ea3280ccc23bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;,std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt; tudat::observation_models::simulateObservationsWithNoise</definition>
        <argsstring>(const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; TimeType &gt; &gt; &gt; &gt; &amp;observationsToSimulate, const std::map&lt; ObservableType, std::shared_ptr&lt; ObservationSimulatorBase&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;observationSimulators, const std::map&lt; ObservableType, std::function&lt; double(const double) &gt; &gt; &amp;noiseFunctions, const PerObservableObservationViabilityCalculatorList viabilityCalculatorList=PerObservableObservationViabilityCalculatorList())</argsstring>
        <name>simulateObservationsWithNoise</name>
        <param>
          <type>const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>observationsToSimulate</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::shared_ptr&lt; <ref refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" kindref="compound">ObservationSimulatorBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;</type>
          <declname>observationSimulators</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::function&lt; double(const double) &gt; &gt; &amp;</type>
          <declname>noiseFunctions</declname>
        </param>
        <param>
          <type>const PerObservableObservationViabilityCalculatorList</type>
          <declname>viabilityCalculatorList</declname>
          <defval>PerObservableObservationViabilityCalculatorList()</defval>
        </param>
        <briefdescription>
<para>Function to simulate observations with observation noise from set of observables and link and sets. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate observations with observation noise from set of observables, link ends and observation time settings Iterates over all observables and link ends, simulates observations and adds noise according to given noise function. This function allows different noise functions to be defined for each observable, but independent of link end. The noise functions required as input are defined as doubles. For multi-valued observables (e.g. angular position), the noise function will be equal for all entries. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationsToSimulate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation time settings per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationSimulators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of Observation simulators per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noiseFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>Map with functions that return the observation noise as a function of observation time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viabilityCalculatorList</parametername>
</parameternamelist>
<parameterdescription>
<para>List (per observable type and per link ends) of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Simulated observatoon values and associated times for requested observable types and link end sets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="667" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="667" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1af99a818eca852b5c09e21df167804647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;,std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt; tudat::observation_models::simulateObservationsWithNoise</definition>
        <argsstring>(const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; TimeType &gt; &gt; &gt; &gt; &amp;observationsToSimulate, const std::map&lt; ObservableType, std::shared_ptr&lt; ObservationSimulatorBase&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;observationSimulators, const std::function&lt; double(const double) &gt; &amp;noiseFunction, const PerObservableObservationViabilityCalculatorList viabilityCalculatorList=PerObservableObservationViabilityCalculatorList())</argsstring>
        <name>simulateObservationsWithNoise</name>
        <param>
          <type>const std::map&lt; ObservableType, std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; TimeType &gt; &gt; &gt; &gt; &amp;</type>
          <declname>observationsToSimulate</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::shared_ptr&lt; <ref refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" kindref="compound">ObservationSimulatorBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &gt; &amp;</type>
          <declname>observationSimulators</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt; &amp;</type>
          <declname>noiseFunction</declname>
        </param>
        <param>
          <type>const PerObservableObservationViabilityCalculatorList</type>
          <declname>viabilityCalculatorList</declname>
          <defval>PerObservableObservationViabilityCalculatorList()</defval>
        </param>
        <briefdescription>
<para>Function to simulate observations with observation noise from set of observables and link and sets. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to simulate observations with observation noise from set of observables, link ends and observation time settings Iterates over all observables and link ends, simulates observations and adds noise according to given noise function. This function allows a single noise function to be provided, which is used for each observable/link end combination <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationsToSimulate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observation time settings per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationSimulators</parametername>
</parameternamelist>
<parameterdescription>
<para>List of Observation simulators per link end set per observable type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noiseFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that returns the observation noise as a function of observation time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viabilityCalculatorList</parametername>
</parameternamelist>
<parameterdescription>
<para>List (per observable type and per link ends) of observation viability calculators, which are used to reject simulated observation if they dont fulfill a given (set of) conditions, e.g. minimum elevation angle (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Simulated observatoon values and associated times for requested observable types and link end sets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="706" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="706" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1a6058d90af2f44981bcc932d76a12ca2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::vector&lt; TimeType &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;,std::vector&lt; TimeType &gt; &gt; &gt; &gt; tudat::observation_models::removeLinkIdFromSimulatedObservations</definition>
        <argsstring>(std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt; simulatedObservations)</argsstring>
        <name>removeLinkIdFromSimulatedObservations</name>
        <param>
          <type>std::map&lt; ObservableType, std::map&lt; LinkEnds, std::pair&lt; Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;, std::pair&lt; std::vector&lt; TimeType &gt;, LinkEndType &gt; &gt; &gt; &gt;</type>
          <declname>simulatedObservations</declname>
        </param>
        <briefdescription>
<para>Function to remove link id from the simulated observations. </para>
        </briefdescription>
        <detaileddescription>
<para>/param simulatedObservations The simulated observation /return Simulated observations without link end id </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="736" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="736" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9f/simulateObservations_8h_1a2a1d4b477fcd6fc0c8a5cbf14a5d653c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::function&lt; double(const double) &gt;</type>
        <definition>std::function&lt; double( const double ) &gt; tudat::observation_models::getGaussianDistributionNoiseFunction</definition>
        <argsstring>(const double standardDeviation, const double mean=0.0, const double seed=0.0)</argsstring>
        <name>getGaussianDistributionNoiseFunction</name>
        <param>
          <type>const double</type>
          <declname>standardDeviation</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>mean</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>seed</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" line="758" column="22" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/simulateObservations.h" bodystart="758" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1ac83a3398994a269c4d1bea6e3f8921a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const ObservableType &amp;observableType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const ObservableType &amp;</type>
          <declname>observableType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>ObservableType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="52" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a121013c711b98dd0f7a511c2f299b72a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, ObservableType &amp;observableType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>ObservableType &amp;</type>
          <declname>observableType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>ObservableType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="58" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1ade3ad486e51c3c7fa9070a179540329e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const ObservationBiasTypes &amp;observableBiasType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const ObservationBiasTypes &amp;</type>
          <declname>observableBiasType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>ObservableType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="75" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a193386188e9eefc25e94c0e1a2e32c3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, ObservationBiasTypes &amp;observableBiasType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>ObservationBiasTypes &amp;</type>
          <declname>observableBiasType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>ObservableType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="81" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a066dab576d8b144adceb7b5181473158" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const LinkEndType &amp;observableType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const LinkEndType &amp;</type>
          <declname>observableType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>LinkEndType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="114" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a6e0a0a6c7ba5444c067a27865d05fae7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, LinkEndType &amp;observableType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>LinkEndType &amp;</type>
          <declname>observableType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>LinkEndType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="120" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a0ab398329fcab6b6515b5887ad5fb7c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const DopplerProperTimeRateType &amp;rateType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const DopplerProperTimeRateType &amp;</type>
          <declname>rateType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>LinkEndType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="133" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1abd2bb66357a061f24e5568cdc2148e3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, DopplerProperTimeRateType &amp;rateType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>DopplerProperTimeRateType &amp;</type>
          <declname>rateType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>LinkEndType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="139" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1aa5ef60fd1914005323a4358f90a81d42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const LightTimeCorrectionType &amp;correctionType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const LightTimeCorrectionType &amp;</type>
          <declname>correctionType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>LinkEndType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="152" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a97516bcf077d610f10268029d43055a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, LightTimeCorrectionType &amp;correctionType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>LightTimeCorrectionType &amp;</type>
          <declname>correctionType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>LinkEndType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="158" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1ab24cee6bedd45e76645f02027f7e7d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; ObservationSettings &gt; &amp;parameterSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt; &amp;</type>
          <declname>parameterSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput>SingleDependentVariableSaveSettings</computeroutput> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" line="23" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" bodystart="23" bodyend="108" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="165" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1ac3275c8a4aa826cd22aedb52af446802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; ObservationSettings &gt; &amp;parameterSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt; &amp;</type>
          <declname>parameterSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" line="110" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" bodystart="110" bodyend="223" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="168" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a16a1b57c4d42078fd638ace36c4c1c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; ObservationBiasSettings &gt; &amp;parameterSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt; &amp;</type>
          <declname>parameterSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" line="226" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" bodystart="226" bodyend="293" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="174" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1aface829c105aec98375dcd71650e9514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; ObservationBiasSettings &gt; &amp;parameterSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt; &amp;</type>
          <declname>parameterSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" line="295" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" bodystart="295" bodyend="356" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="177" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a6bbe2f7873e0f18ae9f58e8b1cd02241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; DopplerProperTimeRateSettings &gt; &amp;properTimeRateSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/db7/classtudat_1_1observation__models_1_1DopplerProperTimeRateSettings" kindref="compound">DopplerProperTimeRateSettings</ref> &gt; &amp;</type>
          <declname>properTimeRateSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" line="359" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" bodystart="359" bodyend="384" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="182" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a89d38c38307109f0f7319c991cfa0f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; DopplerProperTimeRateSettings &gt; &amp;properTimeRateSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="db/db7/classtudat_1_1observation__models_1_1DopplerProperTimeRateSettings" kindref="compound">DopplerProperTimeRateSettings</ref> &gt; &amp;</type>
          <declname>properTimeRateSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" line="386" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" bodystart="386" bodyend="407" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="185" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1abc5a2f6d94e013c3aea9c1ec50655fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &amp;lightTimeCorrectionSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &amp;</type>
          <declname>lightTimeCorrectionSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" line="410" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" bodystart="410" bodyend="437" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="190" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a9f49361f6f7f51ba243f296c91a6c79a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &amp;lightTimeCorrectionSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &amp;</type>
          <declname>lightTimeCorrectionSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" line="439" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" bodystart="439" bodyend="464" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="193" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1ad66d08db1f6047d0882b909a893d6527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; double &gt; &gt; &amp;observationSimulationTimeSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>observationSimulationTimeSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" line="468" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" bodystart="468" bodyend="493" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="197" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a1243fee240ba7bf97646e6a6f3a3b5d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; ObservationSimulationTimeSettings&lt; double &gt; &gt; &amp;observationSimulationTimeSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d6/d91/structtudat_1_1observation__models_1_1ObservationSimulationTimeSettings" kindref="compound">ObservationSimulationTimeSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>observationSimulationTimeSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="200" column="6" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="200" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a93b16bf6b8c9aad12e63bb771dd54c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; ObservationViabilitySettings &gt; &amp;observationViabilitySettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt; &amp;</type>
          <declname>observationViabilitySettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref></computeroutput> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" line="496" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/observation.cpp" bodystart="496" bodyend="516" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/dab/observation_8h_1a1356a6e51eacfa51b36b2e824abee3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::observation_models::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; ObservationViabilitySettings &gt; &amp;observationViabilitySettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt; &amp;</type>
          <declname>observationViabilitySettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" line="207" column="6" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/observation.h" declline="207" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/da2/createLightTimeCalculator_8h_1ad91a6ef38f73654176df45883aff8ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/dc1/classtudat_1_1ephemerides_1_1Ephemeris" kindref="compound">ephemerides::Ephemeris</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ephemerides::Ephemeris &gt; tudat::observation_models::createReferencePointEphemeris</definition>
        <argsstring>(const std::shared_ptr&lt; simulation_setup::Body &gt; bodyWithReferencePoint, const std::shared_ptr&lt; ephemerides::RotationalEphemeris &gt; bodyRotationModel, const std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType &amp;) &gt; referencePointStateFunction)</argsstring>
        <name>createReferencePointEphemeris</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyWithReferencePoint</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/de4/classtudat_1_1ephemerides_1_1RotationalEphemeris" kindref="compound">ephemerides::RotationalEphemeris</ref> &gt;</type>
          <declname>bodyRotationModel</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt;(const TimeType &amp;) &gt;</type>
          <declname>referencePointStateFunction</declname>
        </param>
        <briefdescription>
<para>Function to create an ephemeris for a reference point on a body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an ephemeris for a reference point on a body, taking into account the time-variable rotation of the body and its global ephemeris <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyWithReferencePoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Body on which reference point is located </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyRotationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation model that is to be used for going from body-fixed to inertial frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referencePointStateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the state of the reference point on the body (in a body-fixed frame). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference point ephemeris in global coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCalculator.h" line="36" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCalculator.h" bodystart="36" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="dc/da2/createLightTimeCalculator_8h_1a6d0272b509c7886986336864a4e9b333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; const TimeType &amp;) &gt;</type>
        <definition>std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; const TimeType&amp; ) &gt; tudat::observation_models::getLinkEndCompleteEphemerisFunction</definition>
        <argsstring>(const std::shared_ptr&lt; simulation_setup::Body &gt; bodyWithLinkEnd, const std::pair&lt; std::string, std::string &gt; &amp;linkEndId)</argsstring>
        <name>getLinkEndCompleteEphemerisFunction</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyWithLinkEnd</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt; &amp;</type>
          <declname>linkEndId</declname>
        </param>
        <briefdescription>
<para>Function to retrieve a state function for a link end (either a body center of mass or ground station). </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve a state function for a link end (either a body center of mass or ground station). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyWithLinkEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Body on/in which link end is situated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndId</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of link end for which state function is to be created. First: name of body, second: name of reference point (empty if center of mass is to be used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested state function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCalculator.h" line="67" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCalculator.h" bodystart="67" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="dc/da2/createLightTimeCalculator_8h_1a3fa96ad1b69fbfa48636c4fc49de4e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; const TimeType) &gt;</type>
        <definition>std::function&lt; Eigen::Matrix&lt; StateScalarType, 6, 1 &gt; const TimeType ) &gt; tudat::observation_models::getLinkEndCompleteEphemerisFunction</definition>
        <argsstring>(const std::pair&lt; std::string, std::string &gt; linkEndId, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>getLinkEndCompleteEphemerisFunction</name>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt;</type>
          <declname>linkEndId</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create a state function of a link end, expressed in base frame. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a state function of a link end, expressed in base frame. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEndId</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the reference point for which state function is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested state function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCalculator.h" line="114" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCalculator.h" bodystart="114" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="dc/da2/createLightTimeCalculator_8h_1a88e365ddbb34be88071d46dfe0e5205e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d2/db1/classtudat_1_1observation__models_1_1LightTimeCalculator" kindref="compound">observation_models::LightTimeCalculator</ref>&lt; ObservationScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; observation_models::LightTimeCalculator&lt; ObservationScalarType, TimeType &gt; &gt; tudat::observation_models::createLightTimeCalculator</definition>
        <argsstring>(const std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt;(const TimeType) &gt; &amp;transmitterCompleteEphemeris, const std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt;(const TimeType) &gt; &amp;receiverCompleteEphemeris, const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt; &amp;lightTimeCorrections, const LinkEndId &amp;transmittingLinkEnd, const LinkEndId &amp;receivingLinkEnd)</argsstring>
        <name>createLightTimeCalculator</name>
        <param>
          <type>const std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt;(const TimeType) &gt; &amp;</type>
          <declname>transmitterCompleteEphemeris</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Matrix&lt; ObservationScalarType, 6, 1 &gt;(const TimeType) &gt; &amp;</type>
          <declname>receiverCompleteEphemeris</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrections</declname>
        </param>
        <param>
          <type>const LinkEndId &amp;</type>
          <declname>transmittingLinkEnd</declname>
        </param>
        <param>
          <type>const LinkEndId &amp;</type>
          <declname>receivingLinkEnd</declname>
        </param>
        <briefdescription>
<para>Function to create a light-time calculation object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a light-time calculation object from light time correction settings environment and link end state functions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transmitterCompleteEphemeris</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the transmitter Cartesian state as a function of time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiverCompleteEphemeris</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the receiver Cartesian state as a function of time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time corrections (w.r.t. Euclidean distance) that are applied when computing light time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmittingLinkEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for transmitting link end. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receivingLinkEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for receiving link end. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCalculator.h" line="140" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCalculator.h" bodystart="140" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="dc/da2/createLightTimeCalculator_8h_1aa7fa403c5c620f6d8244d239302c8ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d2/db1/classtudat_1_1observation__models_1_1LightTimeCalculator" kindref="compound">observation_models::LightTimeCalculator</ref>&lt; ObservationScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; observation_models::LightTimeCalculator&lt; ObservationScalarType, TimeType &gt; &gt; tudat::observation_models::createLightTimeCalculator</definition>
        <argsstring>(const LinkEndId &amp;transmittingLinkEnd, const LinkEndId &amp;receivingLinkEnd, const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt; &amp;lightTimeCorrections=std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt;())</argsstring>
        <name>createLightTimeCalculator</name>
        <param>
          <type>const LinkEndId &amp;</type>
          <declname>transmittingLinkEnd</declname>
        </param>
        <param>
          <type>const LinkEndId &amp;</type>
          <declname>receivingLinkEnd</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt; &amp;</type>
          <declname>lightTimeCorrections</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create a light-time calculation object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a light-time calculation object from light time correction settings environment and link end identifiers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transmittingLinkEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for transmitting link end. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receivingLinkEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for receiving link end. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lightTimeCorrections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of light time corrections (w.r.t. Euclidean distance) that are applied when computing light time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCalculator.h" line="176" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCalculator.h" bodystart="176" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="db/d1e/createLightTimeCorrection_8h_1af7b339bb20728236a746559710e9dcf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; LightTimeCorrectionSettings &gt; tudat::observation_models::firstOrderRelativisticLightTimeCorrectionSettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;perturbingBodies)</argsstring>
        <name>firstOrderRelativisticLightTimeCorrectionSettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>perturbingBodies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCorrection.h" line="105" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCorrection.h" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="db/d1e/createLightTimeCorrection_8h_1ab9d2c2a25efa58fd10b7d1c722c73d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dbd/classtudat_1_1observation__models_1_1LightTimeCorrection" kindref="compound">LightTimeCorrection</ref> &gt;</type>
        <definition>std::shared_ptr&lt; LightTimeCorrection &gt; tudat::observation_models::createLightTimeCorrections</definition>
        <argsstring>(const std::shared_ptr&lt; LightTimeCorrectionSettings &gt; correctionSettings, const simulation_setup::SystemOfBodies &amp;bodies, const std::pair&lt; std::string, std::string &gt; &amp;transmitter, const std::pair&lt; std::string, std::string &gt; &amp;receiver)</argsstring>
        <name>createLightTimeCorrections</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt;</type>
          <declname>correctionSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt; &amp;</type>
          <declname>transmitter</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt; &amp;</type>
          <declname>receiver</declname>
        </param>
        <briefdescription>
<para>Function to create object that computes a single (type of) correction to the light-time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create object that computes a single (type of) correction to the light-time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>correctionSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>User-defined settings for the light-time correction that is to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that constitutes the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitter</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of transmitting body/reference point (first/second) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiver</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of receiving body/reference point (first/second) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object for computing required light-time correction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createLightTimeCorrection.cpp" line="23" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createLightTimeCorrection.cpp" bodystart="23" bodyend="101" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createLightTimeCorrection.h" declline="120" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d5/d2d/createObservationManager_8h_1a4c94c7a62b3796cd44712b9b7c76c9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::observation_models::performObservationParameterEstimationClosureForSingleModelSet</definition>
        <argsstring>(const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::VectorXd &gt; &gt; parameter, const std::shared_ptr&lt; ObservationBias&lt; ObservationSize &gt; &gt; observationBias, const LinkEnds linkEnds, const ObservableType observableType)</argsstring>
        <name>performObservationParameterEstimationClosureForSingleModelSet</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::VectorXd &gt; &gt;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/dab/classtudat_1_1observation__models_1_1ObservationBias" kindref="compound">ObservationBias</ref>&lt; ObservationSize &gt; &gt;</type>
          <declname>observationBias</declname>
        </param>
        <param>
          <type>const LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const ObservableType</type>
          <declname>observableType</declname>
        </param>
        <briefdescription>
<para>Function to perform the closure a single observation bias and a single estimated bias parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to perform the closure a single observation bias and a single estimated bias parameter. Estimated parameter objects are typically created prior to observation models. This function must be called for the estimated parameter object creation to be finalized, in the case link properties are estimated (e.g. observation biases). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationManager.h" line="39" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationManager.h" bodystart="39" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="d5/d2d/createObservationManager_8h_1aa27c9c09647c42c35a630c599599998e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::observation_models::performObservationParameterEstimationClosure</definition>
        <argsstring>(std::shared_ptr&lt; ObservationSimulator&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; observationSimulator, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ObservationScalarType &gt; &gt; parametersToEstimate)</argsstring>
        <name>performObservationParameterEstimationClosure</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d1/d05/classtudat_1_1observation__models_1_1ObservationSimulator" kindref="compound">ObservationSimulator</ref>&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt;</type>
          <declname>observationSimulator</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ObservationScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to perform the closure between observation models and estimated parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to perform the closure between observation models and estimated parameters. Estimated parameter objects are typically created prior to observation models. This function must be called for the estimated parameter object creation to be finalized, in the case link properties are estimated (e.g. observation biases). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationManager.h" line="240" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationManager.h" bodystart="240" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="d5/d2d/createObservationManager_8h_1adcab2cf55111079f47941e63ed291755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>typename ObservationScalarType</type>
          </param>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d5d/classtudat_1_1observation__models_1_1ObservationManagerBase" kindref="compound">ObservationManagerBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; ObservationManagerBase&lt; ObservationScalarType, TimeType &gt; &gt; tudat::observation_models::createObservationManager</definition>
        <argsstring>(const ObservableType observableType, const std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSettings &gt; &gt; settingsPerLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ObservationScalarType &gt; &gt; parametersToEstimate, const std::shared_ptr&lt; propagators::CombinedStateTransitionAndSensitivityMatrixInterface &gt; stateTransitionMatrixInterface)</argsstring>
        <name>createObservationManager</name>
        <param>
          <type>const ObservableType</type>
          <declname>observableType</declname>
        </param>
        <param>
          <type>const std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt; &gt;</type>
          <declname>settingsPerLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ObservationScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">propagators::CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
          <declname>stateTransitionMatrixInterface</declname>
        </param>
        <briefdescription>
<para>Function to create an object to simulate observations of a given type and associated partials. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an object to simulate observations of a given type and associated partials <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable for which object is to simulate <ref refid="d1/d05/classtudat_1_1observation__models_1_1ObservationSimulator" kindref="compound">ObservationSimulator</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settingsPerLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of settings for the observation models that are to be created in the simulator object: one for each required set of link ends (each settings object must be consistent with observableType). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of Body objects that comprise the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing the list of all parameters that are to be estimated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateTransitionMatrixInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Object used to compute the state transition/sensitivity matrix at a given time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object that simulates the observations of a given type and associated partials </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationManager.h" line="293" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationManager.h" bodystart="293" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="d5/d2d/createObservationManager_8h_1a8568ee5b9bb6d3267a9deecd82e1dcd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
          </param>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d5d/classtudat_1_1observation__models_1_1ObservationManagerBase" kindref="compound">ObservationManagerBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; ObservationManagerBase&lt; ObservationScalarType, TimeType &gt; &gt; tudat::observation_models::createObservationManagerBase</definition>
        <argsstring>(const ObservableType observableType, const std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSettings &gt; &gt; settingsPerLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; ObservationScalarType &gt; &gt; parametersToEstimate, const std::shared_ptr&lt; propagators::CombinedStateTransitionAndSensitivityMatrixInterface &gt; stateTransitionMatrixInterface)</argsstring>
        <name>createObservationManagerBase</name>
        <param>
          <type>const ObservableType</type>
          <declname>observableType</declname>
        </param>
        <param>
          <type>const std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt; &gt;</type>
          <declname>settingsPerLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; ObservationScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">propagators::CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
          <declname>stateTransitionMatrixInterface</declname>
        </param>
        <briefdescription>
<para>Function to create an object to simulate observations of a given type and associated partials. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an object to simulate observations of a given type and associated partials <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable for which object is to simulate <ref refid="d1/d05/classtudat_1_1observation__models_1_1ObservationSimulator" kindref="compound">ObservationSimulator</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settingsPerLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of settings for the observation models that are to be created in the simulator object: one for each required set of link ends (each settings object must be consistent with observableType). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of Body objects that comprise the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing the list of all parameters that are to be estimated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateTransitionMatrixInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Object used to compute the state transition/sensitivity matrix at a given time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object that simulates the observations of a given type and associated partials </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationManager.h" line="351" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationManager.h" bodystart="351" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a3095218a34d4427d71f4960215b1cd0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationBiasSettings &gt; tudat::observation_models::constantAbsoluteBias</definition>
        <argsstring>(const Eigen::VectorXd &amp;observationBias)</argsstring>
        <name>constantAbsoluteBias</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>observationBias</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="179" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="179" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a066bae72f0b09985922f72894c8d3512" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationBiasSettings &gt; tudat::observation_models::constantRelativeBias</definition>
        <argsstring>(const Eigen::VectorXd &amp;observationBias)</argsstring>
        <name>constantRelativeBias</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>observationBias</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="186" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="186" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a0d59d25744a324fe70b81c5907e90e53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationBiasSettings &gt; tudat::observation_models::arcWiseAbsoluteBias</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;arcStartTimes, const std::vector&lt; Eigen::VectorXd &gt; &amp;observationBiases, const LinkEndType linkEndForTime)</argsstring>
        <name>arcWiseAbsoluteBias</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>arcStartTimes</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>observationBiases</declname>
        </param>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndForTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="193" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="193" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a85c296dce9a8ec604ab500d2875c7859" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationBiasSettings &gt; tudat::observation_models::arcWiseAbsoluteBias</definition>
        <argsstring>(const std::map&lt; double, Eigen::VectorXd &gt; &amp;observationBiases, const LinkEndType linkEndForTime)</argsstring>
        <name>arcWiseAbsoluteBias</name>
        <param>
          <type>const std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>observationBiases</declname>
        </param>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndForTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="203" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="203" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a29e37fc460468cde521f383aa12e41cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationBiasSettings &gt; tudat::observation_models::arcWiseRelativeBias</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;arcStartTimes, const std::vector&lt; Eigen::VectorXd &gt; &amp;observationBiases, const LinkEndType linkEndForTime)</argsstring>
        <name>arcWiseRelativeBias</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>arcStartTimes</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>observationBiases</declname>
        </param>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndForTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="211" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="211" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a70fbe38fc5aaabf8ad0c729040059dbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationBiasSettings &gt; tudat::observation_models::arcWiseRelativeBias</definition>
        <argsstring>(const std::map&lt; double, Eigen::VectorXd &gt; &amp;observationBiases, const LinkEndType linkEndForTime)</argsstring>
        <name>arcWiseRelativeBias</name>
        <param>
          <type>const std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>observationBiases</declname>
        </param>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndForTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="220" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="220" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a81f5a329ce5796baf0eeb34f7a3618d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationBiasSettings &gt; tudat::observation_models::multipleObservationBiasSettings</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; ObservationBiasSettings &gt; &gt; biasSettingsList)</argsstring>
        <name>multipleObservationBiasSettings</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt; &gt;</type>
          <declname>biasSettingsList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="228" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="228" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1ad46fd7c34a524cdc9bc25fd929f8df62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSettings &gt; tudat::observation_models::oneWayRangeSettings</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt; lightTimeCorrectionsList=std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt;(), const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings=nullptr)</argsstring>
        <name>oneWayRangeSettings</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;</type>
          <declname>lightTimeCorrectionsList</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="538" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="538" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a410d12d8b16e238da91e93e0b3e4d33c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSettings &gt; tudat::observation_models::angularPositionSettings</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt; lightTimeCorrectionsList=std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt;(), const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings=nullptr)</argsstring>
        <name>angularPositionSettings</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;</type>
          <declname>lightTimeCorrectionsList</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="547" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="547" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a2bf7c270189ad500bcaa5c5adf78685a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSettings &gt; tudat::observation_models::positionObservableSettings</definition>
        <argsstring>(const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings=nullptr)</argsstring>
        <name>positionObservableSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="556" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="556" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a901f8fbc2496793fe1da11abbab4541a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSettings &gt; tudat::observation_models::velocityObservableSettings</definition>
        <argsstring>(const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings=nullptr)</argsstring>
        <name>velocityObservableSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="563" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="563" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a3bfe28821dd2ed6839a098751e4c43ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSettings &gt; tudat::observation_models::eulerAngle313ObservableSettings</definition>
        <argsstring>(const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings=nullptr)</argsstring>
        <name>eulerAngle313ObservableSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="570" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="570" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a241383766e4ef2300c4f032b5ca01590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSettings &gt; tudat::observation_models::oneWayOpenLoopDoppler</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt; lightTimeCorrectionsList=std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt;(), const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings=nullptr, const std::shared_ptr&lt; DopplerProperTimeRateSettings &gt; transmitterProperTimeRateSettings=nullptr, const std::shared_ptr&lt; DopplerProperTimeRateSettings &gt; receiverProperTimeRateSettings=nullptr)</argsstring>
        <name>oneWayOpenLoopDoppler</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;</type>
          <declname>lightTimeCorrectionsList</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/db7/classtudat_1_1observation__models_1_1DopplerProperTimeRateSettings" kindref="compound">DopplerProperTimeRateSettings</ref> &gt;</type>
          <declname>transmitterProperTimeRateSettings</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/db7/classtudat_1_1observation__models_1_1DopplerProperTimeRateSettings" kindref="compound">DopplerProperTimeRateSettings</ref> &gt;</type>
          <declname>receiverProperTimeRateSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="577" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="577" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a62813066c630ead9e3e22186430852b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSettings &gt; tudat::observation_models::twoWayOpenLoopDoppler</definition>
        <argsstring>(const std::shared_ptr&lt; OneWayDopplerObservationSettings &gt; uplinkOneWayDopplerSettings, const std::shared_ptr&lt; OneWayDopplerObservationSettings &gt; downlinkOneWayDopplerSettings, const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings=nullptr)</argsstring>
        <name>twoWayOpenLoopDoppler</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d2b/classtudat_1_1observation__models_1_1OneWayDopplerObservationSettings" kindref="compound">OneWayDopplerObservationSettings</ref> &gt;</type>
          <declname>uplinkOneWayDopplerSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d2b/classtudat_1_1observation__models_1_1OneWayDopplerObservationSettings" kindref="compound">OneWayDopplerObservationSettings</ref> &gt;</type>
          <declname>downlinkOneWayDopplerSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="589" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="589" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1af893b6b33fbeb11a3178311166f899d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSettings &gt; tudat::observation_models::oneWayClosedLoopDoppler</definition>
        <argsstring>(const std::function&lt; double(const double) &gt; integrationTimeFunction, const std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt; lightTimeCorrectionsList=std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt;(), const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings=nullptr)</argsstring>
        <name>oneWayClosedLoopDoppler</name>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>integrationTimeFunction</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;</type>
          <declname>lightTimeCorrectionsList</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="598" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="598" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a5602c7918314caa1d18c1e6646ebef77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSettings &gt; tudat::observation_models::oneWayClosedLoopDoppler</definition>
        <argsstring>(const double integrationTime, const std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt; lightTimeCorrectionsList=std::vector&lt; std::shared_ptr&lt; LightTimeCorrectionSettings &gt; &gt;(), const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings=nullptr)</argsstring>
        <name>oneWayClosedLoopDoppler</name>
        <param>
          <type>const double</type>
          <declname>integrationTime</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;</type>
          <declname>lightTimeCorrectionsList</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="da/d53/classtudat_1_1observation__models_1_1LightTimeCorrectionSettings" kindref="compound">LightTimeCorrectionSettings</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="608" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="608" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a66337529aa387332ac6ee77391c81aff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSettings &gt; tudat::observation_models::nWayRange</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; ObservationSettings &gt; &gt; oneWayRangeObsevationSettings, const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings=nullptr, const std::function&lt; std::vector&lt; double &gt;(const double) &gt; retransmissionTimesFunction=std::function&lt; std::vector&lt; double &gt;(const double) &gt;())</argsstring>
        <name>nWayRange</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt; &gt;</type>
          <declname>oneWayRangeObsevationSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const std::function&lt; std::vector&lt; double &gt;(const double) &gt;</type>
          <declname>retransmissionTimesFunction</declname>
          <defval>std::function&lt; std::vector&lt; double &gt;(const double) &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="618" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="618" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1ac333eaa88115ba42f2d8b98acd46d426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d7/da8/classtudat_1_1observation__models_1_1DopplerProperTimeRateInterface" kindref="compound">DopplerProperTimeRateInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; DopplerProperTimeRateInterface &gt; tudat::observation_models::createOneWayDopplerProperTimeCalculator</definition>
        <argsstring>(std::shared_ptr&lt; DopplerProperTimeRateSettings &gt; properTimeRateSettings, const LinkEnds &amp;linkEnds, const simulation_setup::SystemOfBodies &amp;bodies, const LinkEndType linkEndForCalculator)</argsstring>
        <name>createOneWayDopplerProperTimeCalculator</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="db/db7/classtudat_1_1observation__models_1_1DopplerProperTimeRateSettings" kindref="compound">DopplerProperTimeRateSettings</ref> &gt;</type>
          <declname>properTimeRateSettings</declname>
        </param>
        <param>
          <type>const LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const LinkEndType</type>
          <declname>linkEndForCalculator</declname>
        </param>
        <briefdescription>
<para>Function to create the proper time rate calculator for use in one-way Doppler. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create the proper time rate calculator for use in one-way Doppler <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>properTimeRateSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for proper time rate model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends of one-way Doppler observation model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that constitutes the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndForCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>Link end for which the proper time rate is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Proper time rate calculator for use in one-way Doppler </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="638" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="638" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a0421e07e1e3986f3c70cf84a4f7744f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SortedObservationSettingsMap</type>
        <definition>SortedObservationSettingsMap tudat::observation_models::convertUnsortedToSortedObservationSettingsMap</definition>
        <argsstring>(const ObservationSettingsMap &amp;unsortedObservationSettingsMap)</argsstring>
        <name>convertUnsortedToSortedObservationSettingsMap</name>
        <param>
          <type>const ObservationSettingsMap &amp;</type>
          <declname>unsortedObservationSettingsMap</declname>
        </param>
        <briefdescription>
<para>Function to create list of observation models sorted by observable type and link ends from list only sorted in link ends (as multimap). </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create list of observation models sorted by observable type and link ends from list only sorted in link ends.</para>
<para>Function to create list of observation models sorted by observable type and link ends from list only sorted in link ends (as multimap). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unsortedObservationSettingsMap</parametername>
</parameternamelist>
<parameterdescription>
<para>List (multimap_) of observation models sorted link ends </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List (map of maps) of observation models sorted by observable type and link ends </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="27" column="30" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="27" bodyend="39" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="727" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1ad437c1f2168a4f57ad7a3d738c8ee3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SortedObservationSettingsMap</type>
        <definition>SortedObservationSettingsMap tudat::observation_models::convertUnsortedToSortedObservationSettingsMap</definition>
        <argsstring>(const ObservationSettingsListPerLinkEnd &amp;unsortedObservationSettingsMap)</argsstring>
        <name>convertUnsortedToSortedObservationSettingsMap</name>
        <param>
          <type>const ObservationSettingsListPerLinkEnd &amp;</type>
          <declname>unsortedObservationSettingsMap</declname>
        </param>
        <briefdescription>
<para>Function to create list of observation models sorted by observable type and link ends from list only sorted in link ends (as map). </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create list of observation models sorted by observable type and link ends from list only sorted in link ends (as map). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unsortedObservationSettingsMap</parametername>
</parameternamelist>
<parameterdescription>
<para>List (map_) of observation models sorted link ends </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List (map of maps) of observation models sorted by observable type and link ends </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="42" column="30" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="42" bodyend="57" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="736" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a7d8cf5998e45c9ab7dab6e7fb4ce9f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SortedObservationSettingsMap</type>
        <definition>SortedObservationSettingsMap tudat::observation_models::convertUnsortedToSortedObservationSettingsMap</definition>
        <argsstring>(const ObservationSettingsVector &amp;unsortedObservationSettingsMap)</argsstring>
        <name>convertUnsortedToSortedObservationSettingsMap</name>
        <param>
          <type>const ObservationSettingsVector &amp;</type>
          <declname>unsortedObservationSettingsMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="59" column="30" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="59" bodyend="71" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="739" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1aedab6579aa4dd39cee2ef501015fc71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d8/dab/classtudat_1_1observation__models_1_1ObservationBias" kindref="compound">ObservationBias</ref>&lt; ObservationSize &gt; &gt;</type>
        <definition>std::shared_ptr&lt; ObservationBias&lt; ObservationSize &gt; &gt; tudat::observation_models::createObservationBiasCalculator</definition>
        <argsstring>(const LinkEnds linkEnds, const ObservableType observableType, const std::shared_ptr&lt; ObservationBiasSettings &gt; biasSettings, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createObservationBiasCalculator</name>
        <param>
          <type>const LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const ObservableType</type>
          <declname>observableType</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d2c/classtudat_1_1observation__models_1_1ObservationBiasSettings" kindref="compound">ObservationBiasSettings</ref> &gt;</type>
          <declname>biasSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create an object that computes an observation bias. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an object that computes an observation bias, which can represent any type of system-dependent influence on the observed value (e.g. absolute bias, relative bias, clock drift, etc.) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation link ends for which the bias is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Observable type for which bias is to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biasSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the observation bias that is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object that computes an observation bias according to requested settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="753" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="753" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1adb7799d0ebe10472a3a49fe80b662a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>ObservationSize</declname>
            <defname>ObservationSize</defname>
            <defval>1</defval>
          </param>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/d05/classtudat_1_1observation__models_1_1ObservationSimulator" kindref="compound">ObservationSimulator</ref>&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; ObservationSimulator&lt; ObservationSize, ObservationScalarType, TimeType &gt; &gt; tudat::observation_models::createObservationSimulator</definition>
        <argsstring>(const ObservableType observableType, const std::map&lt; LinkEnds, std::shared_ptr&lt; ObservationSettings &gt; &gt; settingsPerLinkEnds, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createObservationSimulator</name>
        <param>
          <type>const ObservableType</type>
          <declname>observableType</declname>
        </param>
        <param>
          <type>const std::map&lt; LinkEnds, std::shared_ptr&lt; <ref refid="d4/d8f/classtudat_1_1observation__models_1_1ObservationSettings" kindref="compound">ObservationSettings</ref> &gt; &gt;</type>
          <declname>settingsPerLinkEnds</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create an object to simulate observations of a given type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an object to simulate observations of a given type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable for which object is to simulate <ref refid="d1/d05/classtudat_1_1observation__models_1_1ObservationSimulator" kindref="compound">ObservationSimulator</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settingsPerLinkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of settings for the observation models that are to be created in the simulator object: one for each required set of link ends (each settings object must be consistent with observableType). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of Body objects that comprise the environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object that simulates the observables according to the provided settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="1567" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="1567" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a59ab9716b092604dc2f2579006c60737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::shared_ptr&lt; <ref refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" kindref="compound">ObservationSimulatorBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType,std::shared_ptr&lt; ObservationSimulatorBase&lt; ObservationScalarType, TimeType &gt; &gt; &gt; tudat::observation_models::createObservationSimulators</definition>
        <argsstring>(const observation_models::SortedObservationSettingsMap &amp;observationSettingsMap, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createObservationSimulators</name>
        <param>
          <type>const observation_models::SortedObservationSettingsMap &amp;</type>
          <declname>observationSettingsMap</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create a map of object to simulate observations (one object for each type of observable). </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a map of object to simulate observations (one object for each type of observable). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationSettingsMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of settings for the observation models that are to be created in the simulator object: first map key is observable type, second is link ends for observation. One observation settings object must be given for each required set of link ends/observable (each settings object must be consistent with observable type in first entry). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of Body objects that comprise the environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of objects that simulate the observables according to the provided settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="1599" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="1599" bodyend="1639"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a59ca7391f42fa2cdc49a731701d4ea54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::shared_ptr&lt; <ref refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" kindref="compound">ObservationSimulatorBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType,std::shared_ptr&lt; ObservationSimulatorBase&lt; ObservationScalarType, TimeType &gt; &gt; &gt; tudat::observation_models::createObservationSimulators</definition>
        <argsstring>(const observation_models::ObservationSettingsMap &amp;observationSettingsMap, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createObservationSimulators</name>
        <param>
          <type>const observation_models::ObservationSettingsMap &amp;</type>
          <declname>observationSettingsMap</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create a map of object to simulate observations (one object for each type of observable). </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a map of object to simulate observations (one object for each type of observable), from a list of observation settings not sorted by observable type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationSettingsMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-map of settings for the observation models that are to be created in the simulator object map key is link ends for observation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of Body objects that comprise the environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of objects that simulate the observables according to the provided settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="1653" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="1653" bodyend="1659"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a0a8c4646392f4fece2e77088626986eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; ObservableType, std::shared_ptr&lt; <ref refid="da/d94/classtudat_1_1observation__models_1_1ObservationSimulatorBase" kindref="compound">ObservationSimulatorBase</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &gt;</type>
        <definition>std::map&lt; ObservableType,std::shared_ptr&lt; ObservationSimulatorBase&lt; ObservationScalarType, TimeType &gt; &gt; &gt; tudat::observation_models::createObservationSimulators</definition>
        <argsstring>(const observation_models::ObservationSettingsVector &amp;observationSettingsMap, const simulation_setup::SystemOfBodies &amp;bodies)</argsstring>
        <name>createObservationSimulators</name>
        <param>
          <type>const observation_models::ObservationSettingsVector &amp;</type>
          <declname>observationSettingsMap</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" line="1663" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" bodystart="1663" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a046e1142fe313a8525bb19b14ccfaf80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ObservationViabilitySettingsList</type>
        <definition>ObservationViabilitySettingsList tudat::observation_models::filterObservationViabilitySettings</definition>
        <argsstring>(const ObservationViabilitySettingsList &amp;observationViabilitySettings, const LinkEnds &amp;linkEnds)</argsstring>
        <name>filterObservationViabilitySettings</name>
        <param>
          <type>const ObservationViabilitySettingsList &amp;</type>
          <declname>observationViabilitySettings</declname>
        </param>
        <param>
          <type>const LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <briefdescription>
<para>Function to filter list of observationViabilitySettings, so that only those relevant for single set of link ends are retained. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to filter list of observationViabilitySettings, so that only those relevant for single set of link ends are retained <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationViabilitySettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Full, unfiltered, list of observation viability settings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends for which the relevant observation vaibilityies are to be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of observationViabilitySettings that are relevant for linkEnds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="74" column="34" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="74" bodyend="98" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="1679" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a696f4fdd9ab98a331983ff8467c922a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; int, int &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; int, int &gt; &gt; tudat::observation_models::getLinkEndIndicesForObservationViability</definition>
        <argsstring>(const LinkEnds &amp;linkEnds, const ObservableType observableType, const LinkEndId linkEndToCheck)</argsstring>
        <name>getLinkEndIndicesForObservationViability</name>
        <param>
          <type>const LinkEnds &amp;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const ObservableType</type>
          <declname>observableType</declname>
        </param>
        <param>
          <type>const LinkEndId</type>
          <declname>linkEndToCheck</declname>
        </param>
        <briefdescription>
<para>Function to retrieve the link end indices in link end states/times that are to be used in viability calculation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the link end indices in link end states/times that are to be used in viability calculation. Return variable is a vector of pairs, where each the first entry denotes the index of the point at which the link is to be checkd. The second entry denotes the index for the opposite end of the link. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Complete set of link ends for which check is to be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Observable type for which check is to be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndToCheck</parametername>
</parameternamelist>
<parameterdescription>
<para>Link end at which check is to be performed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Link end indices in link end states/times that are to be used in viability calculation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="101" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="101" bodyend="251" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="1693" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1acc0cd45f03ed06b12e1f05ab3049a03d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/daf/classtudat_1_1observation__models_1_1MinimumElevationAngleCalculator" kindref="compound">MinimumElevationAngleCalculator</ref> &gt;</type>
        <definition>std::shared_ptr&lt; MinimumElevationAngleCalculator &gt; tudat::observation_models::createMinimumElevationAngleCalculator</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const LinkEnds linkEnds, const ObservableType observationType, const std::shared_ptr&lt; ObservationViabilitySettings &gt; observationViabilitySettings, const std::string &amp;stationName)</argsstring>
        <name>createMinimumElevationAngleCalculator</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const ObservableType</type>
          <declname>observationType</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt;</type>
          <declname>observationViabilitySettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>stationName</declname>
        </param>
        <briefdescription>
<para>Function to create an object to check if a minimum elevation angle condition is met for an observation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an object to check if a minimum elevation angle condition is met for an observation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects that constitutes the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationViabilitySettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that defines the settings for the creation of the viability check creation (settings must be compatible with minimum elevation angle check). Ground station must ve specified by associatedLinkEnd_.second in observationViabilitySettings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stationName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the ground station for which calculator is to be computed (if no station is explicitly given in observationViabilitySettings). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object to check if a minimum elevation angle condition is met for an observation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="254" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="254" bodyend="298" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="1711" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a031b6fe74bc08899085ce224791dd74a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d6/d1f/classtudat_1_1observation__models_1_1BodyAvoidanceAngleCalculator" kindref="compound">BodyAvoidanceAngleCalculator</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BodyAvoidanceAngleCalculator &gt; tudat::observation_models::createBodyAvoidanceAngleCalculator</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const LinkEnds linkEnds, const ObservableType observationType, const std::shared_ptr&lt; ObservationViabilitySettings &gt; observationViabilitySettings)</argsstring>
        <name>createBodyAvoidanceAngleCalculator</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const ObservableType</type>
          <declname>observationType</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt;</type>
          <declname>observationViabilitySettings</declname>
        </param>
        <briefdescription>
<para>Function to create an object to check if a body avoidance angle condition is met for an observation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an object to check if a body avoidance angle condition is met for an observation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects that constitutes the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationViabilitySettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that defines the settings for the creation of the viability check creation (settings must be compatible with body avoidance angle check). If ground station is not specified (by associatedLinkEnd_.second in observationViabilitySettings), check is performed for all ground stations on (or c.o.m. of) body (defined by associatedLinkEnd_.first) automatically. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object to check if a body avoidance angle condition is met for an observation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="301" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="301" bodyend="329" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="1730" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a3e10910b9a7e2ebd6218dedf780adaad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d9a/classtudat_1_1observation__models_1_1OccultationCalculator" kindref="compound">OccultationCalculator</ref> &gt;</type>
        <definition>std::shared_ptr&lt; OccultationCalculator &gt; tudat::observation_models::createOccultationCalculator</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const LinkEnds linkEnds, const ObservableType observationType, const std::shared_ptr&lt; ObservationViabilitySettings &gt; observationViabilitySettings)</argsstring>
        <name>createOccultationCalculator</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const ObservableType</type>
          <declname>observationType</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt;</type>
          <declname>observationViabilitySettings</declname>
        </param>
        <briefdescription>
<para>Function to create an object to check if a body occultation condition is met for an observation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an object to check if a body occultation condition is met for an observation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects that constitutes the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationViabilitySettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that defines the settings for the creation of the viability check creation (settings must be compatible with body occultation check). If ground station is not specified (by associatedLinkEnd_.second in observationViabilitySettings), check is performed for all ground stations on (or c.o.m. of) body (defined by associatedLinkEnd_.first) automatically, or fo </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object to check if a body occultation condition is met for an observation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="332" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="332" bodyend="366" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="1748" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a3a708be5a9064c9d9c5e8f44c06b3707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; tudat::observation_models::createObservationViabilityCalculators</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const LinkEnds linkEnds, const ObservableType observationType, const std::vector&lt; std::shared_ptr&lt; ObservationViabilitySettings &gt; &gt; &amp;observationViabilitySettings)</argsstring>
        <name>createObservationViabilityCalculators</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const LinkEnds</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const ObservableType</type>
          <declname>observationType</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt; &gt; &amp;</type>
          <declname>observationViabilitySettings</declname>
        </param>
        <briefdescription>
<para>Function to create an list of obervation viability conditions for a single set of link ends. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an list of obervation viability conditions for a single set of link ends <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects that constitutes the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>Link ends for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationViabilitySettings</parametername>
</parameternamelist>
<parameterdescription>
<para>List of viability settings from which viability check objects are to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of obervation viability conditions for a single set of link ends </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="369" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="369" bodyend="433" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="1763" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1ae6fc579959804932aa8d4cbf1c86f43a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d62/classtudat_1_1observation__models_1_1ObservationViabilityCalculator" kindref="compound">ObservationViabilityCalculator</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt; LinkEnds, std::vector&lt; std::shared_ptr&lt; ObservationViabilityCalculator &gt; &gt; &gt; tudat::observation_models::createObservationViabilityCalculators</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; LinkEnds &gt; linkEnds, const ObservableType observationType, const std::vector&lt; std::shared_ptr&lt; ObservationViabilitySettings &gt; &gt; &amp;observationViabilitySettings)</argsstring>
        <name>createObservationViabilityCalculators</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; LinkEnds &gt;</type>
          <declname>linkEnds</declname>
        </param>
        <param>
          <type>const ObservableType</type>
          <declname>observationType</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt; &gt; &amp;</type>
          <declname>observationViabilitySettings</declname>
        </param>
        <briefdescription>
<para>Function to create an list of obervation viability conditions for a number of sets of link ends, for a single observable type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an list of obervation viability conditions for a number of sets of link ends, for a single observable type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects that constitutes the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEnds</parametername>
</parameternamelist>
<parameterdescription>
<para>List of link ends for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of observable for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationViabilitySettings</parametername>
</parameternamelist>
<parameterdescription>
<para>List of viability settings from which viability check objects are to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of obervation viability conditions for a number of sets of link ends, for a single observable type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="437" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="437" bodyend="453" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="1778" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="db/dfe/createObservationModel_8h_1a3e47a73e0b1b844b234e8fc8cca3a324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PerObservableObservationViabilityCalculatorList</type>
        <definition>PerObservableObservationViabilityCalculatorList tudat::observation_models::createObservationViabilityCalculators</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::map&lt; ObservableType, std::vector&lt; LinkEnds &gt; &gt; linkEndsPerObservable, const std::vector&lt; std::shared_ptr&lt; ObservationViabilitySettings &gt; &gt; &amp;observationViabilitySettings)</argsstring>
        <name>createObservationViabilityCalculators</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::map&lt; ObservableType, std::vector&lt; LinkEnds &gt; &gt;</type>
          <declname>linkEndsPerObservable</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="db/dd5/classtudat_1_1observation__models_1_1ObservationViabilitySettings" kindref="compound">ObservationViabilitySettings</ref> &gt; &gt; &amp;</type>
          <declname>observationViabilitySettings</declname>
        </param>
        <briefdescription>
<para>Function to create a list of obervation viability conditions for any number of sets of link ends and observable types. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a list of obervation viability conditions for any number of sets of link ends and observable types <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects that constitutes the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkEndsPerObservable</parametername>
</parameternamelist>
<parameterdescription>
<para>List of link ends, for each observable type, for which viability check object is to be made </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationViabilitySettings</parametername>
</parameternamelist>
<parameterdescription>
<para>List of viability settings from which viability check objects are to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of obervation viability conditions for any number of sets of link ends and observable types </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" line="457" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createObservationModel.cpp" bodystart="457" bodyend="476" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createObservationModel.h" declline="1793" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d7/d72/lightTimeSolution_8cpp_1ad6453903f1a8851ccc8239c02586369b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double tudat::observation_models::getDefaultLightTimeTolerance&lt; double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getDefaultLightTimeTolerance&lt; double &gt;</name>
        <briefdescription>
<para>Function to retrieve the default tolerance for the light-time equation solution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/lightTimeSolution.cpp" line="24" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/lightTimeSolution.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="d7/d72/lightTimeSolution_8cpp_1a9c44120d8a0b75c94c8f9d43bc5b4443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>long double</type>
        <definition>long double tudat::observation_models::getDefaultLightTimeTolerance&lt; long double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getDefaultLightTimeTolerance&lt; long double &gt;</name>
        <briefdescription>
<para>Function to retrieve the default tolerance for the light-time equation solution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/lightTimeSolution.cpp" line="31" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/observation_models/lightTimeSolution.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/observation_models/angularPositionObservationModel.h" line="24" column="1"/>
  </compounddef>
</doxygen>
