<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d2/ddc/namespacetudat_1_1basic__astrodynamics" kind="namespace" language="C++">
    <compoundname>tudat::basic_astrodynamics</compoundname>
    <innerclass refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" prot="public">tudat::basic_astrodynamics::AccelerationModel</innerclass>
    <innerclass refid="d8/d35/classtudat_1_1basic__astrodynamics_1_1BodyShapeModel" prot="public">tudat::basic_astrodynamics::BodyShapeModel</innerclass>
    <innerclass refid="dd/d2a/classtudat_1_1basic__astrodynamics_1_1CustomAccelerationModel" prot="public">tudat::basic_astrodynamics::CustomAccelerationModel</innerclass>
    <innerclass refid="d3/d97/classtudat_1_1basic__astrodynamics_1_1CustomTorqueModel" prot="public">tudat::basic_astrodynamics::CustomTorqueModel</innerclass>
    <innerclass refid="d0/d2f/classtudat_1_1basic__astrodynamics_1_1DissipativeTorqueModel" prot="public">tudat::basic_astrodynamics::DissipativeTorqueModel</innerclass>
    <innerclass refid="de/df3/classtudat_1_1basic__astrodynamics_1_1EmpiricalAcceleration" prot="public">tudat::basic_astrodynamics::EmpiricalAcceleration</innerclass>
    <innerclass refid="d2/df8/classtudat_1_1basic__astrodynamics_1_1MassRateModel" prot="public">tudat::basic_astrodynamics::MassRateModel</innerclass>
    <innerclass refid="d3/d41/classtudat_1_1basic__astrodynamics_1_1CustomMassRateModel" prot="public">tudat::basic_astrodynamics::CustomMassRateModel</innerclass>
    <innerclass refid="d5/dff/classtudat_1_1basic__astrodynamics_1_1OblateSpheroidBodyShapeModel" prot="public">tudat::basic_astrodynamics::OblateSpheroidBodyShapeModel</innerclass>
    <innerclass refid="da/dd0/classtudat_1_1basic__astrodynamics_1_1SphericalBodyShapeModel" prot="public">tudat::basic_astrodynamics::SphericalBodyShapeModel</innerclass>
    <innerclass refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" prot="public">tudat::basic_astrodynamics::TorqueModel</innerclass>
    <innerclass refid="de/d1c/classtudat_1_1basic__astrodynamics_1_1InertialTorqueModel" prot="public">tudat::basic_astrodynamics::InertialTorqueModel</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aab" prot="public" static="no" strong="no">
        <type></type>
        <name>AvailableAcceleration</name>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aabaf7661d328d6500afd762f6e92f56680a" prot="public">
          <name>undefined_acceleration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba9157aa464a5a91c246383bbecc542a1e" prot="public">
          <name>point_mass_gravity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aabac90573463c6654eda51833571c464529" prot="public">
          <name>central_gravity</name>
          <initializer>= point_mass_gravity</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba80e754ce5f37b06ac37cdff02fcb6647" prot="public">
          <name>aerodynamic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba61dceebb9257c8a794a79d29211f4c1c" prot="public">
          <name>cannon_ball_radiation_pressure</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aabad94f46b5869cafa217eb81c6fcf17691" prot="public">
          <name>spherical_harmonic_gravity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba23e238eca77ca29bf384a39459d32f50" prot="public">
          <name>mutual_spherical_harmonic_gravity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba8ac3f141c2bbde183bc06da94823b064" prot="public">
          <name>third_body_point_mass_gravity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba68f1450ca4d1e9dad72b00efa9adef2e" prot="public">
          <name>third_body_central_gravity</name>
          <initializer>= third_body_point_mass_gravity</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba93d6b6c6558917c2812e2bfbcd59b911" prot="public">
          <name>third_body_spherical_harmonic_gravity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba383c824d5b7ae23529f0eeb5dd7edb64" prot="public">
          <name>third_body_mutual_spherical_harmonic_gravity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba416d9bad3740dd35452d89fd4db3f921" prot="public">
          <name>thrust_acceleration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba42831f8c9d7bc75202d7a3ba46b70edf" prot="public">
          <name>relativistic_correction_acceleration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba97445509d0b6d2b3ab251f47c05aeb5a" prot="public">
          <name>empirical_acceleration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aabac99ed347329103b14a0202eb333b5e03" prot="public">
          <name>direct_tidal_dissipation_in_central_body_acceleration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba6772f9c24cfdf04bb34812e2a05dc162" prot="public">
          <name>direct_tidal_dissipation_in_orbiting_body_acceleration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba74381bf61504763930c19eb9ea60945d" prot="public">
          <name>panelled_radiation_pressure_acceleration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba533570c709412061caad6675d3a60964" prot="public">
          <name>momentum_wheel_desaturation_acceleration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aaba9577641677f96815aa4ac025fec42946" prot="public">
          <name>solar_sail_acceleration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abf29e4420ac7dbbcfe0ff7e2c7910aabadff46d08ab259247348cbc5f9e6310ed" prot="public">
          <name>custom_acceleration</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>List of accelerations available in simulations. </para>
        </briefdescription>
        <detaileddescription>
<para>List of accelerations available in simulations. Acceleration models not defined by this given enum cannot be used for automatic acceleration model setup. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" line="44" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" bodystart="45" bodyend="66"/>
      </memberdef>
      <memberdef kind="enum" id="d3/d3c/accelerationModelTypes_8h_1abe8f371ac11e30366bab79dd52dc7138" prot="public" static="no" strong="no">
        <type></type>
        <name>AvailableMassRateModels</name>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abe8f371ac11e30366bab79dd52dc7138ae1f3e3986d8dc0ada93681a6088ef105" prot="public">
          <name>undefined_mass_rate_model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abe8f371ac11e30366bab79dd52dc7138aa0d32f06a644e5c72ec52139df96318d" prot="public">
          <name>custom_mass_rate_model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/accelerationModelTypes_8h_1abe8f371ac11e30366bab79dd52dc7138a9e020528e73e54b5af27ea0b8811783b" prot="public">
          <name>from_thrust_mass_rate_model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>List of model types for body mass rates. </para>
        </briefdescription>
        <detaileddescription>
<para>List of model types for body mass rates available in simulations. Mass rate models not defined by this given enum cannot be used for automatic mass rate model setup. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" line="81" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="enum" id="da/dfd/empiricalAcceleration_8h_1add400c2cd0b59b750729809df8873f33" prot="public" static="no" strong="no">
        <type></type>
        <name>EmpiricalAccelerationFunctionalShapes</name>
        <enumvalue id="da/dfd/empiricalAcceleration_8h_1add400c2cd0b59b750729809df8873f33a2620295ebfb14efd6a02a86eb8886ebc" prot="public">
          <name>constant_empirical</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/dfd/empiricalAcceleration_8h_1add400c2cd0b59b750729809df8873f33abf919e7378312aa6796bbfb441afe04f" prot="public">
          <name>sine_empirical</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/dfd/empiricalAcceleration_8h_1add400c2cd0b59b750729809df8873f33a699ac1ef2dfaa389f4d081783b7415f7" prot="public">
          <name>cosine_empirical</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum defining shape of empirical accelerations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/empiricalAcceleration.h" line="35" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/empiricalAcceleration.h" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="da/dfd/empiricalAcceleration_8h_1aee97b7b2ec24d45536b4b38c1b5674d2" prot="public" static="no" strong="no">
        <type></type>
        <name>EmpiricalAccelerationComponents</name>
        <enumvalue id="da/dfd/empiricalAcceleration_8h_1aee97b7b2ec24d45536b4b38c1b5674d2a588571c2760bf56bb7d9de6feea88b07" prot="public">
          <name>radial_empirical_acceleration_component</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/dfd/empiricalAcceleration_8h_1aee97b7b2ec24d45536b4b38c1b5674d2a3a609c7d00b41e79683ca695fe63cbce" prot="public">
          <name>along_track_empirical_acceleration_component</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/dfd/empiricalAcceleration_8h_1aee97b7b2ec24d45536b4b38c1b5674d2ae11cb96d73eca96b00a4a6622721510d" prot="public">
          <name>across_track_empirical_acceleration_component</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum defining component of empirical accelerations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/empiricalAcceleration.h" line="65" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/empiricalAcceleration.h" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="enum" id="dc/d42/timeConversions_8h_1ac1c2b00a3568f988227199b5f77c987c" prot="public" static="no" strong="no">
        <type></type>
        <name>TimeScales</name>
        <enumvalue id="dc/d42/timeConversions_8h_1ac1c2b00a3568f988227199b5f77c987ca7f8cee360bd3f5d269065f1f2c086d95" prot="public">
          <name>dummy_scale</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d42/timeConversions_8h_1ac1c2b00a3568f988227199b5f77c987ca9d398fc479c048428f104efbd4607fd4" prot="public">
          <name>tai_scale</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d42/timeConversions_8h_1ac1c2b00a3568f988227199b5f77c987caf17c847714d3dd685003da4df09bc209" prot="public">
          <name>tt_scale</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d42/timeConversions_8h_1ac1c2b00a3568f988227199b5f77c987caa131d3c65497863f77589ec295e258a1" prot="public">
          <name>tdb_scale</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d42/timeConversions_8h_1ac1c2b00a3568f988227199b5f77c987ca49c34e0955fbbd8f1bfe7dd95c0677b8" prot="public">
          <name>utc_scale</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d42/timeConversions_8h_1ac1c2b00a3568f988227199b5f77c987ca127202a03befa88ce10f1f4f839600ef" prot="public">
          <name>ut1_scale</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d42/timeConversions_8h_1ac1c2b00a3568f988227199b5f77c987ca1a07843c68a682981966e7cc3181fbcc" prot="public">
          <name>body_centered_coordinate_time_scale</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d42/timeConversions_8h_1ac1c2b00a3568f988227199b5f77c987caca05543cf41d44552a9019fc800dd096" prot="public">
          <name>barycentric_coordinate_time_scale</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d42/timeConversions_8h_1ac1c2b00a3568f988227199b5f77c987cabec4c0cc4ba2726fc1b2520c7b3127e1" prot="public">
          <name>local_proper_time_scale</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>List of time scales available. </para>
        </briefdescription>
        <detaileddescription>
<para>List of time scales available. Two types of scales are included, earth-based time scales (which can be handled, in part, by SOFA), which represent a unique specific scale, and three relativistic scales, of which only barycentric is unique. The bodycentric and topocentric scales require additional identifiers to fully determine. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="30" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="31" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="dd/dc6/torqueModelTypes_8h_1aa09ce70cfed2e1f912ff57a2f568adb4" prot="public" static="no" strong="no">
        <type></type>
        <name>AvailableTorque</name>
        <enumvalue id="dd/dc6/torqueModelTypes_8h_1aa09ce70cfed2e1f912ff57a2f568adb4a9b835684b874b550941c68f1c13bd94d" prot="public">
          <name>torque_free</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/dc6/torqueModelTypes_8h_1aa09ce70cfed2e1f912ff57a2f568adb4abc9a75eb9d8e35ebf8e20ac1e9831a6b" prot="public">
          <name>underfined_torque</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/dc6/torqueModelTypes_8h_1aa09ce70cfed2e1f912ff57a2f568adb4aed8ccd2aa1575f743814b9d15b4ccc93" prot="public">
          <name>second_order_gravitational_torque</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/dc6/torqueModelTypes_8h_1aa09ce70cfed2e1f912ff57a2f568adb4ae92b379c082691d1f77433188bfe893a" prot="public">
          <name>aerodynamic_torque</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/dc6/torqueModelTypes_8h_1aa09ce70cfed2e1f912ff57a2f568adb4a384676d7072b6c474fbb2982a5a3ce58" prot="public">
          <name>spherical_harmonic_gravitational_torque</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/dc6/torqueModelTypes_8h_1aa09ce70cfed2e1f912ff57a2f568adb4ae0188267607f22d044c2e131740da003" prot="public">
          <name>inertial_torque</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/dc6/torqueModelTypes_8h_1aa09ce70cfed2e1f912ff57a2f568adb4a3e4def8f352f406ab30c4a0a1812f17d" prot="public">
          <name>dissipative_torque</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/dc6/torqueModelTypes_8h_1aa09ce70cfed2e1f912ff57a2f568adb4aada67bbe55e8a8e97b5a8e90bcbc01a6" prot="public">
          <name>custom_torque</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>List of torques available in simulations. </para>
        </briefdescription>
        <detaileddescription>
<para>List of torques available in simulations. Torque models not defined by this given enum cannot be used for automatic torque model setup. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/torqueModelTypes.h" line="28" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/torqueModelTypes.h" bodystart="29" bodyend="38"/>
      </memberdef>
      <memberdef kind="enum" id="de/d0c/earthOrientation_8h_1a8c1e505c4331efde501dfeadff43e682" prot="public" static="no" strong="no">
        <type></type>
        <name>IAUConventions</name>
        <enumvalue id="de/d0c/earthOrientation_8h_1a8c1e505c4331efde501dfeadff43e682add01e4a08ea62d0221f50245d6c169bb" prot="public">
          <name>iau_2000_a</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d0c/earthOrientation_8h_1a8c1e505c4331efde501dfeadff43e682a84c8328c472060e49bd8a48362e030b5" prot="public">
          <name>iau_2000_b</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d0c/earthOrientation_8h_1a8c1e505c4331efde501dfeadff43e682a95ea2a7426f26d6b9f75364b4377e067" prot="public">
          <name>iau_2006</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum of IAU conventions for Earth rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/sofa/earthOrientation.h" line="33" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/sofa/earthOrientation.h" bodystart="34" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d4/d5c/accelerationModel_8h_1a353af08da04f2de519bb836c464bd76a" prot="public" static="no">
        <type><ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">AccelerationModel</ref>&lt; &gt;</type>
        <definition>typedef AccelerationModel&lt; &gt; tudat::basic_astrodynamics::AccelerationModel3d</definition>
        <argsstring></argsstring>
        <name>AccelerationModel3d</name>
        <briefdescription>
<para>Typedef to a 3D acceleration model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" line="100" column="27" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d5c/accelerationModel_8h_1a261d832fcbd320b606469317ca152419" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">AccelerationModel3d</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; AccelerationModel3d &gt; tudat::basic_astrodynamics::AccelerationModel3dPointer</definition>
        <argsstring></argsstring>
        <name>AccelerationModel3dPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to a 3D acceleration model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" line="103" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d5c/accelerationModel_8h_1a0d61e6c296b2c4109d0634e8da734a29" prot="public" static="no">
        <type><ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">AccelerationModel</ref>&lt; Eigen::Vector2d &gt;</type>
        <definition>typedef AccelerationModel&lt; Eigen::Vector2d &gt; tudat::basic_astrodynamics::AccelerationModel2d</definition>
        <argsstring></argsstring>
        <name>AccelerationModel2d</name>
        <briefdescription>
<para>Typedef to a 2D acceleration model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" line="107" column="27" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d5c/accelerationModel_8h_1abe8d0679e784153cbd36f0e8135680c9" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">AccelerationModel2d</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; AccelerationModel2d &gt; tudat::basic_astrodynamics::AccelerationModel2dPointer</definition>
        <argsstring></argsstring>
        <name>AccelerationModel2dPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to a 2D acceleration model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" line="110" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d5c/accelerationModel_8h_1a6e082b7e9c485cc41e0b9209a242107c" prot="public" static="no">
        <type>std::unordered_map&lt; std::string, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt; &gt; &gt;</type>
        <definition>typedef std::unordered_map&lt; std::string, std::vector&lt;std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; &gt; &gt; tudat::basic_astrodynamics::SingleBodyAccelerationMap</definition>
        <argsstring></argsstring>
        <name>SingleBodyAccelerationMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Typedef defining a list of accelerations acting on a single body, key is the name of each body exerting a acceletation, value is a list of accelerations exerted by that body. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" line="142" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d5c/accelerationModel_8h_1a351078bf6825fc8a14eb24a61578abc8" prot="public" static="no">
        <type>std::unordered_map&lt; std::string, SingleBodyAccelerationMap &gt;</type>
        <definition>typedef std::unordered_map&lt; std::string, SingleBodyAccelerationMap &gt; tudat::basic_astrodynamics::AccelerationMap</definition>
        <argsstring></argsstring>
        <name>AccelerationMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Typedef defining a list of accelerations acting on a set of bodies, key is the name of each body undergoing an acceletation, value is SingleBodyAccelerationMap, defining all accelerations acting on it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" line="148" column="28" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/d12/astro_2basic__astro_2massRateModel_8h_1ad697c42f8ddfb7ae88500e264b6054f2" prot="public" static="no">
        <type>std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; <ref refid="d2/df8/classtudat_1_1basic__astrodynamics_1_1MassRateModel" kindref="compound">MassRateModel</ref> &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; MassRateModel &gt; &gt; &gt; tudat::basic_astrodynamics::MassRateModelMap</definition>
        <argsstring></argsstring>
        <name>MassRateModelMap</name>
        <briefdescription>
<para>Typedef for the massrate model map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/massRateModel.h" line="131" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/massRateModel.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/dba/torqueModel_8h_1aef7a7c1d3ef7819b01ecd96709748957" prot="public" static="no">
        <type>std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">basic_astrodynamics::TorqueModel</ref> &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; basic_astrodynamics::TorqueModel &gt; &gt; &gt; tudat::basic_astrodynamics::SingleBodyTorqueModelMap</definition>
        <argsstring></argsstring>
        <name>SingleBodyTorqueModelMap</name>
        <briefdescription>
<para>Typedef for list of torques acting on a body (map key is body exerting torque). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/torqueModel.h" line="159" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/torqueModel.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/dba/torqueModel_8h_1a7ed1deb106889f7cae65f6414ef17bf0" prot="public" static="no">
        <type>std::map&lt; std::string, SingleBodyTorqueModelMap &gt;</type>
        <definition>typedef std::map&lt; std::string, SingleBodyTorqueModelMap &gt; tudat::basic_astrodynamics::TorqueModelMap</definition>
        <argsstring></argsstring>
        <name>TorqueModelMap</name>
        <briefdescription>
<para>Typedef for list of torques acting on a set of bodies (map key is body undergoing torque). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/torqueModel.h" line="162" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/torqueModel.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dc/d42/timeConversions_8h_1a31825fdb3f560acbc683015020757273" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::basic_astrodynamics::JULIAN_DAY_ON_J2000</definition>
        <argsstring></argsstring>
        <name>JULIAN_DAY_ON_J2000</name>
        <initializer>= 2451545.0</initializer>
        <briefdescription>
<para>Julian day at J2000, i.e. 01-01-2000, at 12:00 (in TT). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="44" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d42/timeConversions_8h_1aaae9ec222f182d311a1e25ef615a8096" prot="public" static="yes" mutable="no">
        <type>const long double</type>
        <definition>const long double tudat::basic_astrodynamics::JULIAN_DAY_ON_J2000_LONG</definition>
        <argsstring></argsstring>
        <name>JULIAN_DAY_ON_J2000_LONG</name>
        <initializer>= 2451545.0L</initializer>
        <briefdescription>
<para>Julian day at J2000, i.e. 01-01-2000, at 12:00 (in TT), in long double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="47" column="26" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d42/timeConversions_8h_1a76b2351c85277f6c65b96ce3b7d63369" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::basic_astrodynamics::JULIAN_DAY_AT_0_MJD</definition>
        <argsstring></argsstring>
        <name>JULIAN_DAY_AT_0_MJD</name>
        <initializer>= 2400000.5</initializer>
        <briefdescription>
<para>Julian day at Modified Julain Date 0, i.e. Nov 17, 1858, 00:00. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="58" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d42/timeConversions_8h_1a93eaac39413c289d5200ee0ca36dbc68" prot="public" static="yes" mutable="no">
        <type>const long double</type>
        <definition>const long double tudat::basic_astrodynamics::JULIAN_DAY_AT_0_MJD_LONG</definition>
        <argsstring></argsstring>
        <name>JULIAN_DAY_AT_0_MJD_LONG</name>
        <initializer>= 2400000.5L</initializer>
        <briefdescription>
<para>Julian day at Modified Julain Date 0, i.e. Nov 17, 1858, 00:00, in long double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="61" column="26" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d42/timeConversions_8h_1a1538644250236d5bbff0cb4be39d62c7" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::basic_astrodynamics::TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION</definition>
        <argsstring></argsstring>
        <name>TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION</name>
        <initializer>= 2443144.5003725</initializer>
        <briefdescription>
<para>Julian day at which TT, TCG, and TCB all show exact same time (1977 January 1, 00:00:32.184) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="72" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d42/timeConversions_8h_1a73ef80485cb75e44ee9ce7b6785b46dc" prot="public" static="yes" mutable="no">
        <type>const long double</type>
        <definition>const long double tudat::basic_astrodynamics::TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION_LONG</definition>
        <argsstring></argsstring>
        <name>TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION_LONG</name>
        <initializer>= 2443144.5003725L</initializer>
        <briefdescription>
<para>Julian day at which TT, TCG, and TCB all show exact same time (1977 January 1, 00:00:32.184), in long double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="75" column="26" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d42/timeConversions_8h_1ad52060dcd453b6618dc88d34e4b5512a" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::basic_astrodynamics::TDB_SECONDS_OFFSET_AT_SYNCHRONIZATION</definition>
        <argsstring></argsstring>
        <name>TDB_SECONDS_OFFSET_AT_SYNCHRONIZATION</name>
        <initializer>= -6.55E-5</initializer>
        <briefdescription>
<para>Difference between TDB and (TT, TCB and TCB) at TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="98" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d42/timeConversions_8h_1a0592af5a59c76a0eb3c2469720838d18" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::basic_astrodynamics::TDB_SECONDS_OFFSET_AT_SYNCHRONIZATION_LONG</definition>
        <argsstring></argsstring>
        <name>TDB_SECONDS_OFFSET_AT_SYNCHRONIZATION_LONG</name>
        <initializer>= -6.55E-5L</initializer>
        <briefdescription>
<para>Difference between TDB and (TT, TCB and TCB) at TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION, in the requested time type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="101" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d42/timeConversions_8h_1a5ed6141e1d2bbcd3210790440858b8e2" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::basic_astrodynamics::TT_MINUS_TAI</definition>
        <argsstring></argsstring>
        <name>TT_MINUS_TAI</name>
        <initializer>= 32.184</initializer>
        <briefdescription>
<para>Offset of TT from TAI (constant by definition). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="113" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d42/timeConversions_8h_1a2bb1b153018b825b8c9829d1f66fa674" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::basic_astrodynamics::TT_MINUS_TAI_LONG</definition>
        <argsstring></argsstring>
        <name>TT_MINUS_TAI_LONG</name>
        <initializer>= 32.184L</initializer>
        <briefdescription>
<para>Offset of TT from TAI (constant by definition), in long double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="116" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/de2/rotationModel_8h_1aa0cc7b833b13ad6daa7d4382dc226c20" prot="public" static="yes" mutable="no">
        <type>std::map&lt; IAUConventions, std::string &gt;</type>
        <definition>std::map&lt; IAUConventions, std::string &gt; tudat::basic_astrodynamics::precessionNutationConventions</definition>
        <argsstring></argsstring>
        <name>precessionNutationConventions</name>
        <initializer>=
{
    { iau_2000_a, &quot;IAU2000a&quot; },
    { iau_2000_b, &quot;IAU2000b&quot; },
    { iau_2006, &quot;IAU2006&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>RotationModelType</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" line="61" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/de8/acceleration_8h_1aa24792bdcf8c8c0fb30a3a8e4ebcc085" prot="public" static="yes" mutable="no">
        <type>std::map&lt; AvailableAcceleration, std::string &gt;</type>
        <definition>std::map&lt; AvailableAcceleration, std::string &gt; tudat::basic_astrodynamics::accelerationTypes</definition>
        <argsstring></argsstring>
        <name>accelerationTypes</name>
        <initializer>=
{
    { undefined_acceleration, &quot;undefined&quot; },
    { point_mass_gravity, &quot;pointMassGravity&quot; },
    { aerodynamic, &quot;aerodynamic&quot; },
    { cannon_ball_radiation_pressure, &quot;cannonBallRadiationPressure&quot; },
    { spherical_harmonic_gravity, &quot;sphericalHarmonicGravity&quot; },
    { mutual_spherical_harmonic_gravity, &quot;mutualSphericalHarmonicGravity&quot; },
    { third_body_point_mass_gravity, &quot;thirdBodyPointMassGravity&quot; },
    { third_body_spherical_harmonic_gravity, &quot;thirdBodySphericalHarmonicGravity&quot; },
    { third_body_mutual_spherical_harmonic_gravity, &quot;thirdBodyMutualSphericalHarmonicGravity&quot; },
    { thrust_acceleration, &quot;thrust&quot; },
    { relativistic_correction_acceleration, &quot;relativisticCorrection&quot; },
    { empirical_acceleration, &quot;empirical&quot; },
    { custom_acceleration, &quot;custom&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>AvailableAcceleration</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
<para>Map of <computeroutput>AvailableAcceleration</computeroutput>s string representations.</para>
<para>There is a naming inconsistency between &quot;pointMassGravity&quot; and <computeroutput>central_gravity</computeroutput>, and between &quot;thirdBodyPointMassGravity&quot; and <computeroutput>third_body_central_gravity</computeroutput>.</para>
<para>The values &quot;thirdBodyPointMassGravity&quot;, &quot;thirdBodySphericalHarmonicGravity&quot; and &quot;thirdBodyMutualSphericalHarmonicGravity&quot; are supported by the JSON interface, and are equivalent to &quot;pointMassGravity&quot;, &quot;sphericalHarmonicGravity&quot; and &quot;mutualSphericalHarmonicGravity&quot;, respectively. However, a warning will be printed indicating that the body causing the acceleration may not be treated as a third body, requesting the user to remove the part &quot;thridBody&quot; in order to silence the warning. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="37" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/de8/acceleration_8h_1a2a3cc2d571f2402730f1fd42a62c748b" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; AvailableAcceleration &gt;</type>
        <definition>std::vector&lt; AvailableAcceleration &gt; tudat::basic_astrodynamics::unsupportedAccelerationTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedAccelerationTypes</name>
        <initializer>=
{
    third_body_point_mass_gravity,
    third_body_spherical_harmonic_gravity,
    third_body_mutual_spherical_harmonic_gravity
}</initializer>
        <briefdescription>
<para><computeroutput>AvailableAcceleration</computeroutput>s not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="55" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/de8/acceleration_8h_1a8e7dafb97d2060dbe37aa193f1890b50" prot="public" static="yes" mutable="no">
        <type>std::map&lt; EmpiricalAccelerationComponents, std::string &gt;</type>
        <definition>std::map&lt; EmpiricalAccelerationComponents, std::string &gt; tudat::basic_astrodynamics::empiricalAccelerationComponentTypes</definition>
        <argsstring></argsstring>
        <name>empiricalAccelerationComponentTypes</name>
        <initializer>=
{
    { radial_empirical_acceleration_component, &quot;radial&quot; },
    { along_track_empirical_acceleration_component, &quot;alongTrack&quot; },
    { across_track_empirical_acceleration_component, &quot;acrossTrack&quot; }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="62" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/de8/acceleration_8h_1a4e9768ab3b8f6e55478bea48db16fe54" prot="public" static="yes" mutable="no">
        <type>std::map&lt; std::string, EmpiricalAccelerationComponents &gt;</type>
        <definition>std::map&lt; std::string, EmpiricalAccelerationComponents &gt; tudat::basic_astrodynamics::empiricalAccelerationComponentTypesInverse</definition>
        <argsstring></argsstring>
        <name>empiricalAccelerationComponentTypesInverse</name>
        <initializer>=
{
    { &quot;radial&quot;, radial_empirical_acceleration_component },
    { &quot;alongTrack&quot;, along_track_empirical_acceleration_component },
    { &quot;acrossTrack&quot;, across_track_empirical_acceleration_component }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="69" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/de8/acceleration_8h_1aa83f7ab756abdd4f36e3d30cbe3f2c27" prot="public" static="yes" mutable="no">
        <type>std::map&lt; EmpiricalAccelerationFunctionalShapes, std::string &gt;</type>
        <definition>std::map&lt; EmpiricalAccelerationFunctionalShapes, std::string &gt; tudat::basic_astrodynamics::empiricalAccelerationFunctionalShapes</definition>
        <argsstring></argsstring>
        <name>empiricalAccelerationFunctionalShapes</name>
        <initializer>=
{
    { constant_empirical, &quot;constant&quot; },
    { sine_empirical, &quot;sine&quot; },
    { cosine_empirical, &quot;cosine&quot; }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="76" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/de1/interface_2json_2propagation_2massRateModel_8h_1abcdce746b51c753a06cbf9d15c390b2c" prot="public" static="yes" mutable="no">
        <type>std::map&lt; AvailableMassRateModels, std::string &gt;</type>
        <definition>std::map&lt; AvailableMassRateModels, std::string &gt; tudat::basic_astrodynamics::massRateTypes</definition>
        <argsstring></argsstring>
        <name>massRateTypes</name>
        <initializer>=
{
    { undefined_mass_rate_model, &quot;undefined&quot; },
    { custom_mass_rate_model, &quot;custom&quot; },
    { from_thrust_mass_rate_model, &quot;fromThrust&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>AvailableMassRateModels</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/massRateModel.h" line="25" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/massRateModel.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/de1/interface_2json_2propagation_2massRateModel_8h_1a36ac4a121e4067412e68fe812a0525f1" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; AvailableMassRateModels &gt;</type>
        <definition>std::vector&lt; AvailableMassRateModels &gt; tudat::basic_astrodynamics::unsupportedMassRateType</definition>
        <argsstring></argsstring>
        <name>unsupportedMassRateType</name>
        <initializer>=
{
    undefined_mass_rate_model,
    custom_mass_rate_model
}</initializer>
        <briefdescription>
<para><computeroutput>AvailableMassRateModels</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/massRateModel.h" line="33" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/massRateModel.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/dac/torque_8h_1a77fd100bde7f3e392a4595e84d1a25db" prot="public" static="yes" mutable="no">
        <type>std::map&lt; AvailableTorque, std::string &gt;</type>
        <definition>std::map&lt; AvailableTorque, std::string &gt; tudat::basic_astrodynamics::torqueTypes</definition>
        <argsstring></argsstring>
        <name>torqueTypes</name>
        <initializer>=
{
    { underfined_torque, &quot;undefined&quot; },
    { second_order_gravitational_torque, &quot;secondOrderGravitational&quot; },
    { aerodynamic_torque, &quot;aerodynamic&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>AvailableTorque</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/torque.h" line="25" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/torque.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/dac/torque_8h_1a04219f3851b1d30471cbf2efe6f9313a" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; AvailableTorque &gt;</type>
        <definition>std::vector&lt; AvailableTorque &gt; tudat::basic_astrodynamics::unsupportedTorqueTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedTorqueTypes</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>AvailableTorque</computeroutput>s not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/torque.h" line="33" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/torque.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d4/d5c/accelerationModel_8h_1ab74bdcbcbebe6b2556ce104632b9c683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AccelerationDataType</type>
          </param>
        </templateparamlist>
        <type>AccelerationDataType</type>
        <definition>AccelerationDataType tudat::basic_astrodynamics::updateAndGetAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; AccelerationModel&lt; AccelerationDataType &gt; &gt; accelerationModel, const double currentTime=TUDAT_NAN)</argsstring>
        <name>updateAndGetAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">AccelerationModel</ref>&lt; AccelerationDataType &gt; &gt;</type>
          <declname>accelerationModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
<para>Update the members of an acceleration model and evaluate the acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates the member variables of an acceleration model and subsequently evaluates the acceleration. This allows the user to suffice with a single function call to both update the members and evaluate the acceleration. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>AccelerationDataType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type used to represent accelerations (default=Eigen::Vector3d). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accelerationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration model that is to be evaluated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which acceleration model is to be updated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Acceleration that is obtained following the member update. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" line="127" column="22" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" bodystart="127" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/accelerationModelTypes_8h_1acb4cc3e4b9f1e801c663b61b3686afe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::basic_astrodynamics::getAccelerationModelName</definition>
        <argsstring>(const AvailableAcceleration accelerationType)</argsstring>
        <name>getAccelerationModelName</name>
        <param>
          <type>const AvailableAcceleration</type>
          <declname>accelerationType</declname>
        </param>
        <briefdescription>
<para>Function to get a string representing a &apos;named identification&apos; of an acceleration type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a string representing a &apos;named identification&apos; of an acceleration type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accelerationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of acceleration model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String with acceleration id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" line="21" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" bodystart="21" bodyend="84" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" declline="74" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/accelerationModelTypes_8h_1a3f5495af94b8dfb40bd81999e653f07c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AvailableAcceleration</type>
        <definition>AvailableAcceleration tudat::basic_astrodynamics::getAccelerationModelType</definition>
        <argsstring>(const std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; accelerationModel)</argsstring>
        <name>getAccelerationModelType</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
          <declname>accelerationModel</declname>
        </param>
        <briefdescription>
<para>Function to identify the derived class type of an acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to identify the derived class type of an acceleration model. The type must be defined in the AvailableAcceleration enum to be recognized by this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accelerationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration model of which the type is to be identified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type of the accelerationModel, as identified by AvailableAcceleration enum. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" line="87" column="23" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" bodystart="87" bodyend="191" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" declline="95" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/accelerationModelTypes_8h_1a18aea954154c2ac8ad584e5e83bf1184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AvailableMassRateModels</type>
        <definition>AvailableMassRateModels tudat::basic_astrodynamics::getMassRateModelType</definition>
        <argsstring>(const std::shared_ptr&lt; MassRateModel &gt; massRateModel)</argsstring>
        <name>getMassRateModelType</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d2/df8/classtudat_1_1basic__astrodynamics_1_1MassRateModel" kindref="compound">MassRateModel</ref> &gt;</type>
          <declname>massRateModel</declname>
        </param>
        <briefdescription>
<para>Function to identify the type of a mass rate model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to identify the type of a mass rate model. The type must be defined in the AvailableMassRateModels enum to be recognized by this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>massRateModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass rate model of which the type is to be identified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type of the massRateModel, as identified by AvailableMassRateModels enum. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" line="194" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" bodystart="194" bodyend="216" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" declline="106" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/accelerationModelTypes_8h_1a403b0523351327d8ceea447b926be4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">AccelerationModel3d</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; AccelerationModel3d &gt; &gt; tudat::basic_astrodynamics::getAccelerationModelsOfType</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; AccelerationModel3d &gt; &gt; &amp;fullList, const AvailableAcceleration modelType)</argsstring>
        <name>getAccelerationModelsOfType</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">AccelerationModel3d</ref> &gt; &gt; &amp;</type>
          <declname>fullList</declname>
        </param>
        <param>
          <type>const AvailableAcceleration</type>
          <declname>modelType</declname>
        </param>
        <briefdescription>
<para>Function to get all acceleration models of a given type from a list of models. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get all acceleration models of a given type from a list of models <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fullList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of acceleration models </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modelType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type for which all models are to be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Subset of fullList for which the acceleration model type is modelType </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" line="219" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" bodystart="219" bodyend="232" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" declline="116" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/accelerationModelTypes_8h_1a20124d72a9c74f0810127787a84954ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tudat::basic_astrodynamics::isAccelerationDirectGravitational</definition>
        <argsstring>(const AvailableAcceleration accelerationType)</argsstring>
        <name>isAccelerationDirectGravitational</name>
        <param>
          <type>const AvailableAcceleration</type>
          <declname>accelerationType</declname>
        </param>
        <briefdescription>
<para>Function to check whether an acceleration type is a direct gravitational acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check whether an acceleration type is a direct gravitational acceleration, e.g. a gravitational acceleration that is not from a third-body. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accelerationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration type for which it is to be checked whether it is direct gravitational. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if acceleration type is direct gravitational, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" line="235" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" bodystart="235" bodyend="246" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/accelerationModelTypes_8h_1aa642e080312f7cb0818cb50c012c3337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tudat::basic_astrodynamics::isAccelerationFromThirdBody</definition>
        <argsstring>(const AvailableAcceleration accelerationType)</argsstring>
        <name>isAccelerationFromThirdBody</name>
        <param>
          <type>const AvailableAcceleration</type>
          <declname>accelerationType</declname>
        </param>
        <briefdescription>
<para>Function to check whether an acceleration type is a third-body gravitational acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check whether an acceleration type is a third-body gravitational acceleration <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accelerationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration type for which it is to be checked whether it is third-body gravitational. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if acceleration type is third-body gravitational, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" line="249" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" bodystart="249" bodyend="260" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/accelerationModelTypes_8h_1a73b225b0ffbc84564e01f6f6097f8cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AvailableAcceleration</type>
        <definition>AvailableAcceleration tudat::basic_astrodynamics::getAssociatedThirdBodyAcceleration</definition>
        <argsstring>(const AvailableAcceleration accelerationType)</argsstring>
        <name>getAssociatedThirdBodyAcceleration</name>
        <param>
          <type>const AvailableAcceleration</type>
          <declname>accelerationType</declname>
        </param>
        <briefdescription>
<para>Function to get the third-body counterpart of a direct gravitational acceleration type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the third-body counterpart of a direct gravitational acceleration type, e.g. a third_body_central_gravity for a central_gravity input. Function throws an exception is input is not direct gravitational <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accelerationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration type for which the third-body counterpart is to be determined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Third-body counterpart of accelerationType. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" line="264" column="23" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/accelerationModelTypes.cpp" bodystart="264" bodyend="292" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModelTypes.h" declline="144" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1abdf124873ba3ac16d204f66b34bd04bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computeKeplerOrbitalPeriod</definition>
        <argsstring>(const double semiMajorAxis, const double gravitationalParameterOfCentralBody, const double massOfOrbitingBody=0.0)</argsstring>
        <name>computeKeplerOrbitalPeriod</name>
        <param>
          <type>const double</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameterOfCentralBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>massOfOrbitingBody</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Compute two-body orbital period. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute Kepler orbital period.</para>
<para>Computes the two-body orbital period of an orbiting body that follows a closed conic section (circle or ellipse Kepler orbit). The mass of the orbiting body is set to that of a test particle by default. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of Kepler orbit (circle or ellipse). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameterOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massOfOrbitingBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of orbiting body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Two-body orbital period. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="29" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="29" bodyend="37" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="35" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1a6a3e8fc177111d2c0793744d9ca82b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computeKeplerRadialDistance</definition>
        <argsstring>(const double semiMajorAxis, const double eccentricity, const double trueAnomaly)</argsstring>
        <name>computeKeplerRadialDistance</name>
        <param>
          <type>const double</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>trueAnomaly</declname>
        </param>
        <briefdescription>
<para>Compute two-body radial distance. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute two-body radial distance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of Kepler orbit (circle or ellipse). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity of Kepler orbit (circle or ellipse). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trueAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>True anomaly of Kepler orbit (circle or ellipse). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Two-body radial distance at specified true anomaly. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="40" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="40" bodyend="45" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="47" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1aa4756fb4a974593a6772c51c36cab187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computeKeplerRadialDistance</definition>
        <argsstring>(const Eigen::Vector6d &amp;keplerianElements)</argsstring>
        <name>computeKeplerRadialDistance</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>keplerianElements</declname>
        </param>
        <briefdescription>
<para>Compute two-body radial distance. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute two-body radial distance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keplerianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector denoting the Keplerian elements (circle or ellipse). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Two-body radial distance at specified true anomaly. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="48" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="48" bodyend="55" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="57" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1ae847d3fed28e696f006caa6f7a53875d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computeKeplerOrbitalVelocity</definition>
        <argsstring>(const double semiMajorAxis, const double eccentricity, const double trueAnomaly, const double gravitationalParameterOfCentralBody, const double massOfOrbitingBody=0.0)</argsstring>
        <name>computeKeplerOrbitalVelocity</name>
        <param>
          <type>const double</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>trueAnomaly</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameterOfCentralBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>massOfOrbitingBody</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Compute two-body orbital velocity with vis-viva equation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute two-body orbital velocity with vis-viva equation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of Kepler orbit (circle or ellipse). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity of Kepler orbit (circle or ellipse). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trueAnomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>True anomaly of Kepler orbit (circle or ellipse). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameterOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massOfOrbitingBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of orbiting body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Two-body orbital velocity at current conditions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="58" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="58" bodyend="68" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="69" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1ad8127fc88f8d60c33c01703c07ea96bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computeKeplerOrbitalVelocity</definition>
        <argsstring>(const Eigen::Vector6d &amp;keplerianElements, const double gravitationalParameterOfCentralBody, const double massOfOrbitingBody=0.0)</argsstring>
        <name>computeKeplerOrbitalVelocity</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>keplerianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameterOfCentralBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>massOfOrbitingBody</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Compute two-body orbital velocity with vis-viva equation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute two-body orbital velocity with vis-viva equation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keplerianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector denoting the Keplerian elements (circle or ellipse). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameterOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massOfOrbitingBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of orbiting body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Two-body orbital velocity at current conditions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="71" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="71" bodyend="79" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="83" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1ab479817936ed12b00d6e4bc2210ae927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computeKeplerAngularMomentum</definition>
        <argsstring>(const double semiMajorAxis, const double eccentricity, const double gravitationalParameterOfCentralBody, const double massOfOrbitingBody=0.0)</argsstring>
        <name>computeKeplerAngularMomentum</name>
        <param>
          <type>const double</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameterOfCentralBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>massOfOrbitingBody</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Compute two-body angular momentum. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute Kepler angular momentum.</para>
<para>Computes the angular momentum of an orbiting body that follows a conic section (Kepler orbit), relative to the center-of-mass of the central body. The default mass value is for the angular momentum per unit mass. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of Kepler orbit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity of Kepler orbit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameterOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massOfOrbitingBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of orbiting body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Two-body angular momentum. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="82" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="82" bodyend="88" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="98" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1a3cfc2071cd681dfa4ac396c995a63e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computeKeplerMeanMotion</definition>
        <argsstring>(const double semiMajorAxis, const double gravitationalParameterOfCentralBody, const double massOfOrbitingBody=0.0)</argsstring>
        <name>computeKeplerMeanMotion</name>
        <param>
          <type>const double</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameterOfCentralBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>massOfOrbitingBody</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Compute two-body mean motion. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute Kepler mean motion.</para>
<para>Computes the two-body mean motion of an orbiting body that follows a conic section (Kepler orbit). The mass of the orbiting body is set to that of a test particle by default. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of Kepler orbit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameterOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massOfOrbitingBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of orbiting body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Two-body mean motion. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="91" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="91" bodyend="97" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="111" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1a330ee160ae95d9297f0c71b5df879d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computeKeplerEnergy</definition>
        <argsstring>(const double semiMajorAxis, const double gravitationalParameterOfCentralBody, const double massOfOrbitingBody=1.0)</argsstring>
        <name>computeKeplerEnergy</name>
        <param>
          <type>const double</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameterOfCentralBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>massOfOrbitingBody</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Compute Kepler energy. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute Kepler orbital energy.</para>
<para>Computes the energy of an orbiting body that follows a conic section (Kepler orbit). The default mass value is for the two-body orbital energy per unit mass. For closed conic sections (circles, ellipses), the semi-major axis is positive, and for open sections (hyperbolas) the semi-major axis is negative. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of Kepler orbit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameterOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massOfOrbitingBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of orbiting body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Kepler orbital energy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="100" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="100" bodyend="105" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="126" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1adfd202118a795bdbe3f7e6b06832e180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computeSynodicPeriod</definition>
        <argsstring>(const double orbitalPeriodBody1, const double orbitalPeriodBody2)</argsstring>
        <name>computeSynodicPeriod</name>
        <param>
          <type>const double</type>
          <declname>orbitalPeriodBody1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>orbitalPeriodBody2</declname>
        </param>
        <briefdescription>
<para>Compute synodic period. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes synodic period between two bodies in different Kepler orbits (closed conic sections). The orbital periods must be positive values for the synodic period to be sensible. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orbitalPeriodBody1</parametername>
</parameternamelist>
<parameterdescription>
<para>Orbital period of Body 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orbitalPeriodBody2</parametername>
</parameternamelist>
<parameterdescription>
<para>Orbital period of Body 2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Synodic period. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="108" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="108" bodyend="111" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="138" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1a7d1a5583cbcb2f20486ccdabd5e71f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computePeriapsisAltitudeFromKeplerianState</definition>
        <argsstring>(const Eigen::Vector6d &amp;state, const double centralBodyRadius)</argsstring>
        <name>computePeriapsisAltitudeFromKeplerianState</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyRadius</declname>
        </param>
        <briefdescription>
<para>Compute periapsis altitude from Keplerian state for spherical central body. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute periapsis altitude from Keplerian state for spherical central body. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Keplerian state of the propagated body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the central body (assumed spherical). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance from the propagated body to the central body&apos;s spherical surface at periapsis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="115" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="115" bodyend="120" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="148" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/daa/astrodynamicsFunctions_8h_1aca24ae05b851bdad89a41618bd4b390c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::computePeriapsisAltitudeFromCartesianState</definition>
        <argsstring>(const Eigen::Vector6d &amp;state, const double centralBodyGravitationalParameter, const double centralBodyRadius)</argsstring>
        <name>computePeriapsisAltitudeFromCartesianState</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyRadius</declname>
        </param>
        <briefdescription>
<para>Compute periapsis altitude from Cartesian state for spherical central body. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute periapsis altitude from Cartesian state for spherical central body. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of the propagated body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the central body (assumed spherical). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance from the propagated body to the central body&apos;s spherical surface at periapsis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" line="123" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/astrodynamicsFunctions.cpp" bodystart="123" bodyend="130" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/astrodynamicsFunctions.h" declline="159" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d6/d3f/bodyShapeModel_8h_1ac2a2c3278df1ab425a6d2302b1137299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::getAltitudeFromNonBodyFixedPosition</definition>
        <argsstring>(const std::shared_ptr&lt; BodyShapeModel &gt; bodyShapeModel, const Eigen::Vector3d &amp;position, const Eigen::Vector3d &amp;bodyPosition, const Eigen::Quaterniond &amp;toBodyFixedFrame)</argsstring>
        <name>getAltitudeFromNonBodyFixedPosition</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d35/classtudat_1_1basic__astrodynamics_1_1BodyShapeModel" kindref="compound">BodyShapeModel</ref> &gt;</type>
          <declname>bodyShapeModel</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>bodyPosition</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>toBodyFixedFrame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate the altitude of a point over a central body from positions of both the point and the body (in any frame)</para>
<para>Function to calculate the altitude of a point over a central body from positions of both the point and the body (in any frame). The rotation to the body-fixed frame is provided to calculate the input for the altitude function of the bodyShapeModel, which is to be in a body-fixed frame. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyShapeModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Shape model of central body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of point of which altitude is to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of central body above which altitude is to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toBodyFixedFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation from frame in which input vectors are given to body-fixed frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Altitude above body shape.</para>
</simplesect>
Function to calculate the altitude of a point over a central body from positions of both the point and the body (in any frame) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/bodyShapeModel.cpp" line="25" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/bodyShapeModel.cpp" bodystart="25" bodyend="30" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/bodyShapeModel.h" declline="81" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d6/d3f/bodyShapeModel_8h_1afa6e040c271d3e850540b95b9cb1b4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::getAltitudeFromNonBodyFixedPositionFunctions</definition>
        <argsstring>(const std::shared_ptr&lt; BodyShapeModel &gt; bodyShapeModel, const Eigen::Vector3d &amp;position, const std::function&lt; Eigen::Vector3d() &gt; bodyPositionFunction, const std::function&lt; Eigen::Quaterniond() &gt; toBodyFixedFrameFunction)</argsstring>
        <name>getAltitudeFromNonBodyFixedPositionFunctions</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d35/classtudat_1_1basic__astrodynamics_1_1BodyShapeModel" kindref="compound">BodyShapeModel</ref> &gt;</type>
          <declname>bodyShapeModel</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector3d() &gt;</type>
          <declname>bodyPositionFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Quaterniond() &gt;</type>
          <declname>toBodyFixedFrameFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate the altitude of a point over a central body from positions of both the point and the body (in any frame)</para>
<para>Function to calculate the altitude of a point over a central body from positions of both the point and the body (in any frame). The rotation to the body-fixed frame is provided to calculate the input for the altitude function of the bodyShapeModel. The position of the central body and rotation are not provided directly, but as function pointers to allow easy binding with e.g. a Body class. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyShapeModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Shape model of central body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of point of which altitude is to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyPositionFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning position of central body above which altitude is to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toBodyFixedFrameFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning rotation from frame in which input vectors are given to body-fixed frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Altitude above body shape.</para>
</simplesect>
Function to calculate the altitude of a point over a central body from positions of both the point and the body (in any frame) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/bodyShapeModel.cpp" line="34" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/bodyShapeModel.cpp" bodystart="34" bodyend="41" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/bodyShapeModel.h" declline="103" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="df/ddf/clohessyWiltshirePropagator_8h_1aa5c71ce8fb7777345fadd2b8e142d46c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::basic_astrodynamics::propagateClohessyWiltshire</definition>
        <argsstring>(const Eigen::Vector6d &amp;initialState, const double propagationDuration, const double centralBodyGravitationalParameter, const double referenceOrbitRadius)</argsstring>
        <name>propagateClohessyWiltshire</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>initialState</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>propagationDuration</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceOrbitRadius</declname>
        </param>
        <briefdescription>
<para>Propagate Clohessy-Wilshire equations (linearized relative motion). </para>
        </briefdescription>
        <detaileddescription>
<para>Propagate linearized relative motion.</para>
<para>This function propagates linearized relative motion, based on the Clohessy-Wiltshire equations. It calculates the motion of a point mass A with respect to a local-vertical-local-horizontal reference frame centered on a point mass B.</para>
<para>The following assumptions apply: (1) Masses A and B are negligable compared to the central body mass (e.g. mass A is a daughter spacecraft, mass B is a mother spacecraft, and the central body is planet Earth). (2) Orbit perturbations are negligable (i.e. massses A and B follow Kepler orbits about the central body). (3) The orbit of mass B is circular. (4) The separation between mass A and mass B is very small compared to the circumference of the orbit of mass B.</para>
<para>The Clohessy-Wilthsire equations are given by Vallado [2001] as:</para>
<para><formula id="5">\begin{eqnarray*} x( t ) = \frac{ \dot{ x }_0 }{ n } \sin( n t ) - \left( 3 x_0 + \frac{ 2 \dot{ y }_0 } { n } \right) \cos( n t ) + \left( 4 x_0 + \frac{ 2 \dot{ y }_0 }{ n } \right) \\ y( t ) = \left( 6 x_0 + \frac{ 4 \dot{ y_0 } }{ n } \right) \sin( n t ) + \frac{ 2 \dot{ x }_0 }{ n } \cos( n t ) - ( 6 x_0 n + 3 \dot{ y_0 } ) t + \left( y_0 - \frac{ 2 \dot{ x }_0 }{ n } \right) \\ z( t ) = \frac{ \dot{ z }_0 }{ n } \sin( n t ) + z_0 \cos ( n t ) \\ \dot{ x }( t ) = ( 3 x_0 n + 2 \dot{ y }_0 ) \sin( n t ) + \dot{ x }_0 \cos( n t ) \\ \dot{ y }( t ) = - 2 \dot{ x }_0 \sin( n t ) + ( 6 x_0 n + 4 \dot{ y }_0 ) \cos( n t) - ( 6 n x_0 + 3 \dot{ y }_0 ) \\ \dot{ z }( t ) = - z_0 n \sin( n t ) + \dot{ z }_0 \cos( n t ) \end{eqnarray*}</formula></para>
<para>in which <formula id="6">$ x( t ) $</formula>, <formula id="7">$ y( t ) $</formula> and <formula id="8">$ z( t ) $</formula> are the radial, along-track and cross-track position respectively, of mass A. Parameters <formula id="9">$ x_0 $</formula>, <formula id="10">$ y_0 $</formula> and <formula id="11">$ z_0 $</formula> are the initial radial, along-track and cross-track position respectively. Parameter <formula id="12">$ n $</formula> is the mean angular motion of the circular orbit of mass B. Finally, parameter <formula id="13">$ t $</formula> is time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialState</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state vector in Cartesian elements. The order is important! initialState( 0 ) = radial position [m], initialState( 1 ) = along-track position [m], initialState( 2 ) = cross-track position [m], initialState( 3 ) = radial velocity [m/s], initialstate( 4 ) = along-track velocity [m/s], initialState( 5 ) = cross-track velocity [m/s], </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagationDuration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration of propagation [s]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body [m^3 s^-2]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceOrbitRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of circular orbit of mass B [m]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Final state vector in Cartesian elements. The order is important! finalState( 0 ) = radial position [m], finalState( 1 ) = along-track position [m], finalState( 2 ) = cross-track position [m], finalState( 3 ) = radial velocity [m/s], finalState( 4 ) = along-track velocity [m/s], finalState( 5 ) = cross-track velocity [m/s]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/clohessyWiltshirePropagator.cpp" line="30" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/clohessyWiltshirePropagator.cpp" bodystart="30" bodyend="81" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/clohessyWiltshirePropagator.h" declline="91" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="da/dfd/empiricalAcceleration_8h_1a34e877e81636e1210b92357db2770ef6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::basic_astrodynamics::getEmpiricalAccelerationFunctionalShapeString</definition>
        <argsstring>(const EmpiricalAccelerationFunctionalShapes functionalShape)</argsstring>
        <name>getEmpiricalAccelerationFunctionalShapeString</name>
        <param>
          <type>const EmpiricalAccelerationFunctionalShapes</type>
          <declname>functionalShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/empiricalAcceleration.h" line="42" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/empiricalAcceleration.h" bodystart="42" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a3a10566d968f98ed2f60a3490ed4049d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::getJulianDayOnJ2000</definition>
        <argsstring>()</argsstring>
        <name>getJulianDayOnJ2000</name>
        <briefdescription>
<para>Function to get the Julian day on J2000. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the Julian day on J2000, in the requested time representation type <simplesect kind="return"><para>Julian day on J2000 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="55" column="10" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="55" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1ac2ad27cc85424c3ccfcb4c6bd83b62c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::getJulianDayOnMjd0</definition>
        <argsstring>()</argsstring>
        <name>getJulianDayOnMjd0</name>
        <briefdescription>
<para>Function to get the Julian day on zero modified Julian day. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the Julian day on on zero modified Julian day, in the requested time representation type <simplesect kind="return"><para>Julian day on zero modified Julian day. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="69" column="10" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="69" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1aa5faf7278f249257d2ec6f478e2c0be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::getTimeOfTaiSynchronizationJulianDay</definition>
        <argsstring>()</argsstring>
        <name>getTimeOfTaiSynchronizationJulianDay</name>
        <briefdescription>
<para>Function to get the synchronization Julian day of TT, TCG, and TCB. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the synchronization Julian day of TT, TCG, and TCB, in the requested time representation type <simplesect kind="return"><para>Synchronization Julian day of TT, TCG, and TCB. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="83" column="10" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="83" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1aad911488a4b55e0f61d43a3b4814684d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::getTimeOfTaiSynchronizationSinceJ2000</definition>
        <argsstring>()</argsstring>
        <name>getTimeOfTaiSynchronizationSinceJ2000</name>
        <briefdescription>
<para>Function to get the synchronization time of TT, TCG, and TCB, in seconds since J2000. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the synchronization time of TT, TCG, and TCB, in seconds since J2000 (constant by definition). <simplesect kind="return"><para>Synchronization time of TT, TCG, and TCB, in seconds since J2000. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="91" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a08104aeb5be511022d529decf0c0d7e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::getTdbSecondsOffsetAtSynchronization</definition>
        <argsstring>()</argsstring>
        <name>getTdbSecondsOffsetAtSynchronization</name>
        <briefdescription>
<para>Function to get the difference between TDB and (TT, TCB and TCB) at TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the difference between TDB and (TT, TCB and TCB) at TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION, in the requested time representation type <simplesect kind="return"><para>Difference between TDB and (TT, TCB and TCB) at TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION (constant by definition). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="110" column="10" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="110" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a83aa1cf39956e70e58e6bfe96c004e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::getTTMinusTai</definition>
        <argsstring>()</argsstring>
        <name>getTTMinusTai</name>
        <briefdescription>
<para>Function to get the offset of TT from TAI (constant by definition) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the offset of TT from TAI (constant by definition), in the requested time representation type <simplesect kind="return"><para>Offset of TT from TAI (constant by definition). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="124" column="10" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="124" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1aad52ff0d9035f7fe6ac5562b1d43196f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>TimeScalarType</type>
        <definition>TimeScalarType tudat::basic_astrodynamics::convertJulianDayToSecondsSinceEpoch</definition>
        <argsstring>(const TimeScalarType julianDay, const TimeScalarType epochSinceJulianDayZero=getJulianDayOnJ2000&lt; TimeScalarType &gt;())</argsstring>
        <name>convertJulianDayToSecondsSinceEpoch</name>
        <param>
          <type>const TimeScalarType</type>
          <declname>julianDay</declname>
        </param>
        <param>
          <type>const TimeScalarType</type>
          <declname>epochSinceJulianDayZero</declname>
          <defval>getJulianDayOnJ2000&lt; TimeScalarType &gt;()</defval>
        </param>
        <briefdescription>
<para>Compute number of seconds since a reference Julian day. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the number of seconds since a reference Julian day from Julian day. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>julianDay</parametername>
</parameternamelist>
<parameterdescription>
<para>Julian day at which number of seconds since epoch is to be determined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epochSinceJulianDayZero</parametername>
</parameternamelist>
<parameterdescription>
<para>Epoch in Julian day. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of seconds since epoch. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="135" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="135" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1aef84286056e112e0321f50144ce16fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>TimeScalarType</type>
        <definition>TimeScalarType tudat::basic_astrodynamics::convertSecondsSinceEpochToJulianDay</definition>
        <argsstring>(const TimeScalarType secondsSinceEpoch, const TimeScalarType epochSinceJulianDayZero=getJulianDayOnJ2000&lt; TimeScalarType &gt;())</argsstring>
        <name>convertSecondsSinceEpochToJulianDay</name>
        <param>
          <type>const TimeScalarType</type>
          <declname>secondsSinceEpoch</declname>
        </param>
        <param>
          <type>const TimeScalarType</type>
          <declname>epochSinceJulianDayZero</declname>
          <defval>getJulianDayOnJ2000&lt; TimeScalarType &gt;()</defval>
        </param>
        <briefdescription>
<para>Compute Julian day from seconds since reference Julian day epoch. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the Julian day bsaed on seconds since reference Julian day epoch provided. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>secondsSinceEpoch</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds since epoch. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epochSinceJulianDayZero</parametername>
</parameternamelist>
<parameterdescription>
<para>Epoch in Julian day. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of Julian days since epoch. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="150" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="150" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a0c1d4a3e5f27611da5dd2715ba19c729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>TimeScalarType</type>
        <definition>TimeScalarType tudat::basic_astrodynamics::convertCalendarDateToJulianDaysSinceEpoch</definition>
        <argsstring>(const int calendarYear, const int calendarMonth, const int calendarDay, const int calendarHour, const int calendarMinutes, const TimeScalarType calendarSeconds, const TimeScalarType referenceJulianDay)</argsstring>
        <name>convertCalendarDateToJulianDaysSinceEpoch</name>
        <param>
          <type>const int</type>
          <declname>calendarYear</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>calendarMonth</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>calendarDay</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>calendarHour</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>calendarMinutes</declname>
        </param>
        <param>
          <type>const TimeScalarType</type>
          <declname>calendarSeconds</declname>
        </param>
        <param>
          <type>const TimeScalarType</type>
          <declname>referenceJulianDay</declname>
        </param>
        <briefdescription>
<para>Compute Julian day from given date and time. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the Julian day from given year, month, day, hour, minutes, seconds as used in everyday life. The function uses the internal calcualtions of the boost::date_time::gregorian class.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calendarYear</parametername>
</parameternamelist>
<parameterdescription>
<para>Year of the standard calendar in years. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calendarMonth</parametername>
</parameternamelist>
<parameterdescription>
<para>Month of the standard calendar in months. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calendarDay</parametername>
</parameternamelist>
<parameterdescription>
<para>Day of the standard calendar in days. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calendarHour</parametername>
</parameternamelist>
<parameterdescription>
<para>Hour of the time of this day in hours. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calendarMinutes</parametername>
</parameternamelist>
<parameterdescription>
<para>Minutes of the time of this day in minutes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calendarSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds of the time of this day in seconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceJulianDay</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference Julian day (i.e. t=0) for input time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Seconds since referenceJulianDay for input date/time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="173" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="173" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a5ba8a65b9ab2fe5b590628d50c21c8ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>TimeScalarType</type>
        <definition>TimeScalarType tudat::basic_astrodynamics::convertCalendarDateToJulianDay</definition>
        <argsstring>(const int calendarYear, const int calendarMonth, const int calendarDay, const int calendarHour, const int calendarMinutes, const TimeScalarType calendarSeconds)</argsstring>
        <name>convertCalendarDateToJulianDay</name>
        <param>
          <type>const int</type>
          <declname>calendarYear</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>calendarMonth</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>calendarDay</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>calendarHour</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>calendarMinutes</declname>
        </param>
        <param>
          <type>const TimeScalarType</type>
          <declname>calendarSeconds</declname>
        </param>
        <briefdescription>
<para>Compute Julian day from given date and time. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the Julian day from given year, month, day, hour, minutes, seconds as used in everyday life. The function uses the internal calcualtions of the boost::date_time::gregorian class.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calendarYear</parametername>
</parameternamelist>
<parameterdescription>
<para>Year of the standard calendar in years. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calendarMonth</parametername>
</parameternamelist>
<parameterdescription>
<para>Month of the standard calendar in months. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calendarDay</parametername>
</parameternamelist>
<parameterdescription>
<para>Day of the standard calendar in days. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calendarHour</parametername>
</parameternamelist>
<parameterdescription>
<para>Hour of the time of this day in hours. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calendarMinutes</parametername>
</parameternamelist>
<parameterdescription>
<para>Minutes of the time of this day in minutes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calendarSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds of the time of this day in seconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="212" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="212" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a7783d04870ff93c6cf626e16f6b504b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeScalarType</type>
          </param>
        </templateparamlist>
        <type>TimeScalarType</type>
        <definition>TimeScalarType tudat::basic_astrodynamics::convertJulianDayToModifiedJulianDay</definition>
        <argsstring>(const TimeScalarType julianDay)</argsstring>
        <name>convertJulianDayToModifiedJulianDay</name>
        <param>
          <type>const TimeScalarType</type>
          <declname>julianDay</declname>
        </param>
        <briefdescription>
<para>Function to convert julian day to modified julian day. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert julian day to modified julian day. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>julianDay</parametername>
</parameternamelist>
<parameterdescription>
<para>Julian day to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modified julian day as obtained from julian day. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="231" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a334915bfcce3c8e75243ebc54f8d3cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeScalarType</type>
          </param>
        </templateparamlist>
        <type>TimeScalarType</type>
        <definition>TimeScalarType tudat::basic_astrodynamics::convertModifiedJulianDayToJulianDay</definition>
        <argsstring>(const TimeScalarType modifiedJulianDay)</argsstring>
        <name>convertModifiedJulianDayToJulianDay</name>
        <param>
          <type>const TimeScalarType</type>
          <declname>modifiedJulianDay</declname>
        </param>
        <briefdescription>
<para>Function to convert modified julian dat to julian day. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert modified julian dat to julian day. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>modifiedJulianDay</parametername>
</parameternamelist>
<parameterdescription>
<para>Modified julian day to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Julian day as obtained from modified julian day. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="243" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a0703d38bc59ed6e4ce821009bf96a8cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>TimeScalarType</type>
        <definition>TimeScalarType tudat::basic_astrodynamics::convertSecondsSinceEpochToJulianYearsSinceEpoch</definition>
        <argsstring>(const TimeScalarType secondsSinceEpoch)</argsstring>
        <name>convertSecondsSinceEpochToJulianYearsSinceEpoch</name>
        <param>
          <type>const TimeScalarType</type>
          <declname>secondsSinceEpoch</declname>
        </param>
        <briefdescription>
<para>Function to convert the number of seconds since some reference julian day to a julian day since that epoch. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert the number of seconds since some reference julian day to a julian year since that epoch. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>secondsSinceEpoch</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds since some reference epoch to convert to julian year. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of julian years since epoch </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="255" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="255" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a24be6345cbf2286fe5cfce1e362446cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>TimeScalarType</type>
        <definition>TimeScalarType tudat::basic_astrodynamics::convertSecondsSinceEpochToJulianCenturiesSinceEpoch</definition>
        <argsstring>(const TimeScalarType secondsSinceEpoch)</argsstring>
        <name>convertSecondsSinceEpochToJulianCenturiesSinceEpoch</name>
        <param>
          <type>const TimeScalarType</type>
          <declname>secondsSinceEpoch</declname>
        </param>
        <briefdescription>
<para>Function to convert the number of seconds since some reference julian day to a julian century since that epoch. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert the number of seconds since some reference julian day to a julian century since that epoch. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>secondsSinceEpoch</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds since some reference epoch to convert to julian year. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of julian centuries since epoch </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="268" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a2a1e30e0bf284fd57acb27c8e9d96ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::gregorian::date</type>
        <definition>boost::gregorian::date tudat::basic_astrodynamics::convertJulianDayToCalendarDate</definition>
        <argsstring>(const double julianDay)</argsstring>
        <name>convertJulianDayToCalendarDate</name>
        <param>
          <type>const double</type>
          <declname>julianDay</declname>
        </param>
        <briefdescription>
<para>Function to convert julian day to gregorian calendar date. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert julian day to gregorian calendar date. Algorithm from (Wertz, 2009, Eq. 4.3) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>julianDay</parametername>
</parameternamelist>
<parameterdescription>
<para>Julian day to convert to gregorian calendar date. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Gregorian calendar date at given julian day. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="104" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="104" bodyend="155" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="279" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a2407387479f4678433bdecd2b7239039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeScalarType</type>
          </param>
        </templateparamlist>
        <type>TimeScalarType</type>
        <definition>TimeScalarType tudat::basic_astrodynamics::calculateJulianDaySinceEpoch</definition>
        <argsstring>(const boost::gregorian::date calendarDate, const TimeScalarType fractionOfDay, const TimeScalarType epochSinceJulianDayZero=JULIAN_DAY_ON_J2000)</argsstring>
        <name>calculateJulianDaySinceEpoch</name>
        <param>
          <type>const boost::gregorian::date</type>
          <declname>calendarDate</declname>
        </param>
        <param>
          <type>const TimeScalarType</type>
          <declname>fractionOfDay</declname>
        </param>
        <param>
          <type>const TimeScalarType</type>
          <declname>epochSinceJulianDayZero</declname>
          <defval>JULIAN_DAY_ON_J2000</defval>
        </param>
        <briefdescription>
<para>Function to convert gregorian calendar date and fraction of day to a number of julian days since a reference epoch. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert gregorian calendar date and fraction of day to a number of julian days since a reference epoch. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calendarDate</parametername>
</parameternamelist>
<parameterdescription>
<para>Calendar date at which conversion is to be performed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fractionOfDay</parametername>
</parameternamelist>
<parameterdescription>
<para>Fraction of day in current gregorian date. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epochSinceJulianDayZero</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference epoch since which number of julian days is to be determined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of julian days since a reference epoch. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="290" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="290" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1aa09335d95a7614ee3392293eef8b1166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tudat::basic_astrodynamics::isLeapYear</definition>
        <argsstring>(const int year)</argsstring>
        <name>isLeapYear</name>
        <param>
          <type>const int</type>
          <declname>year</declname>
        </param>
        <briefdescription>
<para>Function to determine whether the given year is a leap year (i.e. has 366 days) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to determine whether the given year is a leap year (i.e. has 366 days) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>year</parametername>
</parameternamelist>
<parameterdescription>
<para>Year for which it is to be determined whether it is a leap year. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if year is a leap year, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="159" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="159" bodyend="167" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="306" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a38f9f7bde4ff9a4bea801ae9771d0e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::basic_astrodynamics::getDaysInMonth</definition>
        <argsstring>(const int month, const int year)</argsstring>
        <name>getDaysInMonth</name>
        <param>
          <type>const int</type>
          <declname>month</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>year</declname>
        </param>
        <briefdescription>
<para>Function that returns number of days in given month number. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that returns number of days in given month number (January = 1, December = 12) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>month</parametername>
</parameternamelist>
<parameterdescription>
<para>Month number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>year</parametername>
</parameternamelist>
<parameterdescription>
<para>Year </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of days in given month </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="170" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="170" bodyend="195" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="315" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1ad4b18b4b4629ddf353795bb7cd87b488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::basic_astrodynamics::convertDayMonthYearToDayOfYear</definition>
        <argsstring>(const int day, const int month, const int year)</argsstring>
        <name>convertDayMonthYearToDayOfYear</name>
        <param>
          <type>const int</type>
          <declname>day</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>month</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>year</declname>
        </param>
        <briefdescription>
<para>Determine number of full days that have passed in current year. </para>
        </briefdescription>
        <detaileddescription>
<para>Determine number of full days that have passed in current year (i.e. 0 to 364 or 0 to 365 for leap year) This function creates a boost::gregorian::date object and calls the overloaded function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>day</parametername>
</parameternamelist>
<parameterdescription>
<para>Day in current year (1 is first day) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>month</parametername>
</parameternamelist>
<parameterdescription>
<para>Month in current year (1 is first month) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>year</parametername>
</parameternamelist>
<parameterdescription>
<para>Current year (for leap year purposes) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of full days that have passed in current year </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="198" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="198" bodyend="203" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="326" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a9e968855dbf961e81a716dfb24727203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tudat::basic_astrodynamics::convertDayMonthYearToDayOfYear</definition>
        <argsstring>(const boost::gregorian::date calendarDate)</argsstring>
        <name>convertDayMonthYearToDayOfYear</name>
        <param>
          <type>const boost::gregorian::date</type>
          <declname>calendarDate</declname>
        </param>
        <briefdescription>
<para>Determine number of full days that have passed in current year. </para>
        </briefdescription>
        <detaileddescription>
<para>Determine number of full days that have passed in current year (i.e. 0 to 364 or 0 to 365 for leap year) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calendarDate</parametername>
</parameternamelist>
<parameterdescription>
<para>Gregorian calendat date object containing current date information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of full days that have passed in current year </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="206" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="206" bodyend="210" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="336" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1aa68760e0faf3218b2ad55cf8ce72d8f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::calculateSecondsInCurrentJulianDay</definition>
        <argsstring>(const double julianDay)</argsstring>
        <name>calculateSecondsInCurrentJulianDay</name>
        <param>
          <type>const double</type>
          <declname>julianDay</declname>
        </param>
        <briefdescription>
<para>Determine number of seconds into current day of given time. </para>
        </briefdescription>
        <detaileddescription>
<para>Determine number of seconds into current day of given time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>julianDay</parametername>
</parameternamelist>
<parameterdescription>
<para>Current julian day </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of seconds into current day. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="213" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="213" bodyend="217" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="344" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a7f40aea822b509993b0086944356da32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::gregorian::date</type>
        <definition>boost::gregorian::date tudat::basic_astrodynamics::convertYearAndDaysInYearToDate</definition>
        <argsstring>(const int year, const int daysInYear)</argsstring>
        <name>convertYearAndDaysInYearToDate</name>
        <param>
          <type>const int</type>
          <declname>year</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>daysInYear</declname>
        </param>
        <briefdescription>
<para>Function to create the calendar date from the year and the number of days in the year. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create the calendar date from the year and the number of days in the year, where Jan. 1 is day in year 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>year</parametername>
</parameternamelist>
<parameterdescription>
<para>Year in which days in year are given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>daysInYear</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of days in current year, note that day must be in current year (i.e &lt;= 365 of 366 for leap year) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Gregorian date object as generated from input </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="220" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="220" bodyend="262" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="353" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a81c42c59712b87a3f8a2d996901bdb3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::convertTcbToTdb</definition>
        <argsstring>(const TimeType tcbTime)</argsstring>
        <name>convertTcbToTdb</name>
        <param>
          <type>const TimeType</type>
          <declname>tcbTime</declname>
        </param>
        <briefdescription>
<para>Function to convert TCB to TDB times scale. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert TCB to TDB times scale, with both input and output referenced to the J2000 reference time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tcbTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Input time in TCB scale </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted time in TDB scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="362" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="362" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1adb5af5322c3c7bf17634b4f574213552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::convertTdbToTcb</definition>
        <argsstring>(const TimeType tdbTime)</argsstring>
        <name>convertTdbToTcb</name>
        <param>
          <type>const TimeType</type>
          <declname>tdbTime</declname>
        </param>
        <briefdescription>
<para>Function to convert TDB to TCB times scale. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert TDB to TCB times scale, with both input and output referenced to the J2000 reference time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tdbTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Input time in TDB scale </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted time in TCB scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="376" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="376" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1ad80088d265008628159ab39a3e911044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::convertTcgToTt</definition>
        <argsstring>(const TimeType tcgTime)</argsstring>
        <name>convertTcgToTt</name>
        <param>
          <type>const TimeType</type>
          <declname>tcgTime</declname>
        </param>
        <briefdescription>
<para>Function to convert TCG to TT times scale. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert TCG to TT times scale, with both input and output referenced to the J2000 reference time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tcgTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Input time in TCG scale </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted time in TT scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="392" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="392" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1acd70d584ef9f155b923458e7d47cf606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::convertTtToTcg</definition>
        <argsstring>(const TimeType ttTime)</argsstring>
        <name>convertTtToTcg</name>
        <param>
          <type>const TimeType</type>
          <declname>ttTime</declname>
        </param>
        <briefdescription>
<para>Function to convert TT to TCG times scale. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert TT to TCG times scale, with both input and output referenced to the J2000 reference time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ttTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Input time in TT scale </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted time in TCG scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="405" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="405" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1af7fa94f6f52e04120ae869f5c0075b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::convertTAItoTT</definition>
        <argsstring>(const TimeType taiTime)</argsstring>
        <name>convertTAItoTT</name>
        <param>
          <type>const TimeType</type>
          <declname>taiTime</declname>
        </param>
        <briefdescription>
<para>Function to convert TAI to TT. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert TAI (International Atomic <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>) to TT (Terrestrial <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>) by adding bias as defined by Sofa. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taiTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> in TAI </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> in TT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="420" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="420" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1adeb0368fe22c9a4c0d502ac03a86636d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>TimeType</type>
        <definition>TimeType tudat::basic_astrodynamics::convertTTtoTAI</definition>
        <argsstring>(const TimeType ttTime)</argsstring>
        <name>convertTTtoTAI</name>
        <param>
          <type>const TimeType</type>
          <declname>ttTime</declname>
        </param>
        <briefdescription>
<para>Function to convert TT to TAI. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to convert TT (Terrestrial <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>) to TAI (International Atomic <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref>) by subtracting bias as defined by Sofa. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ttTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> in TT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> in TAI </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" line="433" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" bodystart="433" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="dc/d42/timeConversions_8h_1a5739982157324d537cadda7e5c7105c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::approximateConvertTTtoTDB</definition>
        <argsstring>(const double ttSecondsSinceJ2000)</argsstring>
        <name>approximateConvertTTtoTDB</name>
        <param>
          <type>const double</type>
          <declname>ttSecondsSinceJ2000</declname>
        </param>
        <briefdescription>
<para>Perform apprixmate conversion of TT to TDB. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform apprixmate conversion of TT to TDB, in which only the once-per-orbit sinusoidal effect of O(e) is taken into account. Accurate conversions are calculated usinf Sofa <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ttSecondsSinceJ2000</parametername>
</parameternamelist>
<parameterdescription>
<para>Terrestrial time in seconds since J2000 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TDB in seconds since J2000 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="265" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="265" bodyend="269" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/timeConversions.h" declline="446" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d1/dba/torqueModel_8h_1a9a1689296a0d211e47f17f78d8eb98e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::basic_astrodynamics::updateAndGetTorque</definition>
        <argsstring>(const std::shared_ptr&lt; TorqueModel &gt; torqueModel, const double currentTime=TUDAT_NAN)</argsstring>
        <name>updateAndGetTorque</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">TorqueModel</ref> &gt;</type>
          <declname>torqueModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
<para>Update the members of a torque model and evaluate the acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates the member variables of a torque model and subsequently evaluates the acceleration. This allows the user to suffice with a single function call to both update the members and evaluate the acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>torqueModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Torque model that is to be evaluated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which torque model is to be updated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Torque that is obtained following the member update. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/torqueModel.cpp" line="10" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/torqueModel.cpp" bodystart="10" bodyend="19" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/torqueModel.h" declline="173" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dd/dc6/torqueModelTypes_8h_1a28ee7c7c85d94713d9f7b539724743b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AvailableTorque</type>
        <definition>AvailableTorque tudat::basic_astrodynamics::getTorqueModelType</definition>
        <argsstring>(std::shared_ptr&lt; basic_astrodynamics::TorqueModel &gt; torqueModel)</argsstring>
        <name>getTorqueModelType</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">basic_astrodynamics::TorqueModel</ref> &gt;</type>
          <declname>torqueModel</declname>
        </param>
        <briefdescription>
<para>Function to identify the derived class type of a torque model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to identify the derived class type of a torque model. The type must be defined in the AvailableTorque enum to be recognized by this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>torqueModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Torque model of which the type is to be identified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type of the torqueModel, as identified by AvailableTorque enum. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/torqueModelTypes.cpp" line="28" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/torqueModelTypes.cpp" bodystart="28" bodyend="61" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/torqueModelTypes.h" declline="47" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dd/dc6/torqueModelTypes_8h_1a838bea5db64e2640f8f83bfb84d6cb53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::basic_astrodynamics::getTorqueModelName</definition>
        <argsstring>(const AvailableTorque torqueType)</argsstring>
        <name>getTorqueModelName</name>
        <param>
          <type>const AvailableTorque</type>
          <declname>torqueType</declname>
        </param>
        <briefdescription>
<para>Function to get a string representing a &apos;named identification&apos; of an torque type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a string representing a &apos;named identification&apos; of an torque type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>torqueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of torque model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String with torque id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/torqueModelTypes.cpp" line="64" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/torqueModelTypes.cpp" bodystart="64" bodyend="94" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/torqueModelTypes.h" declline="56" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dd/dc6/torqueModelTypes_8h_1a340311adcd8f06da4afb3c7c1c5add25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">TorqueModel</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; TorqueModel &gt; &gt; tudat::basic_astrodynamics::getTorqueModelsOfType</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; TorqueModel &gt; &gt; &amp;fullList, const AvailableTorque modelType)</argsstring>
        <name>getTorqueModelsOfType</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">TorqueModel</ref> &gt; &gt; &amp;</type>
          <declname>fullList</declname>
        </param>
        <param>
          <type>const AvailableTorque</type>
          <declname>modelType</declname>
        </param>
        <briefdescription>
<para>Function to get all torque models of a given type from a list of models. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get all torque models of a given type from a list of models <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fullList</parametername>
</parameternamelist>
<parameterdescription>
<para>List of torque models </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modelType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type for which all models are to be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Subset of fullList for which the torque model type is modelType </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/torqueModelTypes.cpp" line="97" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/torqueModelTypes.cpp" bodystart="97" bodyend="110" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/torqueModelTypes.h" declline="65" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d8/de2/rotationModel_8h_1adb5885a228a21f8abde2f883320da664" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const IAUConventions &amp;conventionType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const IAUConventions &amp;</type>
          <declname>conventionType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>IAUConventions</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" line="69" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="d8/de2/rotationModel_8h_1a5aa2ec6ede185fcde94c073ce4b6b9a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, IAUConventions &amp;conventionType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>IAUConventions &amp;</type>
          <declname>conventionType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>IAUConventions</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" line="75" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="d3/de8/acceleration_8h_1aa0ad1923ff6753f89d02f1578b82a728" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const AvailableAcceleration &amp;accelerationType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const AvailableAcceleration &amp;</type>
          <declname>accelerationType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>AvailableAcceleration</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="84" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="d3/de8/acceleration_8h_1a618b5056be465fde40aaff086d9ea1ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, AvailableAcceleration &amp;accelerationType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>AvailableAcceleration &amp;</type>
          <declname>accelerationType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>AvailableAcceleration</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="90" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="d3/de8/acceleration_8h_1a77283cc9738daa803981b03462cc23e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const EmpiricalAccelerationComponents &amp;empiricalAccelerationComponent)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const EmpiricalAccelerationComponents &amp;</type>
          <declname>empiricalAccelerationComponent</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>EmpiricalAccelerationComponents</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="96" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="d3/de8/acceleration_8h_1a39f46ecf97b6e1be03f1de898f8d4634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, EmpiricalAccelerationComponents &amp;empiricalAccelerationComponent)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>EmpiricalAccelerationComponents &amp;</type>
          <declname>empiricalAccelerationComponent</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>EmpiricalAccelerationComponents</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="102" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="d3/de8/acceleration_8h_1a225987e76f68a3ead43c2edbbca4fed2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const EmpiricalAccelerationFunctionalShapes &amp;empiricalAccelerationFunctionalShape)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const EmpiricalAccelerationFunctionalShapes &amp;</type>
          <declname>empiricalAccelerationFunctionalShape</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>EmpiricalAccelerationFunctionalShapes</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="109" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="d3/de8/acceleration_8h_1a2bb7164f18d8c00b504bd922ef9df62a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, EmpiricalAccelerationFunctionalShapes &amp;empiricalAccelerationFunctionalShape)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>EmpiricalAccelerationFunctionalShapes &amp;</type>
          <declname>empiricalAccelerationFunctionalShape</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>EmpiricalAccelerationFunctionalShapes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" line="115" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="dd/de1/interface_2json_2propagation_2massRateModel_8h_1a115605517a8ea093190ac10108a0ea2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const AvailableMassRateModels &amp;massRateType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const AvailableMassRateModels &amp;</type>
          <declname>massRateType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>AvailableMassRateModels</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/massRateModel.h" line="40" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/massRateModel.h" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="dd/de1/interface_2json_2propagation_2massRateModel_8h_1afe0dfe6e688c04423e6a2deda9c859f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, AvailableMassRateModels &amp;massRateType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>AvailableMassRateModels &amp;</type>
          <declname>massRateType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>AvailableMassRateModels</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/massRateModel.h" line="46" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/massRateModel.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="d7/dac/torque_8h_1a0b2f721c59097d3a3ca9579debab9118" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const AvailableTorque &amp;torqueType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const AvailableTorque &amp;</type>
          <declname>torqueType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>AvailableTorque</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/torque.h" line="36" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/torque.h" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="d7/dac/torque_8h_1a70d0ef97987783cf4c60bb48f084e442" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::basic_astrodynamics::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, AvailableTorque &amp;torqueType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>AvailableTorque &amp;</type>
          <declname>torqueType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>AvailableTorque</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/torque.h" line="42" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/torque.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1a4342f35e22b7b2ec40d11b633860c238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::getJulianDayOnJ2000&lt; double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getJulianDayOnJ2000&lt; double &gt;</name>
        <briefdescription>
<para>Function to get the Julian day on J2000, in double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="25" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1a10eb7192ee5aab60c2850ecf60b9ad2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>long double</type>
        <definition>long double tudat::basic_astrodynamics::getJulianDayOnJ2000&lt; long double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getJulianDayOnJ2000&lt; long double &gt;</name>
        <briefdescription>
<para>Function to get the Julian day on J2000, in long double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="32" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1a09139dbd6c47a55fe96e76c93e1e1274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::getJulianDayOnMjd0&lt; double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getJulianDayOnMjd0&lt; double &gt;</name>
        <briefdescription>
<para>Function to get the Julian day on zero modified Julian day, in double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="39" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1aa2007e3efd999ca45abd88705881df4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>long double</type>
        <definition>long double tudat::basic_astrodynamics::getJulianDayOnMjd0&lt; long double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getJulianDayOnMjd0&lt; long double &gt;</name>
        <briefdescription>
<para>Function to get the Julian day on zero modified Julian day, in long double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="46" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1a3d5e6619a482f51c3b769447d94f7205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::getTimeOfTaiSynchronizationJulianDay&lt; double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getTimeOfTaiSynchronizationJulianDay&lt; double &gt;</name>
        <briefdescription>
<para>Function to get the synchronization Julian day of TT, TCG, and TCB, in double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="53" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1a3218d750fff07f3d405e6260bdb93425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>long double</type>
        <definition>long double tudat::basic_astrodynamics::getTimeOfTaiSynchronizationJulianDay&lt; long double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getTimeOfTaiSynchronizationJulianDay&lt; long double &gt;</name>
        <briefdescription>
<para>Function to get the synchronization Julian day of TT, TCG, and TCB, in long double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="60" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1aa503bb5243468b104ba9b369f97067b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::getTdbSecondsOffsetAtSynchronization&lt; double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getTdbSecondsOffsetAtSynchronization&lt; double &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to get the difference between TDB and (TT, TCB and TCB) at TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION, in double precision. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="68" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1a757fc141b2d4514a2d923525d4497ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>long double</type>
        <definition>long double tudat::basic_astrodynamics::getTdbSecondsOffsetAtSynchronization&lt; long double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getTdbSecondsOffsetAtSynchronization&lt; long double &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to get the difference between TDB and (TT, TCB and TCB) at TAI_JULIAN_DAY_AT_TIME_SYNCHRONIZATION, in long double precision. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="76" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1a1bc1a7347ea126624bb9587130f0bd67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double tudat::basic_astrodynamics::getTTMinusTai&lt; double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getTTMinusTai&lt; double &gt;</name>
        <briefdescription>
<para>Function to get the offset of TT from TAI (constant by definition), in double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="83" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1afe7d68090a555c9eebd67e7f85a1d404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>long double</type>
        <definition>long double tudat::basic_astrodynamics::getTTMinusTai&lt; long double &gt;</definition>
        <argsstring>()</argsstring>
        <name>getTTMinusTai&lt; long double &gt;</name>
        <briefdescription>
<para>Function to get the offset of TT from TAI (constant by definition), in long double precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="90" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="d4/da1/timeConversions_8cpp_1aca7a4b8b914a4f1309a39eee3bbc01d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref></type>
        <definition>Time tudat::basic_astrodynamics::getTTMinusTai&lt; Time &gt;</definition>
        <argsstring>()</argsstring>
        <name>getTTMinusTai&lt; Time &gt;</name>
        <briefdescription>
<para>Function to get the offset of TT from TAI (constant by definition), in <ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" line="97" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/basic_astro/timeConversions.cpp" bodystart="97" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/basic_astro/accelerationModel.h" line="27" column="1"/>
  </compounddef>
</doxygen>
