<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d2/d4c/namespacetudat_1_1aerodynamics" kind="namespace" language="C++">
    <compoundname>tudat::aerodynamics</compoundname>
    <innerclass refid="dc/dea/classtudat_1_1aerodynamics_1_1AerodynamicAcceleration" prot="public">tudat::aerodynamics::AerodynamicAcceleration</innerclass>
    <innerclass refid="d0/d75/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientGenerator" prot="public">tudat::aerodynamics::AerodynamicCoefficientGenerator</innerclass>
    <innerclass refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" prot="public">tudat::aerodynamics::AerodynamicCoefficientInterface</innerclass>
    <innerclass refid="d2/de3/classtudat_1_1aerodynamics_1_1ScaledAerodynamicCoefficientInterface" prot="public">tudat::aerodynamics::ScaledAerodynamicCoefficientInterface</innerclass>
    <innerclass refid="db/da7/classtudat_1_1aerodynamics_1_1AerodynamicGuidance" prot="public">tudat::aerodynamics::AerodynamicGuidance</innerclass>
    <innerclass refid="dd/d8f/classtudat_1_1aerodynamics_1_1AerodynamicTorque" prot="public">tudat::aerodynamics::AerodynamicTorque</innerclass>
    <innerclass refid="de/d0f/classtudat_1_1aerodynamics_1_1AtmosphereModel" prot="public">tudat::aerodynamics::AtmosphereModel</innerclass>
    <innerclass refid="d3/d4d/classtudat_1_1aerodynamics_1_1ScaledAtmosphereModel" prot="public">tudat::aerodynamics::ScaledAtmosphereModel</innerclass>
    <innerclass refid="db/d60/classtudat_1_1aerodynamics_1_1ControlSurfaceIncrementAerodynamicInterface" prot="public">tudat::aerodynamics::ControlSurfaceIncrementAerodynamicInterface</innerclass>
    <innerclass refid="d5/dce/classtudat_1_1aerodynamics_1_1CustomControlSurfaceIncrementAerodynamicInterface" prot="public">tudat::aerodynamics::CustomControlSurfaceIncrementAerodynamicInterface</innerclass>
    <innerclass refid="dd/ded/classtudat_1_1aerodynamics_1_1CustomAerodynamicCoefficientInterface" prot="public">tudat::aerodynamics::CustomAerodynamicCoefficientInterface</innerclass>
    <innerclass refid="d5/dc8/classtudat_1_1aerodynamics_1_1CustomConstantTemperatureAtmosphere" prot="public">tudat::aerodynamics::CustomConstantTemperatureAtmosphere</innerclass>
    <innerclass refid="d6/dc0/classtudat_1_1aerodynamics_1_1EquilibriumTemperatureFunction" prot="public">tudat::aerodynamics::EquilibriumTemperatureFunction</innerclass>
    <innerclass refid="dc/d74/classtudat_1_1aerodynamics_1_1ExponentialAtmosphere" prot="public">tudat::aerodynamics::ExponentialAtmosphere</innerclass>
    <innerclass refid="df/df2/classtudat_1_1aerodynamics_1_1FlightConditions" prot="public">tudat::aerodynamics::FlightConditions</innerclass>
    <innerclass refid="d9/da9/classtudat_1_1aerodynamics_1_1AtmosphericFlightConditions" prot="public">tudat::aerodynamics::AtmosphericFlightConditions</innerclass>
    <innerclass refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" prot="public">tudat::aerodynamics::HypersonicLocalInclinationAnalysis</innerclass>
    <innerclass refid="d6/d4c/structtudat_1_1aerodynamics_1_1GasComponentProperties" prot="public">tudat::aerodynamics::GasComponentProperties</innerclass>
    <innerclass refid="d1/de4/structtudat_1_1aerodynamics_1_1NRLMSISE00Input" prot="public">tudat::aerodynamics::NRLMSISE00Input</innerclass>
    <innerclass refid="de/d47/classtudat_1_1aerodynamics_1_1NRLMSISE00Atmosphere" prot="public">tudat::aerodynamics::NRLMSISE00Atmosphere</innerclass>
    <innerclass refid="dc/d61/classtudat_1_1aerodynamics_1_1StandardAtmosphere" prot="public">tudat::aerodynamics::StandardAtmosphere</innerclass>
    <innerclass refid="d2/dc4/classtudat_1_1aerodynamics_1_1TabulatedAtmosphere" prot="public">tudat::aerodynamics::TabulatedAtmosphere</innerclass>
    <innerclass refid="d7/dbc/classtudat_1_1aerodynamics_1_1TrimOrientationCalculator" prot="public">tudat::aerodynamics::TrimOrientationCalculator</innerclass>
    <innerclass refid="da/d9f/classtudat_1_1aerodynamics_1_1WindModel" prot="public">tudat::aerodynamics::WindModel</innerclass>
    <innerclass refid="dc/d0f/classtudat_1_1aerodynamics_1_1ConstantWindModel" prot="public">tudat::aerodynamics::ConstantWindModel</innerclass>
    <innerclass refid="da/d21/classtudat_1_1aerodynamics_1_1CustomWindModel" prot="public">tudat::aerodynamics::CustomWindModel</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a4f89d9b6963c83642465a3936d1d424d" prot="public" static="no" strong="no">
        <type></type>
        <name>AerodynamicCoefficientsIndependentVariables</name>
        <enumvalue id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a4f89d9b6963c83642465a3936d1d424da8c9b86019868bfead31c035955e0b046" prot="public">
          <name>mach_number_dependent</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a4f89d9b6963c83642465a3936d1d424dabd76ced4d407ca17b54f014a5766c92f" prot="public">
          <name>angle_of_attack_dependent</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a4f89d9b6963c83642465a3936d1d424da77214568cfc7bfbdddc24d2218a61887" prot="public">
          <name>angle_of_sideslip_dependent</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a4f89d9b6963c83642465a3936d1d424daa9f513d52a90c9c3c9024c02f8439904" prot="public">
          <name>altitude_dependent</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a4f89d9b6963c83642465a3936d1d424da83b976e8bee4f535189fcbdc2eec59be" prot="public">
          <name>time_dependent</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a4f89d9b6963c83642465a3936d1d424daf44030f7e9920cb2ae0aa6e7658503a1" prot="public">
          <name>control_surface_deflection_dependent</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a4f89d9b6963c83642465a3936d1d424da6e2f91a6887bee9b4179ea6e1c6d82ab" prot="public">
          <name>undefined_independent_variable</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum defining a list of independent variables on which the aerodynamic coefficients can depend. </para>
        </briefdescription>
        <detaileddescription>
<para>Enum defining a list of independent variables on which the aerodynamic coefficients can depend. Note that for a custom coefficient interface with other variables, you may use the undefined_independent_variable variable type, but at the expense of being able to use the <ref refid="df/df2/classtudat_1_1aerodynamics_1_1FlightConditions" kindref="compound">FlightConditions</ref> class to automatically updates the aerodynamic coefficients during propagation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" line="45" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="enum" id="d9/d71/atmosphereModel_8h_1aac891da961adf3ac3ac5897c91a44f97" prot="public" static="no" strong="no">
        <type></type>
        <name>AtmosphereIndependentVariables</name>
        <enumvalue id="d9/d71/atmosphereModel_8h_1aac891da961adf3ac3ac5897c91a44f97a0a0508925696b2a1c027b8edcb66e3e8" prot="public">
          <name>altitude_dependent_atmosphere</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d71/atmosphereModel_8h_1aac891da961adf3ac3ac5897c91a44f97a6fb4730ea632884e676fc1ababc7a68e" prot="public">
          <name>longitude_dependent_atmosphere</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d71/atmosphereModel_8h_1aac891da961adf3ac3ac5897c91a44f97a5bfd40a7f9d333fb0120e45727d87fe2" prot="public">
          <name>latitude_dependent_atmosphere</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d71/atmosphereModel_8h_1aac891da961adf3ac3ac5897c91a44f97ad9126f8a317de297c35adedca79e3342" prot="public">
          <name>time_dependent_atmosphere</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum of all the possible independent variables on which the atmosphere can depend. </para>
        </briefdescription>
        <detaileddescription>
<para>Enum of all the possible independent variables on which the atmosphere can depend. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/atmosphereModel.h" line="30" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/atmosphereModel.h" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="enum" id="d9/d71/atmosphereModel_8h_1a8052636066c499454ecfcecb2af7bb36" prot="public" static="no" strong="no">
        <type></type>
        <name>AtmosphereDependentVariables</name>
        <enumvalue id="d9/d71/atmosphereModel_8h_1a8052636066c499454ecfcecb2af7bb36a1c570ba174153670d8a0ded9c8d690ba" prot="public">
          <name>density_dependent_atmosphere</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d71/atmosphereModel_8h_1a8052636066c499454ecfcecb2af7bb36a4d182dce584ba75643c4a2fe3a8d75dc" prot="public">
          <name>pressure_dependent_atmosphere</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d71/atmosphereModel_8h_1a8052636066c499454ecfcecb2af7bb36a9e6111d0cf1afcead1733659152c3675" prot="public">
          <name>temperature_dependent_atmosphere</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d71/atmosphereModel_8h_1a8052636066c499454ecfcecb2af7bb36a940950ccf3f4310a46bd1aa58d2884de" prot="public">
          <name>gas_constant_dependent_atmosphere</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d71/atmosphereModel_8h_1a8052636066c499454ecfcecb2af7bb36a5ebbad53fd472088c7be396afc32276e" prot="public">
          <name>specific_heat_ratio_dependent_atmosphere</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d71/atmosphereModel_8h_1a8052636066c499454ecfcecb2af7bb36ae54baea5c9ebbbda0b965cec64ac8ebf" prot="public">
          <name>molar_mass_dependent_atmosphere</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum of all the possible dependent variables that an atmosphere can describe. </para>
        </briefdescription>
        <detaileddescription>
<para>Enum of all the possible dependent variables that an atmosphere can describe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/atmosphereModel.h" line="42" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/atmosphereModel.h" bodystart="43" bodyend="50"/>
      </memberdef>
      <memberdef kind="enum" id="d2/d5c/customConstantTemperatureAtmosphere_8h_1a399529b68f18b01a67fcbd2350837d14" prot="public" static="no" strong="no">
        <type></type>
        <name>AvailableConstantTemperatureAtmosphereModels</name>
        <enumvalue id="d2/d5c/customConstantTemperatureAtmosphere_8h_1a399529b68f18b01a67fcbd2350837d14a1711424266927eb70814a248219122ba" prot="public">
          <name>exponential_atmosphere_model</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d5c/customConstantTemperatureAtmosphere_8h_1a399529b68f18b01a67fcbd2350837d14aef1e8909f8b4616a237d5893a318753e" prot="public">
          <name>three_wave_atmosphere_model</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d5c/customConstantTemperatureAtmosphere_8h_1a399529b68f18b01a67fcbd2350837d14a00b211117f3ce5f4e2a6b49e29f39fc4" prot="public">
          <name>three_term_atmosphere_model</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/customConstantTemperatureAtmosphere.h" line="43" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/customConstantTemperatureAtmosphere.h" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="enum" id="de/d84/exponentialAtmosphere_8h_1a3720e4d27aa34a7c0048cff64beb6489" prot="public" static="no" strong="no">
        <type></type>
        <name>BodiesWithPredefinedExponentialAtmospheres</name>
        <enumvalue id="de/d84/exponentialAtmosphere_8h_1a3720e4d27aa34a7c0048cff64beb6489a6b110ea6e4eae03c6ed2c77aa71f56b0" prot="public">
          <name>undefined_body</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d84/exponentialAtmosphere_8h_1a3720e4d27aa34a7c0048cff64beb6489a2c89b380f5d9eb99cd69a1bcbea313f2" prot="public">
          <name>earth</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d84/exponentialAtmosphere_8h_1a3720e4d27aa34a7c0048cff64beb6489ae3445833c52c4312a07a1481f8116037" prot="public">
          <name>mars</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bodies with predefined exponential atmospheres. </para>
        </briefdescription>
        <detaileddescription>
<para>Bodies with predefined exponential atmospheres. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/exponentialAtmosphere.h" line="41" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/exponentialAtmosphere.h" bodystart="42" bodyend="46"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d9/d57/aerodynamicAcceleration_8h_1a6609dac57439ed9a920089921260a19a" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="dc/dea/classtudat_1_1aerodynamics_1_1AerodynamicAcceleration" kindref="compound">AerodynamicAcceleration</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; AerodynamicAcceleration &gt; tudat::aerodynamics::AerodynamicAccelerationPointer</definition>
        <argsstring></argsstring>
        <name>AerodynamicAccelerationPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="dc/dea/classtudat_1_1aerodynamics_1_1AerodynamicAcceleration" kindref="compound">AerodynamicAcceleration</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicAcceleration.h" line="231" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicAcceleration.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/de7/aerodynamicCoefficientInterface_8h_1ab8bffce91c81cceb2df239032a1b8110" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">AerodynamicCoefficientInterface</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; AerodynamicCoefficientInterface &gt; tudat::aerodynamics::AerodynamicCoefficientInterfacePointer</definition>
        <argsstring></argsstring>
        <name>AerodynamicCoefficientInterfacePointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">AerodynamicCoefficientInterface</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicCoefficientInterface.h" line="520" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicCoefficientInterface.h" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/d71/atmosphereModel_8h_1a114124a487f0b5c751f268468d05838a" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="de/d0f/classtudat_1_1aerodynamics_1_1AtmosphereModel" kindref="compound">AtmosphereModel</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; AtmosphereModel &gt; tudat::aerodynamics::AtmosphereModelPointer</definition>
        <argsstring></argsstring>
        <name>AtmosphereModelPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="de/d0f/classtudat_1_1aerodynamics_1_1AtmosphereModel" kindref="compound">AtmosphereModel</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/atmosphereModel.h" line="203" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/atmosphereModel.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/d5c/customConstantTemperatureAtmosphere_8h_1a1dabcc47d85bcc57782c0ba6c1c5c359" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d5/dc8/classtudat_1_1aerodynamics_1_1CustomConstantTemperatureAtmosphere" kindref="compound">CustomConstantTemperatureAtmosphere</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; CustomConstantTemperatureAtmosphere &gt; tudat::aerodynamics::CustomConstantTemperatureAtmospherePointer</definition>
        <argsstring></argsstring>
        <name>CustomConstantTemperatureAtmospherePointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d5/dc8/classtudat_1_1aerodynamics_1_1CustomConstantTemperatureAtmosphere" kindref="compound">CustomConstantTemperatureAtmosphere</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/customConstantTemperatureAtmosphere.h" line="305" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/customConstantTemperatureAtmosphere.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="de/d84/exponentialAtmosphere_8h_1a6112258a96571bd014589d9ebafcbe39" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d74/classtudat_1_1aerodynamics_1_1ExponentialAtmosphere" kindref="compound">ExponentialAtmosphere</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; ExponentialAtmosphere &gt; tudat::aerodynamics::ExponentialAtmospherePointer</definition>
        <argsstring></argsstring>
        <name>ExponentialAtmospherePointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="dc/d74/classtudat_1_1aerodynamics_1_1ExponentialAtmosphere" kindref="compound">ExponentialAtmosphere</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/exponentialAtmosphere.h" line="277" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/exponentialAtmosphere.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/d4c/hypersonicLocalInclinationAnalysis_8h_1a416bf59c6349af570c393593570fc2b5" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; HypersonicLocalInclinationAnalysis &gt; tudat::aerodynamics::HypersonicLocalInclinationAnalysisPointer</definition>
        <argsstring></argsstring>
        <name>HypersonicLocalInclinationAnalysisPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/hypersonicLocalInclinationAnalysis.h" line="374" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/hypersonicLocalInclinationAnalysis.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d49/standardAtmosphere_8h_1ac58d8f6f43c2a08635a5cf0a40a1e4d1" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d61/classtudat_1_1aerodynamics_1_1StandardAtmosphere" kindref="compound">StandardAtmosphere</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; StandardAtmosphere &gt; tudat::aerodynamics::StandardAtmospherePointer</definition>
        <argsstring></argsstring>
        <name>StandardAtmospherePointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="dc/d61/classtudat_1_1aerodynamics_1_1StandardAtmosphere" kindref="compound">StandardAtmosphere</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/standardAtmosphere.h" line="85" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/standardAtmosphere.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d6/d8d/tabulatedAtmosphere_8h_1a9e89e002143323d8f80832b01f9652c0" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d2/dc4/classtudat_1_1aerodynamics_1_1TabulatedAtmosphere" kindref="compound">TabulatedAtmosphere</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; TabulatedAtmosphere &gt; tudat::aerodynamics::TabulatedAtmospherePointer</definition>
        <argsstring></argsstring>
        <name>TabulatedAtmospherePointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d2/dc4/classtudat_1_1aerodynamics_1_1TabulatedAtmosphere" kindref="compound">TabulatedAtmosphere</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/tabulatedAtmosphere.h" line="561" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/tabulatedAtmosphere.h" bodystart="561" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1ab2e570713cd245b3ded585006f2e7990" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::aerodynamics::maximumPrandtlMeyerFunctionValue</definition>
        <argsstring></argsstring>
        <name>maximumPrandtlMeyerFunctionValue</name>
        <initializer>= 
    mathematical_constants::PI / 2.0 * ( std::sqrt( 6.0 ) - 1.0 )</initializer>
        <briefdescription>
<para>Maximum Prandtl-Meyer function value. </para>
        </briefdescription>
        <detaileddescription>
<para>Maximum Prandtl-Meyer function value for ratio of specific heats = 1.4. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" line="83" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a7af198be200d853c0e1304b89afc739a" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::aerodynamics::PrandtlMeyerParameter1</definition>
        <argsstring></argsstring>
        <name>PrandtlMeyerParameter1</name>
        <initializer>= 1.3604</initializer>
        <briefdescription>
<para>Constant for use in inverse Prandtl-Meyer function calculation. </para>
        </briefdescription>
        <detaileddescription>
<para>Constant for use in inverse Prandtl-Meyer function calculation for ratio of specific heats = 1.4. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" line="91" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a7a35da31b1a51cc61342863875aaa0a0" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::aerodynamics::PrandtlMeyerParameter2</definition>
        <argsstring></argsstring>
        <name>PrandtlMeyerParameter2</name>
        <initializer>= 0.0962</initializer>
        <briefdescription>
<para>Constant for use in inverse Prandtl-Meyer function calculation. </para>
        </briefdescription>
        <detaileddescription>
<para>Constant for use in inverse Prandtl-Meyer function calculation for ratio of specific heats = 1.4. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" line="98" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a2171af4775e3ce05a399d561a85529f3" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::aerodynamics::PrandtlMeyerParameter3</definition>
        <argsstring></argsstring>
        <name>PrandtlMeyerParameter3</name>
        <initializer>= -0.5127</initializer>
        <briefdescription>
<para>Constant for use in inverse Prandtl-Meyer function calculation. </para>
        </briefdescription>
        <detaileddescription>
<para>Constant for use in inverse Prandtl-Meyer function calculation for ratio of specific heats = 1.4. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" line="105" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1ae0ab2a1c834fe4ff260143c8f7b152e4" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::aerodynamics::PrandtlMeyerParameter4</definition>
        <argsstring></argsstring>
        <name>PrandtlMeyerParameter4</name>
        <initializer>= -0.6722</initializer>
        <briefdescription>
<para>Constant for use in inverse Prandtl-Meyer function calculation. </para>
        </briefdescription>
        <detaileddescription>
<para>Constant for use in inverse Prandtl-Meyer function calculation for ratio of specific heats = 1.4. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" line="112" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a267f68fd20307e7b9fa83bfd1531a67a" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::aerodynamics::PrandtlMeyerParameter5</definition>
        <argsstring></argsstring>
        <name>PrandtlMeyerParameter5</name>
        <initializer>= -0.3278</initializer>
        <briefdescription>
<para>Constant for use in inverse Prandtl-Meyer function calculation. </para>
        </briefdescription>
        <detaileddescription>
<para>Constant for use in inverse Prandtl-Meyer function calculation for ratio of specific heats = 1.4. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" line="119" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1adeb3a313a4fb4bf0c61a7e13d712d10f" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double tudat::aerodynamics::FAY_RIDDEL_HEAT_FLUX_CONSTANT</definition>
        <argsstring></argsstring>
        <name>FAY_RIDDEL_HEAT_FLUX_CONSTANT</name>
        <initializer>= 3.53E-4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" line="454" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/df9/interface_2json_2environment_2aerodynamics_8h_1a4903bbbc586b9b2de027967f41c92847" prot="public" static="yes" mutable="no">
        <type>std::map&lt; AerodynamicCoefficientsIndependentVariables, std::string &gt;</type>
        <definition>std::map&lt; AerodynamicCoefficientsIndependentVariables, std::string &gt; tudat::aerodynamics::aerodynamicVariables</definition>
        <argsstring></argsstring>
        <name>aerodynamicVariables</name>
        <initializer>=
{
    { mach_number_dependent, &quot;machNumber&quot; },
    { angle_of_attack_dependent, &quot;angleOfAttack&quot; },
    { angle_of_sideslip_dependent, &quot;angleOfSideslip&quot; },
    { altitude_dependent, &quot;altitude&quot; },
    { control_surface_deflection_dependent, &quot;controlSurfaceDeflection&quot; },
    { undefined_independent_variable, &quot;undefined&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>AerodynamicCoefficientsIndependentVariables</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" line="27" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/df9/interface_2json_2environment_2aerodynamics_8h_1ad55ed538dff8640817c2347c40fe8e9a" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; AerodynamicCoefficientsIndependentVariables &gt;</type>
        <definition>std::vector&lt; AerodynamicCoefficientsIndependentVariables &gt; tudat::aerodynamics::unsupportedAerodynamicVariables</definition>
        <argsstring></argsstring>
        <name>unsupportedAerodynamicVariables</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>AerodynamicCoefficientsIndependentVariables</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" line="38" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dec/atmosphere_8h_1a816010dffe20762057d018e8f07ef089" prot="public" static="yes" mutable="no">
        <type>std::map&lt; AtmosphereIndependentVariables, std::string &gt;</type>
        <definition>std::map&lt; AtmosphereIndependentVariables, std::string &gt; tudat::aerodynamics::atmosphereIndependentVariables</definition>
        <argsstring></argsstring>
        <name>atmosphereIndependentVariables</name>
        <initializer>=
{
    { altitude_dependent_atmosphere, &quot;altitude&quot; },
    { longitude_dependent_atmosphere, &quot;longitude&quot; },
    { latitude_dependent_atmosphere, &quot;latitude&quot; },
    { time_dependent_atmosphere, &quot;time&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>AtmosphereIndependentVariables</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="27" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dec/atmosphere_8h_1ad1abfc989eab9bd5053e4fc511571975" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; AtmosphereIndependentVariables &gt;</type>
        <definition>std::vector&lt; AtmosphereIndependentVariables &gt; tudat::aerodynamics::unsupportedAtmosphereIndependentVariables</definition>
        <argsstring></argsstring>
        <name>unsupportedAtmosphereIndependentVariables</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>AtmosphereIndependentVariables</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="36" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dec/atmosphere_8h_1aaff91464cba1202e257daea00489b024" prot="public" static="yes" mutable="no">
        <type>std::map&lt; AtmosphereDependentVariables, std::string &gt;</type>
        <definition>std::map&lt; AtmosphereDependentVariables, std::string &gt; tudat::aerodynamics::atmosphereDependentVariables</definition>
        <argsstring></argsstring>
        <name>atmosphereDependentVariables</name>
        <initializer>=
{
    { density_dependent_atmosphere, &quot;density&quot; },
    { pressure_dependent_atmosphere, &quot;pressure&quot; },
    { temperature_dependent_atmosphere, &quot;temperature&quot; },
    { gas_constant_dependent_atmosphere, &quot;gasConstant&quot; },
    { specific_heat_ratio_dependent_atmosphere, &quot;specificHeatRatio&quot; },
    { molar_mass_dependent_atmosphere, &quot;molarMass&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>AtmosphereDependentVariables</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="54" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dec/atmosphere_8h_1a533d4d17bf6faea191e35ffa00b9f870" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; AtmosphereDependentVariables &gt;</type>
        <definition>std::vector&lt; AtmosphereDependentVariables &gt; tudat::aerodynamics::unsupportedAtmosphereDependentVariables</definition>
        <argsstring></argsstring>
        <name>unsupportedAtmosphereDependentVariables</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>AtmosphereDependentVariables</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="65" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/d57/aerodynamicAcceleration_8h_1ae276162a1152ca00f90e9b7daeedb155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::aerodynamics::computeAerodynamicAcceleration</definition>
        <argsstring>(const double dynamicPressure, const double referenceArea, const Eigen::Vector3d &amp;aerodynamicCoefficients, const double vehicleMass)</argsstring>
        <name>computeAerodynamicAcceleration</name>
        <param>
          <type>const double</type>
          <declname>dynamicPressure</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>aerodynamicCoefficients</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vehicleMass</declname>
        </param>
        <briefdescription>
<para>Compute the aerodynamic acceleration in same reference frame as input coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the aerodynamic acceleration. It takes primitive types as arguments to perform the calculations. Therefore, these quantities (dynamic pressure, reference area and aerodynamic coefficients) have to computed before passing them to this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dynamicPressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamic pressure at which the body undergoing the acceleration flies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area of the aerodynamic coefficients. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aerodynamicCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Aerodynamic coefficients in right-handed reference frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vehicleMass</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of vehicle undergoing acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultant aerodynamic acceleration, given in reference frame in which the aerodynamic coefficients were given (assuming coefficients in positive direction). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicAcceleration.cpp" line="20" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicAcceleration.cpp" bodystart="20" bodyend="27" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicAcceleration.h" declline="41" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d9/d57/aerodynamicAcceleration_8h_1a3446ff13268c873c5f936df6c394a432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::aerodynamics::computeAerodynamicAcceleration</definition>
        <argsstring>(const double dynamicPressure, AerodynamicCoefficientInterfacePointer coefficientInterface, const double vehicleMass)</argsstring>
        <name>computeAerodynamicAcceleration</name>
        <param>
          <type>const double</type>
          <declname>dynamicPressure</declname>
        </param>
        <param>
          <type>AerodynamicCoefficientInterfacePointer</type>
          <declname>coefficientInterface</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vehicleMass</declname>
        </param>
        <briefdescription>
<para>Compute the aerodynamic acceleration in same reference frame as input coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the aerodynamic acceleration. It takes the dynamic pressure and an aerodynamic coefficient interface as input. The coefficient interface has to have been updated with current vehicle conditions before being passed to this function. Aerodynamic coefficients and reference area are then retrieved from it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dynamicPressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamic pressure at which the body undergoing the acceleration flies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficientInterface</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">AerodynamicCoefficientInterface</ref> class from which reference area and coefficients are retrieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vehicleMass</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of vehicle undergoing acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultant aerodynamic acceleration, given in reference frame in which the aerodynamic coefficients were given (assuming coefficients in positive direction). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicAcceleration.cpp" line="30" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicAcceleration.cpp" bodystart="30" bodyend="36" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicAcceleration.h" declline="59" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/d53/aerodynamicCoefficientGenerator_8h_1a8ee6796e6c52bacf3a0fb7f545ad02a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::aerodynamics::informUserOnSavedCoefficient</definition>
        <argsstring>(std::vector&lt; unsigned int &gt; coefficientIndices)</argsstring>
        <name>informUserOnSavedCoefficient</name>
        <param>
          <type>std::vector&lt; unsigned int &gt;</type>
          <declname>coefficientIndices</declname>
        </param>
        <briefdescription>
<para>Function to print to console which aerodynamic coefficients are being saved. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to print to console which aerodynamic coefficients are being saved. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficientIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of coefficients to be saved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicCoefficientGenerator.cpp" line="21" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicCoefficientGenerator.cpp" bodystart="21" bodyend="37" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicCoefficientGenerator.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/da7/aerodynamicForce_8h_1a84f70106b88bebe0addfaafc6ee215a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::aerodynamics::computeAerodynamicForce</definition>
        <argsstring>(const double dynamicPressure, const double referenceArea, const Eigen::Vector3d &amp;aerodynamicCoefficients)</argsstring>
        <name>computeAerodynamicForce</name>
        <param>
          <type>const double</type>
          <declname>dynamicPressure</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>aerodynamicCoefficients</declname>
        </param>
        <briefdescription>
<para>Compute the aerodynamic force in same reference frame as input coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the aerodynamic force. It takes primitive types as arguments to perform the calculations. Therefore, these quantities (dynamicPressure, reference area and aerodynamic coefficients) have to computed before passing them to this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dynamicPressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamic pressure at which the body undergoing the force flies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area of the aerodynamic coefficients. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aerodynamicCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Aerodynamic coefficients in right-handed reference frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultant aerodynamic force, given in reference frame in which the aerodynamic coefficients were given. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicForce.cpp" line="19" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicForce.cpp" bodystart="19" bodyend="24" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicForce.h" declline="37" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/da7/aerodynamicForce_8h_1a01b48e8ad9b824970c449139ff0b52ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::aerodynamics::computeAerodynamicForce</definition>
        <argsstring>(const double dynamicPressure, AerodynamicCoefficientInterfacePointer coefficientInterface)</argsstring>
        <name>computeAerodynamicForce</name>
        <param>
          <type>const double</type>
          <declname>dynamicPressure</declname>
        </param>
        <param>
          <type>AerodynamicCoefficientInterfacePointer</type>
          <declname>coefficientInterface</declname>
        </param>
        <briefdescription>
<para>Compute the aerodynamic force in same reference frame as input coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the aerodynamic force. It takes the dynamic pressure and an aerodynamic coefficient interface as input. The coefficient interface has to have been updated with current vehicle conditions before being passed to this function. Aerodynamic coefficients and reference area are then retrieved from it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dynamicPressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamic pressure at which the body undergoing the force flies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficientInterface</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">AerodynamicCoefficientInterface</ref> class from which reference area and coefficients are retrieved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultant aerodynamic force, given in reference frame in which the aerodynamic coefficients were given. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicForce.cpp" line="38" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicForce.cpp" bodystart="38" bodyend="45" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicForce.h" declline="53" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a530bf271e2e191119fb378add0ca16a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::aerodynamics::concatenateForceAndMomentCoefficients</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d(const std::vector&lt; double &gt; &amp;) &gt; &amp;forceCoefficientFunction, const std::function&lt; Eigen::Vector3d(const std::vector&lt; double &gt; &amp;) &gt; &amp;momentCoefficientFunction, const std::vector&lt; double &gt; &amp;independentVariables)</argsstring>
        <name>concatenateForceAndMomentCoefficients</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const std::vector&lt; double &gt; &amp;) &gt; &amp;</type>
          <declname>forceCoefficientFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const std::vector&lt; double &gt; &amp;) &gt; &amp;</type>
          <declname>momentCoefficientFunction</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>independentVariables</declname>
        </param>
        <briefdescription>
<para>Function to combined the force and moment coefficients from separate function pointers. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to combined the force and moment coefficients from separate function pointers. The output is the concatenated force and moment coefficient vector, evaluated at the current set of independent variables. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>forceCoefficientFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the aerodynamic force coefficients as function of the set of independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentCoefficientFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the aerodynamic force coefficients as function of the set of independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Current list of values of the independent variables upon which the coefficients depend. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" line="68" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" bodystart="68" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1aaca5e2cf33b6e18b18a047b59da63035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeLocalToStaticPressureRatio</definition>
        <argsstring>(double machNumber, double ratioOfSpecificHeats)</argsstring>
        <name>computeLocalToStaticPressureRatio</name>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <briefdescription>
<para>Compute local-to-static pressure ratio. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the local to static pressure ratio, assuming a thermally and calorically perfect gas. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Local-to-static pressure ratio. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="41" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="41" bodyend="47" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="130" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a04de2a24d98903e5a77e55f353f0d438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computePrandtlMeyerFunction</definition>
        <argsstring>(double machNumber, double ratioOfSpecificHeats)</argsstring>
        <name>computePrandtlMeyerFunction</name>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <briefdescription>
<para>Compute Prandtl-Meyer function. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the value of the Prandtl-Meyer function at the given Mach number and ratio of specific heat. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prandtl-Meyer function value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="50" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="50" bodyend="61" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="142" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1aa71a2b0ddc0f8723bfda2c9287e2f6ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeStagnationPressure</definition>
        <argsstring>(double machNumber, double ratioOfSpecificHeats)</argsstring>
        <name>computeStagnationPressure</name>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <briefdescription>
<para>Compute stagnation pressure coefficient in supersonic flow. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the stagnation pressure coefficient, assuming a thermally and calorically perfect gas. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Stagnation pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="64" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="64" bodyend="80" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="153" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a2e3764a09064d0db843b5b4989dab56d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeNewtonianPressureCoefficient</definition>
        <argsstring>(double inclinationAngle)</argsstring>
        <name>computeNewtonianPressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>inclinationAngle</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient based on Newtonian theory. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the pressure coefficient based on Newtonian theory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inclinationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle between wall and freestream velocity vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newtonian pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="83" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="83" bodyend="87" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="161" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a5bd8e363714b7f0faa034bae55b3e780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeModifiedNewtonianPressureCoefficient</definition>
        <argsstring>(double inclinationAngle, double stagnationPressureCoefficient)</argsstring>
        <name>computeModifiedNewtonianPressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>inclinationAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stagnationPressureCoefficient</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient based on modified Newtonian theory. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the pressure coefficient based on modified Newtonian theory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inclinationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle between the wall and the freestream velocity vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stagnationPressureCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>Stagnation pressure coefficient. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newtonian pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="90" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="90" bodyend="95" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="171" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a4bd5c90ef70dd17318a132a4095e4da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeEmpiricalTangentWedgePressureCoefficient</definition>
        <argsstring>(double inclinationAngle, double machNumber)</argsstring>
        <name>computeEmpiricalTangentWedgePressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>inclinationAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient using empirical tangent wedge method. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes tangent wedge pressure coefficient based on empirical correlation for ratio of specific heats = 1.4 ( terrestrial atmosphere). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inclinationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle between wall and freestream velocity vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Empirical tangent wedge pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="98" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="98" bodyend="110" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="182" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a2f2b3b56edd110d1a304c8326fe61b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeEmpiricalTangentConePressureCoefficient</definition>
        <argsstring>(double inclinationAngle, double machNumber)</argsstring>
        <name>computeEmpiricalTangentConePressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>inclinationAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient using empirical tangent cone method. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes tangent cone pressure coefficient based on empirical correlation for ratio of specific heats = 1.4 ( terrestrial atmosphere). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inclinationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle between wall and freestream velocity vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Empirical tangent wedge pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="113" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="113" bodyend="128" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="193" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a82d4e9d93e0dfb30803e17611f7914f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeModifiedDahlemBuckPressureCoefficient</definition>
        <argsstring>(double inclinationAngle, double machNumber)</argsstring>
        <name>computeModifiedDahlemBuckPressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>inclinationAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient using modified Dahlem-Buck method. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes tangent cone pressure coefficient based on Dahlem-Buck empirical method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inclinationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle between wall and freestream velocity vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dahlem-Buck pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="131" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="131" bodyend="176" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="204" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a35be72e7bb816f399145a5d7dc85c1d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeHankeyFlatSurfacePressureCoefficient</definition>
        <argsstring>(double inclinationAngle, double machNumber)</argsstring>
        <name>computeHankeyFlatSurfacePressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>inclinationAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient using the Hankey flat surface method. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes tangent cone pressure coefficient based on the Hankey flat surface method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inclinationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle between wall and freestream velocity vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hankey Flat surface pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="179" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="179" bodyend="204" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="215" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1ab65c02be643ca271b162025169387997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeSmythDeltaWingPressureCoefficient</definition>
        <argsstring>(double inclinationAngle, double machNumber)</argsstring>
        <name>computeSmythDeltaWingPressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>inclinationAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient using the Smyth delta wing method. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes tangent cone pressure coefficient based on the Smyth delta wing surface method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inclinationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle between wall and freestream velocity vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Smyth delta wing pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="207" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="207" bodyend="233" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="226" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a6e19039427f2429b254483a36d7710af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeVanDykeUnifiedPressureCoefficient</definition>
        <argsstring>(double inclinationAngle, double machNumber, double ratioOfSpecificHeats, int type)</argsstring>
        <name>computeVanDykeUnifiedPressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>inclinationAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient using the van Dyke unified method. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes tangent cone pressure coefficient based on the van Dyke unified method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inclinationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle between wall and freestream velocity vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>( expansion ( 1 ) or compression( -1 ) ). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hankey Flat surface pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="236" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="236" bodyend="287" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="240" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1ac30ec67b326c46fae0bee6f21f2fe124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computePrandtlMeyerFreestreamPressureCoefficient</definition>
        <argsstring>(double inclinationAngle, double machNumber, double ratioOfSpecificHeats, double freestreamPrandtlMeyerFunction)</argsstring>
        <name>computePrandtlMeyerFreestreamPressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>inclinationAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <param>
          <type>double</type>
          <declname>freestreamPrandtlMeyerFunction</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient using Prandtl-Meyer expansion. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes pressure coefficient using Prandtl-Meyer expansion from freestream. Currently only terrestrial atmosphere ( ratio of specific heat = 1.4 ) is supported due to the use of an empirical fit for the inverse Prandtl-Meyer function determination. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inclinationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle between wall and freestream velocity vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freestreamPrandtlMeyerFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Freestream Prandtl-Meyer function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prandtl-Meyer pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="290" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="290" bodyend="329" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="257" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1ae023bf14383ba1b7448ff1183f3139c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeVacuumPressureCoefficient</definition>
        <argsstring>(double machNumber, double ratioOfSpecificHeats)</argsstring>
        <name>computeVacuumPressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient at vacuum. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the pressure coefficient at vacuum assuming a thermally and calorically perfect gas. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vacuum pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="332" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="332" bodyend="337" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="270" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a0e63c0888fb598cea6877625ab08c24f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeHighMachBasePressure</definition>
        <argsstring>(double machNumber)</argsstring>
        <name>computeHighMachBasePressure</name>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <briefdescription>
<para>Compute high Mach base pressure coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the high Mach base pressure coefficient approximation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vacuum pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="340" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="340" bodyend="344" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="280" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a94a4eb3da0a936684aac79f02c40806c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeAcmEmpiricalPressureCoefficient</definition>
        <argsstring>(double inclinationAngle, double machNumber)</argsstring>
        <name>computeAcmEmpiricalPressureCoefficient</name>
        <param>
          <type>double</type>
          <declname>inclinationAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <briefdescription>
<para>Compute pressure coefficient using the ACM empirical method. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes tangent cone pressure coefficient based on the ACM empirical method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inclinationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle between wall and freestream velocity vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow Mach number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ACM empirical surface pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="347" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="347" bodyend="375" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="289" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1ada972f5e0ecad9bf86614baf72af1585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeInversePrandtlMeyerFunction</definition>
        <argsstring>(double prandtlMeyerFunctionValue)</argsstring>
        <name>computeInversePrandtlMeyerFunction</name>
        <param>
          <type>double</type>
          <declname>prandtlMeyerFunctionValue</declname>
        </param>
        <briefdescription>
<para>Compute Mach number from Prandtl-Meyer function. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the inverse of the Prandtl-Meyer function. Currently the function is limited to use with ratio of specific heats of 1.4 as it uses an empirical correlation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prandtlMeyerFunctionValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Prandyl-Meyer function value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mach number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="378" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="378" bodyend="399" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="300" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1ae34de736add91623a9536789fc521056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeShockPressureRatio</definition>
        <argsstring>(double normalMachNumber, double ratioOfSpecificHeats)</argsstring>
        <name>computeShockPressureRatio</name>
        <param>
          <type>double</type>
          <declname>normalMachNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <briefdescription>
<para>Compute ratio of post- to pre-shock pressure. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes ratio of post- to pre-shock pressure, assuming thermally and calorically perfect gas. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>normalMachNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Mach number of flow velocity normal to shock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="402" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="402" bodyend="408" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="309" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1aeee269eaa30ab8f2634bc3349e987762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeShockDensityRatio</definition>
        <argsstring>(double normalMachNumber, double ratioOfSpecificHeats)</argsstring>
        <name>computeShockDensityRatio</name>
        <param>
          <type>double</type>
          <declname>normalMachNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <briefdescription>
<para>Compute ratio of post- to pre-shock density. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute ratio of post- to pre-shock density, assuming thermally and calorically perfect gas. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>normalMachNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Mach number of flow velocity normal to shock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="411" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="411" bodyend="423" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="319" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a7cd1331e64f7eddbfebdca8aba588128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeShockTemperatureRatio</definition>
        <argsstring>(double normalMachNumber, double ratioOfSpecificHeats)</argsstring>
        <name>computeShockTemperatureRatio</name>
        <param>
          <type>double</type>
          <declname>normalMachNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <briefdescription>
<para>Compute ratio of post- to pre-shock temperature. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes ratio of post- to pre-shock temperature, assuming thermally and calorically perfect gas. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>normalMachNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Mach number of flow velocity normal to shock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="426" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="426" bodyend="432" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="330" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1af72d9c78604c417e5bd59af2eb463591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeShockEntropyJump</definition>
        <argsstring>(double normalMachNumber, double ratioOfSpecificHeats, double specificGasConstant)</argsstring>
        <name>computeShockEntropyJump</name>
        <param>
          <type>double</type>
          <declname>normalMachNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <param>
          <type>double</type>
          <declname>specificGasConstant</declname>
        </param>
        <briefdescription>
<para>Compute jump in entropy across a shock wave. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute jump in entropy across a shock wave, assuming thermally and calorically perfect gas. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>normalMachNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Mach number of flow velocity normal to shock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificGasConstant</parametername>
</parameternamelist>
<parameterdescription>
<para>gas constant per unit mass for flow composition. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="435" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="435" bodyend="451" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="341" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1aa7871ed70cacb9b8cf91d312afeefab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeShockTotalPressureRatio</definition>
        <argsstring>(double normalMachNumber, double ratioOfSpecificHeats, double specificGasConstant)</argsstring>
        <name>computeShockTotalPressureRatio</name>
        <param>
          <type>double</type>
          <declname>normalMachNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <param>
          <type>double</type>
          <declname>specificGasConstant</declname>
        </param>
        <briefdescription>
<para>Compute post- to pre-shock total pressure ratio. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute post- to pre-shock total pressure ratio from the entropy jump across a shock wave. Assumption of thermally and calorically perfect gas is made. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>normalMachNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Mach number of flow velocity normal to shock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificGasConstant</parametername>
</parameternamelist>
<parameterdescription>
<para>gas constant per unit mass for flow composition. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="454" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="454" bodyend="461" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="353" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a42bf852e6d5df28e901f0e6df202455f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeShockDeflectionAngle</definition>
        <argsstring>(double shockAngle, double machNumber, double ratioOfSpecificHeats)</argsstring>
        <name>computeShockDeflectionAngle</name>
        <param>
          <type>double</type>
          <declname>shockAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>machNumber</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <briefdescription>
<para>Compute shock deflection angle. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the flow deflection angle across a shock wave. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shockAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle of shock wave w.r.t. freestream flow. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Freestream Mach number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heat at constant pressure to specific heat at constant volume. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="464" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="464" bodyend="478" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="365" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a9c6b0f95b30b874187cb4474b97e09fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeSpeedOfSound</definition>
        <argsstring>(const double temperature, const double ratioOfSpecificHeats, const double specificGasConstant)</argsstring>
        <name>computeSpeedOfSound</name>
        <param>
          <type>const double</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ratioOfSpecificHeats</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>specificGasConstant</declname>
        </param>
        <briefdescription>
<para>Function to compute the speed of sound in a gas. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the speed of sound in a gas <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Gas temperature </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioOfSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heats aat constant pressure and constant volume </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificGasConstant</parametername>
</parameternamelist>
<parameterdescription>
<para>Specific gas constant of the gas </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Speed of sound in the gas. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="481" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="481" bodyend="485" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="376" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1af3c167f97b5b6f1f724993707abb2341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeMachNumber</definition>
        <argsstring>(const double speed, const double speedOfSound)</argsstring>
        <name>computeMachNumber</name>
        <param>
          <type>const double</type>
          <declname>speed</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>speedOfSound</declname>
        </param>
        <briefdescription>
<para>Compute Mach number. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute Mach number <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>Airspeed of object for which Mach number is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speedOfSound</parametername>
</parameternamelist>
<parameterdescription>
<para>Speed of sound for atmosphere position at which Mach number is to be computed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mach number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="488" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="488" bodyend="491" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="386" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a5c8f80319a373abcbede35194111e86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeMeanFreePath</definition>
        <argsstring>(const double weightedAverageCollisionDiameter, const double averageNumberDensity)</argsstring>
        <name>computeMeanFreePath</name>
        <param>
          <type>const double</type>
          <declname>weightedAverageCollisionDiameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>averageNumberDensity</declname>
        </param>
        <briefdescription>
<para>Function to compute the mean free path of a particle. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the mean free path of a particle from e.g. (Chapman, S. &amp; Cowling, T. The mathematical theory of nonuniform gases Cambridge University Press, 1970) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weightedAverageCollisionDiameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Weighted (using specie number density) average collision diameter of the particles in the gas. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>averageNumberDensity</parametername>
</parameternamelist>
<parameterdescription>
<para>Average number density of the gas. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mean free path of a particle in the gas. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="494" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="494" bodyend="498" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="397" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1af81b52df6ba50fa3fee6ee4dec791d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeAerodynamicLoad</definition>
        <argsstring>(const double airDensity, const double airSpeed, const double referenceArea, const double vehicleMass, const Eigen::Vector3d &amp;aerodynamicForceCoefficients)</argsstring>
        <name>computeAerodynamicLoad</name>
        <param>
          <type>const double</type>
          <declname>airDensity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>airSpeed</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vehicleMass</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>aerodynamicForceCoefficients</declname>
        </param>
        <briefdescription>
<para>Function to compute the aerodynamic load experienced by a vehicle. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute the aerodynamic load experienced by a vehicle.</para>
<para>Function that computes the aerodynamic load (a.k.a. load factor) experienced by a vehicle. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>airDensity</parametername>
</parameternamelist>
<parameterdescription>
<para>Freestream air density. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>airSpeed</parametername>
</parameternamelist>
<parameterdescription>
<para>Airspeed of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vehicleMass</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aerodynamicForceCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Aerodynamic force coefficients of the vehicle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Aerodynamic load experienced by the vehicle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="501" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="501" bodyend="509" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="409" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1ae7d8d959b1cfd01b71a79c37f163b066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeAerodynamicLoadFromAcceleration</definition>
        <argsstring>(const Eigen::Vector3d &amp;aerodynamicAccelerationVector)</argsstring>
        <name>computeAerodynamicLoadFromAcceleration</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>aerodynamicAccelerationVector</declname>
        </param>
        <briefdescription>
<para>Function to compute the aerodynamic load experienced by a vehicle. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the aerodynamic load (a.k.a. load factor) experienced by a vehicle. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aerodynamicAccelerationVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Aerodynamic acceleration actinv on vehicle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Aerodynamic load experienced by the vehicle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="513" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="513" bodyend="516" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="421" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a9b26f5f7bf59fbff792cfd2afbc4fa2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeEquilibriumHeatflux</definition>
        <argsstring>(const std::function&lt; double(const double) &gt; heatTransferFunction, const double wallEmmisivity, const double adiabaticWallTemperature)</argsstring>
        <name>computeEquilibriumHeatflux</name>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>heatTransferFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wallEmmisivity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>adiabaticWallTemperature</declname>
        </param>
        <briefdescription>
<para>Funtion to compute the equilibrium heat flux experienced by a vehicle. </para>
        </briefdescription>
        <detaileddescription>
<para>Funtion to compute the equilibrium heat flux experienced by a vehicle. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heatTransferFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the feat flux as a function of wall temperature. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wallEmmisivity</parametername>
</parameternamelist>
<parameterdescription>
<para>Emmissivity of the wall to which heat transfer is taking place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adiabaticWallTemperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Adiabatic wall temperature (used only for initialization of root finder). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Convective heat flux experienced acording to Fay Riddell model at equilibrium wall temperature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="519" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="519" bodyend="525" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="431" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a119f0ce4e5bb3039eef055e1b402f24f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeEquilibriumFayRiddellHeatFlux</definition>
        <argsstring>(const double airDensity, const double airSpeed, const double airTemperature, const double machNumber, const double noseRadius, const double wallEmissivity=0.80)</argsstring>
        <name>computeEquilibriumFayRiddellHeatFlux</name>
        <param>
          <type>const double</type>
          <declname>airDensity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>airSpeed</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>airTemperature</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>machNumber</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>noseRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wallEmissivity</declname>
          <defval>0.80</defval>
        </param>
        <briefdescription>
<para>Function to compute the heat flux experienced by a vehicle, assuming an equlibrium wall temperature. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the heat flux experienced by a vehicle. This function is an implementation of the Fay-Riddell formula, assuming an equlibrium wall temperature <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>airDensity</parametername>
</parameternamelist>
<parameterdescription>
<para>Freestream density of the air. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>airSpeed</parametername>
</parameternamelist>
<parameterdescription>
<para>Airspeed of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>airTemperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Freestream air temperature. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Freestream Mach number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noseRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Nose radius of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wallEmissivity</parametername>
</parameternamelist>
<parameterdescription>
<para>Wall emissivity of the vehicle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Convective heat flux experienced by the vehicle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="528" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="528" bodyend="543" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="447" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1a7b8f270639ed7d0c24d5a7346e318961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeFayRiddellHeatFlux</definition>
        <argsstring>(const double airDensity, const double airSpeed, const double airTemperature, const double noseRadius, const double wallTemperature)</argsstring>
        <name>computeFayRiddellHeatFlux</name>
        <param>
          <type>const double</type>
          <declname>airDensity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>airSpeed</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>airTemperature</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>noseRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wallTemperature</declname>
        </param>
        <briefdescription>
<para>Function to compute the heat flux experienced by a vehicle. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the heat flux experienced by a vehicle. This function is an implementation of the Fay-Riddell formula. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>airDensity</parametername>
</parameternamelist>
<parameterdescription>
<para>Freestream density of the air. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>airSpeed</parametername>
</parameternamelist>
<parameterdescription>
<para>Airspeed of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>airTemperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Freestream air temperature. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noseRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Nose radius of the vehicle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wallTemperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature at the wall of the vehicle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Convective heat flux experienced by the vehicle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="546" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="546" bodyend="555" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="467" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dc3/astro_2aerodynamics_2aerodynamics_8h_1ab4e5cdc60d72549b83fc257737bbc1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeAdiabaticWallTemperature</definition>
        <argsstring>(const double airTemperature, const double machNumber, const double ratioSpecificHeats=1.4, const double recoveryFactor=0.845)</argsstring>
        <name>computeAdiabaticWallTemperature</name>
        <param>
          <type>const double</type>
          <declname>airTemperature</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>machNumber</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ratioSpecificHeats</declname>
          <defval>1.4</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>recoveryFactor</declname>
          <defval>0.845</defval>
        </param>
        <briefdescription>
<para>Function to compute the adiabatic wall temperature experienced by a vehicle. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute the adiabatic wall temperature experienced by a vehicle.</para>
<para>Function that computes the adiabatic wall temperature experienced by a vehicle. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>airTemperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Freestream air temperature. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Freestream Mach number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratioSpecificHeats</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of specific heats of the air. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recoveryFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>Recovery factor of flow, e.g. fraction of total enthalpy contribution from velocoty that can be recovered at the wal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Adiabatic wall temperature experienced by the vehicle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" line="558" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamics.cpp" bodystart="558" bodyend="566" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamics.h" declline="483" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="da/d18/aerodynamicTorque_8h_1aa308157bda324a7fa0847f914f5d24ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::aerodynamics::computeAerodynamicMoment</definition>
        <argsstring>(const double dynamicPressure, const double referenceArea, const double referenceLength, const Eigen::Vector3d &amp;momentCoefficients)</argsstring>
        <name>computeAerodynamicMoment</name>
        <param>
          <type>const double</type>
          <declname>dynamicPressure</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceLength</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>momentCoefficients</declname>
        </param>
        <briefdescription>
<para>Compute the aerodynamic moment in same reference frame as input coefficients, with same reference lengths for each axis. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute the aerodynamic moment in same reference frame as input coefficients.</para>
<para>This function calculates the aerodynamic moment. It takes primitive types as arguments to perform the calculations. Therefor, these quantities (dynamic pressure, reference area, reference length and aerodynamic coefficients) have to computed before passing them to this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dynamicPressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamic pressure at which the body undergoing the force flies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area of the aerodynamic coefficients. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference length of the aerodynamic coefficients. Note that this reference length is used for all three independent directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Aerodynamic moment coefficients in right-handed reference frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultant aerodynamic moment, given in reference frame in which the aerodynamic coefficients were given, but with opposite sign. i.e., a positive drag coefficient will give a negative force in -x direction (in the aerodynamic frame). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicTorque.cpp" line="20" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicTorque.cpp" bodystart="20" bodyend="25" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicTorque.h" declline="44" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="da/d18/aerodynamicTorque_8h_1a18a5c9521974262e6e11a4c26ee32c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::aerodynamics::computeAerodynamicMoment</definition>
        <argsstring>(const double dynamicPressure, const double referenceArea, const Eigen::Vector3d &amp;referenceLengths, const Eigen::Vector3d &amp;momentCoefficients)</argsstring>
        <name>computeAerodynamicMoment</name>
        <param>
          <type>const double</type>
          <declname>dynamicPressure</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>referenceLengths</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>momentCoefficients</declname>
        </param>
        <briefdescription>
<para>Compute the aerodynamic moment in same reference frame as input coefficients, with different reference lengths for each axis. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute the aerodynamic moment in same reference frame as input coefficients.</para>
<para>This function calculates the aerodynamic moment. It takes primitive types as arguments to perform the calculations. Therefor, these quantities (dynamic pressure, reference area, reference lengths and aerodynamic coefficients) have to computed before passing them to this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dynamicPressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamic pressure at which the body undergoing the force flies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area of the aerodynamic coefficients. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceLengths</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference lengths of the aerodynamic coefficients, used in x, y and z directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Aerodynamic moment coefficients in right-handed reference frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultant aerodynamic moment, given in reference frame in which the aerodynamic coefficients were given, but with opposite sign. i.e., a positive drag coefficient will give a negative force in -x direction (in the aerodynamic frame). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicTorque.cpp" line="28" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicTorque.cpp" bodystart="28" bodyend="33" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicTorque.h" declline="61" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="da/d18/aerodynamicTorque_8h_1aeb7945e9ab72c00e3d9e49b5ea0a6542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::aerodynamics::computeAerodynamicMoment</definition>
        <argsstring>(const double dynamicPressure, AerodynamicCoefficientInterfacePointer coefficientInterface)</argsstring>
        <name>computeAerodynamicMoment</name>
        <param>
          <type>const double</type>
          <declname>dynamicPressure</declname>
        </param>
        <param>
          <type>AerodynamicCoefficientInterfacePointer</type>
          <declname>coefficientInterface</declname>
        </param>
        <briefdescription>
<para>Compute the aerodynamic moment in same reference frame as input coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the aerodynamic moment in same reference frame as input coefficients.</para>
<para>This function calculates the aerodynamic moment. It takes the dynamic pressure and an aerodynamic coefficient interface as input. The coefficient interface has to have been updated with current vehicle conditions before being passed to this function. Aerodynamic coefficients and reference area and length are then retrieved from it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dynamicPressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamic pressure at which the body undergoing the force flies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficientInterface</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">AerodynamicCoefficientInterface</ref> class from which reference area and length, and the moment coefficients are retrieved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultant aerodynamic moment, given in reference frame in which the aerodynamic coefficients were given. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicTorque.cpp" line="36" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/aerodynamicTorque.cpp" bodystart="36" bodyend="44" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicTorque.h" declline="77" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5c/customConstantTemperatureAtmosphere_8h_1a475fd6785ab9f44622f4bf79ecefdad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::exponentialAtmosphereModel</definition>
        <argsstring>(const double altitude, const double longitude, const double latitude, const double time, const double referenceAltitude, const double densityAtReferenceAltitude, const double scaleHeight)</argsstring>
        <name>exponentialAtmosphereModel</name>
        <param>
          <type>const double</type>
          <declname>altitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>longitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>latitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceAltitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>densityAtReferenceAltitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scaleHeight</declname>
        </param>
        <briefdescription>
<para>First atmosphere model, based on exponential atmosphere. </para>
        </briefdescription>
        <detaileddescription>
<para>First atmosphere model, based on exponential atmosphere. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>altitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Current altitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>longitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Current longitude (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Current latitude (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Current time (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceAltitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference altitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>densityAtReferenceAltitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Density at reference altitude condition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale height of the atmosphere. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Density at current conditions, based on the exponential model with given characteristics. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/customConstantTemperatureAtmosphere.cpp" line="12" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/customConstantTemperatureAtmosphere.cpp" bodystart="12" bodyend="20" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/customConstantTemperatureAtmosphere.h" declline="62" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5c/customConstantTemperatureAtmosphere_8h_1a2b525b1e338c37af730e135812edebbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::threeWaveAtmosphereModel</definition>
        <argsstring>(const double altitude, const double longitude, const double latitude, const double time, const double referenceAltitude, const double densityAtReferenceAltitude, const double scaleHeight, const double uncertaintyFactor, const double dustStormFactor)</argsstring>
        <name>threeWaveAtmosphereModel</name>
        <param>
          <type>const double</type>
          <declname>altitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>longitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>latitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceAltitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>densityAtReferenceAltitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scaleHeight</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uncertaintyFactor</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dustStormFactor</declname>
        </param>
        <briefdescription>
<para>Second atmosphere model, based on a three longitudinal waves model. </para>
        </briefdescription>
        <detaileddescription>
<para>Second atmosphere model, based on a three longitudinal waves model. The parameters for the three longitudinal waves are hard coded in the function. Based on (Justus, et al., 2004). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>altitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Current altitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>longitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Current longitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Current latitude (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Current time (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceAltitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference altitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>densityAtReferenceAltitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Density at reference altitude condition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale height of the atmosphere. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uncertaintyFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor representing uncertainty in the atmosphere. Can be a random variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dustStormFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor representing presence of planet-wide dust storm (particularly useful for Mars applications). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Density at current conditions, based on the three-waves model with given characteristics. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/customConstantTemperatureAtmosphere.cpp" line="23" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/customConstantTemperatureAtmosphere.cpp" bodystart="23" bodyend="34" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/customConstantTemperatureAtmosphere.h" declline="82" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/d5c/customConstantTemperatureAtmosphere_8h_1a2559357c31bc3504b09b5c97c3774708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::threeTermAtmosphereModel</definition>
        <argsstring>(const double altitude, const double longitude, const double latitude, const double time, const double referenceAltitude, const double densityAtReferenceAltitude, const double scaleHeight, const std::vector&lt; double &gt; &amp;modelWeights)</argsstring>
        <name>threeTermAtmosphereModel</name>
        <param>
          <type>const double</type>
          <declname>altitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>longitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>latitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceAltitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>densityAtReferenceAltitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scaleHeight</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>modelWeights</declname>
        </param>
        <briefdescription>
<para>Third atmosphere model, based on three constant scale height atmospheres. </para>
        </briefdescription>
        <detaileddescription>
<para>Third atmosphere model, based on three constant scale height atmospheres. The first term is the same as for the exponential model, whereas the other two are a sine and a cosine term. Based on (Jah, et al., 2008). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>altitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Current altitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>longitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Current longitude (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Current latitude (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Current time (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceAltitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference altitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>densityAtReferenceAltitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Density at reference altitude condition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale height of the atmosphere. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modelWeights</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights for each of the three models. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Density at current conditions, based on the exponential model with given characteristics. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/customConstantTemperatureAtmosphere.cpp" line="37" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/customConstantTemperatureAtmosphere.cpp" bodystart="37" bodyend="51" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/customConstantTemperatureAtmosphere.h" declline="101" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="db/dca/equilibriumWallTemperature_8h_1ac1407ee1cbcea9db200d53018db2de9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::aerodynamics::computeEquilibiumWallTemperature</definition>
        <argsstring>(const std::function&lt; double(const double) &gt; heatTransferFunction, const double wallEmmisivity, const double adiabaticWallTemperature)</argsstring>
        <name>computeEquilibiumWallTemperature</name>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>heatTransferFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wallEmmisivity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>adiabaticWallTemperature</declname>
        </param>
        <briefdescription>
<para>Function to compute the equilibrium wall temperature from the heat input and emmisivity. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the equilibrium wall temperature from the heat input and emmisivity. This function calls a root- finder to determine the wall temperature where the heat input equals the radiative output. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heatTransferFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that returns the heat input as a function of current temperature </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wallEmmisivity</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the material emmisivity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adiabaticWallTemperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Adiabatic wall temperature. This variables is only used as an upper bound, and to generate an initial giess for the equilibrium temperature </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Wall temperature at which input and output of heat are in equilibrium. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/equilibriumWallTemperature.cpp" line="23" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/equilibriumWallTemperature.cpp" bodystart="23" bodyend="70" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/equilibriumWallTemperature.h" declline="105" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/hypersonicLocalInclinationAnalysis_8h_1a6e2a412de8bb39dbbe59aa30027c88ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; tudat::aerodynamics::getDefaultHypersonicLocalInclinationMachPoints</definition>
        <argsstring>(const std::string &amp;machRegime)</argsstring>
        <name>getDefaultHypersonicLocalInclinationMachPoints</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>machRegime</declname>
        </param>
        <briefdescription>
<para>Returns default values of mach number for use in <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns default values of mach number for use in <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/hypersonicLocalInclinationAnalysis.cpp" line="48" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/hypersonicLocalInclinationAnalysis.cpp" bodystart="48" bodyend="87" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/hypersonicLocalInclinationAnalysis.h" declline="44" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/hypersonicLocalInclinationAnalysis_8h_1a130c7f599c99adc4aafc9df1b3284300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; tudat::aerodynamics::getDefaultHypersonicLocalInclinationAngleOfAttackPoints</definition>
        <argsstring>()</argsstring>
        <name>getDefaultHypersonicLocalInclinationAngleOfAttackPoints</name>
        <briefdescription>
<para>Returns default values of angle of attack for use in <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns default values of angle of attack for use in <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/hypersonicLocalInclinationAnalysis.cpp" line="90" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/hypersonicLocalInclinationAnalysis.cpp" bodystart="90" bodyend="104" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/hypersonicLocalInclinationAnalysis.h" declline="51" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/hypersonicLocalInclinationAnalysis_8h_1ad66c0031fa57ebd54dbc994ec872e349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; tudat::aerodynamics::getDefaultHypersonicLocalInclinationAngleOfSideslipPoints</definition>
        <argsstring>()</argsstring>
        <name>getDefaultHypersonicLocalInclinationAngleOfSideslipPoints</name>
        <briefdescription>
<para>Returns default values of angle of sideslip for use in <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns default values of angle of sideslip for use in <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/hypersonicLocalInclinationAnalysis.cpp" line="107" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/hypersonicLocalInclinationAnalysis.cpp" bodystart="107" bodyend="119" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/hypersonicLocalInclinationAnalysis.h" declline="57" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4c/hypersonicLocalInclinationAnalysis_8h_1a367ff7359eb039a560b5cbfbb0cbd0c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::aerodynamics::saveVehicleMeshToFile</definition>
        <argsstring>(const std::shared_ptr&lt; HypersonicLocalInclinationAnalysis &gt; localInclinationAnalysis, const std::string directory, const std::string filePrefix)</argsstring>
        <name>saveVehicleMeshToFile</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref> &gt;</type>
          <declname>localInclinationAnalysis</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>filePrefix</declname>
        </param>
        <briefdescription>
<para>Function that saves the vehicle mesh data used for a <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref> to a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that saves the vehicle mesh data used for a <ref refid="d3/d00/classtudat_1_1aerodynamics_1_1HypersonicLocalInclinationAnalysis" kindref="compound">HypersonicLocalInclinationAnalysis</ref> to a file: specifically, the panel centroids and surface normals, to file names: <verbatim>&lt;directory&gt;/&lt;filePrefix&gt;&quot;ShapeFile.dat&quot;
&lt;directory&gt;/&lt;filePrefix&gt;&quot;SurfaceNormalFile.dat&quot;
</verbatim> with directory and filePrefix input variables. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>localInclinationAnalysis</parametername>
</parameternamelist>
<parameterdescription>
<para>Aerodynamic analysis object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory to which the files are to be saved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filePrefix</parametername>
</parameternamelist>
<parameterdescription>
<para>File name prefix that is to be used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/hypersonicLocalInclinationAnalysis.cpp" line="122" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/hypersonicLocalInclinationAnalysis.cpp" bodystart="122" bodyend="167" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/hypersonicLocalInclinationAnalysis.h" declline="366" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d45/nrlmsise00InputFunctions_8h_1afd4db275cecdf93db294690f998c897a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/de4/structtudat_1_1aerodynamics_1_1NRLMSISE00Input" kindref="compound">NRLMSISE00Input</ref></type>
        <definition>NRLMSISE00Input tudat::aerodynamics::nrlmsiseInputFunction</definition>
        <argsstring>(const double altitude, const double longitude, const double latitude, const double time, const tudat::input_output::solar_activity::SolarActivityDataMap &amp;solarActivityMap, const bool adjustSolarTime=false, const double localSolarTime=0.0)</argsstring>
        <name>nrlmsiseInputFunction</name>
        <param>
          <type>const double</type>
          <declname>altitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>longitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>latitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const tudat::input_output::solar_activity::SolarActivityDataMap &amp;</type>
          <declname>solarActivityMap</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>adjustSolarTime</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>localSolarTime</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>NRLMSISE00 Input function. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d1/de4/structtudat_1_1aerodynamics_1_1NRLMSISE00Input" kindref="compound">NRLMSISE00Input</ref> function.</para>
<para>This function is used to define the input for the NRLMSISE model. This function reads solar activity data and defines the input using this data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>altitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Altitude at which output is to be computed [m]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>longitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude at which output is to be computed [rad]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Latitude at which output is to be computed [rad]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which output is to be computed (seconds since J2000). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solarActivityMap</parametername>
</parameternamelist>
<parameterdescription>
<para>SolarActivityData structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adjustSolarTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether the computed local solar time should be overidden with localSolarTime input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>localSolarTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Local solar time that is used when adjustSolarTime is set to true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d1/de4/structtudat_1_1aerodynamics_1_1NRLMSISE00Input" kindref="compound">NRLMSISE00Input</ref> nrlmsiseInputFunction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/nrlmsise00InputFunctions.cpp" line="36" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/nrlmsise00InputFunctions.cpp" bodystart="36" bodyend="97" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/nrlmsise00InputFunctions.h" declline="42" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/d8d/tabulatedAtmosphere_8h_1aedf3cc310ee5e434f6b19d1faacccefb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VariableType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::aerodynamics::checkVariableUniqueness</definition>
        <argsstring>(std::vector&lt; VariableType &gt; variables)</argsstring>
        <name>checkVariableUniqueness</name>
        <param>
          <type>std::vector&lt; VariableType &gt;</type>
          <declname>variables</declname>
        </param>
        <briefdescription>
<para>Check uniqueness of input. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check uniqueness of input for (in)dependent variables. The function works by checking that there are no duplicates, after having sorted the vector. For this reason, a local copy of the input vector is taken. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VariableType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type belonging to the input vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variables</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of variables which needs to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/tabulatedAtmosphere.cpp" line="28" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/tabulatedAtmosphere.cpp" bodystart="28" bodyend="42" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/tabulatedAtmosphere.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d9/df9/interface_2json_2environment_2aerodynamics_8h_1ad1a3d87c2f6c63e38b9ce46298f0641a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::aerodynamics::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const AerodynamicCoefficientsIndependentVariables &amp;aerodynamicVariable)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const AerodynamicCoefficientsIndependentVariables &amp;</type>
          <declname>aerodynamicVariable</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>AerodynamicCoefficientsIndependentVariables</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" line="41" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="d9/df9/interface_2json_2environment_2aerodynamics_8h_1a34add6c3299c0a12f064d90a9cba1260" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::aerodynamics::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, AerodynamicCoefficientsIndependentVariables &amp;aerodynamicVariable)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>AerodynamicCoefficientsIndependentVariables &amp;</type>
          <declname>aerodynamicVariable</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>AerodynamicCoefficientsIndependentVariables</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" line="47" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="d2/dec/atmosphere_8h_1ab1620c11ced5746164a688c1fc1d7461" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::aerodynamics::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const AtmosphereIndependentVariables &amp;atmosphereIndependentVariable)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const AtmosphereIndependentVariables &amp;</type>
          <declname>atmosphereIndependentVariable</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>AtmosphereIndependentVariables</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="39" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="d2/dec/atmosphere_8h_1a0db931add325ebea3c5911cef71a78ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::aerodynamics::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, AtmosphereIndependentVariables &amp;atmosphereIndependentVariable)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>AtmosphereIndependentVariables &amp;</type>
          <declname>atmosphereIndependentVariable</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>AtmosphereIndependentVariables</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="45" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="d2/dec/atmosphere_8h_1a1c749019d3112a7cc385dadcfefe5e99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::aerodynamics::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const AtmosphereDependentVariables &amp;atmosphereDependentVariable)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const AtmosphereDependentVariables &amp;</type>
          <declname>atmosphereDependentVariable</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>AtmosphereDependentVariables</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="68" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="d2/dec/atmosphere_8h_1a52dfb380542f8534d80a4e9404f5bf4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::aerodynamics::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, AtmosphereDependentVariables &amp;atmosphereDependentVariable)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>AtmosphereDependentVariables &amp;</type>
          <declname>atmosphereDependentVariable</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>AtmosphereDependentVariables</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="74" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="d1/d9d/flightConditions_8cpp_1aff5472b90530ea6e78b42e48fee73a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/dbc/classtudat_1_1aerodynamics_1_1TrimOrientationCalculator" kindref="compound">TrimOrientationCalculator</ref> &gt;</type>
        <definition>std::shared_ptr&lt; TrimOrientationCalculator &gt; tudat::aerodynamics::setTrimmedConditions</definition>
        <argsstring>(const std::shared_ptr&lt; AtmosphericFlightConditions &gt; flightConditions)</argsstring>
        <name>setTrimmedConditions</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/da9/classtudat_1_1aerodynamics_1_1AtmosphericFlightConditions" kindref="compound">AtmosphericFlightConditions</ref> &gt;</type>
          <declname>flightConditions</declname>
        </param>
        <briefdescription>
<para>Function to set the angle of attack to trimmed conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/flightConditions.cpp" line="245" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/flightConditions.cpp" bodystart="245" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="d7/d70/nrlmsise00Atmosphere_8cpp_1a1015091dc7227460ef3bb65a5613d08c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; tudat::aerodynamics::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, NRLMSISE00Input &amp;nrlmsiseInput)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="d1/de4/structtudat_1_1aerodynamics_1_1NRLMSISE00Input" kindref="compound">NRLMSISE00Input</ref> &amp;</type>
          <declname>nrlmsiseInput</declname>
        </param>
        <briefdescription>
<para>Overloaded ostream to print class information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/nrlmsise00Atmosphere.cpp" line="120" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/nrlmsise00Atmosphere.cpp" bodystart="120" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="d9/dde/nrlmsise00InputFunctions_8cpp_1a6f0a393c161cb09267ddb9c1307e2c49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; tudat::aerodynamics::eigenToStlVector</definition>
        <argsstring>(const Eigen::VectorXd &amp;vector)</argsstring>
        <name>eigenToStlVector</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Function to convert Eigen::VectorXd to std::vector&lt;double&gt; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/nrlmsise00InputFunctions.cpp" line="24" column="14" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/aerodynamics/nrlmsise00InputFunctions.cpp" bodystart="24" bodyend="33"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/aerodynamics/aerodynamicAcceleration.h" line="26" column="1"/>
  </compounddef>
</doxygen>
