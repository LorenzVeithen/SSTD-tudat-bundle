<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d4/da8/namespacetudat_1_1simulation__setup" kind="namespace" language="C++">
    <compoundname>tudat::simulation_setup</compoundname>
    <innerclass refid="d7/da2/classtudat_1_1simulation__setup_1_1PodInput" prot="public">tudat::simulation_setup::PodInput</innerclass>
    <innerclass refid="d2/d2c/classtudat_1_1simulation__setup_1_1EstimationConvergenceChecker" prot="public">tudat::simulation_setup::EstimationConvergenceChecker</innerclass>
    <innerclass refid="df/d6f/structtudat_1_1simulation__setup_1_1PodOutput" prot="public">tudat::simulation_setup::PodOutput</innerclass>
    <innerclass refid="d2/d4b/classtudat_1_1simulation__setup_1_1BaseStateInterface" prot="public">tudat::simulation_setup::BaseStateInterface</innerclass>
    <innerclass refid="dc/d5a/classtudat_1_1simulation__setup_1_1BaseStateInterfaceImplementation" prot="public">tudat::simulation_setup::BaseStateInterfaceImplementation</innerclass>
    <innerclass refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" prot="public">tudat::simulation_setup::Body</innerclass>
    <innerclass refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" prot="public">tudat::simulation_setup::SystemOfBodies</innerclass>
    <innerclass refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" prot="public">tudat::simulation_setup::AerodynamicCoefficientSettings</innerclass>
    <innerclass refid="d0/d36/classtudat_1_1simulation__setup_1_1ScaledAerodynamicCoefficientInterfaceSettings" prot="public">tudat::simulation_setup::ScaledAerodynamicCoefficientInterfaceSettings</innerclass>
    <innerclass refid="d8/d26/classtudat_1_1simulation__setup_1_1ConstantAerodynamicCoefficientSettings" prot="public">tudat::simulation_setup::ConstantAerodynamicCoefficientSettings</innerclass>
    <innerclass refid="d1/d46/classtudat_1_1simulation__setup_1_1CustomAerodynamicCoefficientSettings" prot="public">tudat::simulation_setup::CustomAerodynamicCoefficientSettings</innerclass>
    <innerclass refid="d9/d2d/classtudat_1_1simulation__setup_1_1TabulatedAerodynamicCoefficientSettingsBase" prot="public">tudat::simulation_setup::TabulatedAerodynamicCoefficientSettingsBase</innerclass>
    <innerclass refid="d6/d39/classtudat_1_1simulation__setup_1_1TabulatedAerodynamicCoefficientSettings" prot="public">tudat::simulation_setup::TabulatedAerodynamicCoefficientSettings</innerclass>
    <innerclass refid="d1/d41/classtudat_1_1simulation__setup_1_1TabulatedAerodynamicCoefficientSettings_3_011_01_4" prot="public">tudat::simulation_setup::TabulatedAerodynamicCoefficientSettings&lt; 1 &gt;</innerclass>
    <innerclass refid="d0/d13/classtudat_1_1simulation__setup_1_1ControlSurfaceIncrementAerodynamicCoefficientSettings" prot="public">tudat::simulation_setup::ControlSurfaceIncrementAerodynamicCoefficientSettings</innerclass>
    <innerclass refid="d4/db4/classtudat_1_1simulation__setup_1_1TabulatedControlSurfaceIncrementAerodynamicCoefficientSettings" prot="public">tudat::simulation_setup::TabulatedControlSurfaceIncrementAerodynamicCoefficientSettings</innerclass>
    <innerclass refid="d1/d53/classtudat_1_1simulation__setup_1_1WindModelSettings" prot="public">tudat::simulation_setup::WindModelSettings</innerclass>
    <innerclass refid="d8/d07/classtudat_1_1simulation__setup_1_1ConstantWindModelSettings" prot="public">tudat::simulation_setup::ConstantWindModelSettings</innerclass>
    <innerclass refid="dc/d8d/classtudat_1_1simulation__setup_1_1CustomWindModelSettings" prot="public">tudat::simulation_setup::CustomWindModelSettings</innerclass>
    <innerclass refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" prot="public">tudat::simulation_setup::AtmosphereSettings</innerclass>
    <innerclass refid="de/dc9/classtudat_1_1simulation__setup_1_1ExponentialAtmosphereSettings" prot="public">tudat::simulation_setup::ExponentialAtmosphereSettings</innerclass>
    <innerclass refid="da/d3d/classtudat_1_1simulation__setup_1_1CustomConstantTemperatureAtmosphereSettings" prot="public">tudat::simulation_setup::CustomConstantTemperatureAtmosphereSettings</innerclass>
    <innerclass refid="d1/d0e/classtudat_1_1simulation__setup_1_1NRLMSISE00AtmosphereSettings" prot="public">tudat::simulation_setup::NRLMSISE00AtmosphereSettings</innerclass>
    <innerclass refid="d6/df2/classtudat_1_1simulation__setup_1_1TabulatedAtmosphereSettings" prot="public">tudat::simulation_setup::TabulatedAtmosphereSettings</innerclass>
    <innerclass refid="da/d21/classtudat_1_1simulation__setup_1_1ScaledAtmosphereSettings" prot="public">tudat::simulation_setup::ScaledAtmosphereSettings</innerclass>
    <innerclass refid="d1/d41/structtudat_1_1simulation__setup_1_1BodySettings" prot="public">tudat::simulation_setup::BodySettings</innerclass>
    <innerclass refid="d4/d68/classtudat_1_1simulation__setup_1_1BodyListSettings" prot="public">tudat::simulation_setup::BodyListSettings</innerclass>
    <innerclass refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" prot="public">tudat::simulation_setup::BodyShapeSettings</innerclass>
    <innerclass refid="d7/d3e/classtudat_1_1simulation__setup_1_1SphericalBodyShapeSettings" prot="public">tudat::simulation_setup::SphericalBodyShapeSettings</innerclass>
    <innerclass refid="db/d5b/classtudat_1_1simulation__setup_1_1OblateSphericalBodyShapeSettings" prot="public">tudat::simulation_setup::OblateSphericalBodyShapeSettings</innerclass>
    <innerclass refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" prot="public">tudat::simulation_setup::EphemerisSettings</innerclass>
    <innerclass refid="d7/d78/classtudat_1_1simulation__setup_1_1ScaledEphemerisSettings" prot="public">tudat::simulation_setup::ScaledEphemerisSettings</innerclass>
    <innerclass refid="d3/d6f/classtudat_1_1simulation__setup_1_1DirectSpiceEphemerisSettings" prot="public">tudat::simulation_setup::DirectSpiceEphemerisSettings</innerclass>
    <innerclass refid="d6/d5b/classtudat_1_1simulation__setup_1_1InterpolatedSpiceEphemerisSettings" prot="public">tudat::simulation_setup::InterpolatedSpiceEphemerisSettings</innerclass>
    <innerclass refid="df/d8f/classtudat_1_1simulation__setup_1_1ApproximatePlanetPositionSettings" prot="public">tudat::simulation_setup::ApproximatePlanetPositionSettings</innerclass>
    <innerclass refid="d6/d12/classtudat_1_1simulation__setup_1_1ConstantEphemerisSettings" prot="public">tudat::simulation_setup::ConstantEphemerisSettings</innerclass>
    <innerclass refid="dc/d95/classtudat_1_1simulation__setup_1_1CustomEphemerisSettings" prot="public">tudat::simulation_setup::CustomEphemerisSettings</innerclass>
    <innerclass refid="d9/dec/classtudat_1_1simulation__setup_1_1KeplerEphemerisSettings" prot="public">tudat::simulation_setup::KeplerEphemerisSettings</innerclass>
    <innerclass refid="dd/db0/classtudat_1_1simulation__setup_1_1TabulatedEphemerisSettings" prot="public">tudat::simulation_setup::TabulatedEphemerisSettings</innerclass>
    <innerclass refid="d1/dcb/classtudat_1_1simulation__setup_1_1DirectTleEphemerisSettings" prot="public">tudat::simulation_setup::DirectTleEphemerisSettings</innerclass>
    <innerclass refid="d0/dab/classtudat_1_1simulation__setup_1_1InterpolatedTleEphemerisSettings" prot="public">tudat::simulation_setup::InterpolatedTleEphemerisSettings</innerclass>
    <innerclass refid="dd/de0/classtudat_1_1simulation__setup_1_1GravityFieldSettings" prot="public">tudat::simulation_setup::GravityFieldSettings</innerclass>
    <innerclass refid="d2/d68/classtudat_1_1simulation__setup_1_1CentralGravityFieldSettings" prot="public">tudat::simulation_setup::CentralGravityFieldSettings</innerclass>
    <innerclass refid="d7/d51/classtudat_1_1simulation__setup_1_1SphericalHarmonicsGravityFieldSettings" prot="public">tudat::simulation_setup::SphericalHarmonicsGravityFieldSettings</innerclass>
    <innerclass refid="d2/d9c/classtudat_1_1simulation__setup_1_1FromFileSphericalHarmonicsGravityFieldSettings" prot="public">tudat::simulation_setup::FromFileSphericalHarmonicsGravityFieldSettings</innerclass>
    <innerclass refid="db/dfb/classtudat_1_1simulation__setup_1_1ModelInterpolationSettings" prot="public">tudat::simulation_setup::ModelInterpolationSettings</innerclass>
    <innerclass refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" prot="public">tudat::simulation_setup::GravityFieldVariationSettings</innerclass>
    <innerclass refid="da/d06/classtudat_1_1simulation__setup_1_1BasicSolidBodyGravityFieldVariationSettings" prot="public">tudat::simulation_setup::BasicSolidBodyGravityFieldVariationSettings</innerclass>
    <innerclass refid="d2/d00/classtudat_1_1simulation__setup_1_1TabulatedGravityFieldVariationSettings" prot="public">tudat::simulation_setup::TabulatedGravityFieldVariationSettings</innerclass>
    <innerclass refid="dd/d77/classtudat_1_1simulation__setup_1_1GroundStationSettings" prot="public">tudat::simulation_setup::GroundStationSettings</innerclass>
    <innerclass refid="d4/df6/classtudat_1_1simulation__setup_1_1RadiationPressureInterfaceSettings" prot="public">tudat::simulation_setup::RadiationPressureInterfaceSettings</innerclass>
    <innerclass refid="d4/db3/classtudat_1_1simulation__setup_1_1CannonBallRadiationPressureInterfaceSettings" prot="public">tudat::simulation_setup::CannonBallRadiationPressureInterfaceSettings</innerclass>
    <innerclass refid="db/d6d/classtudat_1_1simulation__setup_1_1PanelledRadiationPressureInterfaceSettings" prot="public">tudat::simulation_setup::PanelledRadiationPressureInterfaceSettings</innerclass>
    <innerclass refid="d7/de3/classtudat_1_1simulation__setup_1_1SolarSailRadiationInterfaceSettings" prot="public">tudat::simulation_setup::SolarSailRadiationInterfaceSettings</innerclass>
    <innerclass refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" prot="public">tudat::simulation_setup::RotationModelSettings</innerclass>
    <innerclass refid="df/dea/classtudat_1_1simulation__setup_1_1SimpleRotationModelSettings" prot="public">tudat::simulation_setup::SimpleRotationModelSettings</innerclass>
    <innerclass refid="dc/d5f/classtudat_1_1simulation__setup_1_1SynchronousRotationModelSettings" prot="public">tudat::simulation_setup::SynchronousRotationModelSettings</innerclass>
    <innerclass refid="d7/d11/classtudat_1_1simulation__setup_1_1PlanetaryRotationModelSettings" prot="public">tudat::simulation_setup::PlanetaryRotationModelSettings</innerclass>
    <innerclass refid="d3/d01/classtudat_1_1simulation__setup_1_1OrbitDeterminationManager" prot="public">tudat::simulation_setup::OrbitDeterminationManager</innerclass>
    <innerclass refid="d9/db4/classtudat_1_1simulation__setup_1_1OptimisationSettings" prot="public">tudat::simulation_setup::OptimisationSettings</innerclass>
    <innerclass refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" prot="public">tudat::simulation_setup::AccelerationSettings</innerclass>
    <innerclass refid="d1/da9/classtudat_1_1simulation__setup_1_1SphericalHarmonicAccelerationSettings" prot="public">tudat::simulation_setup::SphericalHarmonicAccelerationSettings</innerclass>
    <innerclass refid="de/d20/classtudat_1_1simulation__setup_1_1MutualSphericalHarmonicAccelerationSettings" prot="public">tudat::simulation_setup::MutualSphericalHarmonicAccelerationSettings</innerclass>
    <innerclass refid="d1/d09/classtudat_1_1simulation__setup_1_1RelativisticAccelerationCorrectionSettings" prot="public">tudat::simulation_setup::RelativisticAccelerationCorrectionSettings</innerclass>
    <innerclass refid="d6/d80/classtudat_1_1simulation__setup_1_1EmpiricalAccelerationSettings" prot="public">tudat::simulation_setup::EmpiricalAccelerationSettings</innerclass>
    <innerclass refid="dd/d86/classtudat_1_1simulation__setup_1_1FullThrustInterpolationInterface" prot="public">tudat::simulation_setup::FullThrustInterpolationInterface</innerclass>
    <innerclass refid="d4/d3f/classtudat_1_1simulation__setup_1_1ThrustAccelerationSettings" prot="public">tudat::simulation_setup::ThrustAccelerationSettings</innerclass>
    <innerclass refid="df/ded/classtudat_1_1simulation__setup_1_1CustomAccelerationSettings" prot="public">tudat::simulation_setup::CustomAccelerationSettings</innerclass>
    <innerclass refid="d5/d8c/classtudat_1_1simulation__setup_1_1DirectTidalDissipationAccelerationSettings" prot="public">tudat::simulation_setup::DirectTidalDissipationAccelerationSettings</innerclass>
    <innerclass refid="d7/d34/classtudat_1_1simulation__setup_1_1MomentumWheelDesaturationAccelerationSettings" prot="public">tudat::simulation_setup::MomentumWheelDesaturationAccelerationSettings</innerclass>
    <innerclass refid="d1/d7c/classtudat_1_1simulation__setup_1_1MassRateModelSettings" prot="public">tudat::simulation_setup::MassRateModelSettings</innerclass>
    <innerclass refid="db/dfc/classtudat_1_1simulation__setup_1_1CustomMassRateSettings" prot="public">tudat::simulation_setup::CustomMassRateSettings</innerclass>
    <innerclass refid="d7/dde/classtudat_1_1simulation__setup_1_1FromThrustMassRateSettings" prot="public">tudat::simulation_setup::FromThrustMassRateSettings</innerclass>
    <innerclass refid="dd/d1a/classtudat_1_1simulation__setup_1_1ThrustDirectionSettings" prot="public">tudat::simulation_setup::ThrustDirectionSettings</innerclass>
    <innerclass refid="da/db2/classtudat_1_1simulation__setup_1_1ThrustDirectionFromStateGuidanceSettings" prot="public">tudat::simulation_setup::ThrustDirectionFromStateGuidanceSettings</innerclass>
    <innerclass refid="d7/d13/classtudat_1_1simulation__setup_1_1CustomThrustDirectionSettings" prot="public">tudat::simulation_setup::CustomThrustDirectionSettings</innerclass>
    <innerclass refid="d6/ddd/classtudat_1_1simulation__setup_1_1CustomThrustOrientationSettings" prot="public">tudat::simulation_setup::CustomThrustOrientationSettings</innerclass>
    <innerclass refid="d9/dc5/classtudat_1_1simulation__setup_1_1MeeCostateBasedThrustDirectionSettings" prot="public">tudat::simulation_setup::MeeCostateBasedThrustDirectionSettings</innerclass>
    <innerclass refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" prot="public">tudat::simulation_setup::ThrustMagnitudeSettings</innerclass>
    <innerclass refid="d0/db7/classtudat_1_1simulation__setup_1_1ConstantThrustMagnitudeSettings" prot="public">tudat::simulation_setup::ConstantThrustMagnitudeSettings</innerclass>
    <innerclass refid="df/d08/classtudat_1_1simulation__setup_1_1FromBodyThrustMagnitudeSettings" prot="public">tudat::simulation_setup::FromBodyThrustMagnitudeSettings</innerclass>
    <innerclass refid="d3/d0d/classtudat_1_1simulation__setup_1_1FromFunctionThrustMagnitudeSettings" prot="public">tudat::simulation_setup::FromFunctionThrustMagnitudeSettings</innerclass>
    <innerclass refid="da/dd4/classtudat_1_1simulation__setup_1_1FromMeeCostatesBangBangThrustMagnitudeSettings" prot="public">tudat::simulation_setup::FromMeeCostatesBangBangThrustMagnitudeSettings</innerclass>
    <innerclass refid="df/de0/classtudat_1_1simulation__setup_1_1ThrustInputParameterGuidance" prot="public">tudat::simulation_setup::ThrustInputParameterGuidance</innerclass>
    <innerclass refid="d9/d40/classtudat_1_1simulation__setup_1_1AccelerationLimitedThrottleGuidance" prot="public">tudat::simulation_setup::AccelerationLimitedThrottleGuidance</innerclass>
    <innerclass refid="db/dff/classtudat_1_1simulation__setup_1_1ParameterizedThrustMagnitudeSettings" prot="public">tudat::simulation_setup::ParameterizedThrustMagnitudeSettings</innerclass>
    <innerclass refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" prot="public">tudat::simulation_setup::TorqueSettings</innerclass>
    <innerclass refid="d7/d84/classtudat_1_1simulation__setup_1_1SphericalHarmonicTorqueSettings" prot="public">tudat::simulation_setup::SphericalHarmonicTorqueSettings</innerclass>
    <innerclass refid="db/df2/classtudat_1_1simulation__setup_1_1CustomTorqueSettings" prot="public">tudat::simulation_setup::CustomTorqueSettings</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d8/d56/createAerodynamicControlSurfaces_8h_1aa71f2c20d4e42e5d5121dcc62295fdee" prot="public" static="no" strong="no">
        <type></type>
        <name>AerodynamicCoefficientTypes</name>
        <enumvalue id="d8/d56/createAerodynamicControlSurfaces_8h_1aa71f2c20d4e42e5d5121dcc62295fdeea963f4ca369e5230d94637161083e8e24" prot="public">
          <name>constant_aerodynamic_coefficients</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d56/createAerodynamicControlSurfaces_8h_1aa71f2c20d4e42e5d5121dcc62295fdeea68872edd9016e10f5efed7624b4767a7" prot="public">
          <name>custom_aerodynamic_coefficients</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d56/createAerodynamicControlSurfaces_8h_1aa71f2c20d4e42e5d5121dcc62295fdeea47868e5df4c7f737d9e926ea68d50ffe" prot="public">
          <name>hypersonic_local_inclincation_coefficients</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d56/createAerodynamicControlSurfaces_8h_1aa71f2c20d4e42e5d5121dcc62295fdeea824ec4ea2b8da8fb1f9c18dacf8abc4f" prot="public">
          <name>tabulated_coefficients</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/d56/createAerodynamicControlSurfaces_8h_1aa71f2c20d4e42e5d5121dcc62295fdeea2460992cc7860d9521199135cff53484" prot="public">
          <name>scaled_coefficients</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>List of aerodynamic coefficient models available in simulations. </para>
        </briefdescription>
        <detaileddescription>
<para>List of aerodynamic coefficient models available in simulations. Aerodynamic coefficient models not defined by this given enum cannot be used for automatic model setup. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" line="35" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" bodystart="36" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="da/d7a/createAtmosphereModel_8h_1a611c75a9d671f076812ca35b3c4d2ef3" prot="public" static="no" strong="no">
        <type></type>
        <name>WindModelTypes</name>
        <enumvalue id="da/d7a/createAtmosphereModel_8h_1a611c75a9d671f076812ca35b3c4d2ef3af774e3a5182dec2f9e287387ca615f98" prot="public">
          <name>constant_wind_model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d7a/createAtmosphereModel_8h_1a611c75a9d671f076812ca35b3c4d2ef3a71347a3514e9abb9f6f1fc283f0f20a3" prot="public">
          <name>custom_wind_model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>List of wind models available in simulations. </para>
        </briefdescription>
        <detaileddescription>
<para>List of wind models available in simulations. Wind models not defined by this given enum cannot be used for automatic model setup. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="39" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="da/d7a/createAtmosphereModel_8h_1aa56a32943032d06d7a396c8fe5faf71c" prot="public" static="no" strong="no">
        <type></type>
        <name>AtmosphereTypes</name>
        <enumvalue id="da/d7a/createAtmosphereModel_8h_1aa56a32943032d06d7a396c8fe5faf71ca62e46269e186958e6f6daf4909ec7921" prot="public">
          <name>exponential_atmosphere</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d7a/createAtmosphereModel_8h_1aa56a32943032d06d7a396c8fe5faf71ca9ee9992e8cb5e9987f6495b289e3b0db" prot="public">
          <name>custom_constant_temperature_atmosphere</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d7a/createAtmosphereModel_8h_1aa56a32943032d06d7a396c8fe5faf71ca4d24ff09106535e7c48913e255df33f2" prot="public">
          <name>tabulated_atmosphere</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d7a/createAtmosphereModel_8h_1aa56a32943032d06d7a396c8fe5faf71ca0d0ffac31f2c59b7571c1dda2fa83c64" prot="public">
          <name>nrlmsise00</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d7a/createAtmosphereModel_8h_1aa56a32943032d06d7a396c8fe5faf71ca62174d5ae0f71ea80e01bba521a92b7d" prot="public">
          <name>scaled_atmosphere</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>List of atmosphere models available in simulations. </para>
        </briefdescription>
        <detaileddescription>
<para>List of atmosphere models available in simulations. Atmosphere models not defined by this given enum cannot be used for automatic model setup. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="167" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="168" bodyend="174"/>
      </memberdef>
      <memberdef kind="enum" id="dc/d49/createBodyShapeModel_8h_1afe47dae20695dc2432b258eba19e35fb" prot="public" static="no" strong="no">
        <type></type>
        <name>BodyShapeTypes</name>
        <enumvalue id="dc/d49/createBodyShapeModel_8h_1afe47dae20695dc2432b258eba19e35fba868275cfc8c32bb6a65fe71198e6031b" prot="public">
          <name>spherical</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d49/createBodyShapeModel_8h_1afe47dae20695dc2432b258eba19e35fba8af7fdf3faeaf9c3b20b4ddbfb97f373" prot="public">
          <name>spherical_spice</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d49/createBodyShapeModel_8h_1afe47dae20695dc2432b258eba19e35fba786e9ed60761bfebc1a68997787c2274" prot="public">
          <name>oblate_spheroid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of body shape models that can be used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodyShapeModel.h" line="27" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodyShapeModel.h" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1c" prot="public" static="no" strong="no">
        <type></type>
        <name>EphemerisType</name>
        <enumvalue id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1ca9276a7c06f199d205b7590a5d962a251" prot="public">
          <name>approximate_planet_positions</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1ca30075617b2c837c778952c2a2b664119" prot="public">
          <name>direct_spice_ephemeris</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1ca1be7714d26666522374791b54377b406" prot="public">
          <name>tabulated_ephemeris</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1caca5e7d850ed022f4315c2793b5c52bed" prot="public">
          <name>interpolated_spice</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1ca8038403a3d81ca33b46260a6c8b97f26" prot="public">
          <name>constant_ephemeris</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1ca10b2f9b4a92b01ea735095454899cf5f" prot="public">
          <name>kepler_ephemeris</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1caa255f05587e73733dbaa99a3e7b269a7" prot="public">
          <name>custom_ephemeris</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1cabe97ca71d54fe894313030b1e66e8bfe" prot="public">
          <name>direct_tle_ephemeris</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1caab865180fe10f3828554e55fba1a50d8" prot="public">
          <name>interpolated_tle_ephemeris</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/dc1/createEphemeris_8h_1aee575c09177378f8ada66c4f1256ae1cabe6d47efb33653042c35cd2be751b9a1" prot="public">
          <name>scaled_ephemeris</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="39" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="40" bodyend="51"/>
      </memberdef>
      <memberdef kind="enum" id="dc/dd4/createGravityField_8h_1aeb85193a06a9d0a3a72423603ae4b463" prot="public" static="no" strong="no">
        <type></type>
        <name>GravityFieldType</name>
        <enumvalue id="dc/dd4/createGravityField_8h_1aeb85193a06a9d0a3a72423603ae4b463aefc2cb4e15be5219f6e39dfac0c41e6e" prot="public">
          <name>central</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/dd4/createGravityField_8h_1aeb85193a06a9d0a3a72423603ae4b463acdb2d0c8d7319991529b2def29c9993b" prot="public">
          <name>central_spice</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/dd4/createGravityField_8h_1aeb85193a06a9d0a3a72423603ae4b463a14cf3aebd53aace0033841ad59b3ed2d" prot="public">
          <name>spherical_harmonic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" line="38" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="dc/dd4/createGravityField_8h_1ac0e6fbc9a9e3b64f804f5b9b89e61e73" prot="public" static="no" strong="no">
        <type></type>
        <name>SphericalHarmonicsModel</name>
        <enumvalue id="dc/dd4/createGravityField_8h_1ac0e6fbc9a9e3b64f804f5b9b89e61e73a7ac2ea06a3dd5ed3aadf54cd46350a82" prot="public">
          <name>customModel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/dd4/createGravityField_8h_1ac0e6fbc9a9e3b64f804f5b9b89e61e73a402e370fb1708f156bbf2d57c84f19d0" prot="public">
          <name>egm96</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/dd4/createGravityField_8h_1ac0e6fbc9a9e3b64f804f5b9b89e61e73adc985f99a82320c29e30dd247d5e189a" prot="public">
          <name>ggm02c</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/dd4/createGravityField_8h_1ac0e6fbc9a9e3b64f804f5b9b89e61e73a7de4222c2d9b33ed1eb7c2bbab6be27f" prot="public">
          <name>ggm02s</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/dd4/createGravityField_8h_1ac0e6fbc9a9e3b64f804f5b9b89e61e73ac695fb57c6be71e227adf0cfce3844db" prot="public">
          <name>glgm3150</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/dd4/createGravityField_8h_1ac0e6fbc9a9e3b64f804f5b9b89e61e73ac96a2df52a1bc202548d6ae474ee27ea" prot="public">
          <name>lpe200</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/dd4/createGravityField_8h_1ac0e6fbc9a9e3b64f804f5b9b89e61e73a28a976e9b584f0386c09a78288a61193" prot="public">
          <name>jgmro120d</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" line="251" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" bodystart="252" bodyend="260"/>
      </memberdef>
      <memberdef kind="enum" id="d9/d17/createRadiationPressureInterface_8h_1af1c33993a7726c995d76007ef1b2b047" prot="public" static="no" strong="no">
        <type></type>
        <name>RadiationPressureType</name>
        <enumvalue id="d9/d17/createRadiationPressureInterface_8h_1af1c33993a7726c995d76007ef1b2b047a928c5b4cc709930e2c583b55346ec82a" prot="public">
          <name>cannon_ball_radiation_pressure_interface</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d17/createRadiationPressureInterface_8h_1af1c33993a7726c995d76007ef1b2b047a2f3f157ccf4a24374cbe7a7315584c8d" prot="public">
          <name>panelled_radiation_pressure_interface</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d17/createRadiationPressureInterface_8h_1af1c33993a7726c995d76007ef1b2b047a98cf69a3ff49ae8a63135a971deae2fd" prot="public">
          <name>solar_sailing_radiation_pressure_interface</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>List of radiation pressure model types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" line="33" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="enum" id="d8/ddc/createRotationModel_8h_1aa5497750edd6264351a07cad4380b588" prot="public" static="no" strong="no">
        <type></type>
        <name>RotationModelType</name>
        <enumvalue id="d8/ddc/createRotationModel_8h_1aa5497750edd6264351a07cad4380b588ae20a7968d0e87a75232b679d3675d8b6" prot="public">
          <name>simple_rotation_model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/ddc/createRotationModel_8h_1aa5497750edd6264351a07cad4380b588a9cef1ffde7116c59f743f821a3876987" prot="public">
          <name>spice_rotation_model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/ddc/createRotationModel_8h_1aa5497750edd6264351a07cad4380b588ab071d525db7d4ff702afc346b6023fbf" prot="public">
          <name>gcrs_to_itrs_rotation_model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/ddc/createRotationModel_8h_1aa5497750edd6264351a07cad4380b588aa9e3e024a577794e048640774e10cc80" prot="public">
          <name>synchronous_rotation_model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d8/ddc/createRotationModel_8h_1aa5497750edd6264351a07cad4380b588a82b8a0c1b953f0ec2cea99f3970616d6" prot="public">
          <name>planetary_rotation_model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" line="38" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="enum" id="da/dc7/accelerationSettings_8h_1a2b45f4bc721aafa496686077bf729a13" prot="public" static="no" strong="no">
        <type></type>
        <name>ThrustFrames</name>
        <enumvalue id="da/dc7/accelerationSettings_8h_1a2b45f4bc721aafa496686077bf729a13ade3e924945f522fba3ca05251481dcc3" prot="public">
          <name>unspecified_thrust_frame</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/dc7/accelerationSettings_8h_1a2b45f4bc721aafa496686077bf729a13a650b0584781e2ab54c8e663af619fff2" prot="public">
          <name>inertial_thrust_frame</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/dc7/accelerationSettings_8h_1a2b45f4bc721aafa496686077bf729a13a243790d429fddd620ffe077781207c05" prot="public">
          <name>lvlh_thrust_frame</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="421" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="422" bodyend="426"/>
      </memberdef>
      <memberdef kind="enum" id="df/dab/thrustSettings_8h_1aaf9066cf597e4c3afb6d632a76e249c3" prot="public" static="no" strong="no">
        <type></type>
        <name>ThrustDirectionTypes</name>
        <enumvalue id="df/dab/thrustSettings_8h_1aaf9066cf597e4c3afb6d632a76e249c3afc45cb09a81ae83ba8e28b0782fb841e" prot="public">
          <name>colinear_with_state_segment_thrust_direction</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/dab/thrustSettings_8h_1aaf9066cf597e4c3afb6d632a76e249c3ab5140f14809fce26647b7020757572a6" prot="public">
          <name>thrust_direction_from_existing_body_orientation</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/dab/thrustSettings_8h_1aaf9066cf597e4c3afb6d632a76e249c3a62c8f1e5e9d7f52206adf6c0d1a261b4" prot="public">
          <name>custom_thrust_direction</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/dab/thrustSettings_8h_1aaf9066cf597e4c3afb6d632a76e249c3a71a036f500a070c84c507ce3138f1d0e" prot="public">
          <name>custom_thrust_orientation</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/dab/thrustSettings_8h_1aaf9066cf597e4c3afb6d632a76e249c3ab22a2a889ebb22a223f31eeddbddb2ac" prot="public">
          <name>mee_costate_based_thrust_direction</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="43" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="44" bodyend="51"/>
      </memberdef>
      <memberdef kind="enum" id="df/dab/thrustSettings_8h_1ad2efa420e14d07239b3d2385d1780956" prot="public" static="no" strong="no">
        <type></type>
        <name>ThrustMagnitudeTypes</name>
        <enumvalue id="df/dab/thrustSettings_8h_1ad2efa420e14d07239b3d2385d1780956ae8b3d7ab891f03727c7f4b78b46e4fd7" prot="public">
          <name>constant_thrust_magnitude</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/dab/thrustSettings_8h_1ad2efa420e14d07239b3d2385d1780956afccdeccf458c8a6847c0c3b9c9a4266c" prot="public">
          <name>from_engine_properties_thrust_magnitude</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/dab/thrustSettings_8h_1ad2efa420e14d07239b3d2385d1780956a2a813237cb6c7e0bccac9753f52b79e7" prot="public">
          <name>thrust_magnitude_from_time_function</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/dab/thrustSettings_8h_1ad2efa420e14d07239b3d2385d1780956a18f9753904d2e2d1b9c75ae5f1a4e4dc" prot="public">
          <name>thrust_magnitude_from_dependent_variables</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/dab/thrustSettings_8h_1ad2efa420e14d07239b3d2385d1780956a2e25d459c4991fbb11f83a1a2c3aaaff" prot="public">
          <name>bang_bang_thrust_magnitude_from_mee_costates</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="345" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="346" bodyend="352"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="da/d7a/createAtmosphereModel_8h_1ac9d2f2aaf1132bbff7f991115ec88f4d" prot="public" static="no">
        <type>std::function&lt; double(const double, const double, const double, const double) &gt;</type>
        <definition>typedef std::function&lt; double( const double, const double, const double, const double ) &gt; tudat::simulation_setup::DensityFunction</definition>
        <argsstring></argsstring>
        <name>DensityFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="929" column="23" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="929" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/dc7/accelerationSettings_8h_1a0bc456b456dac4ad928d1be1763c94fa" prot="public" static="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt; &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; std::string, std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; AccelerationSettings &gt; &gt; &gt; &gt; tudat::simulation_setup::SelectedAccelerationMap</definition>
        <argsstring></argsstring>
        <name>SelectedAccelerationMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="786" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/dc7/accelerationSettings_8h_1a671f71d0acbbc1e29e1b14db80310ca9" prot="public" static="no">
        <type>std::map&lt; std::string, std::vector&lt; std::pair&lt; std::string, std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt; &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; std::string, std::vector&lt; std::pair&lt; std::string, std::shared_ptr&lt; AccelerationSettings &gt; &gt; &gt; &gt; tudat::simulation_setup::SelectedAccelerationList</definition>
        <argsstring></argsstring>
        <name>SelectedAccelerationList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="789" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d36/createMassRateModels_8h_1a7bc010953cad9d7ff0dc67ee29acabf2" prot="public" static="no">
        <type>std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/d7c/classtudat_1_1simulation__setup_1_1MassRateModelSettings" kindref="compound">MassRateModelSettings</ref> &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; MassRateModelSettings &gt; &gt; &gt; tudat::simulation_setup::SelectedMassRateModelMap</definition>
        <argsstring></argsstring>
        <name>SelectedMassRateModelMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createMassRateModels.h" line="112" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createMassRateModels.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/d0b/createTorqueModel_8h_1aa84092a1f88ecee61772c1491343a526" prot="public" static="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt; &gt; &gt; &gt;</type>
        <definition>typedef std::map&lt; std::string, std::map&lt; std::string, std::vector&lt; std::shared_ptr&lt; TorqueSettings &gt; &gt; &gt; &gt; tudat::simulation_setup::SelectedTorqueMap</definition>
        <argsstring></argsstring>
        <name>SelectedTorqueMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createTorqueModel.h" line="30" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createTorqueModel.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d9/df9/interface_2json_2environment_2aerodynamics_8h_1a08e28da4a31882a3451ffe479967564c" prot="public" static="yes" mutable="no">
        <type>std::map&lt; AerodynamicCoefficientTypes, std::string &gt;</type>
        <definition>std::map&lt; AerodynamicCoefficientTypes, std::string &gt; tudat::simulation_setup::aerodynamicCoefficientTypes</definition>
        <argsstring></argsstring>
        <name>aerodynamicCoefficientTypes</name>
        <initializer>=
{
    { constant_aerodynamic_coefficients, &quot;constant&quot; },
    { hypersonic_local_inclincation_coefficients, &quot;hypersonicLocalInclincation&quot; },
    { tabulated_coefficients, &quot;tabulated&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>AerodynamicCoefficientTypes</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" line="61" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/df9/interface_2json_2environment_2aerodynamics_8h_1ae9adaf267aee438f4298ac5ae7f04935" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; AerodynamicCoefficientTypes &gt;</type>
        <definition>std::vector&lt; AerodynamicCoefficientTypes &gt; tudat::simulation_setup::unsupportedAerodynamicCoefficientTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedAerodynamicCoefficientTypes</name>
        <initializer>=
{
    hypersonic_local_inclincation_coefficients
}</initializer>
        <briefdescription>
<para><computeroutput>AerodynamicCoefficientTypes</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" line="69" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dec/atmosphere_8h_1a8d34cca2bd07cee38e3264120f827790" prot="public" static="yes" mutable="no">
        <type>std::map&lt; AtmosphereTypes, std::string &gt;</type>
        <definition>std::map&lt; AtmosphereTypes, std::string &gt; tudat::simulation_setup::atmosphereTypes</definition>
        <argsstring></argsstring>
        <name>atmosphereTypes</name>
        <initializer>=
{
    { exponential_atmosphere, &quot;exponential&quot; },
    { tabulated_atmosphere, &quot;tabulated&quot; },
    { nrlmsise00, &quot;nrlmsise00&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>AtmosphereTypes</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="88" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dec/atmosphere_8h_1a2e1cbe1e5bf5d28d0b7c6b20d2e471a6" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; AtmosphereTypes &gt;</type>
        <definition>std::vector&lt; AtmosphereTypes &gt; tudat::simulation_setup::unsupportedAtmosphereTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedAtmosphereTypes</name>
        <initializer>= { custom_constant_temperature_atmosphere }</initializer>
        <briefdescription>
<para><computeroutput>AtmosphereTypes</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="96" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d42/interface_2json_2environment_2ephemeris_8h_1a9ced43b1f8add4bc080c36ee92fe9b0a" prot="public" static="yes" mutable="no">
        <type>std::map&lt; EphemerisType, std::string &gt;</type>
        <definition>std::map&lt; EphemerisType, std::string &gt; tudat::simulation_setup::ephemerisTypes</definition>
        <argsstring></argsstring>
        <name>ephemerisTypes</name>
        <initializer>=
{
    { approximate_planet_positions, &quot;approximatePlanetPositions&quot; },
    { direct_spice_ephemeris, &quot;directSpice&quot; },
    { tabulated_ephemeris, &quot;tabulated&quot; },
    { interpolated_spice, &quot;interpolatedSpice&quot; },
    { constant_ephemeris, &quot;constant&quot; },
    { kepler_ephemeris, &quot;kepler&quot; },
    { custom_ephemeris, &quot;custom&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>EphemerisType</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/ephemeris.h" line="63" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/ephemeris.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d42/interface_2json_2environment_2ephemeris_8h_1a27ea4ad87bae012e510fa3683bd22fe8" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; EphemerisType &gt;</type>
        <definition>std::vector&lt; EphemerisType &gt; tudat::simulation_setup::unsupportedEphemerisTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedEphemerisTypes</name>
        <initializer>=
{
    custom_ephemeris
}</initializer>
        <briefdescription>
<para><computeroutput>EphemerisType</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/ephemeris.h" line="75" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/ephemeris.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/df8/gravityField_8h_1a36b350f807ebcd1e7abcbe0c4b6e50ad" prot="public" static="yes" mutable="no">
        <type>std::map&lt; GravityFieldType, std::string &gt;</type>
        <definition>std::map&lt; GravityFieldType, std::string &gt; tudat::simulation_setup::gravityFieldTypes</definition>
        <argsstring></argsstring>
        <name>gravityFieldTypes</name>
        <initializer>=
{
    { central, &quot;pointMass&quot; },
    { central_spice, &quot;pointMassSpice&quot; },
    { spherical_harmonic, &quot;sphericalHarmonic&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>GravityFieldType</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" line="27" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/df8/gravityField_8h_1ab7221d2fdef7e75e643c64d2068ebe04" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; GravityFieldType &gt;</type>
        <definition>std::vector&lt; GravityFieldType &gt; tudat::simulation_setup::unsupportedGravityFieldTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedGravityFieldTypes</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>GravityFieldType</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" line="35" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/df8/gravityField_8h_1ac055d3d2d0d36d6acf2019235658a073" prot="public" static="yes" mutable="no">
        <type>std::map&lt; SphericalHarmonicsModel, std::string &gt;</type>
        <definition>std::map&lt; SphericalHarmonicsModel, std::string &gt; tudat::simulation_setup::sphericalHarmonicsModels</definition>
        <argsstring></argsstring>
        <name>sphericalHarmonicsModels</name>
        <initializer>=
{
    { customModel, &quot;custom&quot; },
    { egm96, &quot;egm96&quot; },
    { ggm02c, &quot;ggm02c&quot; },
    { ggm02s, &quot;ggm02s&quot; },
    { glgm3150, &quot;glgm3150&quot; },
    { lpe200, &quot;lpe200&quot; },
    { jgmro120d, &quot;jgmro120d&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>SphericalHarmonicsModel</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" line="53" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/df8/gravityField_8h_1ab21285fff16110f102c39fffacbdde97" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; SphericalHarmonicsModel &gt;</type>
        <definition>std::vector&lt; SphericalHarmonicsModel &gt; tudat::simulation_setup::unsupportedSphericalHarmonicsModels</definition>
        <argsstring></argsstring>
        <name>unsupportedSphericalHarmonicsModels</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>SphericalHarmonicsModel</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" line="65" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d32/radiationPressure_8h_1aecdb34316368700b4fd84f7a37199b73" prot="public" static="yes" mutable="no">
        <type>std::map&lt; RadiationPressureType, std::string &gt;</type>
        <definition>std::map&lt; RadiationPressureType, std::string &gt; tudat::simulation_setup::radiationPressureTypes</definition>
        <argsstring></argsstring>
        <name>radiationPressureTypes</name>
        <initializer>=
{
    { cannon_ball_radiation_pressure_interface, &quot;cannonBall&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>RadiationPressureType</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/radiationPressure.h" line="25" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/radiationPressure.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d32/radiationPressure_8h_1ae0f662dd1d3868c2e13cc5b9674b1338" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; RadiationPressureType &gt;</type>
        <definition>std::vector&lt; RadiationPressureType &gt; tudat::simulation_setup::unsupportedRadiationPressureTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedRadiationPressureTypes</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>RadiationPressureType</computeroutput>s not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/radiationPressure.h" line="31" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/radiationPressure.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/de2/rotationModel_8h_1ad562ea65d8ebb1075c7216964f947c19" prot="public" static="yes" mutable="no">
        <type>std::map&lt; RotationModelType, std::string &gt;</type>
        <definition>std::map&lt; RotationModelType, std::string &gt; tudat::simulation_setup::rotationModelTypes</definition>
        <argsstring></argsstring>
        <name>rotationModelTypes</name>
        <initializer>=
{
    { simple_rotation_model, &quot;simple&quot; },
    { spice_rotation_model, &quot;spice&quot; },
    { gcrs_to_itrs_rotation_model, &quot;gcrsToItrs&quot; },
    { synchronous_rotation_model, &quot;synchronous&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>RotationModelType</computeroutput>s string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" line="26" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/de2/rotationModel_8h_1a3caa80a52836ff1478cd4c089c2ebed9" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; RotationModelType &gt;</type>
        <definition>std::vector&lt; RotationModelType &gt; tudat::simulation_setup::unsupportedRotationModelTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedRotationModelTypes</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>RotationModelType</computeroutput>s not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" line="35" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/da2/shapeModel_8h_1a0c6d77a9c8c40933b67815d18106adca" prot="public" static="yes" mutable="no">
        <type>std::map&lt; BodyShapeTypes, std::string &gt;</type>
        <definition>std::map&lt; BodyShapeTypes, std::string &gt; tudat::simulation_setup::bodyShapeTypes</definition>
        <argsstring></argsstring>
        <name>bodyShapeTypes</name>
        <initializer>=
{
    { spherical, &quot;spherical&quot; },
    { spherical_spice, &quot;sphericalSpice&quot; },
    { oblate_spheroid, &quot;oblateSpheroid&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>BodyShapeTypes</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/shapeModel.h" line="25" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/shapeModel.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/da2/shapeModel_8h_1a1baf4b5baa1976fa2760e903e8a2b0cb" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; BodyShapeTypes &gt;</type>
        <definition>std::vector&lt; BodyShapeTypes &gt; tudat::simulation_setup::unsupportedBodyShapeTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedBodyShapeTypes</name>
        <initializer>= { }</initializer>
        <briefdescription>
<para><computeroutput>BodyShapeTypes</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/shapeModel.h" line="33" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/shapeModel.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dda/thrust_8h_1a3c49ecbbeced38801d8fd33cc2998fd8" prot="public" static="yes" mutable="no">
        <type>std::map&lt; ThrustDirectionGuidanceTypes, std::string &gt;</type>
        <definition>std::map&lt; ThrustDirectionGuidanceTypes, std::string &gt; tudat::simulation_setup::thrustDirectionTypes</definition>
        <argsstring></argsstring>
        <name>thrustDirectionTypes</name>
        <initializer>=
{
    { colinear_with_state_segment_thrust_direction, &quot;colinearWithStateSegment&quot; },
    { thrust_direction_from_existing_body_orientation, &quot;fromExistingBodyOrientation&quot; },
    { custom_thrust_direction, &quot;customDirection&quot; },
    { custom_thrust_orientation, &quot;customOrientation&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>ThrustDirectionGuidanceTypes</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="28" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dda/thrust_8h_1ab7f48e388acf57dc19b4003a3d266743" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; ThrustDirectionGuidanceTypes &gt;</type>
        <definition>std::vector&lt; ThrustDirectionGuidanceTypes &gt; tudat::simulation_setup::unsupportedThrustDirectionTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedThrustDirectionTypes</name>
        <initializer>=
{
    custom_thrust_direction,
    custom_thrust_orientation
}</initializer>
        <briefdescription>
<para><computeroutput>ThrustDirectionGuidanceTypes</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="37" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dda/thrust_8h_1a4157a9968d1bba66fd874190dfec930f" prot="public" static="yes" mutable="no">
        <type>std::map&lt; ThrustMagnitudeTypes, std::string &gt;</type>
        <definition>std::map&lt; ThrustMagnitudeTypes, std::string &gt; tudat::simulation_setup::thrustMagnitudeTypes</definition>
        <argsstring></argsstring>
        <name>thrustMagnitudeTypes</name>
        <initializer>=
{
    { constant_thrust_magnitude, &quot;constant&quot; },
    { from_engine_properties_thrust_magnitude, &quot;fromEngineProperties&quot; },
    { thrust_magnitude_from_time_function, &quot;timeDependent&quot; },
    { thrust_magnitude_from_dependent_variables, &quot;variableDependent&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>ThrustMagnitudeTypes</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="68" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dda/thrust_8h_1a41053b1ddf37e0ee686b11bd3913c679" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; ThrustMagnitudeTypes &gt;</type>
        <definition>std::vector&lt; ThrustMagnitudeTypes &gt; tudat::simulation_setup::unsupportedThrustMagnitudeTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedThrustMagnitudeTypes</name>
        <initializer>=
{
    thrust_magnitude_from_time_function,
    thrust_magnitude_from_dependent_variables
}</initializer>
        <briefdescription>
<para><computeroutput>ThrustMagnitudeTypes</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="77" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dda/thrust_8h_1a55bf53060e3320f556323c65809abffc" prot="public" static="yes" mutable="no">
        <type>std::map&lt; ThrustFrames, std::string &gt;</type>
        <definition>std::map&lt; ThrustFrames, std::string &gt; tudat::simulation_setup::thrustFrameTypes</definition>
        <argsstring></argsstring>
        <name>thrustFrameTypes</name>
        <initializer>=
{
    { unspecified_thrust_frame, &quot;unspecified&quot; },
    { inertial_thurst_frame, &quot;intertial&quot; },
    { lvlh_thrust_frame, &quot;lvlh&quot; }
}</initializer>
        <briefdescription>
<para>Map of <computeroutput>ThrustFrames</computeroutput> string representations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="108" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dda/thrust_8h_1a598f1f7fdca8fd75531d0c0e1ac6d5cd" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; ThrustFrames &gt;</type>
        <definition>std::vector&lt; ThrustFrames &gt; tudat::simulation_setup::unsupportedThrustFrameTypes</definition>
        <argsstring></argsstring>
        <name>unsupportedThrustFrameTypes</name>
        <initializer>=
{
    unspecified_thrust_frame
}</initializer>
        <briefdescription>
<para><computeroutput>ThrustFrames</computeroutput> not supported by <computeroutput>json_interface</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="116" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d17/createRadiationPressureInterface_8h_1a3655d48283d9af8d926d279671916bc0" prot="public" static="yes" mutable="no">
        <type>const std::map&lt; std::string, double &gt;</type>
        <definition>const std::map&lt; std::string, double &gt; tudat::simulation_setup::defaultRadiatedPowerValues</definition>
        <argsstring></argsstring>
        <name>defaultRadiatedPowerValues</name>
        <initializer>=
{ { &quot;Sun&quot;,  3.839E26 } }</initializer>
        <briefdescription>
<para>Default values for radiation pressure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" line="29" column="23" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/df9/interface_2json_2environment_2aerodynamics_8h_1aca1694add7df30af92c9915a3bf69fb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const AerodynamicCoefficientTypes &amp;aerodynamicCoefficientType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const AerodynamicCoefficientTypes &amp;</type>
          <declname>aerodynamicCoefficientType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>AerodynamicCoefficientTypes</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" line="75" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="d9/df9/interface_2json_2environment_2aerodynamics_8h_1addb04df6bac84411aecceac1d558cd79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, AerodynamicCoefficientTypes &amp;aerodynamicCoefficientType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>AerodynamicCoefficientTypes &amp;</type>
          <declname>aerodynamicCoefficientType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>AerodynamicCoefficientTypes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" line="81" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="d9/df9/interface_2json_2environment_2aerodynamics_8h_1a099fa4272eddd7f48404e3042ced71a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; &amp;aerodynamicSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt; &amp;</type>
          <declname>aerodynamicSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/aerodynamics.cpp" line="23" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/aerodynamics.cpp" bodystart="23" bodyend="127" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" declline="90" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d9/df9/interface_2json_2environment_2aerodynamics_8h_1af9821835ff29172ed0d99ffc9642b6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; &amp;aerodynamicSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt; &amp;</type>
          <declname>aerodynamicSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/aerodynamics.cpp" line="130" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/aerodynamics.cpp" bodystart="130" bodyend="303" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/aerodynamics.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dec/atmosphere_8h_1a83ddae89f9b94bb6277154addb85f98f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const AtmosphereTypes &amp;atmosphereType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const AtmosphereTypes &amp;</type>
          <declname>atmosphereType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>AtmosphereTypes</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="99" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="d2/dec/atmosphere_8h_1a48b2d46ed8bbad7415d66e722fb17b17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, AtmosphereTypes &amp;atmosphereType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>AtmosphereTypes &amp;</type>
          <declname>atmosphereType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>AtmosphereTypes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" line="105" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="d2/dec/atmosphere_8h_1abd2d45701d11380428756f06db182fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; AtmosphereSettings &gt; &amp;atmosphereSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt; &amp;</type>
          <declname>atmosphereSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/atmosphere.cpp" line="23" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/atmosphere.cpp" bodystart="23" bodyend="78" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dec/atmosphere_8h_1a8229480cc59dee076943ece7aec15604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; AtmosphereSettings &gt; &amp;atmosphereSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt; &amp;</type>
          <declname>atmosphereSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/atmosphere.cpp" line="81" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/atmosphere.cpp" bodystart="81" bodyend="132" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/atmosphere.h" declline="117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd8/interface_2json_2environment_2body_8h_1a2d65d269ed55b273def9067ed5a5700c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; BodySettings &gt; &amp;bodySettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d41/structtudat_1_1simulation__setup_1_1BodySettings" kindref="compound">BodySettings</ref> &gt; &amp;</type>
          <declname>bodySettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d1/d41/structtudat_1_1simulation__setup_1_1BodySettings" kindref="compound">BodySettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/body.cpp" line="31" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/body.cpp" bodystart="31" bodyend="50" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/body.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/d42/interface_2json_2environment_2ephemeris_8h_1afafceaa8d8003904e01a371c2da24926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const EphemerisType &amp;ephemerisType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const EphemerisType &amp;</type>
          <declname>ephemerisType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>EphemerisType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/ephemeris.h" line="81" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/ephemeris.h" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="d3/d42/interface_2json_2environment_2ephemeris_8h_1aa7515c5ce9a0805ffe1066d07325df9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, EphemerisType &amp;ephemerisType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>EphemerisType &amp;</type>
          <declname>ephemerisType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>EphemerisType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/ephemeris.h" line="87" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/ephemeris.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="d3/d42/interface_2json_2environment_2ephemeris_8h_1abb01fac26b5c7f1628dffe8275106f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; EphemerisSettings &gt; &amp;ephemerisSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt; &amp;</type>
          <declname>ephemerisSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/ephemeris.cpp" line="23" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/ephemeris.cpp" bodystart="23" bodyend="113" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/ephemeris.h" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/d42/interface_2json_2environment_2ephemeris_8h_1a35c1fc52a1b99a8c224e2b2386351a4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; EphemerisSettings &gt; &amp;ephemerisSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt; &amp;</type>
          <declname>ephemerisSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/ephemeris.cpp" line="116" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/ephemeris.cpp" bodystart="116" bodyend="217" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/ephemeris.h" declline="96" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/df8/gravityField_8h_1ac067c0dc616fbe6e62404c55187cd249" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const GravityFieldType &amp;gravityFieldType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const GravityFieldType &amp;</type>
          <declname>gravityFieldType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>GravityFieldType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" line="38" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="d3/df8/gravityField_8h_1a0e2acbe8394ae54713589c83b3b23a67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, GravityFieldType &amp;gravityFieldType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>GravityFieldType &amp;</type>
          <declname>gravityFieldType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>GravityFieldType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" line="44" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="d3/df8/gravityField_8h_1aab8b336957299fdb703c2f49511abc00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const SphericalHarmonicsModel &amp;sphericalHarmonicsModel)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const SphericalHarmonicsModel &amp;</type>
          <declname>sphericalHarmonicsModel</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>SphericalHarmonicsModel</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" line="68" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="d3/df8/gravityField_8h_1adf00be8e26844e9639e5beedaaafed42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, SphericalHarmonicsModel &amp;sphericalHarmonicsModel)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>SphericalHarmonicsModel &amp;</type>
          <declname>sphericalHarmonicsModel</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>SphericalHarmonicsModel</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" line="74" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="d3/df8/gravityField_8h_1a706d03cfe891364ec856cb21fd9fe11c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; GravityFieldSettings &gt; &amp;gravityFieldSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/de0/classtudat_1_1simulation__setup_1_1GravityFieldSettings" kindref="compound">GravityFieldSettings</ref> &gt; &amp;</type>
          <declname>gravityFieldSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="dd/de0/classtudat_1_1simulation__setup_1_1GravityFieldSettings" kindref="compound">GravityFieldSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/gravityField.cpp" line="21" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/gravityField.cpp" bodystart="21" bodyend="101" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/df8/gravityField_8h_1a0893986086bd3884594790faa04f1ab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; GravityFieldSettings &gt; &amp;gravityFieldSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dd/de0/classtudat_1_1simulation__setup_1_1GravityFieldSettings" kindref="compound">GravityFieldSettings</ref> &gt; &amp;</type>
          <declname>gravityFieldSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="dd/de0/classtudat_1_1simulation__setup_1_1GravityFieldSettings" kindref="compound">GravityFieldSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/gravityField.cpp" line="104" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/gravityField.cpp" bodystart="104" bodyend="163" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityField.h" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4d/gravityFieldVariation_8h_1a2c7d45d6fbf5100af694ae30b6395169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; GravityFieldVariationSettings &gt; &amp;variationSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt; &amp;</type>
          <declname>variationSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/gravityFieldVariation.cpp" line="23" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/gravityFieldVariation.cpp" bodystart="23" bodyend="63" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityFieldVariation.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d9/d4d/gravityFieldVariation_8h_1ad96246c279318596764277e8a46d2e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; GravityFieldVariationSettings &gt; &amp;variationSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt; &amp;</type>
          <declname>variationSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/gravityFieldVariation.cpp" line="66" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/gravityFieldVariation.cpp" bodystart="66" bodyend="99" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/gravityFieldVariation.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/d13/groundStations_8h_1a5d6a35d63e809c0ef7364ed926ca613d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; GroundStationSettings &gt; &amp;groundStationSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/d77/classtudat_1_1simulation__setup_1_1GroundStationSettings" kindref="compound">GroundStationSettings</ref> &gt; &amp;</type>
          <declname>groundStationSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="dd/d77/classtudat_1_1simulation__setup_1_1GroundStationSettings" kindref="compound">GroundStationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/groundStations.cpp" line="21" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/groundStations.cpp" bodystart="21" bodyend="34" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/groundStations.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/d13/groundStations_8h_1abeb4a4e41b46a1693a6acb89d5895892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; GroundStationSettings &gt; &amp;groundStationSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dd/d77/classtudat_1_1simulation__setup_1_1GroundStationSettings" kindref="compound">GroundStationSettings</ref> &gt; &amp;</type>
          <declname>groundStationSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="dd/d77/classtudat_1_1simulation__setup_1_1GroundStationSettings" kindref="compound">GroundStationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/groundStations.cpp" line="37" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/groundStations.cpp" bodystart="37" bodyend="53" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/groundStations.h" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="df/d32/radiationPressure_8h_1a50b4aba4c5739be55e73ac5441e271cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const RadiationPressureType &amp;radiationPressureType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const RadiationPressureType &amp;</type>
          <declname>radiationPressureType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>RadiationPressureType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/radiationPressure.h" line="34" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/radiationPressure.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="df/d32/radiationPressure_8h_1a0ed97c71dfe343483f2780dee74f5cc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, RadiationPressureType &amp;radiationPressureType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>RadiationPressureType &amp;</type>
          <declname>radiationPressureType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>RadiationPressureType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/radiationPressure.h" line="40" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/radiationPressure.h" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="df/d32/radiationPressure_8h_1a9a20d76e7b5fa1b863d762c86b0f8cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; RadiationPressureInterfaceSettings &gt; &amp;radiationPressureInterfaceSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/df6/classtudat_1_1simulation__setup_1_1RadiationPressureInterfaceSettings" kindref="compound">RadiationPressureInterfaceSettings</ref> &gt; &amp;</type>
          <declname>radiationPressureInterfaceSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d4/df6/classtudat_1_1simulation__setup_1_1RadiationPressureInterfaceSettings" kindref="compound">RadiationPressureInterfaceSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/radiationPressure.cpp" line="21" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/radiationPressure.cpp" bodystart="21" bodyend="54" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/radiationPressure.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="df/d32/radiationPressure_8h_1a22e86ffeb17a2bc6522b9c0350b52b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; RadiationPressureInterfaceSettings &gt; &amp;radiationPressureInterfaceSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/df6/classtudat_1_1simulation__setup_1_1RadiationPressureInterfaceSettings" kindref="compound">RadiationPressureInterfaceSettings</ref> &gt; &amp;</type>
          <declname>radiationPressureInterfaceSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d4/df6/classtudat_1_1simulation__setup_1_1RadiationPressureInterfaceSettings" kindref="compound">RadiationPressureInterfaceSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/radiationPressure.cpp" line="57" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/radiationPressure.cpp" bodystart="57" bodyend="105" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/radiationPressure.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d8/de2/rotationModel_8h_1a98d5688c82c202205c7253e89ee9f1b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const RotationModelType &amp;rotationModelType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const RotationModelType &amp;</type>
          <declname>rotationModelType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>RotationModelType</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" line="38" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="d8/de2/rotationModel_8h_1a1d7b3137b83e8e1b46beda4218f95148" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, RotationModelType &amp;rotationModelType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>RotationModelType &amp;</type>
          <declname>rotationModelType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>RotationModelType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" line="44" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="d8/de2/rotationModel_8h_1af4003a869b51f4fa02d48c9a3f3c6092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; RotationModelSettings &gt; &amp;rotationModelSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt; &amp;</type>
          <declname>rotationModelSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/rotationModel.cpp" line="21" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/rotationModel.cpp" bodystart="21" bodyend="71" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d8/de2/rotationModel_8h_1af5c63915093abd41e7e074174826b3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; RotationModelSettings &gt; &amp;rotationModelSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt; &amp;</type>
          <declname>rotationModelSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/rotationModel.cpp" line="74" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/rotationModel.cpp" bodystart="74" bodyend="144" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/rotationModel.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d7/da2/shapeModel_8h_1a78b9fc6acddcc88ecf959a6b2333c1f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const BodyShapeTypes &amp;bodyShapeType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const BodyShapeTypes &amp;</type>
          <declname>bodyShapeType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>BodyShapeTypes</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/shapeModel.h" line="36" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/shapeModel.h" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="d7/da2/shapeModel_8h_1a00615451d90999b13f0019c9b3b0bbee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, BodyShapeTypes &amp;bodyShapeType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>BodyShapeTypes &amp;</type>
          <declname>bodyShapeType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>BodyShapeTypes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/shapeModel.h" line="42" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/shapeModel.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="d7/da2/shapeModel_8h_1a24c304d5a6f3e1bc2dbe146f59d660db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; BodyShapeSettings &gt; &amp;bodyShapeSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" kindref="compound">BodyShapeSettings</ref> &gt; &amp;</type>
          <declname>bodyShapeSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" kindref="compound">BodyShapeSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/shapeModel.cpp" line="21" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/shapeModel.cpp" bodystart="21" bodyend="57" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/shapeModel.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d7/da2/shapeModel_8h_1a0a846aa2987821f6a71697d2f847e76e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; BodyShapeSettings &gt; &amp;bodyShapeSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" kindref="compound">BodyShapeSettings</ref> &gt; &amp;</type>
          <declname>bodyShapeSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" kindref="compound">BodyShapeSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/shapeModel.cpp" line="60" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/environment/shapeModel.cpp" bodystart="60" bodyend="90" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/environment/shapeModel.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d0/db0/orbitDetermination_8h_1a831998a8e693a7bcaa88b1b17fb400e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::updateInverseAPrioriCovarianceFromJSON</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, const int numberOfParameters, Eigen::MatrixXd &amp;inverseAprioriCovariance)</argsstring>
        <name>updateInverseAPrioriCovarianceFromJSON</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfParameters</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>inverseAprioriCovariance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/orbitDetermination.cpp" line="19" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/orbitDetermination.cpp" bodystart="19" bodyend="78" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/orbitDetermination.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d0/db0/orbitDetermination_8h_1a4e5c8d32a553ce7b1582dc59a70dc700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::simulation_setup::updatePodSettingsFromJSON</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; simulation_setup::PodInput&lt; ObservationScalarType, TimeType &gt; &gt; estimationInput, std::shared_ptr&lt; simulation_setup::EstimationConvergenceChecker &gt; convergenceChecker, const int numberOfEstimatedParameters)</argsstring>
        <name>updatePodSettingsFromJSON</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/da2/classtudat_1_1simulation__setup_1_1PodInput" kindref="compound">simulation_setup::PodInput</ref>&lt; ObservationScalarType, TimeType &gt; &gt;</type>
          <declname>estimationInput</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d2/d2c/classtudat_1_1simulation__setup_1_1EstimationConvergenceChecker" kindref="compound">simulation_setup::EstimationConvergenceChecker</ref> &gt;</type>
          <declname>convergenceChecker</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfEstimatedParameters</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput>EstimatableParameterSettings</computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/orbitDetermination.h" line="30" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/orbitDetermination.h" bodystart="30" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="d0/db0/orbitDetermination_8h_1ab2171a0161309ed7259776579e97ef78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::updateObservationWeightsFromJSON</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, const std::map&lt; observation_models::ObservableType, std::map&lt; observation_models::LinkEnds, int &gt; &gt; numberOfObservations, std::map&lt; observation_models::ObservableType, std::map&lt; observation_models::LinkEnds, Eigen::VectorXd &gt; &gt; &amp;observableWeights)</argsstring>
        <name>updateObservationWeightsFromJSON</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::map&lt; observation_models::ObservableType, std::map&lt; observation_models::LinkEnds, int &gt; &gt;</type>
          <declname>numberOfObservations</declname>
        </param>
        <param>
          <type>std::map&lt; observation_models::ObservableType, std::map&lt; observation_models::LinkEnds, Eigen::VectorXd &gt; &gt; &amp;</type>
          <declname>observableWeights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/orbitDetermination.cpp" line="80" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/estimation/orbitDetermination.cpp" bodystart="80" bodyend="153" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/estimation/orbitDetermination.h" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/d08/interpolation_8h_1a0ba0689d93c4e067a2635c959b9575b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; ModelInterpolationSettings &gt; &amp;modelInterpolationSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dfb/classtudat_1_1simulation__setup_1_1ModelInterpolationSettings" kindref="compound">ModelInterpolationSettings</ref> &gt; &amp;</type>
          <declname>modelInterpolationSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="db/dfb/classtudat_1_1simulation__setup_1_1ModelInterpolationSettings" kindref="compound">ModelInterpolationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/math/interpolation.cpp" line="110" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/math/interpolation.cpp" bodystart="110" bodyend="123" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/math/interpolation.h" declline="264" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/d08/interpolation_8h_1af80adb0f7c9cee9b18ec742698f38231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; ModelInterpolationSettings &gt; &amp;modelInterpolationSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="db/dfb/classtudat_1_1simulation__setup_1_1ModelInterpolationSettings" kindref="compound">ModelInterpolationSettings</ref> &gt; &amp;</type>
          <declname>modelInterpolationSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="db/dfb/classtudat_1_1simulation__setup_1_1ModelInterpolationSettings" kindref="compound">ModelInterpolationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/math/interpolation.cpp" line="126" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/math/interpolation.cpp" bodystart="126" bodyend="137" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/math/interpolation.h" declline="267" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/de8/acceleration_8h_1aa462b6fb27bcbd0f8c7a7ee6b9eb9466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; AccelerationSettings &gt; &amp;accelerationSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt; &amp;</type>
          <declname>accelerationSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/acceleration.cpp" line="22" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/acceleration.cpp" bodystart="22" bodyend="119" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/de8/acceleration_8h_1a9f2138b8b97df4a91fe92140faaff22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; AccelerationSettings &gt; &amp;accelerationSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt; &amp;</type>
          <declname>accelerationSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/acceleration.cpp" line="122" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/acceleration.cpp" bodystart="122" bodyend="198" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/acceleration.h" declline="130" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dd/de1/interface_2json_2propagation_2massRateModel_8h_1aa436d7ac927538f752d3c33b7540279d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; MassRateModelSettings &gt; &amp;massRateModelSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d7c/classtudat_1_1simulation__setup_1_1MassRateModelSettings" kindref="compound">MassRateModelSettings</ref> &gt; &amp;</type>
          <declname>massRateModelSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d1/d7c/classtudat_1_1simulation__setup_1_1MassRateModelSettings" kindref="compound">MassRateModelSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/massRateModel.cpp" line="21" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/massRateModel.cpp" bodystart="21" bodyend="48" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/massRateModel.h" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dd/de1/interface_2json_2propagation_2massRateModel_8h_1a0319a2b343d7c6b076bb91020ae08d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; MassRateModelSettings &gt; &amp;massRateModelSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d1/d7c/classtudat_1_1simulation__setup_1_1MassRateModelSettings" kindref="compound">MassRateModelSettings</ref> &gt; &amp;</type>
          <declname>massRateModelSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d1/d7c/classtudat_1_1simulation__setup_1_1MassRateModelSettings" kindref="compound">MassRateModelSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/massRateModel.cpp" line="51" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/massRateModel.cpp" bodystart="51" bodyend="77" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/massRateModel.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1ae0a28c025f51fd6f45c5f3330ce077c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const ThrustDirectionGuidanceTypes &amp;thrustDirectionType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const ThrustDirectionGuidanceTypes &amp;</type>
          <declname>thrustDirectionType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>ThrustDirectionGuidanceTypes</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="44" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1a7064dbeb08806baa406079d06e7c1b7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, ThrustDirectionGuidanceTypes &amp;thrustDirectionType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>ThrustDirectionGuidanceTypes &amp;</type>
          <declname>thrustDirectionType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>ThrustDirectionGuidanceTypes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="50" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1a55b61a2ef925c2afacea62bdc59481ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; ThrustDirectionGuidanceSettings &gt; &amp;directionSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; ThrustDirectionGuidanceSettings &gt; &amp;</type>
          <declname>directionSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput>ThrustDirectionGuidanceSettings</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref></computeroutput> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" line="26" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" bodystart="26" bodyend="56" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1a9371c45d30b1f390947e2ae409df3408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; ThrustDirectionGuidanceSettings &gt; &amp;directionSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ThrustDirectionGuidanceSettings &gt; &amp;</type>
          <declname>directionSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a shared pointer to a <computeroutput>ThrustDirectionGuidanceSettings</computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" line="59" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" bodystart="59" bodyend="84" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1a95d649932fe89e8bb1d237c00d279c72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const ThrustMagnitudeTypes &amp;thrustMagnitudeType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const ThrustMagnitudeTypes &amp;</type>
          <declname>thrustMagnitudeType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>ThrustMagnitudeTypes</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="84" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1a6804259ac7ef9f1427e4579db3718629" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, ThrustMagnitudeTypes &amp;thrustMagnitudeType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>ThrustMagnitudeTypes &amp;</type>
          <declname>thrustMagnitudeType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>ThrustMagnitudeTypes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="90" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1a7057ab41d137ce65e4e885028a5fd2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; ThrustMagnitudeSettings &gt; &amp;magnitudeSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" kindref="compound">ThrustMagnitudeSettings</ref> &gt; &amp;</type>
          <declname>magnitudeSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" kindref="compound">ThrustMagnitudeSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" line="90" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" bodystart="90" bodyend="125" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" declline="99" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1a308907bdf33db7cb7b68eb1bbbec8e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; ThrustMagnitudeSettings &gt; &amp;magnitudeSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" kindref="compound">ThrustMagnitudeSettings</ref> &gt; &amp;</type>
          <declname>magnitudeSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" kindref="compound">ThrustMagnitudeSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" line="128" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" bodystart="128" bodyend="156" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" declline="102" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1ac97adfe38c7589e4abe493c018c58d83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const ThrustFrames &amp;thrustFrameType)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const ThrustFrames &amp;</type>
          <declname>thrustFrameType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>ThrustFrames</computeroutput> to <computeroutput>json</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="122" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1a9a2b2d45e7c73adaffb544e090d0b530" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, ThrustFrames &amp;thrustFrameType)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>ThrustFrames &amp;</type>
          <declname>thrustFrameType</declname>
        </param>
        <briefdescription>
<para>Convert <computeroutput>json</computeroutput> to <computeroutput>ThrustFrames</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" line="128" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1a044627344bcc7360415a0b7f04a72e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; ThrustAccelerationSettings &gt; &amp;thrustAccelerationSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d3f/classtudat_1_1simulation__setup_1_1ThrustAccelerationSettings" kindref="compound">ThrustAccelerationSettings</ref> &gt; &amp;</type>
          <declname>thrustAccelerationSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="d4/d3f/classtudat_1_1simulation__setup_1_1ThrustAccelerationSettings" kindref="compound">ThrustAccelerationSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" line="162" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" bodystart="162" bodyend="186" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" declline="137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dda/thrust_8h_1ab01fa452773703c829fd9b0dbeb0b572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; ThrustAccelerationSettings &gt; &amp;thrustAccelerationSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/d3f/classtudat_1_1simulation__setup_1_1ThrustAccelerationSettings" kindref="compound">ThrustAccelerationSettings</ref> &gt; &amp;</type>
          <declname>thrustAccelerationSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="d4/d3f/classtudat_1_1simulation__setup_1_1ThrustAccelerationSettings" kindref="compound">ThrustAccelerationSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" line="189" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/thrust.cpp" bodystart="189" bodyend="210" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/thrust.h" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d7/dac/torque_8h_1a57ce6ebab78714bc769ef4e3e86de7b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::to_json</definition>
        <argsstring>(nlohmann::json &amp;jsonObject, const std::shared_ptr&lt; TorqueSettings &gt; &amp;torqueSettings)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt; &amp;</type>
          <declname>torqueSettings</declname>
        </param>
        <briefdescription>
<para>Create a <computeroutput>json</computeroutput> object from a shared pointer to a <computeroutput><ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/torque.cpp" line="21" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/torque.cpp" bodystart="21" bodyend="42" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/torque.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d7/dac/torque_8h_1a989bb224f32a1ef2032f01930cd1292e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::from_json</definition>
        <argsstring>(const nlohmann::json &amp;jsonObject, std::shared_ptr&lt; TorqueSettings &gt; &amp;torqueSettings)</argsstring>
        <name>from_json</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>jsonObject</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt; &amp;</type>
          <declname>torqueSettings</declname>
        </param>
        <briefdescription>
<para>Create a shared pointer to a <computeroutput><ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref></computeroutput> object from a <computeroutput>json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/torque.cpp" line="45" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/interface/json/propagation/torque.cpp" bodystart="45" bodyend="65" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/interface/json/propagation/torque.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d0/d24/simulation_2environment__setup_2body_8h_1a6fb2abe681632058ce77dca54dc3b048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d1b/classtudat_1_1ephemerides_1_1ReferenceFrameManager" kindref="compound">ephemerides::ReferenceFrameManager</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ephemerides::ReferenceFrameManager &gt; tudat::simulation_setup::createFrameManager</definition>
        <argsstring>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; Body &gt; &gt; bodies)</argsstring>
        <name>createFrameManager</name>
        <param>
          <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt; &gt;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Typdef for a list of body objects (as unordered_map for efficiency reasons) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/body.cpp" line="137" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/body.cpp" bodystart="137" bodyend="151" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/body.h" declline="1280" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d24/simulation_2environment__setup_2body_8h_1abdd5716a93cf6592105885992ca29c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::simulation_setup::setGlobalFrameBodyEphemerides</definition>
        <argsstring>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; Body &gt; &gt; bodies, const std::string &amp;globalFrameOrigin, const std::string &amp;globalFrameOrientation)</argsstring>
        <name>setGlobalFrameBodyEphemerides</name>
        <param>
          <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt; &gt;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>globalFrameOrigin</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>globalFrameOrientation</declname>
        </param>
        <briefdescription>
<para>Function to define the global origin and orientation of the reference frame. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to define the global origin and orientation of the reference frame that is to be used in the simulations. This function checks the origin and orientation of the Ephemeris and RotationalEphemeris, and checks whether their origin/orientation is the same as that globalFrameOrigin and globalFrameOrientation provided as input. In particular, this function sets the ephemerisFrameToBaseFrameFunction_ anf ephemerisFrameToBaseFrameLongFunction_ variables of the <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> objects, which provide a time-dependent translation of the global origin to the body&apos;s ephemeris origin. In case of an inconsistency in the current and requried frames, this function throws an error. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that constitute the environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>globalFrameOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Global reference frame origin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>globalFrameOrientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Global referencef frame orientation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/body.h" line="1298" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/body.h" bodystart="1298" bodyend="1497"/>
      </memberdef>
      <memberdef kind="function" id="d0/d24/simulation_2environment__setup_2body_8h_1a076abaabec8a0a351b87f360bcf80034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::simulation_setup::getBodyGravitationalParameter</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string bodyName)</argsstring>
        <name>getBodyGravitationalParameter</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/body.cpp" line="96" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/body.cpp" bodystart="96" bodyend="107" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/body.h" declline="1588" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/d24/simulation_2environment__setup_2body_8h_1a4b9f890da973f59726cc664658b4d737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::simulation_setup::getGlobalFrameOrigin</definition>
        <argsstring>(const SystemOfBodies &amp;bodies)</argsstring>
        <name>getGlobalFrameOrigin</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function ot retrieve the common global translational state origin of the environment. </para>
        </briefdescription>
        <detaileddescription>
<para>Function ot retrieve the common global translational state origin of the environment. This function throws an exception if multiple bodies are found as the frame origin <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Global translational state origin of the environment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/body.cpp" line="111" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/body.cpp" bodystart="111" bodyend="135" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/body.h" declline="1597" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d0/d24/simulation_2environment__setup_2body_8h_1ac38f851637050c2749c6f0d07f998dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::setAreBodiesInPropagation</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const bool areBodiesInPropagation)</argsstring>
        <name>setAreBodiesInPropagation</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areBodiesInPropagation</declname>
        </param>
        <briefdescription>
<para>Function to set whether the bodies are currently being propagated, or not. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to set whether the bodies are currently being propagated, or not <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areBodiesInPropagation</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean defining whether the bodies are currently being propagated, or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/body.cpp" line="154" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/body.cpp" bodystart="154" bodyend="161" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/body.h" declline="1605" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d0/d24/simulation_2environment__setup_2body_8h_1ab1afe7684695451ea917a8e2c6a69e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; StateScalarType, 3, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;StateScalarType, 3, 1&gt; tudat::simulation_setup::getBodyAccelerationInBaseFramefromNumericalDifferentiation</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyWithAcceleration, const TimeType nominalEvalutationTime)</argsstring>
        <name>getBodyAccelerationInBaseFramefromNumericalDifferentiation</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyWithAcceleration</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>nominalEvalutationTime</declname>
        </param>
        <briefdescription>
<para>Function to compute the acceleration of a body, using its ephemeris and finite differences. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the acceleration of a body, using its ephemeris and 8th order finite difference and 100 s time step <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyWithAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> for which acceleration is to be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nominalEvalutationTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which acceleration is to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/body.h" line="1615" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/body.h" bodystart="1615" bodyend="1623"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a9a21fcb5d677c970747f60f2de0d9221" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::constantAerodynamicCoefficientSettings</definition>
        <argsstring>(const double referenceArea, const Eigen::Vector3d &amp;constantForceCoefficient, const bool areCoefficientsInAerodynamicFrame=true, const bool areCoefficientsInNegativeAxisDirection=true)</argsstring>
        <name>constantAerodynamicCoefficientSettings</name>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>constantForceCoefficient</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="450" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="450" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a21d533a6adbb76eb315cc0e71911510d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::scaledAerodynamicCoefficientSettings</definition>
        <argsstring>(const std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; baseSettings, const double forceScaling, const double momentScaling, const bool isScalingAbsolute)</argsstring>
        <name>scaledAerodynamicCoefficientSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
          <declname>baseSettings</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>forceScaling</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>momentScaling</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isScalingAbsolute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="461" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="461" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a31a1d88501bdf79bc28e24d0327af329" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::scaledAerodynamicCoefficientSettings</definition>
        <argsstring>(const std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; baseSettings, const Eigen::Vector3d forceScaling, const Eigen::Vector3d momentScaling, const bool isScalingAbsolute)</argsstring>
        <name>scaledAerodynamicCoefficientSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
          <declname>baseSettings</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>forceScaling</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>momentScaling</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isScalingAbsolute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="472" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="472" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1abf8423b7189d744991cbb980fa000e46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::scaledAerodynamicCoefficientSettings</definition>
        <argsstring>(const std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; baseSettings, const std::function&lt; Eigen::Vector3d(const double) &gt; forceScaling, const std::function&lt; Eigen::Vector3d(const double) &gt; momentScaling, const bool isScalingAbsolute)</argsstring>
        <name>scaledAerodynamicCoefficientSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
          <declname>baseSettings</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const double) &gt;</type>
          <declname>forceScaling</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const double) &gt;</type>
          <declname>momentScaling</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isScalingAbsolute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="483" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="483" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a017e69d4fe0aeeb08912b442afb64ad7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::customAerodynamicCoefficientSettings</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d(const std::vector&lt; double &gt; &amp;) &gt; forceCoefficientFunction, const std::function&lt; Eigen::Vector3d(const std::vector&lt; double &gt; &amp;) &gt; momentCoefficientFunction, const double referenceLength, const double referenceArea, const double lateralReferenceLength, const Eigen::Vector3d &amp;momentReferencePoint, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames, const bool areCoefficientsInAerodynamicFrame=true, const bool areCoefficientsInNegativeAxisDirection=true)</argsstring>
        <name>customAerodynamicCoefficientSettings</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const std::vector&lt; double &gt; &amp;) &gt;</type>
          <declname>forceCoefficientFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const std::vector&lt; double &gt; &amp;) &gt;</type>
          <declname>momentCoefficientFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceLength</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lateralReferenceLength</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>momentReferencePoint</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="493" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="493" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a4e273567032621391d56df8139521bc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::customAerodynamicCoefficientSettings</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d(const std::vector&lt; double &gt; &amp;) &gt; forceCoefficientFunction, const double referenceArea, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames, const bool areCoefficientsInAerodynamicFrame=true, const bool areCoefficientsInNegativeAxisDirection=true)</argsstring>
        <name>customAerodynamicCoefficientSettings</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const std::vector&lt; double &gt; &amp;) &gt;</type>
          <declname>forceCoefficientFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="510" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="510" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a824bbb1ff8adaa4959e43a8d560dd8e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::oneDimensionalTabulatedAerodynamicCoefficientSettings</definition>
        <argsstring>(const std::vector&lt; double &gt; independentVariables, const std::vector&lt; Eigen::Vector3d &gt; forceCoefficients, const std::vector&lt; Eigen::Vector3d &gt; momentCoefficients, const double referenceLength, const double referenceArea, const double lateralReferenceLength, const Eigen::Vector3d &amp;momentReferencePoint, const aerodynamics::AerodynamicCoefficientsIndependentVariables independentVariableName, const bool areCoefficientsInAerodynamicFrame=true, const bool areCoefficientsInNegativeAxisDirection=true, const std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>oneDimensionalTabulatedAerodynamicCoefficientSettings</name>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>independentVariables</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Vector3d &gt;</type>
          <declname>forceCoefficients</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Vector3d &gt;</type>
          <declname>momentCoefficients</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceLength</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lateralReferenceLength</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>momentReferencePoint</declname>
        </param>
        <param>
          <type>const aerodynamics::AerodynamicCoefficientsIndependentVariables</type>
          <declname>independentVariableName</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="1020" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="1020" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1af63ccbae293206f847fe1ebdccfcbc01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::oneDimensionalTabulatedAerodynamicCoefficientSettings</definition>
        <argsstring>(const std::vector&lt; double &gt; independentVariables, const std::vector&lt; Eigen::Vector3d &gt; forceCoefficients, const double referenceArea, const aerodynamics::AerodynamicCoefficientsIndependentVariables independentVariableName, const bool areCoefficientsInAerodynamicFrame=true, const bool areCoefficientsInNegativeAxisDirection=true, const std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>oneDimensionalTabulatedAerodynamicCoefficientSettings</name>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>independentVariables</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Vector3d &gt;</type>
          <declname>forceCoefficients</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const aerodynamics::AerodynamicCoefficientsIndependentVariables</type>
          <declname>independentVariableName</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="1041" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="1041" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1aedef3d3a65e1f4e00d42ecc132826509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::readGivenSizeTabulatedAerodynamicCoefficientsFromFiles</definition>
        <argsstring>(const std::map&lt; int, std::string &gt; forceCoefficientFiles, const std::map&lt; int, std::string &gt; momentCoefficientFiles, const double referenceLength, const double referenceArea, const double lateralReferenceLength, const Eigen::Vector3d &amp;momentReferencePoint, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames, const bool areCoefficientsInAerodynamicFrame=true, const bool areCoefficientsInNegativeAxisDirection=true, const std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>readGivenSizeTabulatedAerodynamicCoefficientsFromFiles</name>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>forceCoefficientFiles</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>momentCoefficientFiles</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceLength</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lateralReferenceLength</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>momentReferencePoint</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Function to create aerodynamic coefficient settings from coefficients stored in data files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create aerodynamic coefficient settings from coefficients stored in data files. Separate files are defined for the three components of the force coefficients. The file format is discussed in the Tudat wiki Note that this function requires the number of independent variables in the coefficient files to be known. If this is not the case, the readTabulatedAerodynamicCoefficientsFromFiles function should be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>forceCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (size 3) of files containing the aerodynamic force coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (size 3) of files containing the aerodynamic moment coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference length with which aerodynamic moments (about x- and z- axes) are non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area with which aerodynamic forces and moments are non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lateralReferenceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference length with which aerodynamic moments (about y-axis) is non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentReferencePoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Point w.r.t. aerodynamic moment is calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariableNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical meaning of the independent variables of the aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInAerodynamicFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInNegativeAxisDirection</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or aerodynamic frame (see areCoefficientsInAerodynamicFrame). Note that for (drag, side, lift force), the coefficients are typically defined in negative direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an interpolator settings object, where the conditions for interpolation are saved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Settings for creation of aerodynamic coefficient interface, based on contents read from files defined in forceCoefficientFiles and reference data given as input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="1088" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="1088" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a112e2c469d09d853ae04218a4e78695a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::readGivenSizeTabulatedAerodynamicCoefficientsFromFiles</definition>
        <argsstring>(const std::map&lt; int, std::string &gt; forceCoefficientFiles, const double referenceArea, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames, const bool areCoefficientsInAerodynamicFrame=true, const bool areCoefficientsInNegativeAxisDirection=true, const std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>readGivenSizeTabulatedAerodynamicCoefficientsFromFiles</name>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>forceCoefficientFiles</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Function to create aerodynamic coefficient settings from coefficients stored in data files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create aerodynamic coefficient settings from coefficients stored in data files. Separate files are defined for the three components of the force coefficients. From this function, no moment coefficients are read (set to zero for all cases). The file format is discussed in the Tudat wiki Note that this function requires the number of independent variables in the coefficient files to be known. If this is not the case, the readTabulatedAerodynamicCoefficientsFromFiles function should be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>forceCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (size 3) of files containing the aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area of aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariableNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical meaning of the independent variables of the aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInAerodynamicFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInNegativeAxisDirection</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or aerodynamic frame (see areCoefficientsInAerodynamicFrame). Note that for (drag, side, lift force), the coefficients are typically defined in negative direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an interpolator settings object, where the conditions for interpolation are saved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Settings for creation of aerodynamic coefficient interface, based on contents read from files defined in forceCoefficientFiles and reference data given as input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="1156" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="1156" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a51f20a0cc14f40cd2b1962b7af0a97d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::readTabulatedAerodynamicCoefficientsFromFiles</definition>
        <argsstring>(const std::map&lt; int, std::string &gt; forceCoefficientFiles, const std::map&lt; int, std::string &gt; momentCoefficientFiles, const double referenceLength, const double referenceArea, const double lateralReferenceLength, const Eigen::Vector3d &amp;momentReferencePoint, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames, const bool areCoefficientsInAerodynamicFrame=true, const bool areCoefficientsInNegativeAxisDirection=true, const std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>readTabulatedAerodynamicCoefficientsFromFiles</name>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>forceCoefficientFiles</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>momentCoefficientFiles</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceLength</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lateralReferenceLength</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>momentReferencePoint</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Function to create aerodynamic coefficient settings from coefficients stored in data files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create aerodynamic coefficient settings from coefficients stored in data files. Separate files are defined for the three components of the force coefficients. The file format is discussed in the Tudat wiki <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>forceCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (size 3) of files containing the aerodynamic force coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (size 3) of files containing the aerodynamic moment coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference length with which aerodynamic moments (about x- and z- axes) are non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area with which aerodynamic forces and moments are non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lateralReferenceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference length with which aerodynamic moments (about y-axis) is non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentReferencePoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Point w.r.t. aerodynamic moment is calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariableNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical meaning of the independent variables of the aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInAerodynamicFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInNegativeAxisDirection</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or aerodynamic frame (see areCoefficientsInAerodynamicFrame). Note that for (drag, side, lift force), the coefficients are typically defined in negative direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an interpolator settings object, where the conditions for interpolation are saved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Settings for creation of aerodynamic coefficient interface, based on contents read from files defined in forceCoefficientFiles and reference data given as input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" line="22" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" bodystart="22" bodyend="68" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" declline="1209" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a88d803351fb587727b11bac6c210600f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; tudat::simulation_setup::readTabulatedAerodynamicCoefficientsFromFiles</definition>
        <argsstring>(const std::map&lt; int, std::string &gt; forceCoefficientFiles, const double referenceArea, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames, const bool areCoefficientsInAerodynamicFrame=true, const bool areCoefficientsInNegativeAxisDirection=true, const std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>readTabulatedAerodynamicCoefficientsFromFiles</name>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>forceCoefficientFiles</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Function to create aerodynamic coefficient settings from coefficients stored in data files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create aerodynamic coefficient settings from coefficients stored in data files. Separate files are defined for the three components of the force coefficients. From this function, no moment coefficients are read (set to zero for all cases). The file format is discussed in the Tudat wiki <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>forceCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (size 3) of files containing the aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area of aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariableNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical meaning of the independent variables of the aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInAerodynamicFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInNegativeAxisDirection</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or aerodynamic frame (see areCoefficientsInAerodynamicFrame). Note that for (drag, side, lift force), the coefficients are typically defined in negative direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an interpolator settings object, where the conditions for interpolation are saved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Settings for creation of aerodynamic coefficient interface, based on contents read from files defined in forceCoefficientFiles and reference data given as input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" line="72" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" bodystart="72" bodyend="111" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" declline="1242" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a55518e0d5c11fbc7b7387361cb4b9f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">aerodynamics::AerodynamicCoefficientInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::AerodynamicCoefficientInterface &gt; tudat::simulation_setup::createConstantCoefficientAerodynamicCoefficientInterface</definition>
        <argsstring>(const Eigen::Vector3d constantForceCoefficient, const Eigen::Vector3d constantMomentCoefficient, const double referenceLength, const double referenceArea, const double lateralReferenceLength, const Eigen::Vector3d &amp;momentReferencePoint, const bool areCoefficientsInAerodynamicFrame=false, const bool areCoefficientsInNegativeAxisDirection=true)</argsstring>
        <name>createConstantCoefficientAerodynamicCoefficientInterface</name>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>constantForceCoefficient</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>constantMomentCoefficient</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceLength</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lateralReferenceLength</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>momentReferencePoint</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to create an aerodynamic coefficient interface containing constant coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an aerodynamic coefficient interface containing constant coefficients, As a result, the generated coefficient interface depends on zero parameters. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constantForceCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant force coefficients. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constantMomentCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant moment coefficients. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference length with which aerodynamic moments (about x- and z- axes) are non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area with which aerodynamic forces and moments are non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lateralReferenceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference length with which aerodynamic moments (about y-axis) is non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentReferencePoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Point w.r.t. aerodynamic moment is calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInAerodynamicFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInNegativeAxisDirection</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are positiver along tyhe positive axes of the body or aerodynamic frame (see areCoefficientsInAerodynamicFrame). Note that for (drag, side, lift force), the coefficients are typically defined in negative direction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Aerodynamic coefficient interface with constant coefficients. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" line="115" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" bodystart="115" bodyend="135" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" declline="1273" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1aebca1d7051342f11cc183348c96922a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">aerodynamics::AerodynamicCoefficientInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::AerodynamicCoefficientInterface &gt; tudat::simulation_setup::createZeroParameterAerodynamicCoefficientInterface</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d() &gt; constantForceCoefficientFunction, const std::function&lt; Eigen::Vector3d() &gt; constantMomentCoefficientFunction, const double referenceLength, const double referenceArea, const double lateralReferenceLength, const Eigen::Vector3d &amp;momentReferencePoint, const bool areCoefficientsInAerodynamicFrame, const bool areCoefficientsInNegativeAxisDirection)</argsstring>
        <name>createZeroParameterAerodynamicCoefficientInterface</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d() &gt;</type>
          <declname>constantForceCoefficientFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector3d() &gt;</type>
          <declname>constantMomentCoefficientFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceLength</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lateralReferenceLength</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>momentReferencePoint</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to create an aerodynamic coefficient interface containing constant coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" line="139" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" bodystart="139" bodyend="159" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" declline="1284" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a5b367486148925d60f75dd9f56e5c048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">aerodynamics::AerodynamicCoefficientInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::AerodynamicCoefficientInterface &gt; tudat::simulation_setup::createTabulatedCoefficientAerodynamicCoefficientInterface</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; independentVariables, const boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt; forceCoefficients, const boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt; momentCoefficients, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames, const double referenceLength, const double referenceArea, const double lateralReferenceLength, const Eigen::Vector3d &amp;momentReferencePoint, const bool areCoefficientsInAerodynamicFrame=false, const bool areCoefficientsInNegativeAxisDirection=true, const std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>createTabulatedCoefficientAerodynamicCoefficientInterface</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt;</type>
          <declname>independentVariables</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt;</type>
          <declname>forceCoefficients</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt;</type>
          <declname>momentCoefficients</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceLength</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceArea</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lateralReferenceLength</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>momentReferencePoint</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInAerodynamicFrame</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>areCoefficientsInNegativeAxisDirection</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Factory function for tabulated (N-D independent variables) aerodynamic coefficient interface. </para>
        </briefdescription>
        <detaileddescription>
<para>Factory function for tabulated (N-D independent variables) aerodynamic coefficient interface. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Values of indepependent variables at which the coefficients in the input multi arrays are defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Values of force coefficients at independent variables defined by independentVariables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Values of moment coefficients at independent variables defined by independentVariables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference length with which aerodynamic moments (about x- and z- axes) are non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference area with which aerodynamic forces and moments are non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lateralReferenceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference length with which aerodynamic moments (about y-axis) is non-dimensionalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentReferencePoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Point w.r.t. aerodynamic moment is calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariableNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector with identifiers the physical meaning of each independent variable of the aerodynamic coefficients. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInAerodynamicFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areCoefficientsInNegativeAxisDirection</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or aerodynamic frame (see areCoefficientsInAerodynamicFrame). Note that for (drag, side, lift force), the coefficients are typically defined in negative direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an interpolator settings object, where the conditions for interpolation are saved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tabulated aerodynamic coefficient interface pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="1325" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="1325" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a3c576cc0af504064d9476400761e350b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">aerodynamics::AerodynamicCoefficientInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::AerodynamicCoefficientInterface &gt; tudat::simulation_setup::createUnivariateTabulatedCoefficientAerodynamicCoefficientInterface</definition>
        <argsstring>(const std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; coefficientSettings, const std::string &amp;body)</argsstring>
        <name>createUnivariateTabulatedCoefficientAerodynamicCoefficientInterface</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
          <declname>coefficientSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Factory function for tabulated (1-D independent variables) aerodynamic coefficient interface from coefficient settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Factory function for tabulated (1-D independent variables) aerodynamic coefficient interface from coefficient settings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficientSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for aerodynamic coefficient interface, must be of derived type <ref refid="d1/d41/classtudat_1_1simulation__setup_1_1TabulatedAerodynamicCoefficientSettings_3_011_01_4" kindref="compound">TabulatedAerodynamicCoefficientSettings&lt; 1 &gt;</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which coefficient interface is to be made. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tabulated aerodynamic coefficient interface pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" line="163" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" bodystart="163" bodyend="213" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" declline="1397" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1a82605526b042abdbcf056fbac08a4b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">aerodynamics::AerodynamicCoefficientInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::AerodynamicCoefficientInterface &gt; tudat::simulation_setup::createTabulatedCoefficientAerodynamicCoefficientInterface</definition>
        <argsstring>(const std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; coefficientSettings, const std::string &amp;body)</argsstring>
        <name>createTabulatedCoefficientAerodynamicCoefficientInterface</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
          <declname>coefficientSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Factory function for tabulated aerodynamic coefficient interface from coefficient settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Factory function for tabulated aerodynamic coefficient interface from coefficient settings. This function is included to allow easier interface between the non-templated general createAerodynamicCoefficientInterface and the templated createTabulatedCoefficientAerodynamicCoefficientInterface. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficientSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for aerodynamic coefficient interface, must be of derived type TabulatedAerodynamicCoefficientSettings&lt; NumberOfDimensions &gt;/ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which coefficient interface is to be made. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tabulated aerodynamic coefficient interface pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" line="1414" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" bodystart="1414" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1d/createAerodynamicCoefficientInterface_8h_1ab47b9a0c89d05424ce3ef0547a95f4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/dc2/classtudat_1_1aerodynamics_1_1AerodynamicCoefficientInterface" kindref="compound">aerodynamics::AerodynamicCoefficientInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::AerodynamicCoefficientInterface &gt; tudat::simulation_setup::createAerodynamicCoefficientInterface</definition>
        <argsstring>(const std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; coefficientSettings, const std::string &amp;body)</argsstring>
        <name>createAerodynamicCoefficientInterface</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
          <declname>coefficientSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Function to create an aerodynamic coefficient interface. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create and aerodynamic coefficient interface.</para>
<para>Function to create an aerodynamic coefficient interface from interface settings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficientSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the aerodynamic coefficient interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which aerodynamic coefficients are to be made. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Aerodynamic coefficient interface pointer of reqyested type and settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" line="217" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicCoefficientInterface.cpp" bodystart="217" bodyend="374" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicCoefficientInterface.h" declline="1453" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d56/createAerodynamicControlSurfaces_8h_1adc9d731b626c3bc75f16f6591ab09aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfIndependentVariables</declname>
            <defname>NumberOfIndependentVariables</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d0/d13/classtudat_1_1simulation__setup_1_1ControlSurfaceIncrementAerodynamicCoefficientSettings" kindref="compound">ControlSurfaceIncrementAerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ControlSurfaceIncrementAerodynamicCoefficientSettings &gt; tudat::simulation_setup::readGivenSizeTabulatedControlIncrementAerodynamicCoefficientsFromFiles</definition>
        <argsstring>(const std::map&lt; int, std::string &gt; forceCoefficientFiles, const std::map&lt; int, std::string &gt; momentCoefficientFiles, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames)</argsstring>
        <name>readGivenSizeTabulatedControlIncrementAerodynamicCoefficientsFromFiles</name>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>forceCoefficientFiles</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>momentCoefficientFiles</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <briefdescription>
<para>Function to create control surface aerodynamic coefficient settings fom coefficients stored in data files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create control surface aerodynamic coefficient settings fom coefficients stored in data files. Separate files are defined for the three components of the force coefficients. The file format is discussed in the Tudat wiki Note that this function requires the number of independent variables in the coefficient files to be known. If this is not the case, the readTabulatedAerodynamicCoefficientsFromFiles function should be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>forceCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (size 3) of files containing the aerodynamic force coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (size 3) of files containing the aerodynamic moment coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariableNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical meaning of the independent variables of the aerodynamic coefficient </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Settings for creation of control surface aerodynamic coefficient interface, based on contents read from files defined in forceCoefficientFiles and momentCoefficientFiles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" line="251" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" bodystart="251" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="d8/d56/createAerodynamicControlSurfaces_8h_1a6c2ba79aecb00d8062cf7bbc197a4e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfIndependentVariables</declname>
            <defname>NumberOfIndependentVariables</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d0/d13/classtudat_1_1simulation__setup_1_1ControlSurfaceIncrementAerodynamicCoefficientSettings" kindref="compound">ControlSurfaceIncrementAerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ControlSurfaceIncrementAerodynamicCoefficientSettings &gt; tudat::simulation_setup::readGivenSizeTabulatedControlIncrementAerodynamicCoefficientsFromFiles</definition>
        <argsstring>(const std::map&lt; int, std::string &gt; forceCoefficientFiles, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames)</argsstring>
        <name>readGivenSizeTabulatedControlIncrementAerodynamicCoefficientsFromFiles</name>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>forceCoefficientFiles</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <briefdescription>
<para>Function to create control surface aerodynamic coefficient settings fom coefficients stored in data files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create control surface aerodynamic coefficient settings fom coefficients stored in data files. Separate files are defined for the three components of the force coefficients. From this function, no moment coefficients are read (set to zero for all cases). The file format is discussed in the Tudat wiki Note that this function requires the number of independent variables in the coefficient files to be known. If this is not the case, the readTabulatedAerodynamicCoefficientsFromFiles function should be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>forceCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (size 3) of files containing the aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariableNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical meaning of the independent variables of the aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Settings for creation of control surface aerodynamic coefficient interface, based on contents read from files defined in forceCoefficientFiles and reference data given as input </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" line="294" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" bodystart="294" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="d8/d56/createAerodynamicControlSurfaces_8h_1af033f75b331ad8c7034ecfd28c8bc2a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d0/d13/classtudat_1_1simulation__setup_1_1ControlSurfaceIncrementAerodynamicCoefficientSettings" kindref="compound">ControlSurfaceIncrementAerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ControlSurfaceIncrementAerodynamicCoefficientSettings &gt; tudat::simulation_setup::readTabulatedControlIncrementAerodynamicCoefficientsFromFiles</definition>
        <argsstring>(const std::map&lt; int, std::string &gt; forceCoefficientFiles, const std::map&lt; int, std::string &gt; momentCoefficientFiles, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames)</argsstring>
        <name>readTabulatedControlIncrementAerodynamicCoefficientsFromFiles</name>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>forceCoefficientFiles</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>momentCoefficientFiles</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <briefdescription>
<para>Function to create control surface aerodynamic coefficient settings fom coefficients stored in data files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create control surface aerodynamic coefficient settings fom coefficients stored in data files. Separate files are defined for the three components of the force coefficients. The file format is discussed in the Tudat wiki <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>forceCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (containing entries at key = 0,1 and/or 2, denoting coefficients in x, y and z direction) of files containing the aerodynamic force coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (containing entries at key = 0,1 and/or 2, denoting coefficients in x, y and z direction) of files containing the aerodynamic moment coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariableNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical meaning of the independent variables of the aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Settings for creation of control surface aerodynamic coefficient interface, based on contents read from files defined in forceCoefficientFiles and momentCoefficientFiles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicControlSurfaces.cpp" line="21" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicControlSurfaces.cpp" bodystart="21" bodyend="56" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" declline="328" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d56/createAerodynamicControlSurfaces_8h_1ae0353fce3d5fea32066f9326e4954c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d0/d13/classtudat_1_1simulation__setup_1_1ControlSurfaceIncrementAerodynamicCoefficientSettings" kindref="compound">ControlSurfaceIncrementAerodynamicCoefficientSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ControlSurfaceIncrementAerodynamicCoefficientSettings &gt; tudat::simulation_setup::readTabulatedControlIncrementAerodynamicCoefficientsFromFiles</definition>
        <argsstring>(const std::map&lt; int, std::string &gt; forceCoefficientFiles, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames)</argsstring>
        <name>readTabulatedControlIncrementAerodynamicCoefficientsFromFiles</name>
        <param>
          <type>const std::map&lt; int, std::string &gt;</type>
          <declname>forceCoefficientFiles</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <briefdescription>
<para>Function to create control surface aerodynamic coefficient settings fom coefficients stored in data files. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create control surface aerodynamic coefficient settings fom coefficients stored in data files. Separate files are defined for the three components of the force coefficients. From this function, no moment coefficients are read (set to zero for all cases). The file format is discussed in the Tudat wiki <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>forceCoefficientFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>List (containing entries at key = 0,1 and/or 2, denoting coefficients in x, y and z direction) of files containing the aerodynamic force coefficients. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariableNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical meaning of the independent variables of the aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Settings for creation of control surface aerodynamic coefficient interface, based on contents read from files defined in forceCoefficientFiles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicControlSurfaces.cpp" line="60" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicControlSurfaces.cpp" bodystart="60" bodyend="92" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" declline="345" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d56/createAerodynamicControlSurfaces_8h_1a3cc226eb3c2b37db94290cfe3596b0b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="db/d60/classtudat_1_1aerodynamics_1_1ControlSurfaceIncrementAerodynamicInterface" kindref="compound">aerodynamics::ControlSurfaceIncrementAerodynamicInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::ControlSurfaceIncrementAerodynamicInterface &gt; tudat::simulation_setup::createTabulatedControlSurfaceIncrementAerodynamicCoefficientInterface</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; independentVariables, const boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt; forceCoefficients, const boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt; momentCoefficients, const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt; independentVariableNames)</argsstring>
        <name>createTabulatedControlSurfaceIncrementAerodynamicCoefficientInterface</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt;</type>
          <declname>independentVariables</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt;</type>
          <declname>forceCoefficients</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; Eigen::Vector3d, static_cast&lt; size_t &gt;(NumberOfDimensions) &gt;</type>
          <declname>momentCoefficients</declname>
        </param>
        <param>
          <type>const std::vector&lt; aerodynamics::AerodynamicCoefficientsIndependentVariables &gt;</type>
          <declname>independentVariableNames</declname>
        </param>
        <briefdescription>
<para>Function to create control surface aerodynamic coefficient settings from user-defined coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create control surface aerodynamic coefficient settings from crom user-defined coefficients. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Values of indepependent variables at which the coefficients in the input multi arrays are defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Values of force coefficients at independent variables defined by independentVariables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Values of moment coefficients at independent variables defined by independentVariables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariableNames</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector with identifiers the physical meaning of each independent variable of the aerodynamic coefficients (must contain exactly one entry of control_surface_deflection_dependent) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Settings for creation of control surface aerodynamic coefficient interface, based on contents read from files defined in forceCoefficientFiles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" line="366" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" bodystart="366" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="d8/d56/createAerodynamicControlSurfaces_8h_1aabc286b4aaf52a81ac027fc767296989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>NumberOfDimensions</declname>
            <defname>NumberOfDimensions</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="db/d60/classtudat_1_1aerodynamics_1_1ControlSurfaceIncrementAerodynamicInterface" kindref="compound">aerodynamics::ControlSurfaceIncrementAerodynamicInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::ControlSurfaceIncrementAerodynamicInterface &gt; tudat::simulation_setup::createTabulatedControlSurfaceIncrementAerodynamicCoefficientInterface</definition>
        <argsstring>(const std::shared_ptr&lt; ControlSurfaceIncrementAerodynamicCoefficientSettings &gt; coefficientSettings, const std::string &amp;body)</argsstring>
        <name>createTabulatedControlSurfaceIncrementAerodynamicCoefficientInterface</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/d13/classtudat_1_1simulation__setup_1_1ControlSurfaceIncrementAerodynamicCoefficientSettings" kindref="compound">ControlSurfaceIncrementAerodynamicCoefficientSettings</ref> &gt;</type>
          <declname>coefficientSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Function to create tabulated control surface aerodynamic coefficients from associated settings object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create tabulated control surface aerodynamic coefficients from associated settings object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficientSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing settings for tabulated control surface aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which coefficients are to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object used to compute/update control surface aerodynamics during propagation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" line="417" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" bodystart="417" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="d8/d56/createAerodynamicControlSurfaces_8h_1a0eccf420954ecde8fc973205a631157b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/d60/classtudat_1_1aerodynamics_1_1ControlSurfaceIncrementAerodynamicInterface" kindref="compound">aerodynamics::ControlSurfaceIncrementAerodynamicInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::ControlSurfaceIncrementAerodynamicInterface &gt; tudat::simulation_setup::createControlSurfaceIncrementAerodynamicCoefficientInterface</definition>
        <argsstring>(const std::shared_ptr&lt; ControlSurfaceIncrementAerodynamicCoefficientSettings &gt; coefficientSettings, const std::string &amp;body)</argsstring>
        <name>createControlSurfaceIncrementAerodynamicCoefficientInterface</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/d13/classtudat_1_1simulation__setup_1_1ControlSurfaceIncrementAerodynamicCoefficientSettings" kindref="compound">ControlSurfaceIncrementAerodynamicCoefficientSettings</ref> &gt;</type>
          <declname>coefficientSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Function to tabulated control surface aerodynamic coefficients from associated settings object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to tabulated control surface aerodynamic coefficients from associated settings object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficientSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing settings for control surface aerodynamic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which coefficients are to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object used to compute/update control surface aerodynamics during propagation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicControlSurfaces.cpp" line="97" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAerodynamicControlSurfaces.cpp" bodystart="97" bodyend="162" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAerodynamicControlSurfaces.h" declline="449" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1a6f3e88c1726230907c21d9c07e1b39da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AtmosphereSettings &gt; tudat::simulation_setup::exponentialAtmosphereSettings</definition>
        <argsstring>(const double densityScaleHeight, const double densityAtZeroAltitude, const double constantTemperature, const double specificGasConstant=physical_constants::SPECIFIC_GAS_CONSTANT_AIR, const double ratioOfSpecificHeats=1.4)</argsstring>
        <name>exponentialAtmosphereSettings</name>
        <param>
          <type>const double</type>
          <declname>densityScaleHeight</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>densityAtZeroAltitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>constantTemperature</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>specificGasConstant</declname>
          <defval>physical_constants::SPECIFIC_GAS_CONSTANT_AIR</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>ratioOfSpecificHeats</declname>
          <defval>1.4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="882" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="882" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1ad29950ea7440e4812670d7ab5926d83c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AtmosphereSettings &gt; tudat::simulation_setup::exponentialAtmosphereSettings</definition>
        <argsstring>(const double densityScaleHeight, const double densityAtZeroAltitude)</argsstring>
        <name>exponentialAtmosphereSettings</name>
        <param>
          <type>const double</type>
          <declname>densityScaleHeight</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>densityAtZeroAltitude</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="894" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="894" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1aaa01318ff51e94888d2835371cc5acf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AtmosphereSettings &gt; tudat::simulation_setup::exponentialAtmosphereSettings</definition>
        <argsstring>(const std::string &amp;bodyName)</argsstring>
        <name>exponentialAtmosphereSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="902" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="902" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1a4357cde598911c2b1c14d9f92c2e29aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AtmosphereSettings &gt; tudat::simulation_setup::nrlmsise00AtmosphereSettings</definition>
        <argsstring>()</argsstring>
        <name>nrlmsise00AtmosphereSettings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="924" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="924" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1a587d1eff139643016d8f85b4a30bd81b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AtmosphereSettings &gt; tudat::simulation_setup::customConstantTemperatureAtmosphereSettings</definition>
        <argsstring>(const std::function&lt; double(const double) &gt; densityFunction, const double constantTemperature, const double specificGasConstant=physical_constants::SPECIFIC_GAS_CONSTANT_AIR, const double ratioOfSpecificHeats=1.4)</argsstring>
        <name>customConstantTemperatureAtmosphereSettings</name>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>densityFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>constantTemperature</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>specificGasConstant</declname>
          <defval>physical_constants::SPECIFIC_GAS_CONSTANT_AIR</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>ratioOfSpecificHeats</declname>
          <defval>1.4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="930" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="930" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1a9d0dc774b78c6e8b51241721224a9cca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AtmosphereSettings &gt; tudat::simulation_setup::customConstantTemperatureAtmosphereSettings</definition>
        <argsstring>(const DensityFunction densityFunction, const double constantTemperature, const double specificGasConstant=physical_constants::SPECIFIC_GAS_CONSTANT_AIR, const double ratioOfSpecificHeats=1.4)</argsstring>
        <name>customConstantTemperatureAtmosphereSettings</name>
        <param>
          <type>const DensityFunction</type>
          <declname>densityFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>constantTemperature</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>specificGasConstant</declname>
          <defval>physical_constants::SPECIFIC_GAS_CONSTANT_AIR</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>ratioOfSpecificHeats</declname>
          <defval>1.4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="943" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="943" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1a0e3069b0b5181d6b694ee80d3e784329" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AtmosphereSettings &gt; tudat::simulation_setup::scaledAtmosphereSettings</definition>
        <argsstring>(const std::shared_ptr&lt; AtmosphereSettings &gt; baseSettings, const std::function&lt; double(const double) &gt; scaling, const bool isScalingAbsolute)</argsstring>
        <name>scaledAtmosphereSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
          <declname>baseSettings</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isScalingAbsolute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="954" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="954" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1a174bbb65574e6c30396bc82636701e26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AtmosphereSettings &gt; tudat::simulation_setup::scaledAtmosphereSettings</definition>
        <argsstring>(const std::shared_ptr&lt; AtmosphereSettings &gt; baseSettings, const double scaling, const bool isScalingAbsolute)</argsstring>
        <name>scaledAtmosphereSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
          <declname>baseSettings</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isScalingAbsolute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="962" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="962" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1adf4426d90616ba5e143cd91a880639bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d53/classtudat_1_1simulation__setup_1_1WindModelSettings" kindref="compound">WindModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; WindModelSettings &gt; tudat::simulation_setup::customWindModelSettings</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d(const double, const double, const double, const double) &gt; windFunction, const reference_frames::AerodynamicsReferenceFrames associatedFrame=reference_frames::vertical_frame)</argsstring>
        <name>customWindModelSettings</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const double, const double, const double, const double) &gt;</type>
          <declname>windFunction</declname>
        </param>
        <param>
          <type>const reference_frames::AerodynamicsReferenceFrames</type>
          <declname>associatedFrame</declname>
          <defval>reference_frames::vertical_frame</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="972" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="972" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1a534645a7989982be56dc61ba686fe5e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d53/classtudat_1_1simulation__setup_1_1WindModelSettings" kindref="compound">WindModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; WindModelSettings &gt; tudat::simulation_setup::constantWindModelSettings</definition>
        <argsstring>(const Eigen::Vector3d constantWindVelocity, const reference_frames::AerodynamicsReferenceFrames associatedFrame=reference_frames::vertical_frame)</argsstring>
        <name>constantWindModelSettings</name>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>constantWindVelocity</declname>
        </param>
        <param>
          <type>const reference_frames::AerodynamicsReferenceFrames</type>
          <declname>associatedFrame</declname>
          <defval>reference_frames::vertical_frame</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" line="979" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" bodystart="979" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1a65c9c2d47c1c962ac4a0939cc9a87e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d9f/classtudat_1_1aerodynamics_1_1WindModel" kindref="compound">aerodynamics::WindModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::WindModel &gt; tudat::simulation_setup::createWindModel</definition>
        <argsstring>(const std::shared_ptr&lt; WindModelSettings &gt; windSettings, const std::string &amp;body)</argsstring>
        <name>createWindModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d53/classtudat_1_1simulation__setup_1_1WindModelSettings" kindref="compound">WindModelSettings</ref> &gt;</type>
          <declname>windSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Function to create a wind model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a wind model based on model-specific settings for the wind model. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>windSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the wind model that is to be created, defined a pointer to an object of class (derived from) <ref refid="d1/d53/classtudat_1_1simulation__setup_1_1WindModelSettings" kindref="compound">WindModelSettings</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body for which the wind model is to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Wind model created according to settings in windSettings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAtmosphereModel.cpp" line="33" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAtmosphereModel.cpp" bodystart="33" bodyend="79" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" declline="994" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="da/d7a/createAtmosphereModel_8h_1afa2008c14f3c1381b659031097359d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0f/classtudat_1_1aerodynamics_1_1AtmosphereModel" kindref="compound">aerodynamics::AtmosphereModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::AtmosphereModel &gt; tudat::simulation_setup::createAtmosphereModel</definition>
        <argsstring>(const std::shared_ptr&lt; AtmosphereSettings &gt; atmosphereSettings, const std::string &amp;body)</argsstring>
        <name>createAtmosphereModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
          <declname>atmosphereSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Function to create an atmosphere model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an atmosphere model based on model-specific settings for the atmosphere. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>atmosphereSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the atmosphere model that is to be created, defined a pointer to an object of class (derived from) <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body for which the atmosphere model is to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Atmosphere model created according to settings in atmosphereSettings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAtmosphereModel.cpp" line="82" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createAtmosphereModel.cpp" bodystart="82" bodyend="244" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createAtmosphereModel.h" declline="1006" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/createBodies_8h_1a7508bb95081527172aae27c0cfb60b93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::addAerodynamicCoefficientInterface</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string bodyName, const std::shared_ptr&lt; AerodynamicCoefficientSettings &gt; aerodynamicCoefficientSettings)</argsstring>
        <name>addAerodynamicCoefficientInterface</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d16/classtudat_1_1simulation__setup_1_1AerodynamicCoefficientSettings" kindref="compound">AerodynamicCoefficientSettings</ref> &gt;</type>
          <declname>aerodynamicCoefficientSettings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" line="31" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" bodystart="31" bodyend="41" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodies.h" declline="75" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/createBodies_8h_1a77c366edede3645fe64f9bdf478ae896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::addRadiationPressureInterface</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string bodyName, const std::shared_ptr&lt; RadiationPressureInterfaceSettings &gt; radiationPressureSettings)</argsstring>
        <name>addRadiationPressureInterface</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/df6/classtudat_1_1simulation__setup_1_1RadiationPressureInterfaceSettings" kindref="compound">RadiationPressureInterfaceSettings</ref> &gt;</type>
          <declname>radiationPressureSettings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" line="43" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" bodystart="43" bodyend="54" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodies.h" declline="80" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/createBodies_8h_1a1a901cd4c7fb233bd77a270cc4b4d967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::setSimpleRotationSettingsFromSpice</definition>
        <argsstring>(const BodyListSettings &amp;bodySettings, const std::string &amp;bodyName, const double spiceEvaluation)</argsstring>
        <name>setSimpleRotationSettingsFromSpice</name>
        <param>
          <type>const <ref refid="d4/d68/classtudat_1_1simulation__setup_1_1BodyListSettings" kindref="compound">BodyListSettings</ref> &amp;</type>
          <declname>bodySettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>spiceEvaluation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" line="56" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" bodystart="56" bodyend="76" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodies.h" declline="137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/createBodies_8h_1a9236027b0f3db907d7c265a8fe834fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::addEmptyTabulateEphemeris</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string &amp;bodyName, const std::string &amp;ephemerisOrigin=&quot;&quot;)</argsstring>
        <name>addEmptyTabulateEphemeris</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ephemerisOrigin</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" line="78" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" bodystart="78" bodyend="89" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodies.h" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/createBodies_8h_1a13443db470b890875b4d8fedb1ab48cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; std::string, std::shared_ptr&lt; <ref refid="d1/d41/structtudat_1_1simulation__setup_1_1BodySettings" kindref="compound">BodySettings</ref> &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; std::string, std::shared_ptr&lt; BodySettings &gt; &gt; &gt; tudat::simulation_setup::determineBodyCreationOrder</definition>
        <argsstring>(const std::map&lt; std::string, std::shared_ptr&lt; BodySettings &gt; &gt; &amp;bodySettings)</argsstring>
        <name>determineBodyCreationOrder</name>
        <param>
          <type>const std::map&lt; std::string, std::shared_ptr&lt; <ref refid="d1/d41/structtudat_1_1simulation__setup_1_1BodySettings" kindref="compound">BodySettings</ref> &gt; &gt; &amp;</type>
          <declname>bodySettings</declname>
        </param>
        <briefdescription>
<para>Function that determines the order in which bodies are to be created. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that determines the order in which bodies are to be created, to ensure that any dependency between body models are correctly handled. Currently, no dependencies exist that force any particular creation order. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodySettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body settings (with map key the body name) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of pairs: name and body settings of that body </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" line="93" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" bodystart="93" bodyend="107" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodies.h" declline="150" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/createBodies_8h_1ae5cd8ae0bc58f6d1c2da5278873b46cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref></type>
        <definition>SystemOfBodies tudat::simulation_setup::createSystemOfBodies</definition>
        <argsstring>(const BodyListSettings &amp;bodySettings)</argsstring>
        <name>createSystemOfBodies</name>
        <param>
          <type>const <ref refid="d4/d68/classtudat_1_1simulation__setup_1_1BodyListSettings" kindref="compound">BodyListSettings</ref> &amp;</type>
          <declname>bodySettings</declname>
        </param>
        <briefdescription>
<para>Function to create a map of bodies objects. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a msap of body objects based on model-specific settings for the bodies, containing settings for each relevant environment model. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodySettings</parametername>
</parameternamelist>
<parameterdescription>
<para>List of settings for the bodies that are to be created, defined as a map of pointers to an object of class <ref refid="d1/d41/structtudat_1_1simulation__setup_1_1BodySettings" kindref="compound">BodySettings</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of bodies created according to settings in bodySettings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" line="111" column="16" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodies.cpp" bodystart="111" bodyend="250" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodies.h" declline="161" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="dc/d49/createBodyShapeModel_8h_1aa0ff2237a0767b77c8738d4e5a97a032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d35/classtudat_1_1basic__astrodynamics_1_1BodyShapeModel" kindref="compound">basic_astrodynamics::BodyShapeModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; basic_astrodynamics::BodyShapeModel &gt; tudat::simulation_setup::createBodyShapeModel</definition>
        <argsstring>(const std::shared_ptr&lt; BodyShapeSettings &gt; shapeSettings, const std::string &amp;body)</argsstring>
        <name>createBodyShapeModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" kindref="compound">BodyShapeSettings</ref> &gt;</type>
          <declname>shapeSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Function to create a body shape model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a body shape model based on model-specific settings for the shape. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shapeSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the shape model that is to be created, defined a pointer to an object of class (derived from) <ref refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" kindref="compound">BodyShapeSettings</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body for which the shape model is to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shape model created according to settings in shapeSettings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodyShapeModel.cpp" line="23" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createBodyShapeModel.cpp" bodystart="23" bodyend="81" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodyShapeModel.h" declline="149" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d49/createBodyShapeModel_8h_1a35f13245e7116993d52fdfe97dde05fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" kindref="compound">BodyShapeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BodyShapeSettings &gt; tudat::simulation_setup::sphericalBodyShapeSettings</definition>
        <argsstring>(const double radius)</argsstring>
        <name>sphericalBodyShapeSettings</name>
        <param>
          <type>const double</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodyShapeModel.h" line="154" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodyShapeModel.h" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="dc/d49/createBodyShapeModel_8h_1ae5ca853d709d58a4165c55275994778e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" kindref="compound">BodyShapeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BodyShapeSettings &gt; tudat::simulation_setup::fromSpiceSphericalBodyShapeSettings</definition>
        <argsstring>()</argsstring>
        <name>fromSpiceSphericalBodyShapeSettings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodyShapeModel.h" line="159" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodyShapeModel.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="dc/d49/createBodyShapeModel_8h_1a4c93e2a8367297bfcb7d1efac41da108" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" kindref="compound">BodyShapeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BodyShapeSettings &gt; tudat::simulation_setup::oblateSphericalBodyShapeSettings</definition>
        <argsstring>(const double equatorialRadius, const double flattening)</argsstring>
        <name>oblateSphericalBodyShapeSettings</name>
        <param>
          <type>const double</type>
          <declname>equatorialRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>flattening</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodyShapeModel.h" line="164" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createBodyShapeModel.h" bodystart="164" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a819e44b1832409227cda3529be654512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/dc1/classtudat_1_1ephemerides_1_1Ephemeris" kindref="compound">ephemerides::Ephemeris</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ephemerides::Ephemeris &gt; tudat::simulation_setup::createTabulatedEphemerisFromSpice</definition>
        <argsstring>(const std::string &amp;body, const TimeType initialTime, const TimeType endTime, const TimeType timeStep, const std::string &amp;observerName, const std::string &amp;referenceFrameName, std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=std::make_shared&lt; interpolators::LagrangeInterpolatorSettings &gt;(8))</argsstring>
        <name>createTabulatedEphemerisFromSpice</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>endTime</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>timeStep</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>observerName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>referenceFrameName</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>std::make_shared&lt; <ref refid="d3/d92/classtudat_1_1interpolators_1_1LagrangeInterpolatorSettings" kindref="compound">interpolators::LagrangeInterpolatorSettings</ref> &gt;(8)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="844" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="844" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a57f857329f458c8f4f63b6ae7c361432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d1/dc1/classtudat_1_1ephemerides_1_1Ephemeris" kindref="compound">ephemerides::Ephemeris</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ephemerides::Ephemeris &gt; tudat::simulation_setup::createTabulatedEphemerisFromTLE</definition>
        <argsstring>(const std::string &amp;body, const TimeType initialTime, const TimeType endTime, const TimeType timeStep, const std::string &amp;observerName, const std::string &amp;referenceFrameName, std::shared_ptr&lt; ephemerides::Tle &gt; tle, std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=std::make_shared&lt; interpolators::LagrangeInterpolatorSettings &gt;(8))</argsstring>
        <name>createTabulatedEphemerisFromTLE</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>endTime</declname>
        </param>
        <param>
          <type>const TimeType</type>
          <declname>timeStep</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>observerName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>referenceFrameName</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/dd0/classtudat_1_1ephemerides_1_1Tle" kindref="compound">ephemerides::Tle</ref> &gt;</type>
          <declname>tle</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>std::make_shared&lt; <ref refid="d3/d92/classtudat_1_1interpolators_1_1LagrangeInterpolatorSettings" kindref="compound">interpolators::LagrangeInterpolatorSettings</ref> &gt;(8)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="879" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="879" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a8c550dc7d543b937a51d8b399764d5a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::keplerEphemerisSettings</definition>
        <argsstring>(const Eigen::Vector6d &amp;initialStateInKeplerianElements, const double epochOfInitialState, const double centralBodyGravitationalParameter, const std::string &amp;referenceFrameOrigin=&quot;SSB&quot;, const std::string &amp;referenceFrameOrientation=&quot;ECLIPJ2000&quot;, const double rootFinderAbsoluteTolerance=200.0 *std::numeric_limits&lt; double &gt;::epsilon(), const double rootFinderMaximumNumberOfIterations=1000.0)</argsstring>
        <name>keplerEphemerisSettings</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>initialStateInKeplerianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>epochOfInitialState</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>referenceFrameOrigin</declname>
          <defval>&quot;SSB&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>referenceFrameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rootFinderAbsoluteTolerance</declname>
          <defval>200.0 *std::numeric_limits&lt; double &gt;::epsilon()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rootFinderMaximumNumberOfIterations</declname>
          <defval>1000.0</defval>
        </param>
        <briefdescription>
<para>@get_docstring(keplerEphemerisSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="913" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="913" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1ab620e4d4d627fee430485194de1ad152" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::keplerEphemerisFromSpiceSettings</definition>
        <argsstring>(const std::string body, const double epochOfInitialState, const double centralBodyGravitationalParameter, const std::string &amp;referenceFrameOrigin=&quot;SSB&quot;, const std::string &amp;referenceFrameOrientation=&quot;ECLIPJ2000&quot;, const double rootFinderAbsoluteTolerance=200.0 *std::numeric_limits&lt; double &gt;::epsilon(), const double rootFinderMaximumNumberOfIterations=1000.0)</argsstring>
        <name>keplerEphemerisFromSpiceSettings</name>
        <param>
          <type>const std::string</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>epochOfInitialState</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>referenceFrameOrigin</declname>
          <defval>&quot;SSB&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>referenceFrameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rootFinderAbsoluteTolerance</declname>
          <defval>200.0 *std::numeric_limits&lt; double &gt;::epsilon()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rootFinderMaximumNumberOfIterations</declname>
          <defval>1000.0</defval>
        </param>
        <briefdescription>
<para>@get_docstring(keplerEphemerisFromSpiceSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="930" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="930" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1ac62876e377e9e9a1f173a1fd1e9b2a3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::approximatePlanetPositionsSettings</definition>
        <argsstring>(const ephemerides::ApproximatePlanetPositionsBase::BodiesWithEphemerisData bodyIdentifier)</argsstring>
        <name>approximatePlanetPositionsSettings</name>
        <param>
          <type>const <ref refid="d8/dcb/classtudat_1_1ephemerides_1_1ApproximatePlanetPositionsBase_1aa698885dcabac2815a6205d5502724d2" kindref="member">ephemerides::ApproximatePlanetPositionsBase::BodiesWithEphemerisData</ref></type>
          <declname>bodyIdentifier</declname>
        </param>
        <briefdescription>
<para>@get_docstring(approximatePlanetPositionsSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="951" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="951" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a6c119bad5d1434a70be962dad76a1f51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::approximatePlanetPositionsSettings</definition>
        <argsstring>(const std::string bodyName)</argsstring>
        <name>approximatePlanetPositionsSettings</name>
        <param>
          <type>const std::string</type>
          <declname>bodyName</declname>
        </param>
        <briefdescription>
<para>@get_docstring(approximatePlanetPositionsSettings,1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="960" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="960" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a08a7e0f96ebe3a3814790261749cc91b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::approximatePlanetPositionsSettings</definition>
        <argsstring>()</argsstring>
        <name>approximatePlanetPositionsSettings</name>
        <briefdescription>
<para>@get_docstring(approximatePlanetPositionsSettings,2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="978" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="978" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a42e6cbae07b7de045e0fd019fd5356c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::directSpiceEphemerisSettings</definition>
        <argsstring>(const std::string frameOrigin=&quot;SSB&quot;, const std::string frameOrientation=&quot;ECLIPJ2000&quot;, const bool correctForStellarAberration=false, const bool correctForLightTimeAberration=false, const bool convergeLightTimeAberration=false)</argsstring>
        <name>directSpiceEphemerisSettings</name>
        <param>
          <type>const std::string</type>
          <declname>frameOrigin</declname>
          <defval>&quot;SSB&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>frameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>correctForStellarAberration</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>correctForLightTimeAberration</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>convergeLightTimeAberration</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>@get_docstring(directSpiceEphemerisSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="985" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="985" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a9987483338ea825ffc320b8bb0732dfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::directSpiceEphemerisSettings</definition>
        <argsstring>(const std::string frameOrigin=&quot;SSB&quot;, const std::string frameOrientation=&quot;ECLIPJ2000&quot;, const std::string bodyNameOverride=&quot;&quot;)</argsstring>
        <name>directSpiceEphemerisSettings</name>
        <param>
          <type>const std::string</type>
          <declname>frameOrigin</declname>
          <defval>&quot;SSB&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>frameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyNameOverride</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(directSpiceEphemerisSettings,1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="998" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="998" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a484559d40daf2a14daad7a02a0187269" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::interpolatedSpiceEphemerisSettings</definition>
        <argsstring>(double initialTime, double finalTime, double timeStep, std::string frameOrigin=&quot;SSB&quot;, std::string frameOrientation=&quot;ECLIPJ2000&quot;, std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=std::make_shared&lt; interpolators::LagrangeInterpolatorSettings &gt;(6), const std::string bodyNameOverride=&quot;&quot;)</argsstring>
        <name>interpolatedSpiceEphemerisSettings</name>
        <param>
          <type>double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>finalTime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeStep</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>frameOrigin</declname>
          <defval>&quot;SSB&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>frameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>std::make_shared&lt; <ref refid="d3/d92/classtudat_1_1interpolators_1_1LagrangeInterpolatorSettings" kindref="compound">interpolators::LagrangeInterpolatorSettings</ref> &gt;(6)</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyNameOverride</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(interpolatedSpiceEphemerisSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="1008" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="1008" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1affee34cc924a85c3ab8ba07eacbec14e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::tabulatedEphemerisSettings</definition>
        <argsstring>(const std::map&lt; double, Eigen::Vector6d &gt; &amp;bodyStateHistory, std::string frameOrigin=&quot;SSB&quot;, std::string frameOrientation=&quot;ECLIPJ2000&quot;)</argsstring>
        <name>tabulatedEphemerisSettings</name>
        <param>
          <type>const std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>bodyStateHistory</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>frameOrigin</declname>
          <defval>&quot;SSB&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>frameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(tabulatedEphemerisSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="1023" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="1023" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1ade60d5e79a533ccfcb6db0b7d90a5c34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::constantEphemerisSettings</definition>
        <argsstring>(const Eigen::Vector6d &amp;constantState, const std::string &amp;frameOrigin=&quot;SSB&quot;, const std::string &amp;frameOrientation=&quot;ECLIPJ2000&quot;)</argsstring>
        <name>constantEphemerisSettings</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>constantState</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameOrigin</declname>
          <defval>&quot;SSB&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(constantEphemerisSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="1033" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="1033" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1aa1f06572e01ac6ecc3207a3e8a98aa35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::customEphemerisSettings</definition>
        <argsstring>(const std::function&lt; Eigen::Vector6d(const double) &gt; customStateFunction, const std::string &amp;frameOrigin=&quot;SSB&quot;, const std::string &amp;frameOrientation=&quot;ECLIPJ2000&quot;)</argsstring>
        <name>customEphemerisSettings</name>
        <param>
          <type>const std::function&lt; Eigen::Vector6d(const double) &gt;</type>
          <declname>customStateFunction</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameOrigin</declname>
          <defval>&quot;SSB&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(customEphemerisSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="1043" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="1043" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1ab5e5aa8c522b8ba4047889224f83a653" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::directTleEphemerisSettings</definition>
        <argsstring>(std::shared_ptr&lt; ephemerides::Tle &gt; tle, const std::string frameOrigin=&quot;Earth&quot;, const std::string frameOrientation=&quot;J2000&quot;)</argsstring>
        <name>directTleEphemerisSettings</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/dd0/classtudat_1_1ephemerides_1_1Tle" kindref="compound">ephemerides::Tle</ref> &gt;</type>
          <declname>tle</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>frameOrigin</declname>
          <defval>&quot;Earth&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>frameOrientation</declname>
          <defval>&quot;J2000&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="1052" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="1052" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a13dc7d1c5efd6897f2bace7424b06acb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::interpolatedTleEphemerisSettings</definition>
        <argsstring>(const double initialTime, const double finalTime, const double timeStep, std::shared_ptr&lt; ephemerides::Tle &gt; tle, std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings=std::make_shared&lt; interpolators::LagrangeInterpolatorSettings &gt;(6), const bool useLongDoubleStates=false, const std::string &amp;frameOrigin=&quot;Earth&quot;, const std::string &amp;frameOrientation=&quot;J2000&quot;)</argsstring>
        <name>interpolatedTleEphemerisSettings</name>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeStep</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/dd0/classtudat_1_1ephemerides_1_1Tle" kindref="compound">ephemerides::Tle</ref> &gt;</type>
          <declname>tle</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>std::make_shared&lt; <ref refid="d3/d92/classtudat_1_1interpolators_1_1LagrangeInterpolatorSettings" kindref="compound">interpolators::LagrangeInterpolatorSettings</ref> &gt;(6)</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>useLongDoubleStates</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameOrigin</declname>
          <defval>&quot;Earth&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameOrientation</declname>
          <defval>&quot;J2000&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="1060" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="1060" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a3f6f0485a627f0318456d083c12bbf42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::scaledEphemerisSettings</definition>
        <argsstring>(const std::shared_ptr&lt; EphemerisSettings &gt; baseSettings, const double scaling, const bool isScalingAbsolute)</argsstring>
        <name>scaledEphemerisSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
          <declname>baseSettings</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isScalingAbsolute</declname>
        </param>
        <briefdescription>
<para>@get_docstring(scaledEphemerisSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="1074" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="1074" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a6b1b25db4099e65803e27ddf69784208" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::scaledEphemerisSettings</definition>
        <argsstring>(const std::shared_ptr&lt; EphemerisSettings &gt; baseSettings, const Eigen::Vector6d scaling, const bool isScalingAbsolute)</argsstring>
        <name>scaledEphemerisSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
          <declname>baseSettings</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isScalingAbsolute</declname>
        </param>
        <briefdescription>
<para>@get_docstring(scaledEphemerisSettings, 1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="1083" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="1083" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1ad23c4b100e5a0d17329423cc96e2c0bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::scaledEphemerisSettings</definition>
        <argsstring>(const std::shared_ptr&lt; EphemerisSettings &gt; baseSettings, const std::function&lt; Eigen::Vector6d(const double) &gt; scaling, const bool isScalingAbsolute)</argsstring>
        <name>scaledEphemerisSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
          <declname>baseSettings</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector6d(const double) &gt;</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isScalingAbsolute</declname>
        </param>
        <briefdescription>
<para>@get_docstring(scaledEphemerisSettings, 2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" line="1092" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" bodystart="1092" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1a3c2d32c32bf681fb73f214311a592132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/dc1/classtudat_1_1ephemerides_1_1Ephemeris" kindref="compound">ephemerides::Ephemeris</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ephemerides::Ephemeris &gt; tudat::simulation_setup::createBodyEphemeris</definition>
        <argsstring>(const std::shared_ptr&lt; EphemerisSettings &gt; ephemerisSettings, const std::string &amp;bodyName)</argsstring>
        <name>createBodyEphemeris</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
          <declname>ephemerisSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <briefdescription>
<para>Function to create an ephemeris model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createEphemeris.cpp" line="33" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createEphemeris.cpp" bodystart="33" bodyend="397" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" declline="1109" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d3/dc1/createEphemeris_8h_1adf3432a329286f49ba02a3fa9f356db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, double &gt;</type>
        <definition>std::pair&lt; double, double &gt; tudat::simulation_setup::getSafeInterpolationInterval</definition>
        <argsstring>(const std::shared_ptr&lt; ephemerides::Ephemeris &gt; ephemerisModel)</argsstring>
        <name>getSafeInterpolationInterval</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/dc1/classtudat_1_1ephemerides_1_1Ephemeris" kindref="compound">ephemerides::Ephemeris</ref> &gt;</type>
          <declname>ephemerisModel</declname>
        </param>
        <briefdescription>
<para>Function that retrieves the time interval at which an ephemeris can be safely interrogated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createEphemeris.cpp" line="400" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createEphemeris.cpp" bodystart="400" bodyend="422" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createEphemeris.h" declline="1121" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="db/dc4/createFlightConditions_8h_1a8176a86863da0572d92052fb1ea03686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/da9/classtudat_1_1aerodynamics_1_1AtmosphericFlightConditions" kindref="compound">aerodynamics::AtmosphericFlightConditions</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::AtmosphericFlightConditions &gt; tudat::simulation_setup::createAtmosphericFlightConditions</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyWithFlightConditions, const std::shared_ptr&lt; Body &gt; centralBody, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::function&lt; double() &gt; angleOfAttackFunction=std::function&lt; double() &gt;(), const std::function&lt; double() &gt; angleOfSideslipFunction=std::function&lt; double() &gt;(), const std::function&lt; double() &gt; bankAngleFunction=std::function&lt; double() &gt;(), const std::function&lt; void(const double) &gt; angleUpdateFunction=std::function&lt; void(const double) &gt;())</argsstring>
        <name>createAtmosphericFlightConditions</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyWithFlightConditions</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::function&lt; double() &gt;</type>
          <declname>angleOfAttackFunction</declname>
          <defval>std::function&lt; double() &gt;()</defval>
        </param>
        <param>
          <type>const std::function&lt; double() &gt;</type>
          <declname>angleOfSideslipFunction</declname>
          <defval>std::function&lt; double() &gt;()</defval>
        </param>
        <param>
          <type>const std::function&lt; double() &gt;</type>
          <declname>bankAngleFunction</declname>
          <defval>std::function&lt; double() &gt;()</defval>
        </param>
        <param>
          <type>const std::function&lt; void(const double) &gt;</type>
          <declname>angleUpdateFunction</declname>
          <defval>std::function&lt; void(const double) &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create an atmospheric flight conditions object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an atmospheric flight conditions object, which is responsible for calculating the various dependent variables required for calculation of the aerodynamic acceleration <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyWithFlightConditions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> for which flight conditions are to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> in the atmosphere of which bodyWithFlightConditions is flying </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body undergoing acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body with the atmosphere causing acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angleOfAttackFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the current angle of attack (default 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angleOfSideslipFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the current angle of sideslip (default 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bankAngleFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the current bank angle (default 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angleUpdateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the aerodynamic angles to the current time (default none). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flight conditions object for given bodies and settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" line="33" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" bodystart="33" bodyend="128" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createFlightConditions.h" declline="45" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="db/dc4/createFlightConditions_8h_1a4805f9250c99d7586a04d489a9701bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/df2/classtudat_1_1aerodynamics_1_1FlightConditions" kindref="compound">aerodynamics::FlightConditions</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::FlightConditions &gt; tudat::simulation_setup::createFlightConditions</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyWithFlightConditions, const std::shared_ptr&lt; Body &gt; centralBody, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration)</argsstring>
        <name>createFlightConditions</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyWithFlightConditions</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <briefdescription>
<para>Function to create a flight conditions object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a flight conditions object, which is responsible for calculating various dependent variables (altitude, latitude, etc ) for non-atmospheric flight <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyWithFlightConditions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> for which flight conditions are to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> in the atmosphere of which bodyWithFlightConditions is flying </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body undergoing acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body with the atmosphere causing acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flight conditions object for given bodies and settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" line="131" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" bodystart="131" bodyend="177" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createFlightConditions.h" declline="65" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="db/dc4/createFlightConditions_8h_1ae9e6e25fe49d4118aa737fdf8c8fbffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/dbc/classtudat_1_1aerodynamics_1_1TrimOrientationCalculator" kindref="compound">aerodynamics::TrimOrientationCalculator</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::TrimOrientationCalculator &gt; tudat::simulation_setup::setTrimmedConditions</definition>
        <argsstring>(const std::shared_ptr&lt; aerodynamics::AtmosphericFlightConditions &gt; flightConditions)</argsstring>
        <name>setTrimmedConditions</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/da9/classtudat_1_1aerodynamics_1_1AtmosphericFlightConditions" kindref="compound">aerodynamics::AtmosphericFlightConditions</ref> &gt;</type>
          <declname>flightConditions</declname>
        </param>
        <briefdescription>
<para>Function to set the angle of attack to trimmed conditions. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to set the angle of attack to trimmed conditions. Using this function requires the aerodynamic coefficient interface to be dependent on the angle of attack. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flightConditions</parametername>
</parameternamelist>
<parameterdescription>
<para>Flight conditions for body that is to have trimmed conditions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" line="181" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" bodystart="181" bodyend="202" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createFlightConditions.h" declline="77" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/dc4/createFlightConditions_8h_1a4eac8511b175b741edf7459cbf96f75a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/dbc/classtudat_1_1aerodynamics_1_1TrimOrientationCalculator" kindref="compound">aerodynamics::TrimOrientationCalculator</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::TrimOrientationCalculator &gt; tudat::simulation_setup::setTrimmedConditions</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyWithFlightConditions)</argsstring>
        <name>setTrimmedConditions</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyWithFlightConditions</declname>
        </param>
        <briefdescription>
<para>Function to set the angle of attack to trimmed conditions. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to set the angle of attack to trimmed conditions. Using this function requires the aerodynamic coefficient interface to be dependent on the angle of attack. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyWithFlightConditions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> for which trimmed conditions are to be imposed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" line="205" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" bodystart="205" bodyend="216" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createFlightConditions.h" declline="87" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/dc4/createFlightConditions_8h_1aaa0f0d0bcff6c61b59d7ba08b52e1ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::setGuidanceAnglesFunctions</definition>
        <argsstring>(const std::shared_ptr&lt; aerodynamics::AerodynamicGuidance &gt; aerodynamicGuidance, const std::shared_ptr&lt; reference_frames::AerodynamicAngleCalculator &gt; angleCalculator)</argsstring>
        <name>setGuidanceAnglesFunctions</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/da7/classtudat_1_1aerodynamics_1_1AerodynamicGuidance" kindref="compound">aerodynamics::AerodynamicGuidance</ref> &gt;</type>
          <declname>aerodynamicGuidance</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d02/classtudat_1_1reference__frames_1_1AerodynamicAngleCalculator" kindref="compound">reference_frames::AerodynamicAngleCalculator</ref> &gt;</type>
          <declname>angleCalculator</declname>
        </param>
        <briefdescription>
<para>Function that must be called to link the AerodynamicGuidance object to the simulation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that must be called to link the AerodynamicGuidance object to the simulation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aerodynamicGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Object computing the current aerodynamic angles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angleCalculator</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that handles all aerodynamic angles in the numerical propagation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" line="219" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" bodystart="219" bodyend="228" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createFlightConditions.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dc4/createFlightConditions_8h_1a7723e70dbadac6c4d9fb5de1606ea22c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::setGuidanceAnglesFunctions</definition>
        <argsstring>(const std::shared_ptr&lt; aerodynamics::AerodynamicGuidance &gt; aerodynamicGuidance, const std::shared_ptr&lt; simulation_setup::Body &gt; bodyWithAngles)</argsstring>
        <name>setGuidanceAnglesFunctions</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/da7/classtudat_1_1aerodynamics_1_1AerodynamicGuidance" kindref="compound">aerodynamics::AerodynamicGuidance</ref> &gt;</type>
          <declname>aerodynamicGuidance</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyWithAngles</declname>
        </param>
        <briefdescription>
<para>Function that must be called to link the AerodynamicGuidance object to the simulation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that must be called to link the AerodynamicGuidance object to the simulation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aerodynamicGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Object computing the current aerodynamic angles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyWithAngles</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> for which the orientation is to be controlled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" line="231" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" bodystart="231" bodyend="248" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createFlightConditions.h" declline="107" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/dc4/createFlightConditions_8h_1ab6807661de3b4269ff014dec9fea7978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::setAerodynamicOrientationFunctions</definition>
        <argsstring>(const std::shared_ptr&lt; simulation_setup::Body &gt; body, const std::function&lt; double() &gt; angleOfAttackFunction=std::function&lt; double() &gt;(), const std::function&lt; double() &gt; angleOfSideslipFunction=std::function&lt; double() &gt;(), const std::function&lt; double() &gt; bankAngleFunction=std::function&lt; double() &gt;(), const std::function&lt; void(const double) &gt; angleUpdateFunction=std::function&lt; void(const double) &gt;())</argsstring>
        <name>setAerodynamicOrientationFunctions</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const std::function&lt; double() &gt;</type>
          <declname>angleOfAttackFunction</declname>
          <defval>std::function&lt; double() &gt;()</defval>
        </param>
        <param>
          <type>const std::function&lt; double() &gt;</type>
          <declname>angleOfSideslipFunction</declname>
          <defval>std::function&lt; double() &gt;()</defval>
        </param>
        <param>
          <type>const std::function&lt; double() &gt;</type>
          <declname>bankAngleFunction</declname>
          <defval>std::function&lt; double() &gt;()</defval>
        </param>
        <param>
          <type>const std::function&lt; void(const double) &gt;</type>
          <declname>angleUpdateFunction</declname>
          <defval>std::function&lt; void(const double) &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" line="250" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createFlightConditions.cpp" bodystart="250" bodyend="266" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createFlightConditions.h" declline="111" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/dd4/createGravityField_8h_1a64280fcd6cb838a26734b8bcfb6ff0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::simulation_setup::getPathForSphericalHarmonicsModel</definition>
        <argsstring>(const SphericalHarmonicsModel sphericalHarmonicsModel)</argsstring>
        <name>getPathForSphericalHarmonicsModel</name>
        <param>
          <type>const SphericalHarmonicsModel</type>
          <declname>sphericalHarmonicsModel</declname>
        </param>
        <briefdescription>
<para>Get the path of the SH file for a SH model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityField.cpp" line="26" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityField.cpp" bodystart="26" bodyend="46" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" declline="268" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dc/dd4/createGravityField_8h_1aaae0fd82ecc5d3ada107e77622715c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::simulation_setup::getReferenceFrameForSphericalHarmonicsModel</definition>
        <argsstring>(const SphericalHarmonicsModel sphericalHarmonicsModel)</argsstring>
        <name>getReferenceFrameForSphericalHarmonicsModel</name>
        <param>
          <type>const SphericalHarmonicsModel</type>
          <declname>sphericalHarmonicsModel</declname>
        </param>
        <briefdescription>
<para>Get the associated reference frame for a SH model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityField.cpp" line="49" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityField.cpp" bodystart="49" bodyend="66" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" declline="276" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dc/dd4/createGravityField_8h_1aa4bdd0340e18f5526ba2ab11f590e2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/d51/classtudat_1_1simulation__setup_1_1SphericalHarmonicsGravityFieldSettings" kindref="compound">SphericalHarmonicsGravityFieldSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SphericalHarmonicsGravityFieldSettings &gt; tudat::simulation_setup::createHomogeneousTriAxialEllipsoidGravitySettings</definition>
        <argsstring>(const double axisA, const double axisB, const double axisC, const double ellipsoidDensity, const int maximumDegree, const int maximumOrder, const std::string &amp;associatedReferenceFrame)</argsstring>
        <name>createHomogeneousTriAxialEllipsoidGravitySettings</name>
        <param>
          <type>const double</type>
          <declname>axisA</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>axisB</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>axisC</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ellipsoidDensity</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumDegree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumOrder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedReferenceFrame</declname>
        </param>
        <briefdescription>
<para>Function to create gravity field settings for a homogeneous triaxial ellipsoid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityField.cpp" line="353" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityField.cpp" bodystart="353" bodyend="372" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" declline="411" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/dd4/createGravityField_8h_1a859ea8402c912e2e2fa21bb66f1f6802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, double &gt;</type>
        <definition>std::pair&lt; double, double &gt; tudat::simulation_setup::readGravityFieldFile</definition>
        <argsstring>(const std::string &amp;fileName, const int maximumDegree, const int maximumOrder, std::pair&lt; Eigen::MatrixXd, Eigen::MatrixXd &gt; &amp;coefficients, const int gravitationalParameterIndex, const int referenceRadiusIndex)</argsstring>
        <name>readGravityFieldFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumDegree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumOrder</declname>
        </param>
        <param>
          <type>std::pair&lt; Eigen::MatrixXd, Eigen::MatrixXd &gt; &amp;</type>
          <declname>coefficients</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>gravitationalParameterIndex</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>referenceRadiusIndex</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Function to read a gravity field file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityField.cpp" line="104" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityField.cpp" bodystart="104" bodyend="211" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" declline="436" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="dc/dd4/createGravityField_8h_1a3a55b387c87d144cb28ccb06db7f8ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/d5c/classtudat_1_1gravitation_1_1GravityFieldModel" kindref="compound">gravitation::GravityFieldModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::GravityFieldModel &gt; tudat::simulation_setup::createGravityFieldModel</definition>
        <argsstring>(const std::shared_ptr&lt; GravityFieldSettings &gt; gravityFieldSettings, const std::string &amp;body, const SystemOfBodies &amp;bodies, const std::vector&lt; std::shared_ptr&lt; GravityFieldVariationSettings &gt; &gt; &amp;gravityFieldVariationSettings)</argsstring>
        <name>createGravityFieldModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/de0/classtudat_1_1simulation__setup_1_1GravityFieldSettings" kindref="compound">GravityFieldSettings</ref> &gt;</type>
          <declname>gravityFieldSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
          <defval><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref>()</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt; &gt; &amp;</type>
          <declname>gravityFieldVariationSettings</declname>
          <defval>std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create a gravity field model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityField.cpp" line="214" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityField.cpp" bodystart="214" bodyend="350" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" declline="453" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/dd4/createGravityField_8h_1abc58cc814c2d9909020425181256c67f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/de0/classtudat_1_1simulation__setup_1_1GravityFieldSettings" kindref="compound">GravityFieldSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldSettings &gt; tudat::simulation_setup::centralGravitySettings</definition>
        <argsstring>(const double gravitationalParameter)</argsstring>
        <name>centralGravitySettings</name>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <briefdescription>
<para>@get_docstring(centralGravitySettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" line="461" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" bodystart="461" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="dc/dd4/createGravityField_8h_1ac0e536118fd44f6470eb4424670610e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/de0/classtudat_1_1simulation__setup_1_1GravityFieldSettings" kindref="compound">GravityFieldSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldSettings &gt; tudat::simulation_setup::centralGravityFromSpiceSettings</definition>
        <argsstring>()</argsstring>
        <name>centralGravityFromSpiceSettings</name>
        <briefdescription>
<para>@get_docstring(centralGravityFromSpiceSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" line="469" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" bodystart="469" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="dc/dd4/createGravityField_8h_1a2776adbb9c224d2d73025c0477b251fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/de0/classtudat_1_1simulation__setup_1_1GravityFieldSettings" kindref="compound">GravityFieldSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldSettings &gt; tudat::simulation_setup::sphericalHarmonicsGravitySettings</definition>
        <argsstring>(const double gravitationalParameter, const double referenceRadius, const Eigen::MatrixXd normalizedCosineCoefficients, const Eigen::MatrixXd normalizedSineCoefficients, const std::string associatedReferenceFrame)</argsstring>
        <name>sphericalHarmonicsGravitySettings</name>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceRadius</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>normalizedCosineCoefficients</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>normalizedSineCoefficients</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>associatedReferenceFrame</declname>
        </param>
        <briefdescription>
<para>@get_docstring(sphericalHarmonicsGravitySettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" line="476" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityField.h" bodystart="476" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1ac02055ac9fd945ac52d99877c09c534d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, std::vector&lt; std::complex&lt; double &gt; &gt; &gt;</type>
        <definition>std::map&lt; int, std::vector&lt; std::complex&lt; double &gt; &gt; &gt; tudat::simulation_setup::getFullLoveNumbersVector</definition>
        <argsstring>(const std::complex&lt; double &gt; constantLoveNumber, const int maximumDegree, const int maximumOrder)</argsstring>
        <name>getFullLoveNumbersVector</name>
        <param>
          <type>const std::complex&lt; double &gt;</type>
          <declname>constantLoveNumber</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumDegree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumOrder</declname>
        </param>
        <briefdescription>
<para>Function to create constant complex Love number list for a range of degrees and orders. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create constant complex Love number list for a range of degrees and orders, maximum degree and order are given as input, minimum degree and order are 2 and 0, respectively. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constantLoveNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Love number to be set at each degree and order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumDegree</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum degree for Love numbers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum order for Love numbers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of Love numbers with requested settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" line="270" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" bodystart="270" bodyend="294" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" declline="278" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1aadf44dc3fd9f29189309d5596e6c6f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, std::vector&lt; std::complex&lt; double &gt; &gt; &gt;</type>
        <definition>std::map&lt; int, std::vector&lt; std::complex&lt; double &gt; &gt; &gt; tudat::simulation_setup::getFullLoveNumbersVector</definition>
        <argsstring>(const double constantLoveNumber, const int maximumDegree, const int maximumOrder)</argsstring>
        <name>getFullLoveNumbersVector</name>
        <param>
          <type>const double</type>
          <declname>constantLoveNumber</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumDegree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumOrder</declname>
        </param>
        <briefdescription>
<para>Function to create constant real Love number list for a range of degrees and orders. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create constant real Love number list for a range of degrees and orders, maximum degree and order are given as input, minimum degree and order are 2 and 0, respectively. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constantLoveNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Love number to be set at each degree and order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumDegree</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum degree for Love numbers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum order for Love numbers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of Love numbers with requested settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" line="297" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" bodystart="297" bodyend="301" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" declline="290" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1a50797cacb2b547be8f6e9e9cb31c2dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::complex&lt; double &gt; &gt; tudat::simulation_setup::getLoveNumberPerDegree</definition>
        <argsstring>(const std::complex&lt; double &gt; loveNumber, const int degree)</argsstring>
        <name>getLoveNumberPerDegree</name>
        <param>
          <type>const std::complex&lt; double &gt;</type>
          <declname>loveNumber</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>degree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" line="304" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" bodystart="304" bodyend="314" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" declline="294" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1a6c2d934890fa2e49c05d0c6729e09a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::complex&lt; double &gt; &gt; tudat::simulation_setup::getLoveNumberPerDegree</definition>
        <argsstring>(const double loveNumber, const int degree)</argsstring>
        <name>getLoveNumberPerDegree</name>
        <param>
          <type>const double</type>
          <declname>loveNumber</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>degree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" line="316" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" bodystart="316" bodyend="321" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" declline="298" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1afbb9556cd28ff24f1d062f4dd4152e98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldVariationSettings &gt; tudat::simulation_setup::fixedSingleDegreeLoveNumberGravityFieldVariationSettings</definition>
        <argsstring>(const std::string deformingBody, const double loveNumber, const int degree)</argsstring>
        <name>fixedSingleDegreeLoveNumberGravityFieldVariationSettings</name>
        <param>
          <type>const std::string</type>
          <declname>deformingBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>loveNumber</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>degree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" line="302" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" bodystart="302" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1a0433d0330f650c9983cccecbe94e11a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldVariationSettings &gt; tudat::simulation_setup::fixedSingleDegreeLoveNumberGravityFieldVariationSettings</definition>
        <argsstring>(const std::string deformingBody, const std::complex&lt; double &gt; loveNumber, const int degree)</argsstring>
        <name>fixedSingleDegreeLoveNumberGravityFieldVariationSettings</name>
        <param>
          <type>const std::string</type>
          <declname>deformingBody</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt;</type>
          <declname>loveNumber</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>degree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" line="314" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" bodystart="314" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1ac15596dd2e148de5c1b8997c8effdbcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldVariationSettings &gt; tudat::simulation_setup::fixedSingleDegreeLoveNumberGravityFieldVariationSettings</definition>
        <argsstring>(const std::string deformingBody, const std::map&lt; int, double &gt; loveNumberPerDegree)</argsstring>
        <name>fixedSingleDegreeLoveNumberGravityFieldVariationSettings</name>
        <param>
          <type>const std::string</type>
          <declname>deformingBody</declname>
        </param>
        <param>
          <type>const std::map&lt; int, double &gt;</type>
          <declname>loveNumberPerDegree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" line="326" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" bodystart="326" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1a05b17e9d925b09b52994605de5e4c6c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldVariationSettings &gt; tudat::simulation_setup::fixedSingleDegreeLoveNumberGravityFieldVariationSettings</definition>
        <argsstring>(const std::string deformingBody, const std::map&lt; int, std::complex&lt; double &gt; &gt; loveNumberPerDegree)</argsstring>
        <name>fixedSingleDegreeLoveNumberGravityFieldVariationSettings</name>
        <param>
          <type>const std::string</type>
          <declname>deformingBody</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::complex&lt; double &gt; &gt;</type>
          <declname>loveNumberPerDegree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" line="340" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" bodystart="340" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1ab6ab757acb480df90d79bf23800eaadc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldVariationSettings &gt; tudat::simulation_setup::orderVariableSingleDegreeLoveNumberGravityFieldVariationSettings</definition>
        <argsstring>(const std::string deformingBody, const std::vector&lt; double &gt; loveNumber, const int degree, const std::shared_ptr&lt; ModelInterpolationSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>orderVariableSingleDegreeLoveNumberGravityFieldVariationSettings</name>
        <param>
          <type>const std::string</type>
          <declname>deformingBody</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>loveNumber</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dfb/classtudat_1_1simulation__setup_1_1ModelInterpolationSettings" kindref="compound">ModelInterpolationSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" line="355" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" bodystart="355" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1a69a1080c294bb86f3f057a6a8927b232" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldVariationSettings &gt; tudat::simulation_setup::orderVariableSingleDegreeLoveNumberGravityFieldVariationSettings</definition>
        <argsstring>(const std::string deformingBody, const std::vector&lt; std::complex&lt; double &gt; &gt; loveNumber, const int degree, const std::shared_ptr&lt; ModelInterpolationSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>orderVariableSingleDegreeLoveNumberGravityFieldVariationSettings</name>
        <param>
          <type>const std::string</type>
          <declname>deformingBody</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::complex&lt; double &gt; &gt;</type>
          <declname>loveNumber</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dfb/classtudat_1_1simulation__setup_1_1ModelInterpolationSettings" kindref="compound">ModelInterpolationSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" line="370" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" bodystart="370" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1a5afcfcd3949e745857c25ef83db75400" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldVariationSettings &gt; tudat::simulation_setup::degreeOrderVariableLoveNumberGravityFieldVariationSettings</definition>
        <argsstring>(const std::string deformingBody, const std::map&lt; int, std::vector&lt; double &gt; &gt; loveNumber, const std::shared_ptr&lt; ModelInterpolationSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>degreeOrderVariableLoveNumberGravityFieldVariationSettings</name>
        <param>
          <type>const std::string</type>
          <declname>deformingBody</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::vector&lt; double &gt; &gt;</type>
          <declname>loveNumber</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dfb/classtudat_1_1simulation__setup_1_1ModelInterpolationSettings" kindref="compound">ModelInterpolationSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" line="382" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" bodystart="382" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1a104a3df8cba70f6c9c52789aec354c08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldVariationSettings &gt; tudat::simulation_setup::degreeOrderVariableLoveNumberGravityFieldVariationSettings</definition>
        <argsstring>(const std::string deformingBody, const std::map&lt; int, std::vector&lt; std::complex&lt; double &gt; &gt; &gt; loveNumber, const std::shared_ptr&lt; ModelInterpolationSettings &gt; interpolatorSettings=nullptr)</argsstring>
        <name>degreeOrderVariableLoveNumberGravityFieldVariationSettings</name>
        <param>
          <type>const std::string</type>
          <declname>deformingBody</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::vector&lt; std::complex&lt; double &gt; &gt; &gt;</type>
          <declname>loveNumber</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/dfb/classtudat_1_1simulation__setup_1_1ModelInterpolationSettings" kindref="compound">ModelInterpolationSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" line="399" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" bodystart="399" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1a68f4ba3e6f19e27bfa6425b1622a7d43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldVariationSettings &gt; tudat::simulation_setup::tabulatedGravityFieldVariationSettings</definition>
        <argsstring>(const std::map&lt; double, Eigen::MatrixXd &gt; cosineCoefficientCorrections, const std::map&lt; double, Eigen::MatrixXd &gt; sineCoefficientCorrections, const int minimumDegree, const int minimumOrder, const std::shared_ptr&lt; interpolators::InterpolatorSettings &gt; interpolatorSettings)</argsstring>
        <name>tabulatedGravityFieldVariationSettings</name>
        <param>
          <type>const std::map&lt; double, Eigen::MatrixXd &gt;</type>
          <declname>cosineCoefficientCorrections</declname>
        </param>
        <param>
          <type>const std::map&lt; double, Eigen::MatrixXd &gt;</type>
          <declname>sineCoefficientCorrections</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>minimumDegree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>minimumOrder</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dd6/classtudat_1_1interpolators_1_1InterpolatorSettings" kindref="compound">interpolators::InterpolatorSettings</ref> &gt;</type>
          <declname>interpolatorSettings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" line="408" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" bodystart="408" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1a1a8029190ab692ebf37692d9da0124a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d0/d2b/classtudat_1_1gravitation_1_1GravityFieldVariationsSet" kindref="compound">gravitation::GravityFieldVariationsSet</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::GravityFieldVariationsSet &gt; tudat::simulation_setup::createGravityFieldModelVariationsSet</definition>
        <argsstring>(const std::string &amp;body, const SystemOfBodies &amp;bodies, const std::vector&lt; std::shared_ptr&lt; GravityFieldVariationSettings &gt; &gt; &amp;gravityFieldVariationSettings)</argsstring>
        <name>createGravityFieldModelVariationsSet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt; &gt; &amp;</type>
          <declname>gravityFieldVariationSettings</declname>
        </param>
        <briefdescription>
<para>Function to create a set of gravity field variations, stored in the associated interface class. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a set of gravity field variations, stored in the associated interface class of type GravityFieldVariationsSet <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> for which gravity field variations are createad </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects in simulations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravityFieldVariationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>List of settings for gravity field variations </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface class containing list of GravityFieldVariations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" line="27" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" bodystart="27" bodyend="105" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" declline="430" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d9/d51/createGravityFieldVariations_8h_1a50b0df96ed2d11bffcc7dd3c4479a3e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d6/d5a/classtudat_1_1gravitation_1_1GravityFieldVariations" kindref="compound">gravitation::GravityFieldVariations</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::GravityFieldVariations &gt; tudat::simulation_setup::createGravityFieldVariationsModel</definition>
        <argsstring>(const std::shared_ptr&lt; GravityFieldVariationSettings &gt; gravityFieldVariationSettings, const std::string body, const SystemOfBodies &amp;bodies)</argsstring>
        <name>createGravityFieldVariationsModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/d4b/classtudat_1_1simulation__setup_1_1GravityFieldVariationSettings" kindref="compound">GravityFieldVariationSettings</ref> &gt;</type>
          <declname>gravityFieldVariationSettings</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create a single gravity field variation object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a single gravity field variation object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gravityFieldVariationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the gravity field variation object that is to be created. Depending on the settings and type of the gravity field variations, spherical harmonic corrections are calculated a priori and handled by an interpolator during propagation, or they are directly calculated from the current state during numerical propagation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> for which gravity field variations are createad </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects in simulations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Single gravity field variation object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" line="108" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGravityFieldVariations.cpp" bodystart="108" bodyend="266" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGravityFieldVariations.h" declline="447" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d5/d8b/createGroundStations_8h_1a9450e78aa0b2b0c9ad68259023269c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::createGroundStation</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; body, const std::string groundStationName, const std::shared_ptr&lt; ground_stations::GroundStationState &gt; groundStationState)</argsstring>
        <name>createGroundStation</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>groundStationName</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/d3d/classtudat_1_1ground__stations_1_1GroundStationState" kindref="compound">ground_stations::GroundStationState</ref> &gt;</type>
          <declname>groundStationState</declname>
        </param>
        <briefdescription>
<para>Function to create a ground station from pre-defined station state object, and add it to a <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a ground station from pre-defined station state object, and add it to a <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> object in which the newly created ground station is to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groundStationName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of ground station that is to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groundStationState</parametername>
</parameternamelist>
<parameterdescription>
<para>Object defining the state of the ground-station in a body-fixed frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGroundStations.cpp" line="21" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGroundStations.cpp" bodystart="21" bodyend="32" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGroundStations.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d5/d8b/createGroundStations_8h_1ae8c7594526c9d50d6da4a7875b9a8ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::createGroundStation</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; body, const std::string groundStationName, const Eigen::Vector3d groundStationPosition, const coordinate_conversions::PositionElementTypes positionElementType=coordinate_conversions::cartesian_position)</argsstring>
        <name>createGroundStation</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>groundStationName</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>groundStationPosition</declname>
        </param>
        <param>
          <type>const coordinate_conversions::PositionElementTypes</type>
          <declname>positionElementType</declname>
          <defval>coordinate_conversions::cartesian_position</defval>
        </param>
        <briefdescription>
<para>Function to create a ground station and add it to a <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a ground station and add it to a <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> object in which the newly created ground station is to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groundStationName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of ground station that is to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groundStationPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of ground station in body-fixed frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positionElementType</parametername>
</parameternamelist>
<parameterdescription>
<para>Element type (e.g. Cartesian, spherical, etc.) of groundStationPosition. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGroundStations.cpp" line="35" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGroundStations.cpp" bodystart="35" bodyend="44" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGroundStations.h" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d5/d8b/createGroundStations_8h_1a40602a18fddaf0fe4928b8b807d36d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::createGroundStations</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::map&lt; std::pair&lt; std::string, std::string &gt;, Eigen::Vector3d &gt; &amp;groundStationsWithPosition, const coordinate_conversions::PositionElementTypes positionElementType=coordinate_conversions::cartesian_position)</argsstring>
        <name>createGroundStations</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::map&lt; std::pair&lt; std::string, std::string &gt;, Eigen::Vector3d &gt; &amp;</type>
          <declname>groundStationsWithPosition</declname>
        </param>
        <param>
          <type>const coordinate_conversions::PositionElementTypes</type>
          <declname>positionElementType</declname>
          <defval>coordinate_conversions::cartesian_position</defval>
        </param>
        <briefdescription>
<para>Function to create a set of ground stations and add them to the corresponding <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> objects. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a set of ground stations and add them to the corresponding <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> objects <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects to which the ground stations are to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groundStationsWithPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>List of ground station positions, key is first: associated body; second: ground station name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positionElementType</parametername>
</parameternamelist>
<parameterdescription>
<para>Element type (e.g. Cartesian, spherical, etc.) of Vector3d in groundStationsWithPosition. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGroundStations.cpp" line="47" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGroundStations.cpp" bodystart="47" bodyend="62" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGroundStations.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d5/d8b/createGroundStations_8h_1a63a70c68bb60601bd297a4d342b508bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::createGroundStation</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; body, const std::string &amp;bodyName, const std::shared_ptr&lt; GroundStationSettings &gt; groundStationSettings)</argsstring>
        <name>createGroundStation</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/d77/classtudat_1_1simulation__setup_1_1GroundStationSettings" kindref="compound">GroundStationSettings</ref> &gt;</type>
          <declname>groundStationSettings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGroundStations.cpp" line="64" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createGroundStations.cpp" bodystart="64" bodyend="82" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createGroundStations.h" declline="100" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d9/d17/createRadiationPressureInterface_8h_1a0ec17d401f7c3050fe4e1bb2a184eec1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/df6/classtudat_1_1simulation__setup_1_1RadiationPressureInterfaceSettings" kindref="compound">RadiationPressureInterfaceSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RadiationPressureInterfaceSettings &gt; tudat::simulation_setup::cannonBallRadiationPressureSettings</definition>
        <argsstring>(const std::string &amp;sourceBody, const double area, const double radiationPressureCoefficient, const std::vector&lt; std::string &gt; &amp;occultingBodies)</argsstring>
        <name>cannonBallRadiationPressureSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sourceBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>area</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>radiationPressureCoefficient</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>occultingBodies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" line="160" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" bodystart="160" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="d9/d17/createRadiationPressureInterface_8h_1a8c9c0dae952e9562718f256617d4d6eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/df6/classtudat_1_1simulation__setup_1_1RadiationPressureInterfaceSettings" kindref="compound">RadiationPressureInterfaceSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RadiationPressureInterfaceSettings &gt; tudat::simulation_setup::cannonBallRadiationPressureSettings</definition>
        <argsstring>(const std::string &amp;sourceBody, const double area, const std::function&lt; double(const double) &gt; radiationPressureCoefficientFunction, const std::vector&lt; std::string &gt; &amp;occultingBodies)</argsstring>
        <name>cannonBallRadiationPressureSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sourceBody</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>area</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>radiationPressureCoefficientFunction</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>occultingBodies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" line="168" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" bodystart="168" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="d9/d17/createRadiationPressureInterface_8h_1adac0e0050aaa42dedf64a59c0510cf6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/df6/classtudat_1_1simulation__setup_1_1RadiationPressureInterfaceSettings" kindref="compound">RadiationPressureInterfaceSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RadiationPressureInterfaceSettings &gt; tudat::simulation_setup::panelledRadiationPressureInterfaceSettings</definition>
        <argsstring>(const std::string &amp;sourceBody, const std::vector&lt; double &gt; &amp;emissivities, const std::vector&lt; double &gt; &amp;areas, const std::vector&lt; double &gt; &amp;diffusionCoefficients, const std::vector&lt; Eigen::Vector3d &gt; &amp;surfaceNormalsInBodyFixedFrame, const std::vector&lt; std::string &gt; &amp;occultingBodies=std::vector&lt; std::string &gt;())</argsstring>
        <name>panelledRadiationPressureInterfaceSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sourceBody</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>emissivities</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>areas</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>diffusionCoefficients</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
          <declname>surfaceNormalsInBodyFixedFrame</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>occultingBodies</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" line="288" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" bodystart="288" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="d9/d17/createRadiationPressureInterface_8h_1ae58ebc456913ed3b1302e014ad8c12ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::getOccultingBodiesInformation</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::vector&lt; std::string &gt; &amp;occultingBodies, std::vector&lt; std::function&lt; Eigen::Vector3d() &gt; &gt; &amp;occultingBodyPositions, std::vector&lt; double &gt; &amp;occultingBodyRadii)</argsstring>
        <name>getOccultingBodiesInformation</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>occultingBodies</declname>
        </param>
        <param>
          <type>std::vector&lt; std::function&lt; Eigen::Vector3d() &gt; &gt; &amp;</type>
          <declname>occultingBodyPositions</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>occultingBodyRadii</declname>
        </param>
        <briefdescription>
<para>Function to obtain (by reference) the position functions and radii of occulting bodies. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to obtain (by reference) the position functions and radii of occulting bodies. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>occultingBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies causing occultation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>occultingBodyPositions</parametername>
</parameternamelist>
<parameterdescription>
<para>List of position functions of occulting bodies (return by reference output variable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>occultingBodyRadii</parametername>
</parameternamelist>
<parameterdescription>
<para>List of radii of occulting bodies (return by reference output variable). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRadiationPressureInterface.cpp" line="26" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRadiationPressureInterface.cpp" bodystart="26" bodyend="53" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" declline="525" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d9/d17/createRadiationPressureInterface_8h_1a990c4776c1f14184f2ae2ae232a07a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::getCentralBodyInformation</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string &amp;centralBody, std::function&lt; Eigen::Vector3d() &gt; &amp;centralBodyPosition, std::function&lt; Eigen::Vector3d() &gt; &amp;centralBodyVelocity)</argsstring>
        <name>getCentralBodyInformation</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>std::function&lt; Eigen::Vector3d() &gt; &amp;</type>
          <declname>centralBodyPosition</declname>
        </param>
        <param>
          <type>std::function&lt; Eigen::Vector3d() &gt; &amp;</type>
          <declname>centralBodyVelocity</declname>
        </param>
        <briefdescription>
<para>Function to obtain (by reference) the position functions and velocity of the central body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to obtain (by reference) the position and velocity functions of the central body.</para>
<para>Function to obtain (by reference) the position functions and velocity of the central body. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Central body&apos;s position function (return by reference output variable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Central body&apos;s velocity function (return by reference output variable). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRadiationPressureInterface.cpp" line="57" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRadiationPressureInterface.cpp" bodystart="57" bodyend="75" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" declline="539" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d9/d17/createRadiationPressureInterface_8h_1a05051774c3e791cb649dd8aea5fed6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/d54/classtudat_1_1electromagnetism_1_1RadiationPressureInterface" kindref="compound">electromagnetism::RadiationPressureInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; electromagnetism::RadiationPressureInterface &gt; tudat::simulation_setup::createRadiationPressureInterface</definition>
        <argsstring>(const std::shared_ptr&lt; RadiationPressureInterfaceSettings &gt; radiationPressureInterfaceSettings, const std::string &amp;bodyName, const SystemOfBodies &amp;bodies)</argsstring>
        <name>createRadiationPressureInterface</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/df6/classtudat_1_1simulation__setup_1_1RadiationPressureInterfaceSettings" kindref="compound">RadiationPressureInterfaceSettings</ref> &gt;</type>
          <declname>radiationPressureInterfaceSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create a radiation pressure interface. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a radiation pressure interface. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radiationPressureInterfaceSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the radiation pressure interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which radiation pressure interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects to use for creation of radiation pressure interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Radiation pressure interface pointer of requested type and settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRadiationPressureInterface.cpp" line="79" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRadiationPressureInterface.cpp" bodystart="79" bodyend="358" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" declline="552" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d9/d17/createRadiationPressureInterface_8h_1ab3093b54be1ced5aa4413a3e73c491a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; double(const double) &gt;</type>
        <definition>std::function&lt; double(const double) &gt; tudat::simulation_setup::getOccultationFunction</definition>
        <argsstring>(const SystemOfBodies &amp;bodyMap, const std::string &amp;sourceBody, const std::string &amp;occultingBody, const std::string &amp;shadowedBody)</argsstring>
        <name>getOccultationFunction</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodyMap</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sourceBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>occultingBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>shadowedBody</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRadiationPressureInterface.cpp" line="360" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRadiationPressureInterface.cpp" bodystart="360" bodyend="380" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRadiationPressureInterface.h" declline="556" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1a441540f12fe8ab93e316ab9d79606e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector6d</type>
        <definition>Eigen::Vector6d tudat::simulation_setup::getStateFromSelectedStateFunction</definition>
        <argsstring>(const double currentTime, const bool useFirstFunction, const std::function&lt; Eigen::Vector6d(const double) &gt; stateFunction1, const std::function&lt; Eigen::Vector6d(const double) &gt; stateFunction2)</argsstring>
        <name>getStateFromSelectedStateFunction</name>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useFirstFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector6d(const double) &gt;</type>
          <declname>stateFunction1</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector6d(const double) &gt;</type>
          <declname>stateFunction2</declname>
        </param>
        <briefdescription>
<para>Function to retrieve a state from one of two functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRotationModel.cpp" line="35" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRotationModel.cpp" bodystart="35" bodyend="42" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" declline="396" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1ae1b5e46f51e47b7c28613a05c1c5e441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; Eigen::Vector6d(const double, bool) &gt;</type>
        <definition>std::function&lt; Eigen::Vector6d(const double, bool) &gt; tudat::simulation_setup::createRelativeStateFunction</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string orbitingBody, const std::string centralBody)</argsstring>
        <name>createRelativeStateFunction</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>orbitingBody</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>centralBody</declname>
        </param>
        <briefdescription>
<para>Function to create a state function for a body, valid both during propagation, and outside propagation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRotationModel.cpp" line="46" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRotationModel.cpp" bodystart="46" bodyend="88" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" declline="410" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1ae5573b6ac53762e7f39c5345bedf2040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/de4/classtudat_1_1ephemerides_1_1RotationalEphemeris" kindref="compound">ephemerides::RotationalEphemeris</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ephemerides::RotationalEphemeris &gt; tudat::simulation_setup::createRotationModel</definition>
        <argsstring>(const std::shared_ptr&lt; RotationModelSettings &gt; rotationModelSettings, const std::string &amp;body, const SystemOfBodies &amp;bodies)</argsstring>
        <name>createRotationModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
          <declname>rotationModelSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
          <defval><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref>()</defval>
        </param>
        <briefdescription>
<para>Function to create a rotation model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRotationModel.cpp" line="91" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/createRotationModel.cpp" bodystart="91" bodyend="305" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" declline="643" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1a2c0e104c3a8486336919439fb187cf65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationModelSettings &gt; tudat::simulation_setup::simpleRotationModelSettings</definition>
        <argsstring>(const std::string &amp;originalFrame, const std::string &amp;targetFrame, const Eigen::Quaterniond &amp;initialOrientation, const double initialTime, const double rotationRate)</argsstring>
        <name>simpleRotationModelSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>originalFrame</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>targetFrame</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>initialOrientation</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rotationRate</declname>
        </param>
        <briefdescription>
<para>@get_docstring(simpleRotationModelSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" line="649" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" bodystart="649" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1ac6be4e5c3047580e26dae3480a4bb558" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationModelSettings &gt; tudat::simulation_setup::simpleRotationModelSettings</definition>
        <argsstring>(const std::string &amp;originalFrame, const std::string &amp;targetFrame, const Eigen::Matrix3d &amp;initialOrientation, const double initialTime, const double rotationRate)</argsstring>
        <name>simpleRotationModelSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>originalFrame</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>targetFrame</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>initialOrientation</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rotationRate</declname>
        </param>
        <briefdescription>
<para>@get_docstring(simpleRotationModelSettings, 1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" line="661" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" bodystart="661" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1a2eda6cde2364f5cf2e1ce725e8e012ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationModelSettings &gt; tudat::simulation_setup::simpleRotationModelFromSpiceSettings</definition>
        <argsstring>(const std::string &amp;originalFrame, const std::string &amp;targetFrame, const std::string &amp;targetFrameSpice, const double initialTime)</argsstring>
        <name>simpleRotationModelFromSpiceSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>originalFrame</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>targetFrame</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>targetFrameSpice</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <briefdescription>
<para>@get_docstring(simpleRotationModelFromSpiceSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" line="673" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" bodystart="673" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1a9f00c70d60ef28fd4e3611b9ede462df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationModelSettings &gt; tudat::simulation_setup::constantRotationModelSettings</definition>
        <argsstring>(const std::string &amp;originalFrame, const std::string &amp;targetFrame, const Eigen::Quaterniond &amp;initialOrientation)</argsstring>
        <name>constantRotationModelSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>originalFrame</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>targetFrame</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>initialOrientation</declname>
        </param>
        <briefdescription>
<para>@get_docstring(constantRotationModelSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" line="687" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" bodystart="687" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1a175d2255b91ecdcc4254826d5db4db95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationModelSettings &gt; tudat::simulation_setup::constantRotationModelSettings</definition>
        <argsstring>(const std::string &amp;originalFrame, const std::string &amp;targetFrame, const Eigen::Matrix3d &amp;initialOrientation)</argsstring>
        <name>constantRotationModelSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>originalFrame</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>targetFrame</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>initialOrientation</declname>
        </param>
        <briefdescription>
<para>@get_docstring(constantRotationModelSettings, 1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" line="697" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" bodystart="697" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1a34924708f0308d19cc08e6d3d9c8f229" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationModelSettings &gt; tudat::simulation_setup::spiceRotationModelSettings</definition>
        <argsstring>(const std::string &amp;originalFrame, const std::string &amp;targetFrame)</argsstring>
        <name>spiceRotationModelSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>originalFrame</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>targetFrame</declname>
        </param>
        <briefdescription>
<para>@get_docstring(spiceRotationModelSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" line="707" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" bodystart="707" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1a8b1747f93e399cafe5ee5797b8088fe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationModelSettings &gt; tudat::simulation_setup::gcrsToItrsRotationModelSettings</definition>
        <argsstring>(const basic_astrodynamics::IAUConventions nutationTheory=basic_astrodynamics::iau_2006, const std::string baseFrameName=&quot;GCRS&quot;)</argsstring>
        <name>gcrsToItrsRotationModelSettings</name>
        <param>
          <type>const basic_astrodynamics::IAUConventions</type>
          <declname>nutationTheory</declname>
          <defval>basic_astrodynamics::iau_2006</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>baseFrameName</declname>
          <defval>&quot;GCRS&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(gcrsToItrsRotationModelSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" line="717" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" bodystart="717" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="d8/ddc/createRotationModel_8h_1a6d9f59954122de899805b8aec02ac540" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationModelSettings &gt; tudat::simulation_setup::synchronousRotationModelSettings</definition>
        <argsstring>(const std::string &amp;centralBodyName, const std::string &amp;baseFrameOrientation, const std::string &amp;targetFrameOrientation)</argsstring>
        <name>synchronousRotationModelSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBodyName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>baseFrameOrientation</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>targetFrameOrientation</declname>
        </param>
        <briefdescription>
<para>@get_docstring(synchronousRotationModelSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" line="727" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/createRotationModel.h" bodystart="727" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1adee2f2fd222a15a6bb2bbdac81a6a4d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/dab/classtudat_1_1simulation__setup_1_1AtmosphereSettings" kindref="compound">AtmosphereSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AtmosphereSettings &gt; tudat::simulation_setup::getDefaultAtmosphereModelSettings</definition>
        <argsstring>(const std::string &amp;bodyName, const double initialTime, const double finalTime)</argsstring>
        <name>getDefaultAtmosphereModelSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <briefdescription>
<para>Function to create default settings for a body&apos;s atmosphere model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create default settings for a body&apos;s atmosphere model. Currently set to no atmosphere, except for Earth, for which a tabulated version of the 1976 Standard Atmosphere is set. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which default atmosphere settings are to be retrieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Start time at which environment models in body are to be created (not currently used by this function, but included for consistency). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>End time up to which environment models in body are to be created (not currently used by this function, but included for consistency). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default settings for a body&apos;s atmosphere model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="26" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="26" bodyend="42" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="34" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1abee055e9166cbf941348b02189a01475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::getDefaultEphemerisSettings</definition>
        <argsstring>(const std::string &amp;bodyName, const std::string baseFrameOrientation=&quot;ECLIPJ2000&quot;)</argsstring>
        <name>getDefaultEphemerisSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>baseFrameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <briefdescription>
<para>Function to create default settings for a body&apos;s ephemeris. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create default settings for a body&apos;s ephemeris without a limitation on the time interval. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which default ephemeris settings are to be retrieved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default settings for a body&apos;s ephemeris. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="45" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="45" bodyend="57" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="45" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1ace2876479b67b8c42689d71fd24941a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/da1/classtudat_1_1simulation__setup_1_1EphemerisSettings" kindref="compound">EphemerisSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EphemerisSettings &gt; tudat::simulation_setup::getDefaultEphemerisSettings</definition>
        <argsstring>(const std::string &amp;bodyName, const double initialTime, const double finalTime, const std::string baseFrameOrientation=&quot;ECLIPJ2000&quot;, const double timeStep=300.0)</argsstring>
        <name>getDefaultEphemerisSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>baseFrameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>timeStep</declname>
          <defval>300.0</defval>
        </param>
        <briefdescription>
<para>Function to create default settings for a body&apos;s ephemeris. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create default settings for a body&apos;s ephemeris. Currently set to a creating a 6th order Lagrange interpolator from Spice. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which default ephemeris settings are to be retrieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Start time at which ephemeris is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>End time up to which ephemeris is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeStep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> step with which interpolated data from Spice should be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default settings for a body&apos;s ephemeris. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="60" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="60" bodyend="77" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="59" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1a8b33b026982f08fa6558f69d102da96f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/de0/classtudat_1_1simulation__setup_1_1GravityFieldSettings" kindref="compound">GravityFieldSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GravityFieldSettings &gt; tudat::simulation_setup::getDefaultGravityFieldSettings</definition>
        <argsstring>(const std::string &amp;bodyName, const double initialTime, const double finalTime)</argsstring>
        <name>getDefaultGravityFieldSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <briefdescription>
<para>Function to create default settings for a body&apos;s gravity field model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create default settings for a body&apos;s gravity field model. Currently set to a point mass gravty field, with the gravitational parameter obtained from Spice. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which default gravity field settings are to be retrieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Start time at which environment models in body are to be created (not currently used by this function, but included for consistency). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>End time up to which environment models in body are to be created (not currently used by this function, but included for consistency). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default settings for a body&apos;s gravity field model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="80" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="80" bodyend="176" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="77" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1afecd5385b8f4d1b3814dfc5c0290ddc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationModelSettings &gt; tudat::simulation_setup::getDefaultRotationModelSettings</definition>
        <argsstring>(const std::string &amp;bodyName, const double initialTime, const double finalTime, const std::string baseFrameOrientation=&quot;ECLIPJ2000&quot;)</argsstring>
        <name>getDefaultRotationModelSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>baseFrameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <briefdescription>
<para>Function to create default settings for a body&apos;s rotation model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create default settings from which to create a single body object.</para>
<para>Function to create default settings for a body&apos;s rotation model. Currently set to a rotation model taken directly from Spice <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which default rotation model settings are to be retrieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Start time at which environment models in body are to be created (not currently used by this function, but included for consistency). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>End time up to which environment models in body are to be created (not currently used by this function, but included for consistency). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default settings for a body&apos;s rotation model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="180" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="180" bodyend="193" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="93" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1adfa3f801921106424ae7be7a10b060d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::simulation_setup::marsTimeDependentPhaseAngleCorrectionFunction</definition>
        <argsstring>(const double secondsSinceJ2000)</argsstring>
        <name>marsTimeDependentPhaseAngleCorrectionFunction</name>
        <param>
          <type>const double</type>
          <declname>secondsSinceJ2000</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="195" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="195" bodyend="199" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="99" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1a39a98f886344f1d6b092b431780065cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d0e/classtudat_1_1simulation__setup_1_1RotationModelSettings" kindref="compound">RotationModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RotationModelSettings &gt; tudat::simulation_setup::getHighAccuracyMarsRotationModel</definition>
        <argsstring>(const double initialTime, const double finalTime)</argsstring>
        <name>getHighAccuracyMarsRotationModel</name>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="202" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="202" bodyend="271" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="101" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1a38ffea95feb0a421212bde3ec878bf06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d3c/classtudat_1_1simulation__setup_1_1BodyShapeSettings" kindref="compound">BodyShapeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BodyShapeSettings &gt; tudat::simulation_setup::getDefaultBodyShapeSettings</definition>
        <argsstring>(const std::string &amp;bodyName, const double initialTime, const double finalTime)</argsstring>
        <name>getDefaultBodyShapeSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyName</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <briefdescription>
<para>Function to create default settings for a body&apos;s shape model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create default settings for a body&apos;s shape model. Currently set to a spherical model, with the radius taken from Spice <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which default shape model settings are to be retrieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Start time at which environment models in body are to be created (not currently used by this function, but included for consistency). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>End time up to which environment models in body are to be created (not currently used by this function, but included for consistency). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="274" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="274" bodyend="284" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="114" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1a177df97e42cab895db582d1cee43d182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d41/structtudat_1_1simulation__setup_1_1BodySettings" kindref="compound">BodySettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BodySettings &gt; tudat::simulation_setup::getDefaultSingleBodySettings</definition>
        <argsstring>(const std::string &amp;body, const double initialTime, const double finalTime, const std::string baseFrameOrientation=&quot;ECLIPJ2000&quot;, const double timeStep=300.0)</argsstring>
        <name>getDefaultSingleBodySettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>baseFrameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>timeStep</declname>
          <defval>300.0</defval>
        </param>
        <briefdescription>
<para>Function to create default settings for a single for body. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create default settings for a body&apos;s rotation model.</para>
<para>Function to create default settings for a single body from which to create a object using the code in <ref refid="d2/db6/createBodies_8h_source" kindref="compound">createBodies.h</ref>/.cpp. This function is included to streamline and simplify the creation of typical celestial bodies. The default settings for the various environment models of the body are defined in the various functions defined in this file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which default settings are to be retrieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Start time at which environment models in body are to be created (included as some environment models require e.g., interpolators to be created over a certain time period). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>End time up to which environment models in body are to be created (included as some environment models require e.g., interpolators to be created over a certain time period). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeStep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> step with which interpolated data from Spice should be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="287" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="287" bodyend="323" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="134" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1aaf9b197214d8c0d5bc18a918997ceb7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/d68/classtudat_1_1simulation__setup_1_1BodyListSettings" kindref="compound">BodyListSettings</ref></type>
        <definition>BodyListSettings tudat::simulation_setup::getDefaultBodySettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;bodies, const double initialTime, const double finalTime, const std::string baseFrameOrigin=&quot;SSB&quot;, const std::string baseFrameOrientation=&quot;ECLIPJ2000&quot;, const double timeStep=300.0)</argsstring>
        <name>getDefaultBodySettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>finalTime</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>baseFrameOrigin</declname>
          <defval>&quot;SSB&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>baseFrameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>timeStep</declname>
          <defval>300.0</defval>
        </param>
        <briefdescription>
<para>Function to create default settings from which to create a set of body objects. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create default settings from which to create a set of body objects using the code in <ref refid="d2/db6/createBodies_8h_source" kindref="compound">createBodies.h</ref>/.cpp. This function is included to streamline and simplify the creation of typical celestial bodies. The default settings for the various environment models of the body are defined in the various functions defined in this file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies for which default settings are to be retrieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Start time at which environment models in body are to be created (included as some environment models require e.g., interpolators to be created over a certain time period). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalTime</parametername>
</parameternamelist>
<parameterdescription>
<para>End time up to which environment models in body are to be created (included as some environment models require e.g., interpolators to be created over a certain time period). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeStep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> step with which interpolated data from Spice should be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default settings from which to create a set of body objects. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="327" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="327" bodyend="345" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="157" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="db/d5e/defaultBodies_8h_1a1ea7a93becacb3320681046cb9cfc3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/d68/classtudat_1_1simulation__setup_1_1BodyListSettings" kindref="compound">BodyListSettings</ref></type>
        <definition>BodyListSettings tudat::simulation_setup::getDefaultBodySettings</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;bodies, const std::string baseFrameOrigin=&quot;SSB&quot;, const std::string baseFrameOrientation=&quot;ECLIPJ2000&quot;)</argsstring>
        <name>getDefaultBodySettings</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>baseFrameOrigin</declname>
          <defval>&quot;SSB&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>baseFrameOrientation</declname>
          <defval>&quot;ECLIPJ2000&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to create default settings from which to create a set of body objects, without stringent limitations on time-interval of validity of environment.</para>
<para>Function to create default settings from which to create a set of body objects using the code in <ref refid="d2/db6/createBodies_8h_source" kindref="compound">createBodies.h</ref>/.cpp. This function is included to streamline and simplify the creation of typical celestial bodies. The default settings for the various environment models of the body are defined in the various functions defined in this file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies for which default settings are to be retrieved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default settings from which to create a set of body objects.</para>
</simplesect>
Function to create default settings from which to create a set of body objects, without stringent limitations on time-interval of validity of environment. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" line="349" column="18" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/environment_setup/defaultBodies.cpp" bodystart="349" bodyend="364" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/environment_setup/defaultBodies.h" declline="175" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="d6/d35/createAccelerationPartials_8h_1aeefec1d4cffcc58d4eaab16528ac297a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="dc/d62/classtudat_1_1orbit__determination_1_1TidalLoveNumberPartialInterface" kindref="compound">orbit_determination::TidalLoveNumberPartialInterface</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; orbit_determination::TidalLoveNumberPartialInterface &gt; &gt; tudat::simulation_setup::createTidalLoveNumberInterfaces</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string &amp;acceleratingBodyName)</argsstring>
        <name>createTidalLoveNumberInterfaces</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>acceleratingBodyName</declname>
        </param>
        <briefdescription>
<para>Function to create a list of objects that can be used to compute partials of tidal gravity field variations. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a list of objects that can be used to compute partials of tidal gravity field variations <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all body objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleratingBodyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which tidal gravity field variation objects are to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of tidal gravity field variation objects, one for each such field variation object of bodyacceleratingBodyName </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createAccelerationPartials.cpp" line="22" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createAccelerationPartials.cpp" bodystart="22" bodyend="75" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAccelerationPartials.h" declline="49" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d6/d35/createAccelerationPartials_8h_1a8801b1ce141b6488de14ebd82967786d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial" kindref="compound">acceleration_partials::AccelerationPartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; acceleration_partials::AccelerationPartial &gt; tudat::simulation_setup::createAnalyticalAccelerationPartial</definition>
        <argsstring>(std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; accelerationModel, const std::pair&lt; std::string, std::shared_ptr&lt; simulation_setup::Body &gt; &gt; acceleratedBody, const std::pair&lt; std::string, std::shared_ptr&lt; simulation_setup::Body &gt; &gt; acceleratingBody, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; InitialStateParameterType &gt; &gt; parametersToEstimate=std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; InitialStateParameterType &gt; &gt;())</argsstring>
        <name>createAnalyticalAccelerationPartial</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
          <declname>accelerationModel</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt; &gt;</type>
          <declname>acceleratedBody</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt; &gt;</type>
          <declname>acceleratingBody</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; InitialStateParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
          <defval>std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; InitialStateParameterType &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create a single acceleration partial derivative object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a single acceleration partial derivative object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accelerationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration model for which a partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleratedBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair of name and object of body undergoing acceleration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleratingBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair of name and object of body exerting acceleration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all body objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters that are to be estimated. Empty by default, only required for selected types of partials (e.g. spherical harmonic acceleration w.r.t. rotational parameters). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Single acceleration partial derivative object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAccelerationPartials.h" line="65" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAccelerationPartials.h" bodystart="65" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="d6/d35/createAccelerationPartials_8h_1a69b5c1caab106b88b3b665bcf0dda809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::shared_ptr&lt; <ref refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial" kindref="compound">acceleration_partials::AccelerationPartial</ref> &gt;</type>
        <definition>template std::shared_ptr&lt; acceleration_partials::AccelerationPartial &gt; tudat::simulation_setup::createAnalyticalAccelerationPartial&lt; double &gt;</definition>
        <argsstring>(std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; accelerationModel, const std::pair&lt; std::string, std::shared_ptr&lt; simulation_setup::Body &gt; &gt; acceleratedBody, const std::pair&lt; std::string, std::shared_ptr&lt; simulation_setup::Body &gt; &gt; acceleratingBody, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; double &gt; &gt; parametersToEstimate)</argsstring>
        <name>createAnalyticalAccelerationPartial&lt; double &gt;</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
          <declname>accelerationModel</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt; &gt;</type>
          <declname>acceleratedBody</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt; &gt;</type>
          <declname>acceleratingBody</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; double &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAccelerationPartials.h" line="436" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAccelerationPartials.h" declline="436" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d6/d35/createAccelerationPartials_8h_1a029ebad79008ff6e97def7d83c999a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
          </param>
        </templateparamlist>
        <type>orbit_determination::StateDerivativePartialsMap</type>
        <definition>orbit_determination::StateDerivativePartialsMap tudat::simulation_setup::createAccelerationPartialsMap</definition>
        <argsstring>(const basic_astrodynamics::AccelerationMap &amp;accelerationMap, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; InitialStateParameterType &gt; &gt; parametersToEstimate)</argsstring>
        <name>createAccelerationPartialsMap</name>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationMap</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; InitialStateParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>This function creates acceleration partial objects for translational dynamics. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates acceleration partial objects for translational dynamics from acceleration models and list of bodies&apos; states of which derivatives are needed. The return type is an StateDerivativePartialsMap, a standardized type for communicating such lists of these objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accelerationMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of maps containing list of acceleration models, identifying which acceleration acts on which body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects constituting environment for calculations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters which are to be estimated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of acceleration-partial-calculating objects in StateDerivativePartialsMap type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAccelerationPartials.h" line="465" column="49" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAccelerationPartials.h" bodystart="465" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="d6/d35/createAccelerationPartials_8h_1af109daed920d624213b19afbf416f8a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template orbit_determination::StateDerivativePartialsMap</type>
        <definition>template orbit_determination::StateDerivativePartialsMap tudat::simulation_setup::createAccelerationPartialsMap&lt; double &gt;</definition>
        <argsstring>(const basic_astrodynamics::AccelerationMap &amp;accelerationMap, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; double &gt; &gt; parametersToEstimate)</argsstring>
        <name>createAccelerationPartialsMap&lt; double &gt;</name>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationMap</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; double &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAccelerationPartials.h" line="545" column="17" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createAccelerationPartials.h" declline="545" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1a0be3298f164dc7799a3abce4c970944c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel3d</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; basic_astrodynamics::AccelerationModel3d &gt; &gt; tudat::simulation_setup::getAccelerationModelsListForParameters</definition>
        <argsstring>(const std::shared_ptr&lt; propagators::SingleArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSettings &gt; parameterSettings)</argsstring>
        <name>getAccelerationModelsListForParameters</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/d32/classtudat_1_1propagators_1_1SingleArcPropagatorSettings" kindref="compound">propagators::SingleArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dcd/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSettings" kindref="compound">estimatable_parameters::EstimatableParameterSettings</ref> &gt;</type>
          <declname>parameterSettings</declname>
        </param>
        <briefdescription>
<para>Function to get a list of acceleration models that is to be linked to the given parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a list of acceleration models that is to be linked to the given parameter, from single-arc propagator settings. For selected parameter types, this function finds the acceleration models to which they have to be linked to fully create the parameter objects. If parameter type needs no acceleration, or no compatibel acceleration is found, an empty list is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Single-arc propagator settings, from which acceleration models are to be extracted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for parameter settings for which acceleration models are to be found </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of acceleration models that is to be linked to parameter defined by parameterSettings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="63" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="63" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1a0be14f58b8d4deb9874e17b67d4269af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel3d</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; basic_astrodynamics::AccelerationModel3d &gt; &gt; tudat::simulation_setup::getAccelerationModelsListForParameters</definition>
        <argsstring>(const std::shared_ptr&lt; propagators::MultiArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSettings &gt; parameterSettings)</argsstring>
        <name>getAccelerationModelsListForParameters</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/de9/classtudat_1_1propagators_1_1MultiArcPropagatorSettings" kindref="compound">propagators::MultiArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dcd/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSettings" kindref="compound">estimatable_parameters::EstimatableParameterSettings</ref> &gt;</type>
          <declname>parameterSettings</declname>
        </param>
        <briefdescription>
<para>Function to get a list of acceleration models that is to be linked to the given parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a list of acceleration models that is to be linked to the given parameter, from multi-arc propagator settings. For selected parameter types, this function finds the acceleration models to which they have to be linked to fully create the parameter objects. If parameter type needs no acceleration, or no compatible acceleration is found, an empty list is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Single-arc propagator settings, from which acceleration models are to be extracted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for parameter settings for which acceleration models are to be found </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of acceleration models (from all arcs) that is to be linked to parameter defined by parameterSettings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="204" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="204" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1ae4ca0601105d9aa59fa256db8c5e8968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel3d</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; basic_astrodynamics::AccelerationModel3d &gt; &gt; tudat::simulation_setup::getAccelerationModelsListForParameters</definition>
        <argsstring>(const std::shared_ptr&lt; propagators::HybridArcPropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSettings &gt; parameterSettings)</argsstring>
        <name>getAccelerationModelsListForParameters</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d4d/classtudat_1_1propagators_1_1HybridArcPropagatorSettings" kindref="compound">propagators::HybridArcPropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dcd/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSettings" kindref="compound">estimatable_parameters::EstimatableParameterSettings</ref> &gt;</type>
          <declname>parameterSettings</declname>
        </param>
        <briefdescription>
<para>Function to get a list of acceleration models that is to be linked to the given parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a list of acceleration models that is to be linked to the given parameter, from hybrid-arc propagator settings. For selected parameter types, this function finds the acceleration models to which they have to be linked to fully create the parameter objects. If parameter type needs no acceleration, or no compatible acceleration is found, an empty list is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Single-arc propagator settings, from which acceleration models are to be extracted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for parameter settings for which acceleration models are to be found </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of acceleration models (from all arcs) that is to be linked to parameter defined by parameterSettings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="231" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="231" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1ae2b4af41785c0ecdbcfe1b854f5a6f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel3d</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; basic_astrodynamics::AccelerationModel3d &gt; &gt; tudat::simulation_setup::getAccelerationModelsListForParametersFromBase</definition>
        <argsstring>(const std::shared_ptr&lt; propagators::PropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSettings &gt; parameterSettings)</argsstring>
        <name>getAccelerationModelsListForParametersFromBase</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dcd/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSettings" kindref="compound">estimatable_parameters::EstimatableParameterSettings</ref> &gt;</type>
          <declname>parameterSettings</declname>
        </param>
        <briefdescription>
<para>Function to get a list of acceleration models that is to be linked to the given parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get a list of acceleration models that is to be linked to the given parameter, from any propagator settings. For selected parameter types, this function finds the acceleration models to which they have to be linked to fully create the parameter objects. If parameter type needs no acceleration, or no compatible acceleration is found, an empty list is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Single-arc propagator settings, from which acceleration models are to be extracted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for parameter settings for which acceleration models are to be found </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of acceleration models (from all arcs if applicable) that is to be linked to parameter defined by parameterSettings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="274" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="274" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1a925e1cae20cea7c8501013ef6c87d021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d0/dcd/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSettings" kindref="compound">estimatable_parameters::EstimatableParameterSettings</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSettings &gt; &gt; tudat::simulation_setup::getInitialStateParameterSettings</definition>
        <argsstring>(const std::shared_ptr&lt; propagators::PropagatorSettings&lt; InitialStateParameterType &gt; &gt; propagatorSettings, const SystemOfBodies &amp;bodies)</argsstring>
        <name>getInitialStateParameterSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; InitialStateParameterType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="309" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="309" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1af71778be73b26417e935247a7be0892c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::Matrix&lt; InitialStateParameterType, Eigen::Dynamic, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::Matrix&lt; InitialStateParameterType, Eigen::Dynamic, 1 &gt; &gt; &gt; tudat::simulation_setup::createInitialDynamicalStateParameterToEstimate</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSettings &gt; &amp;parameterSettings)</argsstring>
        <name>createInitialDynamicalStateParameterToEstimate</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dcd/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSettings" kindref="compound">estimatable_parameters::EstimatableParameterSettings</ref> &gt; &amp;</type>
          <declname>parameterSettings</declname>
        </param>
        <briefdescription>
<para>Function to create interface object for estimating parameters representing an initial dynamical state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create interface object for estimating parameters representing an initial dynamical state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects containing the fll simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object defining the parameter interface that is to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface object for estimating an initial state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="422" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="422" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1a434019dfaa37bea5b97b353a3bfcffee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; double &gt; &gt;</type>
        <definition>std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; double &gt; &gt; tudat::simulation_setup::createDoubleParameterToEstimate</definition>
        <argsstring>(const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSettings &gt; &amp;doubleParameterName, const SystemOfBodies &amp;bodies, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; InitialStateParameterType &gt; &gt; propagatorSettings=std::shared_ptr&lt; propagators::PropagatorSettings&lt; InitialStateParameterType &gt; &gt;())</argsstring>
        <name>createDoubleParameterToEstimate</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dcd/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSettings" kindref="compound">estimatable_parameters::EstimatableParameterSettings</ref> &gt; &amp;</type>
          <declname>doubleParameterName</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; InitialStateParameterType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; InitialStateParameterType &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create an interface object for estimating a parameter defined by a single double value. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an interface object for estimating a parameter defined by a single double value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doubleParameterName</parametername>
</parameternamelist>
<parameterdescription>
<para>Object defining the parameter interface that is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects containing the fll simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object defining all settigns for the propagator; empty by default (only required for selected parameters). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface object for estimating parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="590" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="590" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1a52578526af6da28edd5802ae07f14067" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::VectorXd &gt; &gt;</type>
        <definition>std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::VectorXd &gt; &gt; tudat::simulation_setup::createVectorParameterToEstimate</definition>
        <argsstring>(const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSettings &gt; &amp;vectorParameterName, const SystemOfBodies &amp;bodies, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; InitialStateParameterType &gt; &gt; propagatorSettings=std::shared_ptr&lt; propagators::PropagatorSettings&lt; InitialStateParameterType &gt; &gt;())</argsstring>
        <name>createVectorParameterToEstimate</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dcd/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSettings" kindref="compound">estimatable_parameters::EstimatableParameterSettings</ref> &gt; &amp;</type>
          <declname>vectorParameterName</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; InitialStateParameterType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; InitialStateParameterType &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create an interface object for estimating a parameter defined by a list of double values. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an interface object for estimating a parameter defined by a list of single double values <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vectorParameterName</parametername>
</parameternamelist>
<parameterdescription>
<para>Object defining the parameter interface that is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects containing the fll simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object defining all settigns for the propagator; empty by default (only required for selected parameters). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface object for estimating parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="832" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="832" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1a7267ebc57ad0ebf907d34395fc4e916b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; InitialStateParameterType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; InitialStateParameterType &gt; &gt; tudat::simulation_setup::createParametersToEstimate</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSettings &gt; &gt; &amp;parameterNames, const SystemOfBodies &amp;bodies, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; InitialStateParameterType &gt; &gt; propagatorSettings=std::shared_ptr&lt; propagators::PropagatorSettings&lt; InitialStateParameterType &gt; &gt;())</argsstring>
        <name>createParametersToEstimate</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d0/dcd/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSettings" kindref="compound">estimatable_parameters::EstimatableParameterSettings</ref> &gt; &gt; &amp;</type>
          <declname>parameterNames</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; InitialStateParameterType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
          <defval>std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; InitialStateParameterType &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create the interface object for estimating any number/type of parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create the interface object for estimating any number/type of parameters. This can include both environmental parameters and initial dynamical states. The types of parameters are defined by the parameterNames m input variables <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameterNames</parametername>
</parameternamelist>
<parameterdescription>
<para>List of objects defining the parameters that are to be estimated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of body objects containing the fll simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object defining all settigns for the propagator; empty by default (only required for selected parameters). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface object for estimating a set of parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="1480" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="1480" bodyend="1528"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1a55a1f3728b34b6c333a4c88ff088f052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt;</type>
        <definition>std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; tudat::simulation_setup::getAssociatedMultiArcParameter</definition>
        <argsstring>(const std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt; singleArcParameter, const std::vector&lt; double &gt; &amp;arcStartTimes)</argsstring>
        <name>getAssociatedMultiArcParameter</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::Matrix&lt; StateScalarType, Eigen::Dynamic, 1 &gt; &gt; &gt;</type>
          <declname>singleArcParameter</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>arcStartTimes</declname>
        </param>
        <briefdescription>
<para>Function to get the multi-arc parameter equivalent of a single-arc initial state parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the multi-arc parameter equivalent of a single-arc initial state parameter. The initial state arcs are provided as input to this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>singleArcParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Single-arc parameter object for which the multi-arc equivalent is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcStartTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of start times for separate arcs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Multi-arc parameter equivalent of single-arc initial state parameter input </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="1540" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="1540" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="d1/df2/createEstimatableParameters_8h_1abb4c2ea3839f7954eaec1a6c7f2e9ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tudat::simulation_setup::setInitialStateVectorFromParameterSet</definition>
        <argsstring>(const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; InitialStateParameterType &gt; &gt; estimatableParameters, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; InitialStateParameterType &gt; &gt; propagatorSettings)</argsstring>
        <name>setInitialStateVectorFromParameterSet</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; InitialStateParameterType &gt; &gt;</type>
          <declname>estimatableParameters</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; InitialStateParameterType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <briefdescription>
<para>Function to get initial state vector of estimated dynamical states. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get initial state vector of estimated dynamical states (i.e. presently estimated state at propagation start time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>estimatableParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing all parameters that are to be estimated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing propagation settings to be used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State vector of estimated dynamics at propagation start time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" line="1606" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createEstimatableParameters.h" bodystart="1606" bodyend="1702"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1aeab8f604b8d0db3c1080badb31705cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="de/de0/classtudat_1_1propagators_1_1SingleArcDynamicsSimulator" kindref="compound">propagators::SingleArcDynamicsSimulator</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; propagators::SingleArcDynamicsSimulator&lt; StateScalarType, TimeType &gt; &gt; tudat::simulation_setup::createSingleArcDynamicsSimulator</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; TimeType &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const bool areEquationsOfMotionToBeIntegrated=true, const bool clearNumericalSolutions=true, const bool setIntegratedResult=true)</argsstring>
        <name>createSingleArcDynamicsSimulator</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; TimeType &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areEquationsOfMotionToBeIntegrated</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearNumericalSolutions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>setIntegratedResult</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to create single-arc dynamics simulator object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create single-arc dynamics simulator object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of bodies (with names) of all bodies in integration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for numerical integrator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for propagator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areEquationsOfMotionToBeIntegrated</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether equations of motion should be integrated immediately at the end of the contructor or not (default true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearNumericalSolutions</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to determine whether to clear the raw numerical solution member variables after propagation and resetting ephemerides (default false). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>setIntegratedResult</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to determine whether to automatically use the integrated results to set ephemerides (default false). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Single-arc dynamics simulator object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="40" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" bodystart="40" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1a087fae7ea507be408109c0b067d7e979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d4/dc6/classtudat_1_1propagators_1_1SingleArcVariationalEquationsSolver" kindref="compound">propagators::SingleArcVariationalEquationsSolver</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; propagators::SingleArcVariationalEquationsSolver&lt; StateScalarType, TimeType &gt; &gt; tudat::simulation_setup::createSingleArcVariationalEquationsSolver</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; TimeType &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; StateScalarType &gt; &gt; parametersToEstimate, const bool integrateDynamicalAndVariationalEquationsConcurrently=1, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; variationalOnlyIntegratorSettings=std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt;(), const bool clearNumericalSolution=1, const bool integrateEquationsOnCreation=1)</argsstring>
        <name>createSingleArcVariationalEquationsSolver</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; TimeType &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateDynamicalAndVariationalEquationsConcurrently</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>variationalOnlyIntegratorSettings</declname>
          <defval>std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;()</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearNumericalSolution</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateEquationsOnCreation</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Function to create single-arc variational equations solver object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create single-arc variational equations solver object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of bodies (with names) of all bodies in integration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for numerical integrator of combined propagation of variational equations and equations of motion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for propagation of equations of motion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing all parameters that are to be estimated and their current settings and values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrateDynamicalAndVariationalEquationsConcurrently</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean defining whether variational and dynamical equations are to be propagated concurrently (if true) or sequentially (of false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>variationalOnlyIntegratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for numerical integrator when integrating only variational equations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to determine whether to clear the raw numerical solution member variables (default true) after propagation and resetting of state transition interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrateEquationsOnCreation</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether equations should be integrated immediately at the end of this contructor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Single-arc variational equations solver object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="75" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" bodystart="75" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1a2bd87b919c4fe0825c4bc7f3726cff57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1propagators_1_1MultiArcVariationalEquationsSolver" kindref="compound">propagators::MultiArcVariationalEquationsSolver</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; propagators::MultiArcVariationalEquationsSolver&lt; StateScalarType, TimeType &gt; &gt; tudat::simulation_setup::createMultiArcVariationalEquationsSolver</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; TimeType &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; StateScalarType &gt; &gt; parametersToEstimate, const bool integrateDynamicalAndVariationalEquationsConcurrently=1, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; variationalOnlyIntegratorSettings=std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt;(), const bool clearNumericalSolution=1, const bool integrateEquationsOnCreation=1)</argsstring>
        <name>createMultiArcVariationalEquationsSolver</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; TimeType &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateDynamicalAndVariationalEquationsConcurrently</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>variationalOnlyIntegratorSettings</declname>
          <defval>std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;()</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearNumericalSolution</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateEquationsOnCreation</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Function to create multi-arc variational equations solver object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create multi-arc variational equations solver object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of bodies (with names) of all bodies in integration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for numerical integrator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for propagator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing all parameters that are to be estimated and their current settings and values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrateDynamicalAndVariationalEquationsConcurrently</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean defining whether variational and dynamical equations are to be propagated concurrently (if true) or sequentially (of false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>variationalOnlyIntegratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for numerical integrator when integrating only variational equations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to determine whether to clear the raw numerical solution member variables (default true) after propagation and resetting of state transition interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrateEquationsOnCreation</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether equations should be integrated immediately at the end of this contructor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Multi-arc variational equations solver object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="111" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" bodystart="111" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1afa72865ed48dfcb2a50c74c25da005d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d0/da5/classtudat_1_1propagators_1_1HybridArcVariationalEquationsSolver" kindref="compound">propagators::HybridArcVariationalEquationsSolver</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; propagators::HybridArcVariationalEquationsSolver&lt; StateScalarType, TimeType &gt; &gt; tudat::simulation_setup::createHybridArcVariationalEquationsSolver</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; TimeType &gt; &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; StateScalarType &gt; &gt; parametersToEstimate, const bool integrateDynamicalAndVariationalEquationsConcurrently=1, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; variationalOnlyIntegratorSettings=std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt;(), const bool clearNumericalSolution=1, const bool integrateEquationsOnCreation=1)</argsstring>
        <name>createHybridArcVariationalEquationsSolver</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; TimeType &gt; &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateDynamicalAndVariationalEquationsConcurrently</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>variationalOnlyIntegratorSettings</declname>
          <defval>std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;()</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearNumericalSolution</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateEquationsOnCreation</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Function to create hybrid-arc variational equations solver object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create hybrid-arc variational equations solver object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of bodies (with names) of all bodies in integration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for numerical integrator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for propagator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing all parameters that are to be estimated and their current settings and values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrateDynamicalAndVariationalEquationsConcurrently</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean defining whether variational and dynamical equations are to be propagated concurrently (if true) or sequentially (of false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>variationalOnlyIntegratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for numerical integrator when integrating only variational equations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to determine whether to clear the raw numerical solution member variables (default true) after propagation and resetting of state transition interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrateEquationsOnCreation</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether equations should be integrated immediately at the end of this contructor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hybrid-arc variational equations solver object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="150" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" bodystart="150" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1a3dea7db93cad2f237bdb8bbbb0e1efc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="df/d14/classtudat_1_1propagators_1_1VariationalEquationsSolver" kindref="compound">propagators::VariationalEquationsSolver</ref>&lt; StateScalarType, TimeType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; propagators::VariationalEquationsSolver&lt; StateScalarType, TimeType &gt; &gt; tudat::simulation_setup::createVariationalEquationsSolver</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; TimeType &gt; &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; StateScalarType &gt; &gt; parametersToEstimate, const bool integrateDynamicalAndVariationalEquationsConcurrently=1, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; variationalOnlyIntegratorSettings=std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt;(), const bool clearNumericalSolution=1, const bool integrateEquationsOnCreation=1)</argsstring>
        <name>createVariationalEquationsSolver</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; TimeType &gt; &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateDynamicalAndVariationalEquationsConcurrently</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>variationalOnlyIntegratorSettings</declname>
          <defval>std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;()</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearNumericalSolution</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateEquationsOnCreation</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Function to create variational equations solver object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create variational equations solver object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of bodies (with names) of all bodies in integration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for numerical integrator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for propagator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing all parameters that are to be estimated and their current settings and values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrateDynamicalAndVariationalEquationsConcurrently</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean defining whether variational and dynamical equations are to be propagated concurrently (if true) or sequentially (of false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>variationalOnlyIntegratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for numerical integrator when integrating only variational equations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearNumericalSolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to determine whether to clear the raw numerical solution member variables (default true) after propagation and resetting of state transition interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integrateEquationsOnCreation</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether equations should be integrated immediately at the end of this contructor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Variational equations solver object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="198" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" bodystart="198" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1a453818e8bb69343120a44e281792a967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d4/da7/classtudat_1_1propagators_1_1CombinedStateTransitionAndSensitivityMatrixInterface" kindref="compound">propagators::CombinedStateTransitionAndSensitivityMatrixInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt; propagators::CombinedStateTransitionAndSensitivityMatrixInterface &gt; tudat::simulation_setup::createStateTransitionAndSensitivityMatrixInterface</definition>
        <argsstring>(const std::shared_ptr&lt; propagators::PropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const int dynamicalStateSize, const int totalParameterSize)</argsstring>
        <name>createStateTransitionAndSensitivityMatrixInterface</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dynamicalStateSize</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>totalParameterSize</declname>
        </param>
        <briefdescription>
<para>Function to crate interface for state transition/sensitivity matrix results. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to crate interface for state transition/sensitivity matrix results <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings used for propagation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dynamicalStateSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of dynamical state that is estimation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>totalParameterSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Total size of estimated state vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="250" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" bodystart="250" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1a127e446b56555f5b13e2b461a61cb468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::shared_ptr&lt; <ref refid="d4/dc6/classtudat_1_1propagators_1_1SingleArcVariationalEquationsSolver" kindref="compound">propagators::SingleArcVariationalEquationsSolver</ref>&lt; double, double &gt; &gt;</type>
        <definition>template std::shared_ptr&lt; propagators::SingleArcVariationalEquationsSolver&lt; double, double &gt; &gt; tudat::simulation_setup::createSingleArcVariationalEquationsSolver&lt; double, double &gt;</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; double &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; double &gt; &gt; parametersToEstimate, const bool integrateDynamicalAndVariationalEquationsConcurrently, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; variationalOnlyIntegratorSettings, const bool clearNumericalSolution, const bool integrateEquationsOnCreation)</argsstring>
        <name>createSingleArcVariationalEquationsSolver&lt; double, double &gt;</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; double &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateDynamicalAndVariationalEquationsConcurrently</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>variationalOnlyIntegratorSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearNumericalSolution</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateEquationsOnCreation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="286" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" declline="286" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1a4707ffb0ad1ce3897ff9d6471e9f52bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::shared_ptr&lt; <ref refid="de/de0/classtudat_1_1propagators_1_1SingleArcDynamicsSimulator" kindref="compound">propagators::SingleArcDynamicsSimulator</ref>&lt; double, double &gt; &gt;</type>
        <definition>template std::shared_ptr&lt; propagators::SingleArcDynamicsSimulator&lt; double, double &gt; &gt; tudat::simulation_setup::createSingleArcDynamicsSimulator&lt; double, double &gt;</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; double &gt; &gt; propagatorSettings, const bool areEquationsOfMotionToBeIntegrated, const bool clearNumericalSolutions, const bool setIntegratedResult)</argsstring>
        <name>createSingleArcDynamicsSimulator&lt; double, double &gt;</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>areEquationsOfMotionToBeIntegrated</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearNumericalSolutions</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>setIntegratedResult</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="297" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" declline="297" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1a7ead8bdb8ba13c47f152dbead67d8e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1propagators_1_1MultiArcVariationalEquationsSolver" kindref="compound">propagators::MultiArcVariationalEquationsSolver</ref>&lt; double, double &gt; &gt;</type>
        <definition>template std::shared_ptr&lt; propagators::MultiArcVariationalEquationsSolver&lt; double, double &gt; &gt; tudat::simulation_setup::createMultiArcVariationalEquationsSolver&lt; double, double &gt;</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; double &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; double &gt; &gt; parametersToEstimate, const bool integrateDynamicalAndVariationalEquationsConcurrently, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; variationalOnlyIntegratorSettings, const bool clearNumericalSolution, const bool integrateEquationsOnCreation)</argsstring>
        <name>createMultiArcVariationalEquationsSolver&lt; double, double &gt;</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; double &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateDynamicalAndVariationalEquationsConcurrently</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>variationalOnlyIntegratorSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearNumericalSolution</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateEquationsOnCreation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="306" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" declline="306" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1ab4b874fccbc8c5605d22e1b1e3626fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::shared_ptr&lt; <ref refid="d0/da5/classtudat_1_1propagators_1_1HybridArcVariationalEquationsSolver" kindref="compound">propagators::HybridArcVariationalEquationsSolver</ref>&lt; double, double &gt; &gt;</type>
        <definition>template std::shared_ptr&lt; propagators::HybridArcVariationalEquationsSolver&lt; double, double &gt; &gt; tudat::simulation_setup::createHybridArcVariationalEquationsSolver&lt; double, double &gt;</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; double &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; double &gt; &gt; parametersToEstimate, const bool integrateDynamicalAndVariationalEquationsConcurrently, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; variationalOnlyIntegratorSettings, const bool clearNumericalSolution, const bool integrateEquationsOnCreation)</argsstring>
        <name>createHybridArcVariationalEquationsSolver&lt; double, double &gt;</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; double &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateDynamicalAndVariationalEquationsConcurrently</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>variationalOnlyIntegratorSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearNumericalSolution</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateEquationsOnCreation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="317" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" declline="317" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d6/d02/createNumericalSimulator_8h_1af5fc7822116ad8d2d5e19ecf2d3f8521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::shared_ptr&lt; <ref refid="df/d14/classtudat_1_1propagators_1_1VariationalEquationsSolver" kindref="compound">propagators::VariationalEquationsSolver</ref>&lt; double, double &gt; &gt;</type>
        <definition>template std::shared_ptr&lt; propagators::VariationalEquationsSolver&lt; double, double &gt; &gt; tudat::simulation_setup::createVariationalEquationsSolver&lt; double, double &gt;</definition>
        <argsstring>(const simulation_setup::SystemOfBodies &amp;bodies, const std::vector&lt; std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; double &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; double &gt; &gt; parametersToEstimate, const bool integrateDynamicalAndVariationalEquationsConcurrently, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; variationalOnlyIntegratorSettings, const bool clearNumericalSolution, const bool integrateEquationsOnCreation)</argsstring>
        <name>createVariationalEquationsSolver&lt; double, double &gt;</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; double &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateDynamicalAndVariationalEquationsConcurrently</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>variationalOnlyIntegratorSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>clearNumericalSolution</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>integrateEquationsOnCreation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" line="329" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createNumericalSimulator.h" declline="329" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d3/d4f/createStateDerivativePartials_8h_1a3d0b1d9e713e0ae1504438aac300e0b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
          <param>
            <type>typename TimeType</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt;</type>
        <definition>std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt; tudat::simulation_setup::createStateDerivativePartials</definition>
        <argsstring>(const std::unordered_map&lt; propagators::IntegratedStateType, std::vector&lt; std::shared_ptr&lt; propagators::SingleStateTypeDerivative&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt; stateDerivativeModels, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; StateScalarType &gt; &gt; parametersToEstimate)</argsstring>
        <name>createStateDerivativePartials</name>
        <param>
          <type>const std::unordered_map&lt; propagators::IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">propagators::SingleStateTypeDerivative</ref>&lt; StateScalarType, TimeType &gt; &gt; &gt; &gt;</type>
          <declname>stateDerivativeModels</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>Function to create a set of state derivative partial objects. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a set of state derivative partial objects for any propagated state types. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateDerivativeModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of state derivative models, ordered by state type (key) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of boy objects storing environment models of simulation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing all parameters that are to be estimated and their current settings and values. return List partials of state derivative models from. The key is the type of dynamics for which partials are taken, the values are StateDerivativePartialsMap (see StateDerivativePartialsMap definition for details). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createStateDerivativePartials.h" line="39" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createStateDerivativePartials.h" bodystart="39" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="d3/d4f/createStateDerivativePartials_8h_1ad51112d432f666b01bbe3c3181c3b3b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt;</type>
        <definition>template std::map&lt; propagators::IntegratedStateType, orbit_determination::StateDerivativePartialsMap &gt; tudat::simulation_setup::createStateDerivativePartials&lt; double, double &gt;</definition>
        <argsstring>(const std::unordered_map&lt; propagators::IntegratedStateType, std::vector&lt; std::shared_ptr&lt; propagators::SingleStateTypeDerivative&lt; double, double &gt; &gt; &gt; &gt; stateDerivativeModels, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; double &gt; &gt; parametersToEstimate)</argsstring>
        <name>createStateDerivativePartials&lt; double, double &gt;</name>
        <param>
          <type>const std::unordered_map&lt; propagators::IntegratedStateType, std::vector&lt; std::shared_ptr&lt; <ref refid="d1/de9/classtudat_1_1propagators_1_1SingleStateTypeDerivative" kindref="compound">propagators::SingleStateTypeDerivative</ref>&lt; double, double &gt; &gt; &gt; &gt;</type>
          <declname>stateDerivativeModels</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; double &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createStateDerivativePartials.h" line="108" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createStateDerivativePartials.h" declline="108" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dd/d00/createTorquePartials_8h_1a3a9318d9ab20d8e0671d0ee1815dbf37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/dd4/classtudat_1_1acceleration__partials_1_1TorquePartial" kindref="compound">acceleration_partials::TorquePartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; acceleration_partials::TorquePartial &gt; tudat::simulation_setup::createConstantTorqueRotationalDynamicsPartial</definition>
        <argsstring>(const std::pair&lt; std::string, std::shared_ptr&lt; simulation_setup::Body &gt; &gt; acceleratedBody, const basic_astrodynamics::SingleBodyTorqueModelMap &amp;torqueVector)</argsstring>
        <name>createConstantTorqueRotationalDynamicsPartial</name>
        <param>
          <type>const std::pair&lt; std::string, std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt; &gt;</type>
          <declname>acceleratedBody</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::SingleBodyTorqueModelMap &amp;</type>
          <declname>torqueVector</declname>
        </param>
        <briefdescription>
<para>Function to create torque partial to be used for constant torques in angular acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create torque partial to be used for constant torques in angular acceleration (e.g. due to variations in inertia tensor) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>acceleratedBody</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> undergoing torque </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>torqueVector</parametername>
</parameternamelist>
<parameterdescription>
<para>List of torques exerted on body </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Constant torque partial </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createTorquePartials.cpp" line="11" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createTorquePartials.cpp" bodystart="11" bodyend="41" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createTorquePartials.h" declline="40" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dd/d00/createTorquePartials_8h_1a8160967aaf3ec1d6c41906ce4044f5d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d7/dd4/classtudat_1_1acceleration__partials_1_1TorquePartial" kindref="compound">acceleration_partials::TorquePartial</ref> &gt;</type>
        <definition>std::shared_ptr&lt; acceleration_partials::TorquePartial &gt; tudat::simulation_setup::createAnalyticalTorquePartial</definition>
        <argsstring>(std::shared_ptr&lt; basic_astrodynamics::TorqueModel &gt; torqueModel, const std::pair&lt; std::string, std::shared_ptr&lt; simulation_setup::Body &gt; &gt; acceleratedBody, const std::pair&lt; std::string, std::shared_ptr&lt; simulation_setup::Body &gt; &gt; acceleratingBody, const basic_astrodynamics::SingleBodyTorqueModelMap &amp;torqueVector=basic_astrodynamics::SingleBodyTorqueModelMap(), const simulation_setup::SystemOfBodies &amp;bodies=simulation_setup::SystemOfBodies(), const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; InitialStateParameterType &gt; &gt; parametersToEstimate=std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; InitialStateParameterType &gt; &gt;())</argsstring>
        <name>createAnalyticalTorquePartial</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">basic_astrodynamics::TorqueModel</ref> &gt;</type>
          <declname>torqueModel</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt; &gt;</type>
          <declname>acceleratedBody</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt; &gt;</type>
          <declname>acceleratingBody</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::SingleBodyTorqueModelMap &amp;</type>
          <declname>torqueVector</declname>
          <defval>basic_astrodynamics::SingleBodyTorqueModelMap()</defval>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
          <defval><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref>()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; InitialStateParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
          <defval>std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; InitialStateParameterType &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create a single torque partial derivative object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a single torque partial derivative object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>torqueModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Torque model for which a partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleratedBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair of name and object of body undergoing torque </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleratingBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair of name and object of body exerting torque </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>torqueVector</parametername>
</parameternamelist>
<parameterdescription>
<para>List of torques exerted on body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of all body objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters that are to be estimated. Empty by default, only required for selected types of partials (e.g. spherical harmonic torque w.r.t. rotational parameters). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Single torque partial derivative object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createTorquePartials.h" line="57" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createTorquePartials.h" bodystart="57" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="dd/d00/createTorquePartials_8h_1a39bbccf8d7e81a90c60d5e22e5abcf02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitialStateParameterType</type>
          </param>
        </templateparamlist>
        <type>orbit_determination::StateDerivativePartialsMap</type>
        <definition>orbit_determination::StateDerivativePartialsMap tudat::simulation_setup::createTorquePartialsMap</definition>
        <argsstring>(const basic_astrodynamics::TorqueModelMap &amp;torqueMap, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; InitialStateParameterType &gt; &gt; parametersToEstimate)</argsstring>
        <name>createTorquePartialsMap</name>
        <param>
          <type>const basic_astrodynamics::TorqueModelMap &amp;</type>
          <declname>torqueMap</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; InitialStateParameterType &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
<para>This function creates torque partial objects for translational dynamics. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates torque partial objects for translational dynamics from torque models and list of bodies&apos; states of which derivatives are needed. The return type is an StateDerivativePartialsMap, a standardized type for communicating such lists of these objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>torqueMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of maps containing list of torque models, identifying which torque acts on which body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects constituting environment for calculations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parametersToEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters which are to be estimated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of torque-partial-calculating objects in StateDerivativePartialsMap type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createTorquePartials.h" line="177" column="49" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/createTorquePartials.h" bodystart="177" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="d4/d6b/determinePostFitParameterInfluence_8h_1a51d648ca2cacde1816b317ec5dd4452c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::shared_ptr&lt; <ref refid="df/d6f/structtudat_1_1simulation__setup_1_1PodOutput" kindref="compound">PodOutput</ref>&lt; StateScalarType &gt; &gt;, Eigen::VectorXd &gt;</type>
        <definition>std::pair&lt; std::shared_ptr&lt; PodOutput&lt; StateScalarType &gt; &gt;, Eigen::VectorXd &gt; tudat::simulation_setup::determinePostfitParameterInfluence</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; TimeType &gt; &gt; integratorSettings, const std::shared_ptr&lt; propagators::PropagatorSettings&lt; StateScalarType &gt; &gt; propagatorSettings, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSettings &gt; perturbedParameterSettings, const double simulatedObservationInterval, const std::vector&lt; double &gt; parameterPerturbations, const std::vector&lt; int &gt; parameterIndices, const int numberOfIterations=2)</argsstring>
        <name>determinePostfitParameterInfluence</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; TimeType &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; StateScalarType &gt; &gt;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dcd/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSettings" kindref="compound">estimatable_parameters::EstimatableParameterSettings</ref> &gt;</type>
          <declname>perturbedParameterSettings</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>simulatedObservationInterval</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>parameterPerturbations</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt;</type>
          <declname>parameterIndices</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfIterations</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that determines how well the translational dynamics of N bodies can absorb the influence of a change in an environmental parameter value</para>
<para>Function that determines how well the translational dynamics of N bodies can absorb the influence of a change in an environmental parameter value. The methods outlined by e.g. Dirkx et al. (2016); Planetary and Space Science 134:82-95. This function uses a nominal dynamical model to simulate ideal observations of a set of N bodies&apos; 3-dimensional positions. These observations are then used as input to an orbit determination routing in which a set of parameters have their values adjusted w.r.t. the nominal case. In the orbit determination, only the initial states of the N bodies are estimated. As such, this function provides the degree to which a change (e.g. uncertainty) in the environment can be mimicked by a change in the bodies initial conditions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for numerical integrator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatorSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for propagator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perturbedParameterSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of parameter that is to be adjusted in analysis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>simulatedObservationInterval</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> interval between consecutive simulated 3-dimensional position observations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterPerturbations</parametername>
</parameternamelist>
<parameterdescription>
<para>Perturbations in the parameter vector that are to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices in the vector of perturbed parameter at which to apply the perturbations in parameterPerturbations, e.g. index parameterIndices( i ) of the parameter vector gets perturbation parameterPerturbations( i ) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations to use in the orbit determination loop </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of estimation output (first) and adjustment to initial state vectors (second) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/determinePostFitParameterInfluence.h" line="50" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/determinePostFitParameterInfluence.h" bodystart="50" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="dc/dc5/orbitDeterminationManager_8h_1afd602d81995889e17bda59053c48db4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt; tudat::simulation_setup::getConcatenatedWeightsVector</definition>
        <argsstring>(const typename std::map&lt; observation_models::ObservableType, std::map&lt; observation_models::LinkEnds, Eigen::VectorXd &gt; &gt; &amp;weightsData)</argsstring>
        <name>getConcatenatedWeightsVector</name>
        <param>
          <type>const typename std::map&lt; observation_models::ObservableType, std::map&lt; observation_models::LinkEnds, Eigen::VectorXd &gt; &gt; &amp;</type>
          <declname>weightsData</declname>
        </param>
        <briefdescription>
<para>Function to create a single vector of observation weights from weights sorted by link ends/observation type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a single vector of observation weights from weights sorted by link ends/observation type, the ruesulting vector is sorted according to the iteration order of the inner and outer maps in the weightsData input <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weightsData</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights sorted by link ends and observation type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Concatenated vector of weights </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/orbitDeterminationManager.h" line="42" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/orbitDeterminationManager.h" bodystart="42" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="dc/dc5/orbitDeterminationManager_8h_1ae9ac383a9f5bfd92c15fb1be1e914e69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt;</type>
        <definition>template Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt; tudat::simulation_setup::getConcatenatedWeightsVector&lt; double &gt;</definition>
        <argsstring>(const typename std::map&lt; observation_models::ObservableType, std::map&lt; observation_models::LinkEnds, Eigen::VectorXd &gt; &gt; &amp;weightsData)</argsstring>
        <name>getConcatenatedWeightsVector&lt; double &gt;</name>
        <param>
          <type>const typename std::map&lt; observation_models::ObservableType, std::map&lt; observation_models::LinkEnds, Eigen::VectorXd &gt; &gt; &amp;</type>
          <declname>weightsData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/orbitDeterminationManager.h" line="897" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/orbitDeterminationManager.h" declline="897" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dc/dc5/orbitDeterminationManager_8h_1af3f07324b3ecbe1c83531dbf7be62051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template Eigen::Matrix&lt; long double, Eigen::Dynamic, 1 &gt;</type>
        <definition>template Eigen::Matrix&lt; long double, Eigen::Dynamic, 1 &gt; tudat::simulation_setup::getConcatenatedWeightsVector&lt; long double &gt;</definition>
        <argsstring>(const typename std::map&lt; observation_models::ObservableType, std::map&lt; observation_models::LinkEnds, Eigen::VectorXd &gt; &gt; &amp;weightsData)</argsstring>
        <name>getConcatenatedWeightsVector&lt; long double &gt;</name>
        <param>
          <type>const typename std::map&lt; observation_models::ObservableType, std::map&lt; observation_models::LinkEnds, Eigen::VectorXd &gt; &gt; &amp;</type>
          <declname>weightsData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/orbitDeterminationManager.h" line="900" column="8" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/orbitDeterminationManager.h" declline="900" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="da/dca/podProcessing_8h_1a0505d7104ff533cceb75bbe6a01ffb2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; TimeType &gt;</type>
        <definition>std::vector&lt; TimeType &gt; tudat::simulation_setup::getConcatenatedTimeVector</definition>
        <argsstring>(const typename OrbitDeterminationManager&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;measurementData)</argsstring>
        <name>getConcatenatedTimeVector</name>
        <param>
          <type>const typename <ref refid="d3/d01/classtudat_1_1simulation__setup_1_1OrbitDeterminationManager" kindref="compound">OrbitDeterminationManager</ref>&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;</type>
          <declname>measurementData</declname>
        </param>
        <briefdescription>
<para>Function to create a single vector of times from all observation times. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a single vector of times from all observation times, created by concatenating all observation times, in the order of first observable type and the link ends, as they are stored in the input data type (PodInputType). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurementData</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure containing all measurement data, first by observable type, then by link ends. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Concatenated vector of times. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" line="30" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" bodystart="30" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="da/dca/podProcessing_8h_1a77cdec7347dc5afdd6977f32a6dab1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::vector&lt; int &gt;, std::map&lt; observation_models::LinkEnds, int &gt; &gt;</type>
        <definition>std::pair&lt; std::vector&lt; int &gt;, std::map&lt; observation_models::LinkEnds, int &gt; &gt; tudat::simulation_setup::getConcatenatedGroundStationIndex</definition>
        <argsstring>(const typename OrbitDeterminationManager&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;measurementData)</argsstring>
        <name>getConcatenatedGroundStationIndex</name>
        <param>
          <type>const typename <ref refid="d3/d01/classtudat_1_1simulation__setup_1_1OrbitDeterminationManager" kindref="compound">OrbitDeterminationManager</ref>&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;</type>
          <declname>measurementData</declname>
        </param>
        <briefdescription>
<para>Function to create a single vector of link end indices for all observations. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a single vector of link end indices for all observations, created by assigning an integer to each set of link ends, and these indices for all observations, in the order of first observable type and the link ends, as they are stored in the input data type (PodInputType). Output vector has same size as vector of observables, so for an observation of size N, N values are added to the output vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurementData</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure containing all measurement data, first by observable type, then by link ends. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Concatenated vector of link end indices (first), mapping of LinkEnds to index (second) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" line="85" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" bodystart="85" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="da/dca/podProcessing_8h_1a44a601b9a04f38ab5aa2a31e73b16703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; tudat::simulation_setup::getConcatenatedObservableTypes</definition>
        <argsstring>(const typename OrbitDeterminationManager&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;measurementData)</argsstring>
        <name>getConcatenatedObservableTypes</name>
        <param>
          <type>const typename <ref refid="d3/d01/classtudat_1_1simulation__setup_1_1OrbitDeterminationManager" kindref="compound">OrbitDeterminationManager</ref>&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;</type>
          <declname>measurementData</declname>
        </param>
        <briefdescription>
<para>Function to create a single vector of observable types for all observations. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a single vector of observable types for all observations, in the order of first observable type and the link ends, as they are stored in the input data type (PodInputType). Output vector has same size as vector of observables, so for an observation of size N, N values are added to the output vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurementData</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure containing all measurement data, first by observable type, then by link ends. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Concatenated vector of observable types. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" line="140" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" bodystart="140" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="da/dca/podProcessing_8h_1a0dc916fa26c5be8cee66f7e537ebe0f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; ObservationScalarType, Eigen::Dynamic, 1 &gt; tudat::simulation_setup::getConcatenatedMeasurementVector</definition>
        <argsstring>(const typename OrbitDeterminationManager&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;measurementData)</argsstring>
        <name>getConcatenatedMeasurementVector</name>
        <param>
          <type>const typename <ref refid="d3/d01/classtudat_1_1simulation__setup_1_1OrbitDeterminationManager" kindref="compound">OrbitDeterminationManager</ref>&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;</type>
          <declname>measurementData</declname>
        </param>
        <briefdescription>
<para>Function to create a single vector of observations from full observation input data. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a single vector of observations from full observation input data, created by concatenating all observations in the order of first observable type and the link ends, as they are stored in the input data type (PodInputType). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurementData</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure containing all measurement data, first by observable type, then by link ends. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Concatenated vector of observations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" line="178" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" bodystart="178" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="da/dca/podProcessing_8h_1a677edd861f02cf82060e1631bc8acb99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Eigen::MatrixXd, std::vector&lt; TimeType &gt; &gt;</type>
        <definition>std::pair&lt; Eigen::MatrixXd, std::vector&lt; TimeType &gt; &gt; tudat::simulation_setup::getTimeOrderedInformationMatrix</definition>
        <argsstring>(const typename OrbitDeterminationManager&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;measurementData, const Eigen::MatrixXd &amp;typeAndLinkSortedInformationMatrix, std::vector&lt; int &gt; &amp;timeOrder)</argsstring>
        <name>getTimeOrderedInformationMatrix</name>
        <param>
          <type>const typename <ref refid="d3/d01/classtudat_1_1simulation__setup_1_1OrbitDeterminationManager" kindref="compound">OrbitDeterminationManager</ref>&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;</type>
          <declname>measurementData</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>typeAndLinkSortedInformationMatrix</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>timeOrder</declname>
        </param>
        <briefdescription>
<para>Function to sort the information matrix by the time of the associated observations. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to sort the information matrix (e.g. matrix with partial derivatives of observables w.r.t. estimated parameters) by the time of the associated observations, in ascending order. That is, the time associated withthe observation wrt which the partial is stored in a given line of the information matrix is used to determine the new row position of that row in the ordered matrix. The lowest time is the first row; the highest time is the last row. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurementData</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of all measurement data, ordered by observable type and link end set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typeAndLinkSortedInformationMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>information matrix, in original ordering (observable type and link ends) as produced by <ref refid="d3/d01/classtudat_1_1simulation__setup_1_1OrbitDeterminationManager" kindref="compound">OrbitDeterminationManager</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Order in which the observation time vector was sorted to obtain the time-sorted information matrix (returned by reference_ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Information matrix, ordered by associated observation time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" line="222" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" bodystart="222" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="da/dca/podProcessing_8h_1a09fabdb4a743d3a6e681acc09a9b1cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; TimeType, Eigen::MatrixXd &gt;</type>
        <definition>std::map&lt; TimeType, Eigen::MatrixXd &gt; tudat::simulation_setup::calculateCovarianceUsingDataUpToEpoch</definition>
        <argsstring>(const typename OrbitDeterminationManager&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;measurementData, const Eigen::MatrixXd &amp;typeAndLinkSortedNormalizedInformationMatrix, const Eigen::VectorXd &amp;normalizationFactors, const std::vector&lt; double &gt; &amp;outputTimes, const Eigen::VectorXd &amp;diagonalOfWeightMatrix, const Eigen::MatrixXd &amp;unnormalizedInverseAPrioriCovariance)</argsstring>
        <name>calculateCovarianceUsingDataUpToEpoch</name>
        <param>
          <type>const typename <ref refid="d3/d01/classtudat_1_1simulation__setup_1_1OrbitDeterminationManager" kindref="compound">OrbitDeterminationManager</ref>&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;</type>
          <declname>measurementData</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>typeAndLinkSortedNormalizedInformationMatrix</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>normalizationFactors</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>outputTimes</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>diagonalOfWeightMatrix</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>unnormalizedInverseAPrioriCovariance</declname>
        </param>
        <briefdescription>
<para>Function to create a map of the estimation covariance as a function of time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a map of the estimation covariance as a function of time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurementData</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure containing all observable values, as well as associated times and reference link ends </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typeAndLinkSortedNormalizedInformationMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Information matrix, normalized by the normalizationFactors, and sorted as in the normalizationFactors: first by observable type, then by link ends </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalizationFactors</parametername>
</parameternamelist>
<parameterdescription>
<para>Values by which the parameters (and partials) have been normalized, in order to stabilize the solution of the normal equations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>Times at which the covariance is to be computed for the output map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diagonalOfWeightMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the diagonal of the weights matrix used in the estimation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unnormalizedInverseAPrioriCovariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Inverse a priori covariance matrix, with parameters not normalized by normalizationFactors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Covariance (map values) as a function of time (map keys) for the given estimation input settings and output times. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" line="271" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" bodystart="271" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="da/dca/podProcessing_8h_1a40fc692d58b648b2e716cb4bc1b43365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; TimeType, Eigen::MatrixXd &gt;</type>
        <definition>std::map&lt; TimeType, Eigen::MatrixXd &gt; tudat::simulation_setup::calculateCovarianceUsingDataUpToEpoch</definition>
        <argsstring>(const typename OrbitDeterminationManager&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;measurementData, const Eigen::MatrixXd &amp;typeAndLinkSortedNormalizedInformationMatrix, const Eigen::VectorXd &amp;normalizationFactors, const double outputTimeStep, const Eigen::VectorXd &amp;diagonalOfWeightMatrix, const Eigen::MatrixXd &amp;unnormalizedInverseAPrioriCovariance)</argsstring>
        <name>calculateCovarianceUsingDataUpToEpoch</name>
        <param>
          <type>const typename <ref refid="d3/d01/classtudat_1_1simulation__setup_1_1OrbitDeterminationManager" kindref="compound">OrbitDeterminationManager</ref>&lt; ObservationScalarType, TimeType &gt;::PodInputType &amp;</type>
          <declname>measurementData</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>typeAndLinkSortedNormalizedInformationMatrix</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>normalizationFactors</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>outputTimeStep</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>diagonalOfWeightMatrix</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>unnormalizedInverseAPrioriCovariance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" line="390" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" bodystart="390" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="da/dca/podProcessing_8h_1a7f1b433097a1537f5eef631dfb5bc451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>ObservationScalarType</defval>
          </param>
          <param>
            <type>typename ParameterScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; TimeType, Eigen::MatrixXd &gt;</type>
        <definition>std::map&lt; TimeType, Eigen::MatrixXd &gt; tudat::simulation_setup::calculateCovarianceUsingDataUpToEpoch</definition>
        <argsstring>(const std::shared_ptr&lt; PodInput&lt; ObservationScalarType, TimeType &gt; &gt; &amp;podInputData, const std::shared_ptr&lt; PodOutput&lt; ParameterScalarType &gt; &gt; &amp;podOutputData, const std::vector&lt; double &gt; &amp;outputTimes)</argsstring>
        <name>calculateCovarianceUsingDataUpToEpoch</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/da2/classtudat_1_1simulation__setup_1_1PodInput" kindref="compound">PodInput</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &amp;</type>
          <declname>podInputData</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d6f/structtudat_1_1simulation__setup_1_1PodOutput" kindref="compound">PodOutput</ref>&lt; ParameterScalarType &gt; &gt; &amp;</type>
          <declname>podOutputData</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>outputTimes</declname>
        </param>
        <briefdescription>
<para>Function to create a map of the estimation covariance as a function of time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a map of the estimation covariance as a function of time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>podInputData</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure containing all input to the orbit determination process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>podOutputData</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure containing all output of the orbit determination process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputTimes</parametername>
</parameternamelist>
<parameterdescription>
<para>Times at which the covariance is to be computed for the output map. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Covariance (map values) as a function of time (map keys) for the given estimation input settings and output times. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" line="428" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" bodystart="428" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="da/dca/podProcessing_8h_1a2d582980ade9ebc51ece1eb64d086f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObservationScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename TimeType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename StateScalarType</type>
            <defval>ObservationScalarType</defval>
          </param>
          <param>
            <type>typename ParameterScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; TimeType, Eigen::MatrixXd &gt;</type>
        <definition>std::map&lt; TimeType, Eigen::MatrixXd &gt; tudat::simulation_setup::calculateCovarianceUsingDataUpToEpoch</definition>
        <argsstring>(const std::shared_ptr&lt; PodInput&lt; ObservationScalarType, TimeType &gt; &gt; &amp;podInputData, const std::shared_ptr&lt; PodOutput&lt; ParameterScalarType &gt; &gt; &amp;podOutputData, const double outputTimeStep)</argsstring>
        <name>calculateCovarianceUsingDataUpToEpoch</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/da2/classtudat_1_1simulation__setup_1_1PodInput" kindref="compound">PodInput</ref>&lt; ObservationScalarType, TimeType &gt; &gt; &amp;</type>
          <declname>podInputData</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d6f/structtudat_1_1simulation__setup_1_1PodOutput" kindref="compound">PodOutput</ref>&lt; ParameterScalarType &gt; &gt; &amp;</type>
          <declname>podOutputData</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>outputTimeStep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" line="441" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/estimation_setup/podProcessing.h" bodystart="441" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1afea71fdf7db8ac0f4c769f8d0bd58eac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::acceleration</definition>
        <argsstring>(basic_astrodynamics::AvailableAcceleration accelerationType)</argsstring>
        <name>acceleration</name>
        <param>
          <type>basic_astrodynamics::AvailableAcceleration</type>
          <declname>accelerationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="65" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1a8091955674009caf396cea9d563e27b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::pointMassGravityAcceleration</definition>
        <argsstring>()</argsstring>
        <name>pointMassGravityAcceleration</name>
        <briefdescription>
<para>@get_docstring(pointMassGravityAcceleration) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="71" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1af29e9d4abd79cfb7fc974f3e76132878" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::aerodynamicAcceleration</definition>
        <argsstring>()</argsstring>
        <name>aerodynamicAcceleration</name>
        <briefdescription>
<para>@get_docstring(aerodynamicAcceleration) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="77" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1a5824fe42dbe5e730455e68e842fff0b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::cannonBallRadiationPressureAcceleration</definition>
        <argsstring>()</argsstring>
        <name>cannonBallRadiationPressureAcceleration</name>
        <briefdescription>
<para>@get_docstring(cannonBallRadiationPressureAcceleration) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="83" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1ab913b9076864793a5f73ca92738b21bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::sphericalHarmonicAcceleration</definition>
        <argsstring>(const int maximumDegree, const int maximumOrder)</argsstring>
        <name>sphericalHarmonicAcceleration</name>
        <param>
          <type>const int</type>
          <declname>maximumDegree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumOrder</declname>
        </param>
        <briefdescription>
<para>@get_docstring(sphericalHarmonicAcceleration) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="118" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1aad8f85dec9ddb2bfdedc9f5a512d7dfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::mutualSphericalHarmonicAcceleration</definition>
        <argsstring>(const int maximumDegreeOfBodyExertingAcceleration, const int maximumOrderOfBodyExertingAcceleration, const int maximumDegreeOfBodyUndergoingAcceleration, const int maximumOrderOfBodyUndergoingAcceleration, const int maximumDegreeOfCentralBody=0, const int maximumOrderOfCentralBody=0)</argsstring>
        <name>mutualSphericalHarmonicAcceleration</name>
        <param>
          <type>const int</type>
          <declname>maximumDegreeOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumOrderOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumDegreeOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumOrderOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumDegreeOfCentralBody</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumOrderOfCentralBody</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>@get_docstring(mutualSphericalHarmonicAcceleration) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="179" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="179" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1ae2d3314f1094c09492768968f723ecf0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::relativisticAccelerationCorrection</definition>
        <argsstring>(const bool calculateSchwarzschildCorrection=true, const bool calculateLenseThirringCorrection=false, const bool calculateDeSitterCorrection=false, const std::string primaryBody=&quot;&quot;, const Eigen::Vector3d centralBodyAngularMomentum=Eigen::Vector3d::Zero())</argsstring>
        <name>relativisticAccelerationCorrection</name>
        <param>
          <type>const bool</type>
          <declname>calculateSchwarzschildCorrection</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>calculateLenseThirringCorrection</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>calculateDeSitterCorrection</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>primaryBody</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>centralBodyAngularMomentum</declname>
          <defval>Eigen::Vector3d::Zero()</defval>
        </param>
        <briefdescription>
<para>@get_docstring(relativisticAccelerationCorrection) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="257" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="257" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1af08c4edaa1f7742856b400e55059d72f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::empiricalAcceleration</definition>
        <argsstring>(const Eigen::Vector3d &amp;constantAcceleration=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;sineAcceleration=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;cosineAcceleration=Eigen::Vector3d::Zero())</argsstring>
        <name>empiricalAcceleration</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>constantAcceleration</declname>
          <defval>Eigen::Vector3d::Zero()</defval>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>sineAcceleration</declname>
          <defval>Eigen::Vector3d::Zero()</defval>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cosineAcceleration</declname>
          <defval>Eigen::Vector3d::Zero()</defval>
        </param>
        <briefdescription>
<para>@get_docstring(empiricalAcceleration) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="307" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="307" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1ae4667a83518643a002c671f9aae3b009" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::simulation_setup::applyAccelerationScalingFunction</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d(const double) &gt; accelerationFunction, const std::function&lt; double(const double) &gt; scalingFunction, const double time)</argsstring>
        <name>applyAccelerationScalingFunction</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const double) &gt;</type>
          <declname>accelerationFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>scalingFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="546" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="546" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1a0f33e9373a1ccff5c521333a1161de0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::thrustAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; ThrustDirectionSettings &gt; thrustDirectionGuidanceSettings, const std::shared_ptr&lt; ThrustMagnitudeSettings &gt; thrustMagnitudeSettings)</argsstring>
        <name>thrustAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/d1a/classtudat_1_1simulation__setup_1_1ThrustDirectionSettings" kindref="compound">ThrustDirectionSettings</ref> &gt;</type>
          <declname>thrustDirectionGuidanceSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" kindref="compound">ThrustMagnitudeSettings</ref> &gt;</type>
          <declname>thrustMagnitudeSettings</declname>
        </param>
        <briefdescription>
<para>@get_docstring(thrustAcceleration, 1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="555" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="555" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1aa47f04e2e81250cbeaf91a5089f0a8b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::thrustAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; interpolators::DataInterpolationSettings&lt; double, Eigen::Vector3d &gt; &gt; &amp;dataInterpolationSettings, const std::function&lt; double(const double) &gt; specificImpulseFunction, const ThrustFrames thrustFrame=unspecified_thrust_frame, const std::string centralBody=&quot;&quot;)</argsstring>
        <name>thrustAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d5c/classtudat_1_1interpolators_1_1DataInterpolationSettings" kindref="compound">interpolators::DataInterpolationSettings</ref>&lt; double, Eigen::Vector3d &gt; &gt; &amp;</type>
          <declname>dataInterpolationSettings</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>specificImpulseFunction</declname>
        </param>
        <param>
          <type>const ThrustFrames</type>
          <declname>thrustFrame</declname>
          <defval>unspecified_thrust_frame</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>centralBody</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(thrustAcceleration, 2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="563" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="563" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1ab3cc4f66693be18b638e1b0ebbf74500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::thrustAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; interpolators::DataInterpolationSettings&lt; double, Eigen::Vector3d &gt; &gt; &amp;dataInterpolationSettings, const double constantSpecificImpulse, const ThrustFrames thrustFrame=unspecified_thrust_frame, const std::string centralBody=&quot;&quot;)</argsstring>
        <name>thrustAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d5c/classtudat_1_1interpolators_1_1DataInterpolationSettings" kindref="compound">interpolators::DataInterpolationSettings</ref>&lt; double, Eigen::Vector3d &gt; &gt; &amp;</type>
          <declname>dataInterpolationSettings</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>constantSpecificImpulse</declname>
        </param>
        <param>
          <type>const ThrustFrames</type>
          <declname>thrustFrame</declname>
          <defval>unspecified_thrust_frame</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>centralBody</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(thrustAcceleration, 3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="574" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="574" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1a8a491ead4e5c73029fd4e1dcfe82824d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d3f/classtudat_1_1simulation__setup_1_1ThrustAccelerationSettings" kindref="compound">simulation_setup::ThrustAccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; simulation_setup::ThrustAccelerationSettings &gt; tudat::simulation_setup::getLowThrustLegAccelerationSettings</definition>
        <argsstring>(const std::shared_ptr&lt; low_thrust_trajectories::LowThrustLeg &gt; lowThrustLeg, const simulation_setup::SystemOfBodies &amp;bodies, const std::string &amp;bodyToPropagate, const std::function&lt; double(const double) &gt; specificImpulseFunction, const double lowThrustLegInitialTime)</argsstring>
        <name>getLowThrustLegAccelerationSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/d2c/classtudat_1_1low__thrust__trajectories_1_1LowThrustLeg" kindref="compound">low_thrust_trajectories::LowThrustLeg</ref> &gt;</type>
          <declname>lowThrustLeg</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>specificImpulseFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lowThrustLegInitialTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="586" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="586" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1aa6d18b6cf3760f8178bde0660e202d33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::customAccelerationSettings</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d(const double) &gt; accelerationFunction, const std::function&lt; double(const double) &gt; scalingFunction=nullptr)</argsstring>
        <name>customAccelerationSettings</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const double) &gt;</type>
          <declname>accelerationFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>scalingFunction</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>@get_docstring(customAccelerationSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="661" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="661" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1a88337796b1c5efe334d1d0d6bae4f835" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::directTidalDissipationAcceleration</definition>
        <argsstring>(const double k2LoveNumber, const double timeLag, const bool includeDirectRadialComponent=true, const bool useTideRaisedOnPlanet=true)</argsstring>
        <name>directTidalDissipationAcceleration</name>
        <param>
          <type>const double</type>
          <declname>k2LoveNumber</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeLag</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>includeDirectRadialComponent</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>useTideRaisedOnPlanet</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>@get_docstring(directTidalDissipationAcceleration) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="720" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="720" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="da/dc7/accelerationSettings_8h_1a4093626b73f0cfde2d9394634b381ce1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationSettings &gt; tudat::simulation_setup::momentumWheelDesaturationAcceleration</definition>
        <argsstring>(const std::vector&lt; double &gt; thrustMidTimes, const std::vector&lt; Eigen::Vector3d &gt; deltaVValues, const double totalManeuverTime, const double maneuverRiseTime)</argsstring>
        <name>momentumWheelDesaturationAcceleration</name>
        <param>
          <type>const std::vector&lt; double &gt;</type>
          <declname>thrustMidTimes</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Vector3d &gt;</type>
          <declname>deltaVValues</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>totalManeuverTime</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>maneuverRiseTime</declname>
        </param>
        <briefdescription>
<para>@get_docstring(momentumWheelDesaturationAcceleration) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" line="772" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/accelerationSettings.h" bodystart="772" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a5ea335208e380307c3941480299012ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
        <definition>std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; tudat::simulation_setup::createDirectGravitationalAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings, const std::string &amp;nameOfCentralBody=&quot;&quot;, const bool isCentralBody=0)</argsstring>
        <name>createDirectGravitationalAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfCentralBody</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>isCentralBody</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Function to create a direct (i.e. not third-body) gravitational acceleration (of any type) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a direct (i.e. not third-body) gravitational acceleration of any type (i.e. point mass, spherical harmonic, mutual spherical harmonic). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the gravitational acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is exerting the gravitational acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings object for the gravitational acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of central body in frame centered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean defining whether the body undergoing the acceleration is the central body for a third-body acceleration, of which the return object of this funciton is one of the sub-parts. Boolean is only used when creating mutual spherical harmonic acceleration, to ensure the correct usage of the acceleration settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Direct gravitational acceleration model of requested settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="47" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="47" bodyend="102" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="54" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1ac933459dd638551002d0f4941f3bd144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
        <definition>std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; tudat::simulation_setup::createThirdBodyGravitationalAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::shared_ptr&lt; Body &gt; centralBody, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::string &amp;nameOfCentralBody, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings)</argsstring>
        <name>createThirdBodyGravitationalAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfCentralBody</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <briefdescription>
<para>Function to create a third-body gravitational acceleration (of any type) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a direct third-body gravitational acceleration of any type (i.e. point mass, spherical harmonic, mutual spherical harmonic). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the gravitational acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to central body in frame centered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is exerting the gravitational acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of central body in frame centered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings object for the gravitational acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Third-body gravitational acceleration model of requested settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="105" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="105" bodyend="162" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="77" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1abfd5decc86524e088d41eeebbb26ce01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationModel&lt; Eigen::Vector3d &gt; &gt; tudat::simulation_setup::createGravitationalAccelerationModel</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::shared_ptr&lt; Body &gt; centralBody, const std::string &amp;nameOfCentralBody)</argsstring>
        <name>createGravitationalAccelerationModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfCentralBody</declname>
        </param>
        <briefdescription>
<para>Function to create gravitational acceleration (of any type) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a third-body or direct gravitational acceleration of any type (i.e. point mass, spherical harmonic, mutual spherical harmonic). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the gravitational acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings object for the gravitational acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to central body in frame centered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is exerting the gravitational acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of central body in frame centered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Gravitational acceleration model of requested settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="165" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="165" bodyend="203" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="100" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1aae75035d932a24d0ade277e0a1b8076a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="da/d7d/classtudat_1_1gravitation_1_1CentralGravitationalAccelerationModel" kindref="compound">gravitation::CentralGravitationalAccelerationModel3d</ref> &gt;</type>
        <definition>std::shared_ptr&lt; CentralGravitationalAccelerationModel3d &gt; tudat::simulation_setup::createCentralGravityAcceleratioModel</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const bool useCentralBodyFixedFrame)</argsstring>
        <name>createCentralGravityAcceleratioModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useCentralBodyFixedFrame</declname>
        </param>
        <briefdescription>
<para>Function to create central gravity acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create central gravity acceleration model from bodies exerting and undergoing acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the central gravity acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is exerting the central gravity acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCentralBodyFixedFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean setting whether the central attraction of body undergoing acceleration on body exerting acceleration is to be included in acceleration model. Should be set to true in case the body undergoing acceleration is a celestial body (with gravity field) and integration is performed in the frame centered at the body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Central gravity acceleration model pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="207" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="207" bodyend="263" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="127" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a2417419ce2dd5f015aa72a4d731284f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/dfe/classtudat_1_1gravitation_1_1SphericalHarmonicsGravitationalAccelerationModel" kindref="compound">gravitation::SphericalHarmonicsGravitationalAccelerationModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::SphericalHarmonicsGravitationalAccelerationModel &gt; tudat::simulation_setup::createSphericalHarmonicsGravityAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings, const bool useCentralBodyFixedFrame, const bool useDegreeZeroTerm=true)</argsstring>
        <name>createSphericalHarmonicsGravityAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useCentralBodyFixedFrame</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useDegreeZeroTerm</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function to create spherical harmonic gravity acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create spherical harmonic gravity acceleration model from bodies exerting and undergoing acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the spherical harmonic gravity acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is exerting the spherical harmonic gravity acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for acceleration model that is to be created (should be of derived type associated with spherical harmonic acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCentralBodyFixedFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean setting whether the central attraction of body undergoing acceleration on body exerting acceleration is to be included in acceleration model. Should be set to true in case the body undergoing acceleration is a celestial body (with gravity field) and integration is performed in the frame centered at the body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useDegreeZeroTerm</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether to manually remove the C(0,0) term from cosine coefficients (default true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Spherical harmonic gravity acceleration model pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="267" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="267" bodyend="385" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="156" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a6aeb33b98201c93be9162279cc15d73c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d2/dd9/classtudat_1_1gravitation_1_1MutualSphericalHarmonicsGravitationalAccelerationModel" kindref="compound">gravitation::MutualSphericalHarmonicsGravitationalAccelerationModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::MutualSphericalHarmonicsGravitationalAccelerationModel &gt; tudat::simulation_setup::createMutualSphericalHarmonicsGravityAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings, const bool useCentralBodyFixedFrame, const bool acceleratedBodyIsCentralBody)</argsstring>
        <name>createMutualSphericalHarmonicsGravityAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useCentralBodyFixedFrame</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>acceleratedBodyIsCentralBody</declname>
        </param>
        <briefdescription>
<para>Function to create mutual spherical harmonic gravity acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create mutual spherical harmonic gravity acceleration model from bodies exerting and undergoing acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the mutual spherical harmonic gravity acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is exerting the mutual spherical harmonic gravity acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for acceleration model that is to be created (should be of derived type associated with mutual spherical harmonic acceleration). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCentralBodyFixedFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean setting whether the central attraction of body undergoing acceleration on body exerting acceleration is to be included in acceleration model. Should be set to true in case the body undergoing acceleration is a celestial body (with gravity field) and integration is performed in the frame centered at the body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleratedBodyIsCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean defining whether the body undergoing the acceleration is the central body for a third-body acceleration, of which the return object of this funciton is one of the sub-parts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mutual spherical harmonic gravity acceleration model pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="389" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="389" bodyend="509" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="187" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a186efa38683aea66c45aee5076849196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/db0/classtudat_1_1gravitation_1_1ThirdBodyAcceleration" kindref="compound">gravitation::ThirdBodyCentralGravityAcceleration</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::ThirdBodyCentralGravityAcceleration &gt; tudat::simulation_setup::createThirdBodyCentralGravityAccelerationModel</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::shared_ptr&lt; Body &gt; centralBody, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::string &amp;nameOfCentralBody)</argsstring>
        <name>createThirdBodyCentralGravityAccelerationModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfCentralBody</declname>
        </param>
        <briefdescription>
<para>Function to create a third body central gravity acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a third body central gravity acceleration model from bodies exerting and undergoing acceleration, as well as the central body, w.r.t. which the integration is to be performed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to central body in frame centered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the central gravity acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of central body in frame cenetered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating central gravity acceleration between bodies. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="514" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="514" bodyend="538" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="213" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1ab12bf3dbffa86e1d95870339fc8f6f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/db0/classtudat_1_1gravitation_1_1ThirdBodyAcceleration" kindref="compound">gravitation::ThirdBodySphericalHarmonicsGravitationalAccelerationModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::ThirdBodySphericalHarmonicsGravitationalAccelerationModel &gt; tudat::simulation_setup::createThirdBodySphericalHarmonicGravityAccelerationModel</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::shared_ptr&lt; Body &gt; centralBody, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::string &amp;nameOfCentralBody, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings)</argsstring>
        <name>createThirdBodySphericalHarmonicGravityAccelerationModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfCentralBody</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <briefdescription>
<para>Function to create a third body spheric harmonic gravity acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a third body spheric harmonic gravity acceleration model from bodies exerting and undergoing acceleration, as well as the central body, w.r.t. which the integration is to be performed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to central body in frame centered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the central gravity acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of central body in frame cenetered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for acceleration model that is to be created (should be of derived type associated with spherical harmonic acceleration). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating third-body spheric harmonic gravity acceleration between bodies. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="542" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="542" bodyend="593" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="240" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1aaedebe5ab21d1cc18fd634e0c1d8b0cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/db0/classtudat_1_1gravitation_1_1ThirdBodyAcceleration" kindref="compound">gravitation::ThirdBodyMutualSphericalHarmonicsGravitationalAccelerationModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::ThirdBodyMutualSphericalHarmonicsGravitationalAccelerationModel &gt; tudat::simulation_setup::createThirdBodyMutualSphericalHarmonicGravityAccelerationModel</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::shared_ptr&lt; Body &gt; centralBody, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::string &amp;nameOfCentralBody, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings)</argsstring>
        <name>createThirdBodyMutualSphericalHarmonicGravityAccelerationModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfCentralBody</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <briefdescription>
<para>Function to create a third body mutual spheric harmonic gravity acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a third body mutual spheric harmonic gravity acceleration model from bodies exerting and undergoing acceleration, as well as the central body, w.r.t. which the integration is to be performed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to central body in frame centered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the central gravity acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of central body in frame cenetered at which acceleration is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for acceleration model that is to be created (should be of derived type associated with mutual spherical harmonic acceleration). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating third-body mutual spheric harmonic gravity acceleration between bodies. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="597" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="597" bodyend="675" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="268" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1acd0b996c23a3aad46aa00b5fdf050f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/dea/classtudat_1_1aerodynamics_1_1AerodynamicAcceleration" kindref="compound">aerodynamics::AerodynamicAcceleration</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::AerodynamicAcceleration &gt; tudat::simulation_setup::createAerodynamicAcceleratioModel</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration)</argsstring>
        <name>createAerodynamicAcceleratioModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <briefdescription>
<para>Function to create an aerodynamic acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an aerodynamic acceleration model, automatically creates all required links to environment models, vehicle properies and frame conversions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the acceleration, i.e. body with the atmosphere through which the accelerated body is flying. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating aerodynamic acceleration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="678" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="678" bodyend="759" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="289" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1aeceeb3ab0430aa38e00627c94f63e45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/dfe/classtudat_1_1electromagnetism_1_1CannonBallRadiationPressureAcceleration" kindref="compound">electromagnetism::CannonBallRadiationPressureAcceleration</ref> &gt;</type>
        <definition>std::shared_ptr&lt; CannonBallRadiationPressureAcceleration &gt; tudat::simulation_setup::createCannonballRadiationPressureAcceleratioModel</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration)</argsstring>
        <name>createCannonballRadiationPressureAcceleratioModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <briefdescription>
<para>Function to create a cannonball radiation pressure acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a cannonball radiation pressure automatically creates all required links to environment models, vehicle properies and frame conversions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the acceleration, i.e. body emitting the radiation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating cannonball radiation pressures acceleration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="763" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="763" bodyend="791" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="307" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1ab5c7b69d9249e80126a7183a7e891817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d5/dad/classtudat_1_1electromagnetism_1_1PanelledRadiationPressureAcceleration" kindref="compound">electromagnetism::PanelledRadiationPressureAcceleration</ref> &gt;</type>
        <definition>std::shared_ptr&lt; electromagnetism::PanelledRadiationPressureAcceleration &gt; tudat::simulation_setup::createPanelledRadiationPressureAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration)</argsstring>
        <name>createPanelledRadiationPressureAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <briefdescription>
<para>Function to create a panelled radiation pressure acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a panelled radiation pressure automatically creates all required links to environment models, vehicle properies and frame conversions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the acceleration, i.e. body emitting the radiation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating cannonball radiation pressures acceleration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="794" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="794" bodyend="824" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="324" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a080e2aa8634493715ed2721151136875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/d10/classtudat_1_1electromagnetism_1_1SolarSailAcceleration" kindref="compound">electromagnetism::SolarSailAcceleration</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SolarSailAcceleration &gt; tudat::simulation_setup::createSolarSailAccelerationModel</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::shared_ptr&lt; Body &gt; centralBody, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration)</argsstring>
        <name>createSolarSailAccelerationModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <briefdescription>
<para>Function to create a non-ideal solar pressure radiation acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a solar sail radiation pressure acceleration model.</para>
<para>Function to create a non-ideal solar pressure radiation acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of central body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Solar sail acceleration model pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="827" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="827" bodyend="867" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="341" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a2144489a0dabbe005f36b6aa5c28e3d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/d67/classtudat_1_1propulsion_1_1ThrustAcceleration" kindref="compound">propulsion::ThrustAcceleration</ref> &gt;</type>
        <definition>std::shared_ptr&lt; propulsion::ThrustAcceleration &gt; tudat::simulation_setup::createThrustAcceleratioModel</definition>
        <argsstring>(const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings, const SystemOfBodies &amp;bodies, const std::string &amp;nameOfBodyUndergoingThrust)</argsstring>
        <name>createThrustAcceleratioModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingThrust</declname>
        </param>
        <briefdescription>
<para>Function to create a thrust acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a thrust acceleration model. Creates all required links to environment models, vehicle properies and frame conversions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings of thrust acceleration model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to bodies required for the creation of the acceleration model objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingThrust</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is undergoing the thrust acceleration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating thrust acceleration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="1063" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="1063" bodyend="1157" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="358" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a0f6d40f2509f1bb94da3eaa9c7114ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d82/classtudat_1_1gravitation_1_1DirectTidalDissipationAcceleration" kindref="compound">gravitation::DirectTidalDissipationAcceleration</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::DirectTidalDissipationAcceleration &gt; tudat::simulation_setup::createDirectTidalDissipationAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings)</argsstring>
        <name>createDirectTidalDissipationAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <briefdescription>
<para>Function to create a direct tidal acceleration model, according to approach of Lainey et al. (2007, 2009, ...) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a direct tical acceleration model, according to approach of Lainey et al. (2007, 2009, ...)</para>
<para>Function to create a direct tidal acceleration model, according to approach of Lainey et al. (2007, 2009, ...). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of main body that is exerting the acceleration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the acceleration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the acceleration model </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating acceleration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="1160" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="1160" bodyend="1276" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="373" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a5e875adef11afaa78172e89b3a675b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d2/d6d/classtudat_1_1propulsion_1_1MomentumWheelDesaturationThrustAcceleration" kindref="compound">propulsion::MomentumWheelDesaturationThrustAcceleration</ref> &gt;</type>
        <definition>std::shared_ptr&lt; propulsion::MomentumWheelDesaturationThrustAcceleration &gt; tudat::simulation_setup::createMomentumWheelDesaturationAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings)</argsstring>
        <name>createMomentumWheelDesaturationAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <briefdescription>
<para>Function to create a momentum wheel desaturation acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a momentum wheel desaturation acceleration model. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of main body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the acceleration model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating acceleration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="1279" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="1279" bodyend="1305" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="390" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a4dc32ddeff0274871e8d5c23e66ea554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d68/classtudat_1_1relativity_1_1RelativisticAccelerationCorrection" kindref="compound">relativity::RelativisticAccelerationCorrection</ref> &gt;</type>
        <definition>std::shared_ptr&lt; relativity::RelativisticAccelerationCorrection &gt; tudat::simulation_setup::createRelativisticCorrectionAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings, const SystemOfBodies &amp;bodies)</argsstring>
        <name>createRelativisticCorrectionAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Function to create an orbiter relativistic correction acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an orbiter relativistic correction acceleration model (Schwarzschild, Lense-Thirring and/or de Sitter terms). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of main body that is exerting the acceleration (e.g. Earth for an orbiter around the Earth). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the acceleration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the acceleration model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to bodies that comprise the full environment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating relativistic correction acceleration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="886" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="886" bodyend="1012" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="410" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a3da83eb94be068d5656fff328a769434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/df3/classtudat_1_1basic__astrodynamics_1_1EmpiricalAcceleration" kindref="compound">basic_astrodynamics::EmpiricalAcceleration</ref> &gt;</type>
        <definition>std::shared_ptr&lt; EmpiricalAcceleration &gt; tudat::simulation_setup::createEmpiricalAcceleration</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings)</argsstring>
        <name>createEmpiricalAcceleration</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <briefdescription>
<para>Function to create empirical acceleration model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create empirical acceleration model from body undergoing acceleration and body wrt which its orbit is determined for setting determining phase of once per orbit empirical accelerations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body wrt whic orbit of body undergoing the acceleration is calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body wrt whic orbit of body undergoing the acceleration is calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing additional settings for acceleration model, must be of type <ref refid="d6/d80/classtudat_1_1simulation__setup_1_1EmpiricalAccelerationSettings" kindref="compound">EmpiricalAccelerationSettings</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating empiricalt acceleration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="1016" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="1016" bodyend="1059" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="429" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1ad314adb1362cd34b71756ccdbf39e84e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
        <definition>std::shared_ptr&lt; AccelerationModel&lt; Eigen::Vector3d &gt; &gt; tudat::simulation_setup::createAccelerationModel</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyUndergoingAcceleration, const std::shared_ptr&lt; Body &gt; bodyExertingAcceleration, const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings, const std::string &amp;nameOfBodyUndergoingAcceleration, const std::string &amp;nameOfBodyExertingAcceleration, const std::shared_ptr&lt; Body &gt; centralBody=std::shared_ptr&lt; Body &gt;(), const std::string &amp;nameOfCentralBody=&quot;&quot;, const SystemOfBodies &amp;bodies=SystemOfBodies())</argsstring>
        <name>createAccelerationModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>centralBody</declname>
          <defval>std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfCentralBody</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
          <defval><ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref>()</defval>
        </param>
        <briefdescription>
<para>Function to create acceleration model object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create acceleration model object. Type of requested model is checked and corresponding factory function is called. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting acceleration, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for acceleration model that is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to central body in frame centered at which acceleration is to be calculated (optional, only relevant for third body accelerations). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of central body in frame cenetered at which acceleration is to be calculated (optional, only relevant for third body accelerations). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to bodies required for the creation of the acceleration model objects. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Acceleration model pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="1308" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="1308" bodyend="1431" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="455" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a941ab592ae5738d3ac1cc8e4823ae9b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SelectedAccelerationList</type>
        <definition>SelectedAccelerationList tudat::simulation_setup::orderSelectedAccelerationMap</definition>
        <argsstring>(const SelectedAccelerationMap &amp;selectedAccelerationPerBody)</argsstring>
        <name>orderSelectedAccelerationMap</name>
        <param>
          <type>const SelectedAccelerationMap &amp;</type>
          <declname>selectedAccelerationPerBody</declname>
        </param>
        <briefdescription>
<para>Function to put SelectedAccelerationMap in correct order, to ensure correct model creation. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to put SelectedAccelerationMap in correct order, to ensure correct model creation <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>selectedAccelerationPerBody</parametername>
</parameternamelist>
<parameterdescription>
<para>List of acceleration settings per body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>selectedAccelerationPerBody, put in order to ensure correct model creation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="1434" column="26" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="1434" bodyend="1526" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="471" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a2398009460de678afaeaf8d2ec339743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>basic_astrodynamics::AccelerationMap</type>
        <definition>basic_astrodynamics::AccelerationMap tudat::simulation_setup::createAccelerationModelsMap</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const SelectedAccelerationMap &amp;selectedAccelerationPerBody, const std::map&lt; std::string, std::string &gt; &amp;centralBodies)</argsstring>
        <name>createAccelerationModelsMap</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const SelectedAccelerationMap &amp;</type>
          <declname>selectedAccelerationPerBody</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <briefdescription>
<para>Function to create acceleration models from a map of bodies and acceleration model types. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a set of acceleration models from a map of bodies and acceleration model types.</para>
<para>Function to create acceleration models from a map of bodies and acceleration model types. The return type can be used to identify both the body undergoing and exerting acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to bodies required for the creation of the acceleration model objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedAccelerationPerBody</parametername>
</parameternamelist>
<parameterdescription>
<para>List identifying which bodies exert which type of acceleration(s) on which bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of central bodies for each body undergoing acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of acceleration model objects, in form of AccelerationMap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="1530" column="38" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="1530" bodyend="1652" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="484" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="dc/dfc/createAccelerationModels_8h_1a40058dccbab634140055f3747b953395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>basic_astrodynamics::AccelerationMap</type>
        <definition>basic_astrodynamics::AccelerationMap tudat::simulation_setup::createAccelerationModelsMap</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const SelectedAccelerationMap &amp;selectedAccelerationPerBody, const std::vector&lt; std::string &gt; &amp;propagatedBodies, const std::vector&lt; std::string &gt; &amp;centralBodies)</argsstring>
        <name>createAccelerationModelsMap</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const SelectedAccelerationMap &amp;</type>
          <declname>selectedAccelerationPerBody</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>propagatedBodies</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>centralBodies</declname>
        </param>
        <briefdescription>
<para>Function to create acceleration models from a map of bodies and acceleration model types. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create acceleration models from a map of bodies and acceleration model types. The return type can be used to identify both the body undergoing and exerting acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to bodies required for the creation of the acceleration model objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedAccelerationPerBody</parametername>
</parameternamelist>
<parameterdescription>
<para>List identifying which bodies exert which type of acceleration(s) on which bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatedBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies that are to be propagated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of central bodies for each body undergoing acceleration (in same order as propagatedBodies). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of acceleration model objects, in form of AccelerationMap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="1655" column="38" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="1655" bodyend="1673" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createAccelerationModels.h" declline="501" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="d8/d36/createMassRateModels_8h_1a549e347f82d7aade214bfe25b7c7fbca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d7c/classtudat_1_1simulation__setup_1_1MassRateModelSettings" kindref="compound">MassRateModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; MassRateModelSettings &gt; tudat::simulation_setup::customMassRate</definition>
        <argsstring>(const std::function&lt; double(const double) &gt; massRateFunction)</argsstring>
        <name>customMassRate</name>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>massRateFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createMassRateModels.h" line="114" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createMassRateModels.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="d8/d36/createMassRateModels_8h_1a8cc5c4d8722ceb93c57243d423618676" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/d7c/classtudat_1_1simulation__setup_1_1MassRateModelSettings" kindref="compound">MassRateModelSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; MassRateModelSettings &gt; tudat::simulation_setup::fromThrustMassRate</definition>
        <argsstring>(const bool useAllThrustModels=1, const std::string &amp;associatedThrustSource=&quot;&quot;)</argsstring>
        <name>fromThrustMassRate</name>
        <param>
          <type>const bool</type>
          <declname>useAllThrustModels</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>associatedThrustSource</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createMassRateModels.h" line="120" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createMassRateModels.h" bodystart="120" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="d8/d36/createMassRateModels_8h_1a12374e7c9cc4932cc1e54725989eea78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d2/df8/classtudat_1_1basic__astrodynamics_1_1MassRateModel" kindref="compound">basic_astrodynamics::MassRateModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; basic_astrodynamics::MassRateModel &gt; tudat::simulation_setup::createMassRateModel</definition>
        <argsstring>(const std::string &amp;bodyWithMassRate, const std::shared_ptr&lt; MassRateModelSettings &gt; massRateModelSettings, const SystemOfBodies &amp;bodies, const basic_astrodynamics::AccelerationMap &amp;accelerationModels=basic_astrodynamics::AccelerationMap())</argsstring>
        <name>createMassRateModel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyWithMassRate</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/d7c/classtudat_1_1simulation__setup_1_1MassRateModelSettings" kindref="compound">MassRateModelSettings</ref> &gt;</type>
          <declname>massRateModelSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationModels</declname>
          <defval>basic_astrodynamics::AccelerationMap()</defval>
        </param>
        <briefdescription>
<para>Function to create a mass rate model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a mass rate model, from specific settings and the full set of environment models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyWithMassRate</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which a mass rate model is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massRateModelSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the mass rate model that is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to body objects; defines the full simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of acceleration models that are used during numerical propagation (empty by default). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mass rate model that is to be used during numerical propagation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createMassRateModels.cpp" line="22" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createMassRateModels.cpp" bodystart="22" bodyend="120" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createMassRateModels.h" declline="136" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d8/d36/createMassRateModels_8h_1a17463a93c23b916bd0e97e715986deed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>basic_astrodynamics::MassRateModelMap</type>
        <definition>basic_astrodynamics::MassRateModelMap tudat::simulation_setup::createMassRateModelsMap</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const SelectedMassRateModelMap &amp;massRateModelSettings, const basic_astrodynamics::AccelerationMap &amp;accelerationModels=basic_astrodynamics::AccelerationMap())</argsstring>
        <name>createMassRateModelsMap</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const SelectedMassRateModelMap &amp;</type>
          <declname>massRateModelSettings</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationModels</declname>
          <defval>basic_astrodynamics::AccelerationMap()</defval>
        </param>
        <briefdescription>
<para>Function to create a list of mass rate models for a list of bodies. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a list of mass rate models for a list of bodies, from specific settings and the full set of environment models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to body objects; defines the full simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massRateModelSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the mass rate models that are to be created (key is body id). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of acceleration models that are used during numerical propagation (empty by default). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mass rate models that are to be used during numerical propagation (key is body id).. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createMassRateModels.cpp" line="124" column="39" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createMassRateModels.cpp" bodystart="124" bodyend="144" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createMassRateModels.h" declline="152" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="d6/da9/createThrustModelGuidance_8h_1ad567d564e23ddc9df13e8315027db9de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::simulation_setup::getCombinedThrustDirection</definition>
        <argsstring>(const std::vector&lt; std::function&lt; Eigen::Vector3d()&gt; &gt; &amp;thrustDirections, const std::vector&lt; std::function&lt; double()&gt; &gt; &amp;thrustMagnitudes)</argsstring>
        <name>getCombinedThrustDirection</name>
        <param>
          <type>const std::vector&lt; std::function&lt; Eigen::Vector3d()&gt; &gt; &amp;</type>
          <declname>thrustDirections</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::function&lt; double()&gt; &gt; &amp;</type>
          <declname>thrustMagnitudes</declname>
        </param>
        <briefdescription>
<para>Function to retrieve the effective thrust direction from a set of thrust sources. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the effective thrust direction from a set of thrust sources. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrustDirections</parametername>
</parameternamelist>
<parameterdescription>
<para>List of functions returning thrust directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustMagnitudes</parametername>
</parameternamelist>
<parameterdescription>
<para>List of functions returning thrust magnitude. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Effective thrust direction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" line="220" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" bodystart="220" bodyend="233" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createThrustModelGuidance.h" declline="38" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/da9/createThrustModelGuidance_8h_1aae4c20c48c3f4368b4aba6bb3277d79e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; Eigen::Vector3d() &gt;</type>
        <definition>std::function&lt; Eigen::Vector3d() &gt; tudat::simulation_setup::getBodyFixedThrustDirection</definition>
        <argsstring>(const std::shared_ptr&lt; ThrustMagnitudeSettings &gt; thrustMagnitudeSettings, const SystemOfBodies &amp;bodies, const std::string bodyName)</argsstring>
        <name>getBodyFixedThrustDirection</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" kindref="compound">ThrustMagnitudeSettings</ref> &gt;</type>
          <declname>thrustMagnitudeSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>bodyName</declname>
        </param>
        <briefdescription>
<para>Function to create a function that returns the thrust direction in the body-fixed frame. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a function that returns the thrust direction in the body-fixed frame. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the thrust magnitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which thrust is to be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function that returns the thrust direction in the body-fixed frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" line="236" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" bodystart="236" bodyend="378" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createThrustModelGuidance.h" declline="50" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d6/da9/createThrustModelGuidance_8h_1afa60b4b63b5ebfdd66ca4d8d5be81bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d2/d72/classtudat_1_1propulsion_1_1ThrustMagnitudeWrapper" kindref="compound">propulsion::ThrustMagnitudeWrapper</ref> &gt;</type>
        <definition>std::shared_ptr&lt; propulsion::ThrustMagnitudeWrapper &gt; tudat::simulation_setup::createThrustMagnitudeWrapper</definition>
        <argsstring>(const std::shared_ptr&lt; ThrustMagnitudeSettings &gt; thrustMagnitudeSettings, const SystemOfBodies &amp;bodies, const std::string &amp;nameOfBodyWithGuidance, std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; &amp;magnitudeUpdateSettings)</argsstring>
        <name>createThrustMagnitudeWrapper</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" kindref="compound">ThrustMagnitudeSettings</ref> &gt;</type>
          <declname>thrustMagnitudeSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyWithGuidance</declname>
        </param>
        <param>
          <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; &amp;</type>
          <declname>magnitudeUpdateSettings</declname>
        </param>
        <briefdescription>
<para>Function to create a wrapper object that computes the thrust magnitude. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a wrapper object that computes the thrust magnitude <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the thrust magnitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of body objects that comprises the environment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyWithGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which thrust is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>magnitudeUpdateSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>environment update settings that are required to compute the thrust direction (updated by function as needed). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object used during propagation to compute the thrust direction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" line="381" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" bodystart="381" bodyend="565" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createThrustModelGuidance.h" declline="65" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/da9/createThrustModelGuidance_8h_1aa8cb02ee345b4f239fa78cb53b8dad6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::updateThrustSettings</definition>
        <argsstring>(const std::shared_ptr&lt; propulsion::ThrustMagnitudeWrapper &gt; thrustMagnitudeWrapper, const std::shared_ptr&lt; propulsion::BodyFixedForceDirectionGuidance &gt; thrustDirectionGuidance, const double currentTime)</argsstring>
        <name>updateThrustSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d2/d72/classtudat_1_1propulsion_1_1ThrustMagnitudeWrapper" kindref="compound">propulsion::ThrustMagnitudeWrapper</ref> &gt;</type>
          <declname>thrustMagnitudeWrapper</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/dd5/classtudat_1_1propulsion_1_1BodyFixedForceDirectionGuidance" kindref="compound">propulsion::BodyFixedForceDirectionGuidance</ref> &gt;</type>
          <declname>thrustDirectionGuidance</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
        </param>
        <briefdescription>
<para>Function to update the thrust magnitude and direction to current time. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to update the thrust magnitude and direction to current time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Object used during propagation to compute the thrust magnitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustDirectionGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Object used during propagation to compute the body-fixed thrust direction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> to which objects are to be updated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" line="568" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" bodystart="568" bodyend="575" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createThrustModelGuidance.h" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/da9/createThrustModelGuidance_8h_1a022191e6fb2b9036dab917e862d14546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::resetThrustSettingsTime</definition>
        <argsstring>(const std::shared_ptr&lt; propulsion::ThrustMagnitudeWrapper &gt; thrustMagnitudeWrapper, const std::shared_ptr&lt; propulsion::BodyFixedForceDirectionGuidance &gt; thrustDirectionGuidance, const double currentTime=TUDAT_NAN)</argsstring>
        <name>resetThrustSettingsTime</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d2/d72/classtudat_1_1propulsion_1_1ThrustMagnitudeWrapper" kindref="compound">propulsion::ThrustMagnitudeWrapper</ref> &gt;</type>
          <declname>thrustMagnitudeWrapper</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d1/dd5/classtudat_1_1propulsion_1_1BodyFixedForceDirectionGuidance" kindref="compound">propulsion::BodyFixedForceDirectionGuidance</ref> &gt;</type>
          <declname>thrustDirectionGuidance</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
<para>Function to reset the current time variable of the thrust magnitude and direction wrappers. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to reset the current time variable of the thrust magnitude and direction wrappers. This function does not update the actual thrust direction and guidance; it is typically used to reset the current time to NaN, thereby signalling the need to recompute the magnitude/direction upon next call to update functions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeWrapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Object used during propagation to compute the thrust magnitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustDirectionGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Object used during propagation to compute the body-fixed thrust direction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para>New current time variable that is to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" line="578" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" bodystart="578" bodyend="585" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createThrustModelGuidance.h" declline="92" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d0b/createTorqueModel_8h_1a5fcd4bfab93a6a76f6f3087cc5c5d07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d1c/classtudat_1_1basic__astrodynamics_1_1InertialTorqueModel" kindref="compound">basic_astrodynamics::InertialTorqueModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; basic_astrodynamics::InertialTorqueModel &gt; tudat::simulation_setup::createInertialTorqueModel</definition>
        <argsstring>(const std::shared_ptr&lt; simulation_setup::Body &gt; bodyUndergoingTorque, const std::string &amp;nameOfBodyUndergoingTorque)</argsstring>
        <name>createInertialTorqueModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingTorque</declname>
        </param>
        <briefdescription>
<para>Function to create an aerodynamic torque model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" line="23" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" bodystart="23" bodyend="33" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createTorqueModel.h" declline="33" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d0b/createTorqueModel_8h_1a5eadcf269c45afded86828a832dbf94d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d8f/classtudat_1_1aerodynamics_1_1AerodynamicTorque" kindref="compound">aerodynamics::AerodynamicTorque</ref> &gt;</type>
        <definition>std::shared_ptr&lt; aerodynamics::AerodynamicTorque &gt; tudat::simulation_setup::createAerodynamicTorqueModel</definition>
        <argsstring>(const std::shared_ptr&lt; simulation_setup::Body &gt; bodyUndergoingTorque, const std::shared_ptr&lt; simulation_setup::Body &gt; bodyExertingTorque, const std::string &amp;nameOfBodyUndergoingTorque, const std::string &amp;nameOfBodyExertingTorque)</argsstring>
        <name>createAerodynamicTorqueModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyExertingTorque</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingTorque</declname>
        </param>
        <briefdescription>
<para>Function to create an aerodynamic torque model. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create an aerodynamic torque model, automatically creates all required links to environment models, vehicle properies and frame conversions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the torque, i.e. body with the atmosphere through which the accelerated body is flying. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the torque. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating aerodynamic torque. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" line="36" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" bodystart="36" bodyend="119" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createTorqueModel.h" declline="48" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d0b/createTorqueModel_8h_1ac3b2bd1c20c37629e372d5d53cc8e739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d6/d5e/classtudat_1_1gravitation_1_1SecondDegreeGravitationalTorqueModel" kindref="compound">gravitation::SecondDegreeGravitationalTorqueModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::SecondDegreeGravitationalTorqueModel &gt; tudat::simulation_setup::createSecondDegreeGravitationalTorqueModel</definition>
        <argsstring>(const std::shared_ptr&lt; simulation_setup::Body &gt; bodyUndergoingTorque, const std::shared_ptr&lt; simulation_setup::Body &gt; bodyExertingTorque, const std::string &amp;nameOfBodyUndergoingTorque, const std::string &amp;nameOfBodyExertingTorque)</argsstring>
        <name>createSecondDegreeGravitationalTorqueModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyExertingTorque</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingTorque</declname>
        </param>
        <briefdescription>
<para>Function to create a second-degree gravitational torque. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a second-degree gravitational torque, exerted by a point mass <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the gravitational torque. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is exerting the gravitational torque. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object for calculating gravitational torque. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" line="122" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" bodystart="122" bodyend="158" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createTorqueModel.h" declline="63" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d0b/createTorqueModel_8h_1aa4d7ad6d4767ea907ba379dc59a68e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d9f/classtudat_1_1gravitation_1_1SphericalHarmonicGravitationalTorqueModel" kindref="compound">gravitation::SphericalHarmonicGravitationalTorqueModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; gravitation::SphericalHarmonicGravitationalTorqueModel &gt; tudat::simulation_setup::createSphericalHarmonicGravitationalTorqueModel</definition>
        <argsstring>(const std::shared_ptr&lt; simulation_setup::Body &gt; bodyUndergoingTorque, const std::shared_ptr&lt; simulation_setup::Body &gt; bodyExertingTorque, const std::shared_ptr&lt; TorqueSettings &gt; torqueSettings, const std::string &amp;nameOfBodyUndergoingTorque, const std::string &amp;nameOfBodyExertingTorque)</argsstring>
        <name>createSphericalHarmonicGravitationalTorqueModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyExertingTorque</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt;</type>
          <declname>torqueSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingTorque</declname>
        </param>
        <briefdescription>
<para>Function to create a spherical harmonic gravitational torque. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create spherical harmonic gravitational torque, exerted by a point mass <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting the gravitational torque. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>torqueSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the torque that is to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body that is exerting the gravitational torque. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Direct gravitational torque model of requested settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" line="162" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" bodystart="162" bodyend="190" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createTorqueModel.h" declline="79" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d0b/createTorqueModel_8h_1a4056e00e0d80762eae359deadc641f19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d3/d97/classtudat_1_1basic__astrodynamics_1_1CustomTorqueModel" kindref="compound">basic_astrodynamics::CustomTorqueModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; basic_astrodynamics::CustomTorqueModel &gt; tudat::simulation_setup::createCustomTorqueModel</definition>
        <argsstring>(const std::shared_ptr&lt; TorqueSettings &gt; torqueSettings, const std::string &amp;nameOfBodyUndergoingTorque)</argsstring>
        <name>createCustomTorqueModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt;</type>
          <declname>torqueSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingTorque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" line="192" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" bodystart="192" bodyend="206" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createTorqueModel.h" declline="86" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d0b/createTorqueModel_8h_1ac71adf0fabedb3c3eb80f4ba21d8621f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">basic_astrodynamics::TorqueModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; basic_astrodynamics::TorqueModel &gt; tudat::simulation_setup::createTorqueModel</definition>
        <argsstring>(const std::shared_ptr&lt; simulation_setup::Body &gt; bodyUndergoingTorque, const std::shared_ptr&lt; simulation_setup::Body &gt; bodyExertingTorque, const std::shared_ptr&lt; TorqueSettings &gt; torqueSettings, const std::string &amp;nameOfBodyUndergoingTorque, const std::string &amp;nameOfBodyExertingTorque)</argsstring>
        <name>createTorqueModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">simulation_setup::Body</ref> &gt;</type>
          <declname>bodyExertingTorque</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt;</type>
          <declname>torqueSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingTorque</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyExertingTorque</declname>
        </param>
        <briefdescription>
<para>Function to create torque model object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create torque model object. Type of requested model is checked and corresponding factory function is called. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyUndergoingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyExertingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to object of body that is exerting torque, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>torqueSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for torque model that is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyUndergoingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyExertingTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of object of body that is exerting the torque. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Torque model pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" line="209" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" bodystart="209" bodyend="257" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createTorqueModel.h" declline="101" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d0b/createTorqueModel_8h_1a0e1adf2da9d9ed81e8bffc196e90f70f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>basic_astrodynamics::TorqueModelMap</type>
        <definition>basic_astrodynamics::TorqueModelMap tudat::simulation_setup::createTorqueModelsMap</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, SelectedTorqueMap selectedTorquePerBody, const std::vector&lt; std::string &gt; &amp;propagatedBodies)</argsstring>
        <name>createTorqueModelsMap</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>SelectedTorqueMap</type>
          <declname>selectedTorquePerBody</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>propagatedBodies</declname>
        </param>
        <briefdescription>
<para>Function to create torque models from a map of bodies and torque model settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create torque models from a map of bodies and torque model settings. The return type can be used to identify both the body undergoing and exerting torque. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to bodies required for the creation of the torque model objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedTorquePerBody</parametername>
</parameternamelist>
<parameterdescription>
<para>List identifying which bodies exert which type of torque(s) on which bodies. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagatedBodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of bodies that are to be propagated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Torque models for the input map of bodies, based on the torque model settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" line="261" column="37" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createTorqueModel.cpp" bodystart="261" bodyend="316" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/createTorqueModel.h" declline="119" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/propagationLowThrustProblem_8h_1a9279bec76aca32637fe05b0091058c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::simulation_setup::computeLowThrustLegSemiAnalyticalAndFullPropagation</definition>
        <argsstring>(const std::shared_ptr&lt; low_thrust_trajectories::LowThrustLeg &gt; lowThrustLeg, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; integratorSettings, const std::pair&lt; std::shared_ptr&lt; propagators::PropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::PropagatorSettings&lt; double &gt; &gt; &gt; &amp;propagatorSettings, std::map&lt; double, Eigen::VectorXd &gt; &amp;fullPropagationResults, std::map&lt; double, Eigen::Vector6d &gt; &amp;semiAnalyticalResults, std::map&lt; double, Eigen::VectorXd &gt; &amp;dependentVariablesHistory)</argsstring>
        <name>computeLowThrustLegSemiAnalyticalAndFullPropagation</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/d2c/classtudat_1_1low__thrust__trajectories_1_1LowThrustLeg" kindref="compound">low_thrust_trajectories::LowThrustLeg</ref> &gt;</type>
          <declname>lowThrustLeg</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; double &gt; &gt; &gt; &amp;</type>
          <declname>propagatorSettings</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>fullPropagationResults</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::Vector6d &gt; &amp;</type>
          <declname>semiAnalyticalResults</declname>
        </param>
        <param>
          <type>std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>dependentVariablesHistory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLowThrustProblem.cpp" line="10" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLowThrustProblem.cpp" bodystart="10" bodyend="75" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLowThrustProblem.h" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/propagationLowThrustProblem_8h_1a74a102d2a082355cda0173f620bf39f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>basic_astrodynamics::AccelerationMap</type>
        <definition>basic_astrodynamics::AccelerationMap tudat::simulation_setup::retrieveLowThrustAccelerationMap</definition>
        <argsstring>(const std::shared_ptr&lt; low_thrust_trajectories::LowThrustLeg &gt; lowThrustLeg, const simulation_setup::SystemOfBodies &amp;bodies, const std::string &amp;bodyToPropagate, const std::string &amp;centralBody, const std::function&lt; double(const double) &gt; specificImpulseFunction, const double lowThrustLegInitialTime)</argsstring>
        <name>retrieveLowThrustAccelerationMap</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/d2c/classtudat_1_1low__thrust__trajectories_1_1LowThrustLeg" kindref="compound">low_thrust_trajectories::LowThrustLeg</ref> &gt;</type>
          <declname>lowThrustLeg</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>specificImpulseFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lowThrustLegInitialTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLowThrustProblem.cpp" line="78" column="38" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLowThrustProblem.cpp" bodystart="78" bodyend="102" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLowThrustProblem.h" declline="37" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/propagationLowThrustProblem_8h_1afeb875b7482db3a7bf3df53925d5f8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="d4/d5b/classtudat_1_1propagators_1_1TranslationalStatePropagatorSettings" kindref="compound">propagators::TranslationalStatePropagatorSettings</ref>&lt; double &gt; &gt; &gt;</type>
        <definition>std::pair&lt; std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::TranslationalStatePropagatorSettings&lt; double &gt; &gt; &gt; tudat::simulation_setup::createLowThrustTranslationalStatePropagatorSettings</definition>
        <argsstring>(const std::shared_ptr&lt; low_thrust_trajectories::LowThrustLeg &gt; lowThrustLeg, const std::string &amp;bodyToPropagate, const std::string &amp;centralBody, const basic_astrodynamics::AccelerationMap &amp;accelerationModelMap, const std::shared_ptr&lt; propagators::DependentVariableSaveSettings &gt; dependentVariablesToSave)</argsstring>
        <name>createLowThrustTranslationalStatePropagatorSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/d2c/classtudat_1_1low__thrust__trajectories_1_1LowThrustLeg" kindref="compound">low_thrust_trajectories::LowThrustLeg</ref> &gt;</type>
          <declname>lowThrustLeg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationModelMap</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">propagators::DependentVariableSaveSettings</ref> &gt;</type>
          <declname>dependentVariablesToSave</declname>
        </param>
        <briefdescription>
<para>Define appropriate translational state propagator settings for the full propagation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLowThrustProblem.cpp" line="107" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLowThrustProblem.cpp" bodystart="107" bodyend="145" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLowThrustProblem.h" declline="48" declcolumn="2"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/propagationLowThrustProblem_8h_1a850cacc3e8a9e667b5e9386c45bbc41e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; double &gt; &gt;, std::shared_ptr&lt; <ref refid="df/d0a/classtudat_1_1propagators_1_1PropagatorSettings" kindref="compound">propagators::PropagatorSettings</ref>&lt; double &gt; &gt; &gt;</type>
        <definition>std::pair&lt; std::shared_ptr&lt; propagators::PropagatorSettings&lt; double &gt; &gt;, std::shared_ptr&lt; propagators::PropagatorSettings&lt; double &gt; &gt; &gt; tudat::simulation_setup::createLowThrustPropagatorSettings</definition>
        <argsstring>(const std::shared_ptr&lt; low_thrust_trajectories::LowThrustLeg &gt; lowThrustLeg, const double bodyMassAtMidPoint, const simulation_setup::SystemOfBodies &amp;bodies, const std::string &amp;bodyToPropagate, const std::string &amp;centralBody, const std::function&lt; double(const double) &gt; specificImpulseFunction, const basic_astrodynamics::AccelerationMap perturbingAccelerationsMap, const std::shared_ptr&lt; numerical_integrators::IntegratorSettings&lt; double &gt; &gt; &amp;integratorSettings, const std::shared_ptr&lt; propagators::DependentVariableSaveSettings &gt; &amp;dependentVariablesToSave)</argsstring>
        <name>createLowThrustPropagatorSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="db/d2c/classtudat_1_1low__thrust__trajectories_1_1LowThrustLeg" kindref="compound">low_thrust_trajectories::LowThrustLeg</ref> &gt;</type>
          <declname>lowThrustLeg</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bodyMassAtMidPoint</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bodyToPropagate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>specificImpulseFunction</declname>
        </param>
        <param>
          <type>const basic_astrodynamics::AccelerationMap</type>
          <declname>perturbingAccelerationsMap</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/df3/classtudat_1_1numerical__integrators_1_1IntegratorSettings" kindref="compound">numerical_integrators::IntegratorSettings</ref>&lt; double &gt; &gt; &amp;</type>
          <declname>integratorSettings</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d64/classtudat_1_1propagators_1_1DependentVariableSaveSettings" kindref="compound">propagators::DependentVariableSaveSettings</ref> &gt; &amp;</type>
          <declname>dependentVariablesToSave</declname>
        </param>
        <briefdescription>
<para>Define appropriate propagator settings for the full propagation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLowThrustProblem.cpp" line="149" column="2" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/propagationLowThrustProblem.cpp" bodystart="149" bodyend="239" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/propagationLowThrustProblem.h" declline="58" declcolumn="2"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1abd0d2331fb27280cf5a5e83a19c7ae14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::function&lt; double() &gt; &gt;</type>
        <definition>std::vector&lt; std::function&lt; double( ) &gt; &gt; tudat::simulation_setup::getPropulsionInputVariables</definition>
        <argsstring>(const std::shared_ptr&lt; Body &gt; bodyWithGuidance, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; independentVariables, const std::vector&lt; std::function&lt; double() &gt; &gt; guidanceInputFunctions)</argsstring>
        <name>getPropulsionInputVariables</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d8/d9b/classtudat_1_1simulation__setup_1_1Body" kindref="compound">Body</ref> &gt;</type>
          <declname>bodyWithGuidance</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>independentVariables</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::function&lt; double() &gt; &gt;</type>
          <declname>guidanceInputFunctions</declname>
          <defval>std::vector&lt; std::function&lt; double() &gt; &gt;()</defval>
        </param>
        <briefdescription>
<para>Function to create a list of functions that (compute and) return independent variables for thrust. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a list of functions that (compute and) return independent variables for thrust and/or specific impulse. This parameterization is used in the thrust mangitude type is thrust_magnitude_from_dependent_variables. This function retrieves all input functions from the environment and a list of user-defined functions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyWithGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which the propulsion settings are to be retrieved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>independentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of variables for which function returning them are to be created. Note that the number of guidance_input_dependent_thrust entries must be equal to the size of guidanceInputFunctions. No entries of type throttle_dependent_thrust are allowed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guidanceInputFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>Functions returning user-defined variables on which the thrust/specific impulse depends </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of functions that (compute and) return independent variables for thrust </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="22" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="22" bodyend="102" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="65" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1af21cc87d39f5a0d7a0979b9c3ca6959c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d1a/classtudat_1_1simulation__setup_1_1ThrustDirectionSettings" kindref="compound">ThrustDirectionSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ThrustDirectionSettings &gt; tudat::simulation_setup::thrustDirectionFromStateGuidanceSettings</definition>
        <argsstring>(const std::string &amp;centralBody, const bool isColinearWithVelocity, const bool directionIsOppositeToVector)</argsstring>
        <name>thrustDirectionFromStateGuidanceSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBody</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isColinearWithVelocity</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>directionIsOppositeToVector</declname>
        </param>
        <briefdescription>
<para>@get_docstring(thrustDirectionFromStateGuidanceSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="268" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="268" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1afa1632790b71b5be71f45e57472fbf5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d1a/classtudat_1_1simulation__setup_1_1ThrustDirectionSettings" kindref="compound">ThrustDirectionSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ThrustDirectionSettings &gt; tudat::simulation_setup::thrustFromExistingBodyOrientation</definition>
        <argsstring>()</argsstring>
        <name>thrustFromExistingBodyOrientation</name>
        <briefdescription>
<para>@get_docstring(thrustFromExistingBodyOrientation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="278" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1acda026f84c3e6af76d601670741d0805" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d1a/classtudat_1_1simulation__setup_1_1ThrustDirectionSettings" kindref="compound">ThrustDirectionSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ThrustDirectionSettings &gt; tudat::simulation_setup::customThrustOrientationSettings</definition>
        <argsstring>(const std::function&lt; Eigen::Quaterniond(const double) &gt; thrustOrientationFunction)</argsstring>
        <name>customThrustOrientationSettings</name>
        <param>
          <type>const std::function&lt; Eigen::Quaterniond(const double) &gt;</type>
          <declname>thrustOrientationFunction</declname>
        </param>
        <briefdescription>
<para>@get_docstring(customThrustOrientationSettings, 1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="284" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="284" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a2971f8e8bf72f60d3574da0f5bb0017f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d1a/classtudat_1_1simulation__setup_1_1ThrustDirectionSettings" kindref="compound">ThrustDirectionSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ThrustDirectionSettings &gt; tudat::simulation_setup::customThrustOrientationSettings</definition>
        <argsstring>(const std::function&lt; Eigen::Matrix3d(const double) &gt; thrustOrientationFunction)</argsstring>
        <name>customThrustOrientationSettings</name>
        <param>
          <type>const std::function&lt; Eigen::Matrix3d(const double) &gt;</type>
          <declname>thrustOrientationFunction</declname>
        </param>
        <briefdescription>
<para>@get_docstring(customThrustOrientationSettings, 2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="291" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="291" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a9e540e40e65b5cc4575ef99ed936edea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d1a/classtudat_1_1simulation__setup_1_1ThrustDirectionSettings" kindref="compound">ThrustDirectionSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ThrustDirectionSettings &gt; tudat::simulation_setup::customThrustDirectionSettings</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d(const double) &gt; thrustDirectionFunction)</argsstring>
        <name>customThrustDirectionSettings</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const double) &gt;</type>
          <declname>thrustDirectionFunction</declname>
        </param>
        <briefdescription>
<para>@get_docstring(customThrustDirectionSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="299" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a424ab27775f58b618b70ff1c15bd1e26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d1a/classtudat_1_1simulation__setup_1_1ThrustDirectionSettings" kindref="compound">ThrustDirectionSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ThrustDirectionSettings &gt; tudat::simulation_setup::meeCostateBasedThrustDirectionSettings</definition>
        <argsstring>(const std::string &amp;vehicleName, const std::string &amp;centralBodyName, const std::shared_ptr&lt; interpolators::OneDimensionalInterpolator&lt; double, Eigen::VectorXd &gt; &gt; costateInterpolator)</argsstring>
        <name>meeCostateBasedThrustDirectionSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vehicleName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBodyName</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d6/d99/classtudat_1_1interpolators_1_1OneDimensionalInterpolator" kindref="compound">interpolators::OneDimensionalInterpolator</ref>&lt; double, Eigen::VectorXd &gt; &gt;</type>
          <declname>costateInterpolator</declname>
        </param>
        <briefdescription>
<para>@get_docstring(meeCostateBasedThrustDirectionSettings, 1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="306" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="306" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a844dbca54eff63abd4513e48367e5a3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d1a/classtudat_1_1simulation__setup_1_1ThrustDirectionSettings" kindref="compound">ThrustDirectionSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ThrustDirectionSettings &gt; tudat::simulation_setup::meeCostateBasedThrustDirectionSettings</definition>
        <argsstring>(const std::string &amp;vehicleName, const std::string &amp;centralBodyName, const Eigen::VectorXd constantCostates)</argsstring>
        <name>meeCostateBasedThrustDirectionSettings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vehicleName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>centralBodyName</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd</type>
          <declname>constantCostates</declname>
        </param>
        <briefdescription>
<para>@get_docstring(meeCostateBasedThrustDirectionSettings, 2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="316" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="316" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a4faec5f430ba1a46ef3b2938e0e41748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d1/dd5/classtudat_1_1propulsion_1_1BodyFixedForceDirectionGuidance" kindref="compound">propulsion::BodyFixedForceDirectionGuidance</ref> &gt;</type>
        <definition>std::shared_ptr&lt; propulsion::BodyFixedForceDirectionGuidance &gt; tudat::simulation_setup::createThrustGuidanceModel</definition>
        <argsstring>(const std::shared_ptr&lt; ThrustDirectionSettings &gt; thrustDirectionGuidanceSettings, const SystemOfBodies &amp;bodies, const std::string &amp;nameOfBodyWithGuidance, const std::function&lt; Eigen::Vector3d() &gt; bodyFixedThrustOrientation, std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; &amp;magnitudeUpdateSettings)</argsstring>
        <name>createThrustGuidanceModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dd/d1a/classtudat_1_1simulation__setup_1_1ThrustDirectionSettings" kindref="compound">ThrustDirectionSettings</ref> &gt;</type>
          <declname>thrustDirectionGuidanceSettings</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyWithGuidance</declname>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector3d() &gt;</type>
          <declname>bodyFixedThrustOrientation</declname>
        </param>
        <param>
          <type>std::map&lt; propagators::EnvironmentModelsToUpdate, std::vector&lt; std::string &gt; &gt; &amp;</type>
          <declname>magnitudeUpdateSettings</declname>
        </param>
        <briefdescription>
<para>Function to create the object determining the direction of the thrust acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create the object determining the direction of the thrust acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrustDirectionGuidanceSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for thrust direction gudiance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to body objects defining the full simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyWithGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which thrust guidance is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyFixedThrustOrientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Thrust direction in body-fixed frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>magnitudeUpdateSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings for the required updates to the environment during propagation. List is extended by this function as needed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function determining the thrust direction in the propagation frame according to given requirements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" line="22" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createThrustModelGuidance.cpp" bodystart="22" bodyend="217" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="337" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a05d162d098525346169595966a19ee58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" kindref="compound">ThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ThrustMagnitudeSettings &gt; tudat::simulation_setup::constantThrustMagnitudeSettings</definition>
        <argsstring>(const double thrustMagnitude, const double specificImpulse, const Eigen::Vector3d bodyFixedThrustDirection=Eigen::Vector3d::UnitX())</argsstring>
        <name>constantThrustMagnitudeSettings</name>
        <param>
          <type>const double</type>
          <declname>thrustMagnitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>specificImpulse</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>bodyFixedThrustDirection</declname>
          <defval>Eigen::Vector3d::UnitX()</defval>
        </param>
        <briefdescription>
<para>@get_docstring(constantThrustMagnitudeSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="623" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="623" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1ad347fe597c1f5ccece38222bd164d521" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" kindref="compound">ThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ThrustMagnitudeSettings &gt; tudat::simulation_setup::fromBodyThrustMagnitudeSettings</definition>
        <argsstring>(const bool useAllEngines=1, const std::string &amp;thrustOrigin=&quot;&quot;)</argsstring>
        <name>fromBodyThrustMagnitudeSettings</name>
        <param>
          <type>const bool</type>
          <declname>useAllEngines</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>thrustOrigin</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>@get_docstring(fromBodyThrustMagnitudeSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="634" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="634" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a60b39eddf2152b0b909aff65009e0bb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d12/classtudat_1_1simulation__setup_1_1ThrustMagnitudeSettings" kindref="compound">ThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ThrustMagnitudeSettings &gt; tudat::simulation_setup::fromFunctionThrustMagnitudeSettings</definition>
        <argsstring>(const std::function&lt; double(const double) &gt; thrustMagnitudeFunction, const std::function&lt; double(const double) &gt; specificImpulseFunction, const std::function&lt; bool(const double) &gt; isEngineOnFunction=[](const double){ return true;}, const std::function&lt; Eigen::Vector3d() &gt; bodyFixedThrustDirection=[](){ return Eigen::Vector3d::UnitX();}, const std::function&lt; void(const double) &gt; customThrustResetFunction=std::function&lt; void(const double) &gt;())</argsstring>
        <name>fromFunctionThrustMagnitudeSettings</name>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>thrustMagnitudeFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>specificImpulseFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(const double) &gt;</type>
          <declname>isEngineOnFunction</declname>
          <defval>[](const double){ return true;}</defval>
        </param>
        <param>
          <type>const std::function&lt; Eigen::Vector3d() &gt;</type>
          <declname>bodyFixedThrustDirection</declname>
          <defval>[](){ return Eigen::Vector3d::UnitX();}</defval>
        </param>
        <param>
          <type>const std::function&lt; void(const double) &gt;</type>
          <declname>customThrustResetFunction</declname>
          <defval>std::function&lt; void(const double) &gt;()</defval>
        </param>
        <briefdescription>
<para>@get_docstring(fromFunctionThrustMagnitudeSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" line="643" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" bodystart="643" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a6b83c1c1e29248a5a3c8cc40b199ede8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::simulation_setup::multiplyMaximumThrustByScalingFactor</definition>
        <argsstring>(const std::function&lt; double(const std::vector&lt; double &gt; &amp;) &gt; maximumThrustFunction, const std::function&lt; double() &gt; maximumThrustMultiplier, const std::vector&lt; double &gt; &amp;maximumThrustIndependentVariables)</argsstring>
        <name>multiplyMaximumThrustByScalingFactor</name>
        <param>
          <type>const std::function&lt; double(const std::vector&lt; double &gt; &amp;) &gt;</type>
          <declname>maximumThrustFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; double() &gt;</type>
          <declname>maximumThrustMultiplier</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>maximumThrustIndependentVariables</declname>
        </param>
        <briefdescription>
<para>Interface function to multiply a maximum thrust by a multiplier to obtain the actual thrust. </para>
        </briefdescription>
        <detaileddescription>
<para>Interface function to multiply a maximum thrust by a multiplier to obtain the actual thrust <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maximumThrustFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the maxumum thrust as a function of a number of independent variables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumThrustMultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning a value by which the output of maximumThrustFunction is to be multiplied to obtain the actual thrust. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumThrustIndependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of variables to be passed as input to maximumThrustFunction </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="106" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="106" bodyend="112" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="664" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a6d45a329134f2be7bc0158ae1a924257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d6c/classtudat_1_1interpolators_1_1Interpolator" kindref="compound">interpolators::Interpolator</ref>&lt; double, double &gt; &gt;</type>
        <definition>std::shared_ptr&lt; interpolators::Interpolator&lt; double, double &gt; &gt; tudat::simulation_setup::readCoefficientInterpolatorFromFile</definition>
        <argsstring>(const std::string coefficientFile)</argsstring>
        <name>readCoefficientInterpolatorFromFile</name>
        <param>
          <type>const std::string</type>
          <declname>coefficientFile</declname>
        </param>
        <briefdescription>
<para>Function to read a thrust or specific impulse interpolator from a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to read a thrust or specific impulse interpolator from a file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coefficientFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename containing data to be used as input for interpolator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interpolator set according to data in coefficientFile </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="213" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="213" bodyend="248" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="1099" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1aa832f1bfdd30d2bedb7608cf4611348f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dff/classtudat_1_1simulation__setup_1_1ParameterizedThrustMagnitudeSettings" kindref="compound">ParameterizedThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ParameterizedThrustMagnitudeSettings &gt; tudat::simulation_setup::createParameterizedThrustMagnitudeSettings</definition>
        <argsstring>(const std::shared_ptr&lt; ThrustInputParameterGuidance &gt; thrustInputParameterGuidance, const std::shared_ptr&lt; interpolators::Interpolator&lt; double, double &gt; &gt; thrustMagnitudeInterpolator, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; thrustIndependentVariables, const std::shared_ptr&lt; interpolators::Interpolator&lt; double, double &gt; &gt; specificImpulseInterpolator, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; specificImpulseDependentVariables)</argsstring>
        <name>createParameterizedThrustMagnitudeSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/de0/classtudat_1_1simulation__setup_1_1ThrustInputParameterGuidance" kindref="compound">ThrustInputParameterGuidance</ref> &gt;</type>
          <declname>thrustInputParameterGuidance</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d6c/classtudat_1_1interpolators_1_1Interpolator" kindref="compound">interpolators::Interpolator</ref>&lt; double, double &gt; &gt;</type>
          <declname>thrustMagnitudeInterpolator</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>thrustIndependentVariables</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d6c/classtudat_1_1interpolators_1_1Interpolator" kindref="compound">interpolators::Interpolator</ref>&lt; double, double &gt; &gt;</type>
          <declname>specificImpulseInterpolator</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>specificImpulseDependentVariables</declname>
        </param>
        <briefdescription>
<para>Function to create thrust magnitude settings from guidance input and tables. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create thrust magnitude settings from guidance input and tables <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrustInputParameterGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that computes all guidance-input parameters as a function of time/state Note that the number of implemented parameters must be consistent with the numbet of associated entries in thrustIndependentVariables and specificImpulseDependentVariables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeInterpolator</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolator returning the current thrust (or maximum thrust if thrustIndependentVariables contains an throttle_dependent_thrust entry) as a function of the independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustIndependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of identifiers for the physical meaning of each of the entries of the input to the &apos;interpolate&apos; function of thrustMagnitudeInterpolator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificImpulseInterpolator</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolator returning the current specific impulse as a function of the independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificImpulseDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of identifiers for the physical meaning of each of the entries of the input to the &apos;interpolate&apos; function of specificImpulseInterpolator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Thrust magnitude settings for given input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="251" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="251" bodyend="285" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="1118" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a7255bec637e268cdb577172f57aeac07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dff/classtudat_1_1simulation__setup_1_1ParameterizedThrustMagnitudeSettings" kindref="compound">ParameterizedThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ParameterizedThrustMagnitudeSettings &gt; tudat::simulation_setup::createParameterizedThrustMagnitudeSettings</definition>
        <argsstring>(const std::shared_ptr&lt; ThrustInputParameterGuidance &gt; thrustInputParameterGuidance, const std::string thrustMagnitudeDataFile, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; thrustIndependentVariables, const std::string specificImpulseDataFile, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; specificImpulseDependentVariables)</argsstring>
        <name>createParameterizedThrustMagnitudeSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/de0/classtudat_1_1simulation__setup_1_1ThrustInputParameterGuidance" kindref="compound">ThrustInputParameterGuidance</ref> &gt;</type>
          <declname>thrustInputParameterGuidance</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>thrustMagnitudeDataFile</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>thrustIndependentVariables</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>specificImpulseDataFile</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>specificImpulseDependentVariables</declname>
        </param>
        <briefdescription>
<para>Function to create thrust magnitude settings from guidance input and tables. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create thrust magnitude settings from guidance input and tables <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrustInputParameterGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that computes all guidance-input parameters as a function of time/state Note that the number of implemented parameters must be consistent with the numbet of associated entries in thrustIndependentVariables and specificImpulseDependentVariables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeDataFile</parametername>
</parameternamelist>
<parameterdescription>
<para>File containing data for the thrust (or maximum thrust if thrustIndependentVariables contains an throttle_dependent_thrust entry) and associated independent variables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustIndependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of identifiers for the physical meaning of each of the entries of the input to the &apos;interpolate&apos; function of thrustMagnitudeInterpolator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificImpulseDataFile</parametername>
</parameternamelist>
<parameterdescription>
<para>File containing data for the specific impulse and associated independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificImpulseDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of identifiers for the physical meaning of each of the entries of the input to the &apos;interpolate&apos; function of specificImpulseInterpolator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Thrust magnitude settings for given input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="288" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="288" bodyend="300" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="1140" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a00db38b0f35de012b8c8d0102dc69506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dff/classtudat_1_1simulation__setup_1_1ParameterizedThrustMagnitudeSettings" kindref="compound">ParameterizedThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ParameterizedThrustMagnitudeSettings &gt; tudat::simulation_setup::createParameterizedThrustMagnitudeSettings</definition>
        <argsstring>(const std::shared_ptr&lt; ThrustInputParameterGuidance &gt; thrustInputParameterGuidance, const std::shared_ptr&lt; interpolators::Interpolator&lt; double, double &gt; &gt; thrustMagnitudeInterpolator, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; thrustIndependentVariables, const double constantSpecificImpulse)</argsstring>
        <name>createParameterizedThrustMagnitudeSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/de0/classtudat_1_1simulation__setup_1_1ThrustInputParameterGuidance" kindref="compound">ThrustInputParameterGuidance</ref> &gt;</type>
          <declname>thrustInputParameterGuidance</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d6c/classtudat_1_1interpolators_1_1Interpolator" kindref="compound">interpolators::Interpolator</ref>&lt; double, double &gt; &gt;</type>
          <declname>thrustMagnitudeInterpolator</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>thrustIndependentVariables</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>constantSpecificImpulse</declname>
        </param>
        <briefdescription>
<para>Function to create thrust magnitude settings from guidance input and tables, with constant specific impulse. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create thrust magnitude settings from guidance input and tables, with constant specific impulse <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrustInputParameterGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that computes all guidance-input parameters as a function of time/state Note that the number of implemented parameters must be consistent with the numbet of associated entries in thrustIndependentVariables and specificImpulseDependentVariables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeInterpolator</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolator returning the current thrust (or maximum thrust if thrustIndependentVariables contains an throttle_dependent_thrust entry) as a function of the independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustIndependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of identifiers for the physical meaning of each of the entries of the input to the &apos;interpolate&apos; function of thrustMagnitudeInterpolator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constantSpecificImpulse</parametername>
</parameternamelist>
<parameterdescription>
<para>Specific impulse that is to be used at all times. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Thrust magnitude settings for given input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="303" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="303" bodyend="325" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="1160" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a3cd5d587092edba3c8a8733fe092dda4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dff/classtudat_1_1simulation__setup_1_1ParameterizedThrustMagnitudeSettings" kindref="compound">ParameterizedThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ParameterizedThrustMagnitudeSettings &gt; tudat::simulation_setup::createParameterizedThrustMagnitudeSettings</definition>
        <argsstring>(const std::shared_ptr&lt; ThrustInputParameterGuidance &gt; thrustInputParameterGuidance, const std::string thrustMagnitudeDataFile, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; thrustIndependentVariables, const double constantSpecificImpulse)</argsstring>
        <name>createParameterizedThrustMagnitudeSettings</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/de0/classtudat_1_1simulation__setup_1_1ThrustInputParameterGuidance" kindref="compound">ThrustInputParameterGuidance</ref> &gt;</type>
          <declname>thrustInputParameterGuidance</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>thrustMagnitudeDataFile</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>thrustIndependentVariables</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>constantSpecificImpulse</declname>
        </param>
        <briefdescription>
<para>Function to create thrust magnitude settings from guidance input and tables, with constant specific impulse. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create thrust magnitude settings from guidance input and tables <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrustInputParameterGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Object that computes all guidance-input parameters as a function of time/state Note that the number of implemented parameters must be consistent with the numbet of associated entries in thrustIndependentVariables and specificImpulseDependentVariables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeDataFile</parametername>
</parameternamelist>
<parameterdescription>
<para>File containing data for the thrust (or maximum thrust if thrustIndependentVariables contains an throttle_dependent_thrust entry) and associated independent variables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustIndependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of identifiers for the physical meaning of each of the entries of the input to the &apos;interpolate&apos; function of thrustMagnitudeInterpolator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constantSpecificImpulse</parametername>
</parameternamelist>
<parameterdescription>
<para>Specific impulse that is to be used at all times. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Thrust magnitude settings for given input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="328" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="328" bodyend="339" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="1179" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a5b1a3eae41204908bdfc074a46e77b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dff/classtudat_1_1simulation__setup_1_1ParameterizedThrustMagnitudeSettings" kindref="compound">ParameterizedThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ParameterizedThrustMagnitudeSettings &gt; tudat::simulation_setup::createAccelerationLimitedParameterizedThrustMagnitudeSettings</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string nameOfBodyWithGuidance, const double maximumAcceleration, const std::shared_ptr&lt; interpolators::Interpolator&lt; double, double &gt; &gt; thrustMagnitudeInterpolator, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; thrustIndependentVariables, const double specificImpulse, const std::string nameOfCentralBody=&quot;&quot;)</argsstring>
        <name>createAccelerationLimitedParameterizedThrustMagnitudeSettings</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>nameOfBodyWithGuidance</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>maximumAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d6c/classtudat_1_1interpolators_1_1Interpolator" kindref="compound">interpolators::Interpolator</ref>&lt; double, double &gt; &gt;</type>
          <declname>thrustMagnitudeInterpolator</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>thrustIndependentVariables</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>specificImpulse</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>nameOfCentralBody</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to create a thrust magnitude settings based on interpolated maximum thrust, with throttle determined by maximum allowed axial acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to body objects defining the full simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyWithGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which thrust guidance is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Maxmum allowable acceleration due to the thrust force. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeInterpolator</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolator that computes the maximum thrust as a function of the independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustIndependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical meaning of each of the independent variables used as input to the thrustInterpolator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificImpulse</parametername>
</parameternamelist>
<parameterdescription>
<para>Specific impulse of the propulsion system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body w.r.t. which thrust guidance is computed (e.g. Earth if the altitude from Earth is used as an independent variable of the thrust). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Thrust magnitude settings according to input.</para>
</simplesect>
Function to create a thrust magnitude settings based on interpolated maximum thrust, with throttle determined by maximum allowed axial acceleration (constant specific impulse). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="343" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="343" bodyend="359" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="1202" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a6445111319462cc36d3c08e2c86159ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dff/classtudat_1_1simulation__setup_1_1ParameterizedThrustMagnitudeSettings" kindref="compound">ParameterizedThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ParameterizedThrustMagnitudeSettings &gt; tudat::simulation_setup::createAccelerationLimitedParameterizedThrustMagnitudeSettings</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string nameOfBodyWithGuidance, const double maximumAcceleration, const std::string thrustMagnitudeDataFile, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; thrustIndependentVariables, const double specificImpulse, const std::string nameOfCentralBody=&quot;&quot;)</argsstring>
        <name>createAccelerationLimitedParameterizedThrustMagnitudeSettings</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>nameOfBodyWithGuidance</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>maximumAcceleration</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>thrustMagnitudeDataFile</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>thrustIndependentVariables</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>specificImpulse</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>nameOfCentralBody</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to create a thrust magnitude settings based on interpolated maximum thrust, with throttle determined by maximum allowed axial acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to body objects defining the full simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyWithGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which thrust guidance is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Maxmum allowable acceleration due to the thrust force. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeDataFile</parametername>
</parameternamelist>
<parameterdescription>
<para>File containing table with maximum thrust values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustIndependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical meaning of each of the independent variables used as input to the thrustInterpolator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificImpulse</parametername>
</parameternamelist>
<parameterdescription>
<para>Specific impulse of the propulsion system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body w.r.t. which thrust guidance is computed (e.g. Earth if the altitude from Earth is used as an independent variable of the thrust). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Thrust magnitude settings according to input.</para>
</simplesect>
Function to create a thrust magnitude settings based on interpolated maximum thrust, with throttle determined by maximum allowed axial acceleration (constant specific impulse). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="363" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="363" bodyend="376" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="1227" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a26e92b656f54830ce5fdbac0fb4adf40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dff/classtudat_1_1simulation__setup_1_1ParameterizedThrustMagnitudeSettings" kindref="compound">ParameterizedThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ParameterizedThrustMagnitudeSettings &gt; tudat::simulation_setup::createAccelerationLimitedParameterizedThrustMagnitudeSettings</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string nameOfBodyWithGuidance, const double maximumAcceleration, const std::shared_ptr&lt; interpolators::Interpolator&lt; double, double &gt; &gt; thrustMagnitudeInterpolator, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; thrustIndependentVariables, const std::shared_ptr&lt; interpolators::Interpolator&lt; double, double &gt; &gt; specificImpulseInterpolator, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; specificImpulseDependentVariables, const std::string nameOfCentralBody=&quot;&quot;)</argsstring>
        <name>createAccelerationLimitedParameterizedThrustMagnitudeSettings</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>nameOfBodyWithGuidance</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>maximumAcceleration</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d6c/classtudat_1_1interpolators_1_1Interpolator" kindref="compound">interpolators::Interpolator</ref>&lt; double, double &gt; &gt;</type>
          <declname>thrustMagnitudeInterpolator</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>thrustIndependentVariables</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d4/d6c/classtudat_1_1interpolators_1_1Interpolator" kindref="compound">interpolators::Interpolator</ref>&lt; double, double &gt; &gt;</type>
          <declname>specificImpulseInterpolator</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>specificImpulseDependentVariables</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>nameOfCentralBody</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to create a thrust magnitude settings based on interpolated maximum thrust, with throttle determined by maximum allowed axial acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to body objects defining the full simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyWithGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which thrust guidance is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Maxmum allowable acceleration due to the thrust force. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeInterpolator</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolator returning the current thrust (or maximum thrust if thrustIndependentVariables contains an throttle_dependent_thrust entry) as a function of the independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustIndependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of identifiers for the physical meaning of each of the entries of the input to the &apos;interpolate&apos; function of thrustMagnitudeInterpolator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificImpulseInterpolator</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolator returning the current specific impulse as a function of the independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificImpulseDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of identifiers for the physical meaning of each of the entries of the input to the &apos;interpolate&apos; function of specificImpulseInterpolator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body w.r.t. which thrust guidance is computed (e.g. Earth if the altitude from Earth is used as an independent variable of the thrust). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Thrust magnitude settings according to input.</para>
</simplesect>
Function to create a thrust magnitude settings based on interpolated maximum thrust, with throttle determined by maximum allowed axial acceleration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="380" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="380" bodyend="398" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="1256" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="df/dab/thrustSettings_8h_1a147ce9d858090207c57af10c21485c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dff/classtudat_1_1simulation__setup_1_1ParameterizedThrustMagnitudeSettings" kindref="compound">ParameterizedThrustMagnitudeSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ParameterizedThrustMagnitudeSettings &gt; tudat::simulation_setup::createAccelerationLimitedParameterizedThrustMagnitudeSettings</definition>
        <argsstring>(const SystemOfBodies &amp;bodies, const std::string nameOfBodyWithGuidance, const double maximumAcceleration, const std::string thrustMagnitudeDataFile, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; thrustIndependentVariables, const std::string specificImpulseDataFile, const std::vector&lt; propulsion::ThrustIndependentVariables &gt; specificImpulseDependentVariables, const std::string nameOfCentralBody=&quot;&quot;)</argsstring>
        <name>createAccelerationLimitedParameterizedThrustMagnitudeSettings</name>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>nameOfBodyWithGuidance</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>maximumAcceleration</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>thrustMagnitudeDataFile</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>thrustIndependentVariables</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>specificImpulseDataFile</declname>
        </param>
        <param>
          <type>const std::vector&lt; propulsion::ThrustIndependentVariables &gt;</type>
          <declname>specificImpulseDependentVariables</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>nameOfCentralBody</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to create a thrust magnitude settings based on interpolated maximum thrust, with throttle determined by maximum allowed axial acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pointers to body objects defining the full simulation environment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfBodyWithGuidance</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body for which thrust guidance is to be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Maxmum allowable acceleration due to the thrust force. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustMagnitudeDataFile</parametername>
</parameternamelist>
<parameterdescription>
<para>File containing data for the thrust (or maximum thrust if thrustIndependentVariables contains an throttle_dependent_thrust entry) and associated independent variables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thrustIndependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of identifiers for the physical meaning of each of the entries of the input to the &apos;interpolate&apos; function of thrustMagnitudeInterpolator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificImpulseDataFile</parametername>
</parameternamelist>
<parameterdescription>
<para>File containing data for the specific impulse and associated independent variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specificImpulseDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>List of identifiers for the physical meaning of each of the entries of the input to the &apos;interpolate&apos; function of specificImpulseInterpolator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameOfCentralBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of body w.r.t. which thrust guidance is computed (e.g. Earth if the altitude from Earth is used as an independent variable of the thrust). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Thrust magnitude settings according to input.</para>
</simplesect>
Function to create a thrust magnitude settings based on interpolated maximum thrust, with throttle determined by maximum allowed axial acceleration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" line="402" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/thrustSettings.cpp" bodystart="402" bodyend="418" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/thrustSettings.h" declline="1285" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="da/dbc/torqueSettings_8h_1aa56c7f3ebee9d01312eed34114f54ab3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::simulation_setup::applyTorqueScalingFunction</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d(const double) &gt; torqueFunction, const std::function&lt; double(const double) &gt; scalingFunction, const double time)</argsstring>
        <name>applyTorqueScalingFunction</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const double) &gt;</type>
          <declname>torqueFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>scalingFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" line="82" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" bodystart="82" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="da/dbc/torqueSettings_8h_1a3c10633a7de4fda0176bca8f4f1a5d58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; TorqueSettings &gt; tudat::simulation_setup::aerodynamicTorque</definition>
        <argsstring>()</argsstring>
        <name>aerodynamicTorque</name>
        <briefdescription>
<para>@get_docstring(aerodynamicTorque) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" line="112" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="da/dbc/torqueSettings_8h_1a2cf04ebf108ab0683f988353c72965c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; TorqueSettings &gt; tudat::simulation_setup::secondDegreeGravitationalTorque</definition>
        <argsstring>()</argsstring>
        <name>secondDegreeGravitationalTorque</name>
        <briefdescription>
<para>@get_docstring(secondDegreeGravitationalTorque) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" line="118" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="da/dbc/torqueSettings_8h_1a06c5cc71b524fe267211b6e3013fb21e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; TorqueSettings &gt; tudat::simulation_setup::sphericalHarmonicGravitationalTorque</definition>
        <argsstring>(const int maximumDegree, const int maximumOrder)</argsstring>
        <name>sphericalHarmonicGravitationalTorque</name>
        <param>
          <type>const int</type>
          <declname>maximumDegree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumOrder</declname>
        </param>
        <briefdescription>
<para>@get_docstring(sphericalHarmonicGravitationalTorque) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" line="124" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="da/dbc/torqueSettings_8h_1ae002ef0bb8afb63e513e99ae46cf2073" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; TorqueSettings &gt; tudat::simulation_setup::dissipativeTorque</definition>
        <argsstring>(const int maximumDegree, const int maximumOrder)</argsstring>
        <name>dissipativeTorque</name>
        <param>
          <type>const int</type>
          <declname>maximumDegree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" line="130" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="da/dbc/torqueSettings_8h_1a45266926ffec52f60bb00cfb98591f8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/d91/classtudat_1_1simulation__setup_1_1TorqueSettings" kindref="compound">TorqueSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; TorqueSettings &gt; tudat::simulation_setup::customTorqueSettings</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d(const double) &gt; torqueFunction, const std::function&lt; double(const double) &gt; scalingFunction=nullptr)</argsstring>
        <name>customTorqueSettings</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d(const double) &gt;</type>
          <declname>torqueFunction</declname>
        </param>
        <param>
          <type>const std::function&lt; double(const double) &gt;</type>
          <declname>scalingFunction</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>@get_docstring(customTorqueSettings) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" line="137" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/simulation/propagation_setup/torqueSettings.h" bodystart="137" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="d0/da1/createAccelerationPartials_8cpp_1a24c64a57ee46ecd8aa243d371214f2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template orbit_determination::StateDerivativePartialsMap</type>
        <definition>template orbit_determination::StateDerivativePartialsMap tudat::simulation_setup::createAccelerationPartialsMap&lt; long double &gt;</definition>
        <argsstring>(const basic_astrodynamics::AccelerationMap &amp;accelerationMap, const simulation_setup::SystemOfBodies &amp;bodies, const std::shared_ptr&lt; estimatable_parameters::EstimatableParameterSet&lt; long double &gt; &gt; parametersToEstimate)</argsstring>
        <name>createAccelerationPartialsMap&lt; long double &gt;</name>
        <param>
          <type>const basic_astrodynamics::AccelerationMap &amp;</type>
          <declname>accelerationMap</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d9a/classtudat_1_1simulation__setup_1_1SystemOfBodies" kindref="compound">simulation_setup::SystemOfBodies</ref> &amp;</type>
          <declname>bodies</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="de/d00/classtudat_1_1estimatable__parameters_1_1EstimatableParameterSet" kindref="compound">estimatable_parameters::EstimatableParameterSet</ref>&lt; long double &gt; &gt;</type>
          <declname>parametersToEstimate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createAccelerationPartials.cpp" line="100" column="18" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/estimation_setup/createAccelerationPartials.cpp" declline="100" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="d2/dfa/createAccelerationModels_8cpp_1a4c83596cbda092dc9fa2c9c2ac76b7c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dd/d2a/classtudat_1_1basic__astrodynamics_1_1CustomAccelerationModel" kindref="compound">basic_astrodynamics::CustomAccelerationModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; basic_astrodynamics::CustomAccelerationModel &gt; tudat::simulation_setup::createCustomAccelerationModel</definition>
        <argsstring>(const std::shared_ptr&lt; AccelerationSettings &gt; accelerationSettings, const std::string &amp;nameOfBodyUndergoingAcceleration)</argsstring>
        <name>createCustomAccelerationModel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d43/classtudat_1_1simulation__setup_1_1AccelerationSettings" kindref="compound">AccelerationSettings</ref> &gt;</type>
          <declname>accelerationSettings</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameOfBodyUndergoingAcceleration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" line="869" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/simulation/propagation_setup/createAccelerationModels.cpp" bodystart="869" bodyend="883"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/podInputOutputTypes.h" line="29" column="1"/>
  </compounddef>
</doxygen>
