<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d4/dd0/namespacetudat_1_1linear__algebra" kind="namespace" language="C++">
    <compoundname>tudat::linear_algebra</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1a9e2cb6212b6d36217e989a039ca4706a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::linear_algebra::getConditionNumberOfInformationMatrix</definition>
        <argsstring>(const Eigen::MatrixXd informationMatrix)</argsstring>
        <name>getConditionNumberOfInformationMatrix</name>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>informationMatrix</declname>
        </param>
        <briefdescription>
<para>Function to get condition number of matrix (using SVD decomposition) </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get condition number of matrix (using SVD decomposition) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>informationMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix for which condition number is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Condition number of matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="27" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="27" bodyend="31" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="37" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1ad83828767cdccfbd1a5d10136406ce62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::linear_algebra::getConditionNumberOfDecomposedMatrix</definition>
        <argsstring>(const Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;singularValueDecomposition)</argsstring>
        <name>getConditionNumberOfDecomposedMatrix</name>
        <param>
          <type>const Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;</type>
          <declname>singularValueDecomposition</declname>
        </param>
        <briefdescription>
<para>Function to get condition number of matrix from SVD decomposition. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get condition number of matrix from SVD decomposition <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>singularValueDecomposition</parametername>
</parameternamelist>
<parameterdescription>
<para>SVD decomposition of matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Condition number of matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="34" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="34" bodyend="38" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="45" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1aa6c69d051a61751b12e8194af6f279ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::linear_algebra::solveSystemOfEquationsWithSvd</definition>
        <argsstring>(const Eigen::MatrixXd matrixToInvert, const Eigen::VectorXd rightHandSideVector, const bool checkConditionNumber=1, const double maximumAllowedConditionNumber=1.0E-8)</argsstring>
        <name>solveSystemOfEquationsWithSvd</name>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>matrixToInvert</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd</type>
          <declname>rightHandSideVector</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>checkConditionNumber</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>maximumAllowedConditionNumber</declname>
          <defval>1.0E-8</defval>
        </param>
        <briefdescription>
<para>Solve system of equations with SVD decomposition, checking condition number in the process. </para>
        </briefdescription>
        <detaileddescription>
<para>Solve system of equations with SVD decomposition, checking condition number in the process. This function solves A*x = b for the vector x. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrixToInvert</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix A that is to be inverted to solve the equation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rightHandSideVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector on the righthandside of the matrix equation that is to be solved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkConditionNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether the condition number is checked when estimating (warning is printed when value exceeds maximumAllowedConditionNumber) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAllowedConditionNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value of the condition number of the covariance matrix that is allowed (warning printed when exceeded) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Solution x of matrix equation A*x=b </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="41" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="41" bodyend="58" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="59" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1aac387020653fb44716e6ce7f111c108d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd tudat::linear_algebra::multiplyInformationMatrixByDiagonalWeightMatrix</definition>
        <argsstring>(const Eigen::MatrixXd &amp;informationMatrix, const Eigen::VectorXd &amp;diagonalOfWeightMatrix)</argsstring>
        <name>multiplyInformationMatrixByDiagonalWeightMatrix</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>informationMatrix</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>diagonalOfWeightMatrix</declname>
        </param>
        <briefdescription>
<para>Function to multiply information matrix by diagonal weights matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to multiply information matrix by diagonal weights matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>informationMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix containing partial derivatives of observations (rows) w.r.t. estimated parameters (columns) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diagonalOfWeightMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Diagonal of observation weights matrix (assumes all weights to be uncorrelated) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>informationMatrix, premultiplied by square matrix with diagonalOfWeightMatrix as diagonal elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="61" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="61" bodyend="74" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="72" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1afc4b3900b9047d7dbbf8ebacb154302e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd tudat::linear_algebra::calculateInverseOfUpdatedCovarianceMatrix</definition>
        <argsstring>(const Eigen::MatrixXd &amp;informationMatrix, const Eigen::VectorXd &amp;diagonalOfWeightMatrix, const Eigen::MatrixXd &amp;inverseOfAPrioriCovarianceMatrix)</argsstring>
        <name>calculateInverseOfUpdatedCovarianceMatrix</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>informationMatrix</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>diagonalOfWeightMatrix</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>inverseOfAPrioriCovarianceMatrix</declname>
        </param>
        <briefdescription>
<para>Function to compute inverse of covariance matrix at current iteration, including influence of a priori information. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute inverse of covariance matrix at current iteration, including influence of a priori information <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>informationMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix containing partial derivatives of observations (rows) w.r.t. estimated parameters (columns) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diagonalOfWeightMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Diagonal of observation weights matrix (assumes all weights to be uncorrelated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inverseOfAPrioriCovarianceMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Inverse of a priori covariance matrix (warning printed when exceeded) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Inverse of covariance matrix at current iteration </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="77" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="77" bodyend="84" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="86" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1af95569c28d85f3d065dc2ee70fa1fd3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd tudat::linear_algebra::calculateInverseOfUpdatedCovarianceMatrix</definition>
        <argsstring>(const Eigen::MatrixXd &amp;informationMatrix, const Eigen::VectorXd &amp;diagonalOfWeightMatrix)</argsstring>
        <name>calculateInverseOfUpdatedCovarianceMatrix</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>informationMatrix</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>diagonalOfWeightMatrix</declname>
        </param>
        <briefdescription>
<para>Function to compute inverse of covariance matrix at current iteration. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute inverse of covariance matrix at current iteration <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>informationMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix containing partial derivatives of observations (rows) w.r.t. estimated parameters (columns) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diagonalOfWeightMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Diagonal of observation weights matrix (assumes all weights to be uncorrelated) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Inverse of covariance matrix at current iteration </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="87" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="87" bodyend="94" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="99" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1a48ba5398016f7226c778119719775781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::VectorXd, Eigen::MatrixXd &gt;</type>
        <definition>std::pair&lt; Eigen::VectorXd, Eigen::MatrixXd &gt; tudat::linear_algebra::performLeastSquaresAdjustmentFromInformationMatrix</definition>
        <argsstring>(const Eigen::MatrixXd &amp;informationMatrix, const Eigen::VectorXd &amp;observationResiduals, const Eigen::VectorXd &amp;diagonalOfWeightMatrix, const Eigen::MatrixXd &amp;inverseOfAPrioriCovarianceMatrix, const bool checkConditionNumber=1, const double maximumAllowedConditionNumber=1.0E8, const Eigen::MatrixXd &amp;constraintMultiplier=Eigen::MatrixXd(0, 0), const Eigen::VectorXd &amp;constraintRightHandside=Eigen::VectorXd(0))</argsstring>
        <name>performLeastSquaresAdjustmentFromInformationMatrix</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>informationMatrix</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>observationResiduals</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>diagonalOfWeightMatrix</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>inverseOfAPrioriCovarianceMatrix</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>checkConditionNumber</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>maximumAllowedConditionNumber</declname>
          <defval>1.0E8</defval>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>constraintMultiplier</declname>
          <defval>Eigen::MatrixXd(0, 0)</defval>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>constraintRightHandside</declname>
          <defval>Eigen::VectorXd(0)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to perform an iteration least squares estimation from information matrix, weights and residuals and a priori information</para>
<para>Function to perform an iteration least squares estimation from information matrix, weights and residuals and a priori information, as is typically done in orbit determination. This function also takes an inverse if the a priori covariance matrix to constrain/stabilize the inversion. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>informationMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix containing partial derivatives of observations (rows) w.r.t. estimated parameters (columns) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationResiduals</parametername>
</parameternamelist>
<parameterdescription>
<para>Difference between measured and simulated observations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diagonalOfWeightMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Diagonal of observation weights matrix (assumes all weights to be uncorrelated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inverseOfAPrioriCovarianceMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Inverse of a priori covariance matrix (warning printed when exceeded) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkConditionNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether the condition number is checked when estimating (warning is printed when value exceeds maximumAllowedConditionNumber) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAllowedConditionNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value of the condition number of the covariance matrix that is allowed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constraintMultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Multiplier for estimated parameter that defines linear constraint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constraintRightHandside</parametername>
</parameternamelist>
<parameterdescription>
<para>Right-hand side estimation linear constraint </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair containing: (first: parameter adjustment, second: inverse covariance)</para>
</simplesect>
Function to perform an iteration least squares estimation from information matrix, weights and residuals and a priori information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="98" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="98" bodyend="153" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="122" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1a0c3e73ed8ee42c6c4e7c53f04bc66acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::VectorXd, Eigen::MatrixXd &gt;</type>
        <definition>std::pair&lt; Eigen::VectorXd, Eigen::MatrixXd &gt; tudat::linear_algebra::performLeastSquaresAdjustmentFromInformationMatrix</definition>
        <argsstring>(const Eigen::MatrixXd &amp;informationMatrix, const Eigen::VectorXd &amp;observationResiduals, const Eigen::VectorXd &amp;diagonalOfWeightMatrix, const bool checkConditionNumber=1, const double maximumAllowedConditionNumber=1.0E8)</argsstring>
        <name>performLeastSquaresAdjustmentFromInformationMatrix</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>informationMatrix</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>observationResiduals</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>diagonalOfWeightMatrix</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>checkConditionNumber</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>maximumAllowedConditionNumber</declname>
          <defval>1.0E8</defval>
        </param>
        <briefdescription>
<para>Function to perform an iteration of least squares estimation from information matrix, weights and residuals. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to perform an iteration least squares estimation from information matrix, weights and residuals.</para>
<para>Function to perform an iteration of least squares estimation from information matrix, weights and residuals, as is typically done in orbit determination <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>informationMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix containing partial derivatives of observations (rows) w.r.t. estimated parameters (columns) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationResiduals</parametername>
</parameternamelist>
<parameterdescription>
<para>Difference between measured and simulated observations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diagonalOfWeightMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Diagonal of observation weights matrix (assumes all weights to be uncorrelated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkConditionNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether the condition number is checked when estimating (warning is printed when value exceeds maximumAllowedConditionNumber) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAllowedConditionNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value of the condition number of the covariance matrix that is allowed (warning printed when exceeded) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair containing: (first: parameter adjustment, second: inverse covariance) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="156" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="156" bodyend="167" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="146" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1a2d76268f7aabdb5e7d865082385db19b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::VectorXd, Eigen::MatrixXd &gt;</type>
        <definition>std::pair&lt; Eigen::VectorXd, Eigen::MatrixXd &gt; tudat::linear_algebra::performLeastSquaresAdjustmentFromInformationMatrix</definition>
        <argsstring>(const Eigen::MatrixXd &amp;informationMatrix, const Eigen::VectorXd &amp;observationResiduals, const bool checkConditionNumber=1, const double maximumAllowedConditionNumber=1.0E8)</argsstring>
        <name>performLeastSquaresAdjustmentFromInformationMatrix</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>informationMatrix</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>observationResiduals</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>checkConditionNumber</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>maximumAllowedConditionNumber</declname>
          <defval>1.0E8</defval>
        </param>
        <briefdescription>
<para>Function to perform an iteration of least squares estimation from information matrix and residuals. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to perform an iteration of least squares estimation from information matrix and residuals, with all weights fixed to 1.0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>informationMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix containing partial derivatives of observations (rows) w.r.t. estimated parameters (columns) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationResiduals</parametername>
</parameternamelist>
<parameterdescription>
<para>Difference between measured and simulated observations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkConditionNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean to denote whether the condition number is checked when estimating (warning is printed when value exceeds maximumAllowedConditionNumber) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAllowedConditionNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value of the condition number of the covariance matrix that is allowed (warning printed when exceeded) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair containing: (first: parameter adjustment, second: inverse covariance) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="170" column="11" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="170" bodyend="179" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="166" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1a686f905ec8969949325baa80d21ce636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::linear_algebra::getLeastSquaresPolynomialFit</definition>
        <argsstring>(const Eigen::VectorXd &amp;independentValues, const Eigen::VectorXd &amp;dependentValues, const std::vector&lt; double &gt; &amp;polynomialPowers)</argsstring>
        <name>getLeastSquaresPolynomialFit</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>independentValues</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>dependentValues</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>polynomialPowers</declname>
        </param>
        <briefdescription>
<para>Function to fit a univariate polynomial through a set of data. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to fit a univariate polynomial through a set of data. User must provide independent variables and observations (dependent variables), as well as a list of polynomial powers for which the coefficients are to be estimated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentValues</parametername>
</parameternamelist>
<parameterdescription>
<para>Independent variables of input data (e.g. time for observations as a function fo time). This variable becomes the polynomial argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependentValues</parametername>
</parameternamelist>
<parameterdescription>
<para>Observations through which the polynomial is to be fitted, with entries defined at the corresponding entries of independentValues </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polynomialPowers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of powers of indepent variables for which coefficients are to be estimated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Coefficients of the polynomial powers, as estimated from the input data (in same order as polynomialPowers). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="182" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="182" bodyend="205" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="183" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1ae9205397a39a606384a8236dda60384b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; tudat::linear_algebra::getLeastSquaresPolynomialFit</definition>
        <argsstring>(const std::map&lt; double, double &gt; &amp;independentDependentValueMap, const std::vector&lt; double &gt; &amp;polynomialPowers)</argsstring>
        <name>getLeastSquaresPolynomialFit</name>
        <param>
          <type>const std::map&lt; double, double &gt; &amp;</type>
          <declname>independentDependentValueMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>polynomialPowers</declname>
        </param>
        <briefdescription>
<para>Function to fit a univariate polynomial through a set of data. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to fit a univariate polynomial through a set of data. User must provide independent variables and observations (dependent variables), as well as a list of polynomial powers for which the coefficients are to be estimated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentDependentValueMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Map with key: independent variables of input data (e.g. time for observations as a function fo time), this variable becomes the polynomial argument. Map value: Observations through which the polynomial is to be fitted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polynomialPowers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of powers of indepent variables for which coefficients are to be estimated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Coefficients of the polynomial powers, as estimated from the input data (in same order as polynomialPowers). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="208" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="208" bodyend="219" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="198" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d0/db6/leastSquaresEstimation_8h_1a0a9d68a352cf9ccbec99e097dd331b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::linear_algebra::nonLinearLeastSquaresFit</definition>
        <argsstring>(const std::function&lt; std::pair&lt; Eigen::VectorXd, Eigen::MatrixXd &gt;(const Eigen::VectorXd &amp;) &gt; &amp;observationAndJacobianFunctions, const Eigen::VectorXd &amp;initialEstimate, const Eigen::VectorXd &amp;actualObservations, const double initialScaling=1.0e-6, const double convergenceTolerance=1.0e-8, const unsigned int maximumNumberOfIterations=25)</argsstring>
        <name>nonLinearLeastSquaresFit</name>
        <param>
          <type>const std::function&lt; std::pair&lt; Eigen::VectorXd, Eigen::MatrixXd &gt;(const Eigen::VectorXd &amp;) &gt; &amp;</type>
          <declname>observationAndJacobianFunctions</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>initialEstimate</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>actualObservations</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>initialScaling</declname>
          <defval>1.0e-6</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>convergenceTolerance</declname>
          <defval>1.0e-8</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>maximumNumberOfIterations</declname>
          <defval>25</defval>
        </param>
        <briefdescription>
<para>Function to perform a non-linear least squares estimation with the Levenberg-Marquardt method. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to perform a non-linear least squares estimation. The non-linear least squares method is an iterative process, which uses the information from the actual and estimated observations, to estimate the model parameters, with the aid of a design matrix. The initial estimate of the model parameters is updated every iteration with the result of the least squares equation. The iterative process is halted whenever the norm of the update is below the user-provided threshold or when the maximum number of iterations is reached. The method used in this application is the Levenberg-Marquardt method, which uses a damping parameter <formula id="121">$ \lambda $</formula> to make the iterative process more stable and accurate. The reference for this implementation is (Madsen, K., et al.). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observationAndJacobianFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning a pair of expected observations and Jacobian of the observation function w.r.t. the model parameters (i.e., the design matrix), where the input is the current estimate of the model parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialEstimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial estimate of the model parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>actualObservations</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the actual observations that need to be fitted by the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialScaling</parametername>
</parameternamelist>
<parameterdescription>
<para>Double denoting the multiplicative factor to determine the damping parameter during the first iteration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convergenceTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Double denoting the convergence criterion for the norm of the update vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumNumberOfIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer denoting the maximum number of iterations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Optimal value of the model parameters that minimize the least squares error between expected and actual observations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" line="222" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/leastSquaresEstimation.cpp" bodystart="222" bodyend="309" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" declline="221" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1aab2ea62e24ce2736c5dbc2be74358f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector4d</type>
        <definition>Eigen::Vector4d tudat::linear_algebra::convertQuaternionToVectorFormat</definition>
        <argsstring>(const Eigen::Quaterniond &amp;quaternion)</argsstring>
        <name>convertQuaternionToVectorFormat</name>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>quaternion</declname>
        </param>
        <briefdescription>
<para>Function to put a quaternion in &apos;vector format&apos;, e.g. a Vector4d with entries (w,x,y,z) of the quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to put a quaternion in &apos;vector format&apos;, e.g. a Vector4d with entries (w,x,y,z) of the quaternion. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quaternion</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternion that is to be put into vector format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector format of input quaternion. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="26" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="26" bodyend="34" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="40" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1ad5b95fdd947ebc4bc590669ee4e400a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond tudat::linear_algebra::convertVectorToQuaternionFormat</definition>
        <argsstring>(const Eigen::Vector4d &amp;vector)</argsstring>
        <name>convertVectorToQuaternionFormat</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Function to put a vector in &apos;quaternion format&apos;, i.e. a Quaterniond. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to put a vector in &apos;quaternion format&apos;, i.e. a Quaterniond. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector format of input quaternion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Quaternion that is to be put into vector format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="37" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="37" bodyend="46" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="48" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1a8e903454fa02a2a647c7971870527205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::linear_algebra::convertVectorQuaternionToMatrixFormat</definition>
        <argsstring>(const Eigen::Vector4d &amp;vector)</argsstring>
        <name>convertVectorQuaternionToMatrixFormat</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="48" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="48" bodyend="51" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="50" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1a730fd9d9d01622195759f7bf1aee7152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector4d</type>
        <definition>Eigen::Vector4d tudat::linear_algebra::convertMatrixToVectorQuaternionFormat</definition>
        <argsstring>(const Eigen::Matrix3d &amp;vector)</argsstring>
        <name>convertMatrixToVectorQuaternionFormat</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="53" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="53" bodyend="56" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="52" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1a5fb8204b4d9c0148ca38f9a6650e6bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector4d</type>
        <definition>Eigen::Vector4d tudat::linear_algebra::quaternionProduct</definition>
        <argsstring>(const Eigen::Vector4d &amp;firstQuaternion, const Eigen::Vector4d &amp;secondQuaternion)</argsstring>
        <name>quaternionProduct</name>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>firstQuaternion</declname>
        </param>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>secondQuaternion</declname>
        </param>
        <briefdescription>
<para>Function to take the product of two quaternions. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to take the product of two quaternions, both expressed as vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>firstQuaternion</parametername>
</parameternamelist>
<parameterdescription>
<para>First quaternion expressed as vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondQuaternion</parametername>
</parameternamelist>
<parameterdescription>
<para>Second quaternion expressed as vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Product of the two quaternions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="60" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="60" bodyend="69" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="61" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1a272cec72561232bb0ee4527da6dc5f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::linear_algebra::invertQuaternion</definition>
        <argsstring>(Eigen::Vector4d &amp;quaternionVector)</argsstring>
        <name>invertQuaternion</name>
        <param>
          <type>Eigen::Vector4d &amp;</type>
          <declname>quaternionVector</declname>
        </param>
        <briefdescription>
<para>Function to invert a quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to invert a quaternion. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quaternionVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternion expressed as vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="72" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="72" bodyend="75" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1af3724a4b161e390182ae38d02b12a513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::linear_algebra::getCrossProductMatrix</definition>
        <argsstring>(const Eigen::Vector3d &amp;leftHandVector)</argsstring>
        <name>getCrossProductMatrix</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>leftHandVector</declname>
        </param>
        <briefdescription>
<para>Function that returns that &apos;cross-product matrix&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that returns that &apos;cross-product matrix&apos;, i.e. for vectors a,b and c, with c = a x b, the matrix A such that c = Ab. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>leftHandVector</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-multiplying vector (a in above example) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The matrix by which to premultiply the right-multiplying vector to obtain the cross product of the two matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="78" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="78" bodyend="88" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="77" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1ad8adc85575264c7d94027be05ec3cff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::linear_algebra::computeCosineOfAngleBetweenVectors</definition>
        <argsstring>(const Eigen::VectorXd &amp;vector0, const Eigen::VectorXd &amp;vector1)</argsstring>
        <name>computeCosineOfAngleBetweenVectors</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vector0</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vector1</declname>
        </param>
        <briefdescription>
<para>Compute cosine of the angle between two vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the cosine of the angle between two vectors; both vectors must have non-zero norm. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector0</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cosine of angle between vectors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="91" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="91" bodyend="117" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="86" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1a705ee32706d9214b89d2d4a155cba1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::linear_algebra::computeAngleBetweenVectors</definition>
        <argsstring>(const Eigen::VectorXd &amp;vector0, const Eigen::VectorXd &amp;vector1)</argsstring>
        <name>computeAngleBetweenVectors</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vector0</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vector1</declname>
        </param>
        <briefdescription>
<para>Compute angle between two vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the angle between two vectors; both vectors must have non-zero norm. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector0</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Angle between vectors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="120" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="120" bodyend="127" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="96" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1aec1b257b4acc43b8efd27ec4adfb81d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; double, VectorSize, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; double, VectorSize, 1 &gt; tudat::linear_algebra::computeVectorDifference</definition>
        <argsstring>(const Eigen::Matrix&lt; double, VectorSize, 1 &gt; &amp;vector0, const Eigen::Matrix&lt; double, VectorSize, 1 &gt; &amp;vector1)</argsstring>
        <name>computeVectorDifference</name>
        <param>
          <type>const Eigen::Matrix&lt; double, VectorSize, 1 &gt; &amp;</type>
          <declname>vector0</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; double, VectorSize, 1 &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <briefdescription>
<para>Computes the difference between two 3d vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the difference between two 3d vectors (first input minus second input, i.e vector from second input to first input). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector0</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Difference between vectors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" line="108" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" bodystart="108" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1a4b510b13c3fda9293ac7e4739d3fae2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::linear_algebra::computeNormOfVectorDifference</definition>
        <argsstring>(const Eigen::Vector3d &amp;vector0, const Eigen::Vector3d &amp;vector1)</argsstring>
        <name>computeNormOfVectorDifference</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>vector0</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>vector1</declname>
        </param>
        <briefdescription>
<para>Computes norm of the the difference between two 3d vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the norm of the difference between two 3d vectors (i.e. distance between vectors) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector0</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Norm of difference between vectors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="130" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="130" bodyend="134" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="122" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1ae83191d4a9df7d3b146350cc9dd0ddb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::linear_algebra::getVectorNorm</definition>
        <argsstring>(const Eigen::Vector3d &amp;vector)</argsstring>
        <name>getVectorNorm</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Computes the norm of a 3d vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the norm of a 3d vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector for which the norm is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector norm </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="137" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="137" bodyend="140" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="131" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1ae0150ca2178df1f4c93d658b38c2dcb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::linear_algebra::getVectorNormFromFunction</definition>
        <argsstring>(const std::function&lt; Eigen::Vector3d() &gt; vectorFunction)</argsstring>
        <name>getVectorNormFromFunction</name>
        <param>
          <type>const std::function&lt; Eigen::Vector3d() &gt;</type>
          <declname>vectorFunction</declname>
        </param>
        <briefdescription>
<para>Computes the norm of a 3d vector from a vector-returning function. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the norm of a 3d vector from a vector-returning function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vectorFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the vector for which the norm is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector norm </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="150" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="150" bodyend="153" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="139" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1adf1fb56bc2c52e21c8e78431ea336f21" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void tudat::linear_algebra::flipMatrixRows</definition>
        <argsstring>(Eigen::MatrixXd &amp;matrixToFlip)</argsstring>
        <name>flipMatrixRows</name>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>matrixToFlip</declname>
        </param>
        <briefdescription>
<para>Flip matrix rows. </para>
        </briefdescription>
        <detaileddescription>
<para>Flips all rows of an Eigen-matrix, i.e., order of rows is reversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrixToFlip</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix that should be flipped. The flipping is done in place, i.e. the input matrix is modified directly (no copies are made). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" line="147" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" bodystart="147" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1a092a80b83dac4a7a0bd93e9eaf115fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::linear_algebra::evaluateSecondBlockInStateVector</definition>
        <argsstring>(const std::function&lt; Eigen::Vector6d(const double) &gt; stateFunction, const double time)</argsstring>
        <name>evaluateSecondBlockInStateVector</name>
        <param>
          <type>const std::function&lt; Eigen::Vector6d(const double) &gt;</type>
          <declname>stateFunction</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="142" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="142" bodyend="147" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="163" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1a4a8b0868a1d5f1c1daf8a243c7f9e840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::linear_algebra::calculatePartialOfNormalizedVector</definition>
        <argsstring>(const Eigen::Matrix3d &amp;partialOfUnnormalizedVector, const Eigen::Vector3d &amp;unnormalizedVector)</argsstring>
        <name>calculatePartialOfNormalizedVector</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>partialOfUnnormalizedVector</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>unnormalizedVector</declname>
        </param>
        <briefdescription>
<para>Function to calculate the jacobian of a normalized vector, from the jacobian of the unnormalized vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate the jacobian of a normalized vector, from the partial of the unnormalized vector.</para>
<para>Function to calculate the jacobian (partial matrix) of a normalized vector, from the jacobian (partial matrix) of the unnormalized vector and the unnormalized vector itself, i.e. d/dp(x/|x|) from d/dp(x) and x, with p and x 3d vectors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>partialOfUnnormalizedVector</parametername>
</parameternamelist>
<parameterdescription>
<para>The jacobian of the unnormalized vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unnormalizedVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Unnormalized vector wrt which partialOfUnnormalizedVector is taken </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The jacobian of the normalized vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="156" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="156" bodyend="163" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="179" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1a2e95e3d7af61753bf76023829ce39c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StateScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfRows</declname>
            <defname>NumberOfRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NumberOfColumns</declname>
            <defname>NumberOfColumns</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tudat::linear_algebra::doesMatrixHaveNanEntries</definition>
        <argsstring>(const Eigen::Matrix&lt; StateScalarType, NumberOfRows, NumberOfColumns &gt; matrixToCheck)</argsstring>
        <name>doesMatrixHaveNanEntries</name>
        <param>
          <type>const Eigen::Matrix&lt; StateScalarType, NumberOfRows, NumberOfColumns &gt;</type>
          <declname>matrixToCheck</declname>
        </param>
        <briefdescription>
<para>Function to check whether an Eigen Matrix has any NaN entries. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check whether an Eigen Matrix has any NaN entries <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrixToCheck</parametername>
</parameternamelist>
<parameterdescription>
<para>Eigen Matrix to check for any NaN entries </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if matrix has NaN entries, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" line="190" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" bodystart="190" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1aac84507727e00166354321dfb26402be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::linear_algebra::getVectorEntryRootMeanSquare</definition>
        <argsstring>(const Eigen::VectorXd &amp;inputVector)</argsstring>
        <name>getVectorEntryRootMeanSquare</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>inputVector</declname>
        </param>
        <briefdescription>
<para>Function to compute the root mean square value of the entries in an Eigen vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the root mean square (RMS) value of the entries in an Eigen vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector for which the RMS is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RMS of input vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="166" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="166" bodyend="177" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="212" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/d5b/linearAlgebra_8h_1ae6ac2a83cd20688c6e860646ae432744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::linear_algebra::computePartialDerivativeOfRotationMatrixWrtQuaternion</definition>
        <argsstring>(const Eigen::Vector4d quaternionVector, std::vector&lt; Eigen::Matrix3d &gt; &amp;partialDerivatives)</argsstring>
        <name>computePartialDerivativeOfRotationMatrixWrtQuaternion</name>
        <param>
          <type>const Eigen::Vector4d</type>
          <declname>quaternionVector</declname>
        </param>
        <param>
          <type>std::vector&lt; Eigen::Matrix3d &gt; &amp;</type>
          <declname>partialDerivatives</declname>
        </param>
        <briefdescription>
<para>Function to compute the partial derivative of a rotation matrix w.r.t. its associated quaterion elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the partial derivative of a rotation matrix w.r.t. its associated quaterion elements <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quaternionVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation quaternion in vector format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partialDerivatives</parametername>
</parameternamelist>
<parameterdescription>
<para>List of required partial derivatives (returned by reference) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" line="180" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/basic/linearAlgebra.cpp" bodystart="180" bodyend="204" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/linearAlgebra.h" declline="220" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/basic/leastSquaresEstimation.h" line="28" column="1"/>
  </compounddef>
</doxygen>
