<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial" kind="class" language="C++" prot="public">
    <compoundname>tudat::acceleration_partials::CannonBallRadiationPressurePartial</compoundname>
    <basecompoundref refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial" prot="public" virt="non-virtual">tudat::acceleration_partials::AccelerationPartial</basecompoundref>
    <includes refid="d5/dc1/radiationPressureAccelerationPartial_8h" local="no">radiationPressureAccelerationPartial.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a81b84d56b5252a3a5af97aefa7402186" prot="private" static="no" mutable="no">
        <type>std::function&lt; Eigen::Vector3d() &gt;</type>
        <definition>std::function&lt; Eigen::Vector3d( ) &gt; tudat::acceleration_partials::CannonBallRadiationPressurePartial::sourceBodyState_</definition>
        <argsstring></argsstring>
        <name>sourceBodyState_</name>
        <briefdescription>
<para>Function returning position of radiation source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="258" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a789b7652753ba36d55a607c2dee97ebc" prot="private" static="no" mutable="no">
        <type>std::function&lt; Eigen::Vector3d()&gt;</type>
        <definition>std::function&lt; Eigen::Vector3d( )&gt; tudat::acceleration_partials::CannonBallRadiationPressurePartial::acceleratedBodyState_</definition>
        <argsstring></argsstring>
        <name>acceleratedBodyState_</name>
        <briefdescription>
<para>Function returning position of body undergoing acceleration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="261" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a86d56fba661784b5dc43e5179a7e8105" prot="private" static="no" mutable="no">
        <type>std::function&lt; double() &gt;</type>
        <definition>std::function&lt; double( ) &gt; tudat::acceleration_partials::CannonBallRadiationPressurePartial::areaFunction_</definition>
        <argsstring></argsstring>
        <name>areaFunction_</name>
        <briefdescription>
<para>Function returning reflecting (or reference) area of radiation pressure on acceleratedBody_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="264" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a04d2b4f40f0f1f42fa14385ed0a7bf8a" prot="private" static="no" mutable="no">
        <type>std::function&lt; double() &gt;</type>
        <definition>std::function&lt; double( ) &gt; tudat::acceleration_partials::CannonBallRadiationPressurePartial::radiationPressureCoefficientFunction_</definition>
        <argsstring></argsstring>
        <name>radiationPressureCoefficientFunction_</name>
        <briefdescription>
<para>Function returning current radiation pressure coefficient (usually denoted C_{r}). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="267" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a0f8bc3f7ea176c0a57f51bdb9fc78e28" prot="private" static="no" mutable="no">
        <type>std::function&lt; double() &gt;</type>
        <definition>std::function&lt; double( ) &gt; tudat::acceleration_partials::CannonBallRadiationPressurePartial::radiationPressureFunction_</definition>
        <argsstring></argsstring>
        <name>radiationPressureFunction_</name>
        <briefdescription>
<para>Function returning current radiation pressure (in N/m^{2}) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="270" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ad75c2fd80e766c5d326d4019866d585f" prot="private" static="no" mutable="no">
        <type>std::function&lt; double() &gt;</type>
        <definition>std::function&lt; double( ) &gt; tudat::acceleration_partials::CannonBallRadiationPressurePartial::acceleratedBodyMassFunction_</definition>
        <argsstring></argsstring>
        <name>acceleratedBodyMassFunction_</name>
        <briefdescription>
<para>Function returning the mass of the body undergoing the acceleration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="273" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ad7bf88998aa12843942d2d66555fa011" prot="private" static="no" mutable="no">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::acceleration_partials::CannonBallRadiationPressurePartial::currentPartialWrtPosition_</definition>
        <argsstring></argsstring>
        <name>currentPartialWrtPosition_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current partial of acceleration w.r.t. position of body undergoing acceleration (equal to minus partial w.r.t. position of body exerting acceleration). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="277" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a9cb4e0e8afc1ab6732f5c27a3a9a2633" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::acceleration_partials::CannonBallRadiationPressurePartial::CannonBallRadiationPressurePartial</definition>
        <argsstring>(const std::shared_ptr&lt; electromagnetism::RadiationPressureInterface &gt; radiationPressureInterface, const std::function&lt; double() &gt; massFunction, const std::string &amp;acceleratedBody, const std::string &amp;acceleratingBody)</argsstring>
        <name>CannonBallRadiationPressurePartial</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d54/classtudat_1_1electromagnetism_1_1RadiationPressureInterface" kindref="compound">electromagnetism::RadiationPressureInterface</ref> &gt;</type>
          <declname>radiationPressureInterface</declname>
        </param>
        <param>
          <type>const std::function&lt; double() &gt;</type>
          <declname>massFunction</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>acceleratedBody</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>acceleratingBody</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radiationPressureInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface object for properties of radiation pressure computation (i.e. reference area, pressure magnitude, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>massFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning the mass of the body undergoing the acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleratedBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body undergoing acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleratingBody</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="55" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="55" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1aaf82430eca086ce0e21ed0c8b0359f24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::acceleration_partials::CannonBallRadiationPressurePartial::~CannonBallRadiationPressurePartial</definition>
        <argsstring>()</argsstring>
        <name>~CannonBallRadiationPressurePartial</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="72" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a7105f4ca7565bc0b0ffe893755ee3b26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::CannonBallRadiationPressurePartial::wrtPositionOfAcceleratedBody</definition>
        <argsstring>(Eigen::Block&lt; Eigen::MatrixXd &gt; partialMatrix, const bool addContribution=1, const int startRow=0, const int startColumn=0)</argsstring>
        <name>wrtPositionOfAcceleratedBody</name>
        <reimplements refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a629ee1ab826d64e6493d1dbf0fe7586b">wrtPositionOfAcceleratedBody</reimplements>
        <param>
          <type>Eigen::Block&lt; Eigen::MatrixXd &gt;</type>
          <declname>partialMatrix</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>addContribution</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>startRow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>startColumn</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Function for calculating the partial of the acceleration w.r.t. the position of body undergoing acceleration.. </para>
        </briefdescription>
        <detaileddescription>
<para>Function for calculating the partial of the acceleration w.r.t. the position of body undergoing acceleration and adding it to existing partial block. Update( ) function must have been called during current time step before calling this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>partialMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Block of partial derivatives of acceleration w.r.t. Cartesian position of body undergoing acceleration where current partial is to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addContribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable denoting whether to return the partial itself (true) or the negative partial (false). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startRow</parametername>
</parameternamelist>
<parameterdescription>
<para>First row in partialMatrix block where the computed partial is to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startColumn</parametername>
</parameternamelist>
<parameterdescription>
<para>First column in partialMatrix block where the computed partial is to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="85" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="85" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ac7c82002af8222d1de3cf7c2a5d37341" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::CannonBallRadiationPressurePartial::wrtPositionOfAcceleratingBody</definition>
        <argsstring>(Eigen::Block&lt; Eigen::MatrixXd &gt; partialMatrix, const bool addContribution=1, const int startRow=0, const int startColumn=0)</argsstring>
        <name>wrtPositionOfAcceleratingBody</name>
        <reimplements refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a779c9c208d2054d8425178f4ea8f6021">wrtPositionOfAcceleratingBody</reimplements>
        <param>
          <type>Eigen::Block&lt; Eigen::MatrixXd &gt;</type>
          <declname>partialMatrix</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>addContribution</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>startRow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>startColumn</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Function for calculating the partial of the acceleration w.r.t. the velocity of body undergoing acceleration.. </para>
        </briefdescription>
        <detaileddescription>
<para>Function for calculating the partial of the acceleration w.r.t. the velocity of body undergoing acceleration and adding it to exting partial block. The <ref refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ac146f0ef1adda30ba9657bac6e563692" kindref="member">update( )</ref> function must have been called during current time step before calling this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>partialMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Block of partial derivatives of acceleration w.r.t. Cartesian position of body exerting acceleration where current partial is to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addContribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable denoting whether to return the partial itself (true) or the negative partial (false). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startRow</parametername>
</parameternamelist>
<parameterdescription>
<para>First row in partialMatrix block where the computed partial is to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startColumn</parametername>
</parameternamelist>
<parameterdescription>
<para>First column in partialMatrix block where the computed partial is to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="109" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="109" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ac665acb9479084781d8445a48ef6f612" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::CannonBallRadiationPressurePartial::wrtNonTranslationalStateOfAdditionalBody</definition>
        <argsstring>(Eigen::Block&lt; Eigen::MatrixXd &gt; partialMatrix, const std::pair&lt; std::string, std::string &gt; &amp;stateReferencePoint, const propagators::IntegratedStateType integratedStateType, const bool addContribution=true)</argsstring>
        <name>wrtNonTranslationalStateOfAdditionalBody</name>
        <reimplements refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a781bc99dab9ab8dd805c63edf4e0d8f5">wrtNonTranslationalStateOfAdditionalBody</reimplements>
        <param>
          <type>Eigen::Block&lt; Eigen::MatrixXd &gt;</type>
          <declname>partialMatrix</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt; &amp;</type>
          <declname>stateReferencePoint</declname>
        </param>
        <param>
          <type>const propagators::IntegratedStateType</type>
          <declname>integratedStateType</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>addContribution</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Function for calculating the partial of the acceleration w.r.t. a non-translational integrated state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function for calculating the partial of the acceleration w.r.t. a non-translational integrated state and adding it to the existing partial block. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>partialMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Block of partial derivatives of where current partial is to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateReferencePoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference point id of propagated state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratedStateType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of propagated state for which partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addContribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable denoting whether to return the partial itself (true) or the negative partial (false). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="131" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="131" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1acb1a163e59f398cba8929feb0c64627d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool tudat::acceleration_partials::CannonBallRadiationPressurePartial::isStateDerivativeDependentOnIntegratedAdditionalStateTypes</definition>
        <argsstring>(const std::pair&lt; std::string, std::string &gt; &amp;stateReferencePoint, const propagators::IntegratedStateType integratedStateType)</argsstring>
        <name>isStateDerivativeDependentOnIntegratedAdditionalStateTypes</name>
        <reimplements refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a94b95390a37109627270bd8dfbca5342">isStateDerivativeDependentOnIntegratedAdditionalStateTypes</reimplements>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt; &amp;</type>
          <declname>stateReferencePoint</declname>
        </param>
        <param>
          <type>const propagators::IntegratedStateType</type>
          <declname>integratedStateType</declname>
        </param>
        <briefdescription>
<para>Function for determining if the azcceleration is dependent on a non-translational integrated state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function for determining if the acceleration is dependent on a non-translational integrated state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateReferencePoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference point id of propagated state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integratedStateType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of propagated state for which dependency is to be determined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if dependency exists (non-zero partial), false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="153" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="153" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1af7cc881fead76db604465d28d91e5d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::pair&lt; std::function&lt; void(Eigen::MatrixXd &amp;) &gt;, int &gt;</type>
        <definition>std::pair&lt; std::function&lt; void(Eigen::MatrixXd &amp;) &gt;, int &gt; tudat::acceleration_partials::CannonBallRadiationPressurePartial::getParameterPartialFunction</definition>
        <argsstring>(std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; double &gt; &gt; parameter)</argsstring>
        <name>getParameterPartialFunction</name>
        <reimplements refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a69a7807aefb5f8d5972718d36a96635f">getParameterPartialFunction</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; double &gt; &gt;</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Function for setting up and retrieving a function returning a partial w.r.t. a double parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function for setting up and retrieving a function returning a partial w.r.t. a double parameter. Function returns empty function and zero size indicator for parameters with no dependency for current acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter w.r.t. which partial is to be taken. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of parameter partial function and number of columns in partial (0 for no dependency, 1 otherwise). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="175" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.cpp" bodystart="31" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ada6608f46cde95e33cf6f31f6b2a332b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::pair&lt; std::function&lt; void(Eigen::MatrixXd &amp;) &gt;, int &gt;</type>
        <definition>std::pair&lt; std::function&lt; void(Eigen::MatrixXd &amp;) &gt;, int &gt; tudat::acceleration_partials::CannonBallRadiationPressurePartial::getParameterPartialFunction</definition>
        <argsstring>(std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::VectorXd &gt; &gt; parameter)</argsstring>
        <name>getParameterPartialFunction</name>
        <reimplements refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a849b14fede905e4e26ee2e752fbc95cc">getParameterPartialFunction</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::VectorXd &gt; &gt;</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Function for setting up and retrieving a function returning a partial w.r.t. a vector parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function for setting up and retrieving a function returning a partial w.r.t. a vector parameter. Function returns empty function and zero size indicator for parameters with no dependency for current acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter w.r.t. which partial is to be taken. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of parameter partial function and number of columns in partial (0 for no dependency). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="185" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.cpp" bodystart="59" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1afe5f40aa8a37b0b7498d703a4a3355c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::CannonBallRadiationPressurePartial::wrtRadiationPressureCoefficient</definition>
        <argsstring>(Eigen::MatrixXd &amp;partial)</argsstring>
        <name>wrtRadiationPressureCoefficient</name>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>partial</declname>
        </param>
        <briefdescription>
<para>Function to compute the partial derivative w.r.t. a constant radiation pressure coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the partial derivative w.r.t. a constant radiation pressure coefficient <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>partial</parametername>
</parameternamelist>
<parameterdescription>
<para>Partial derivative w.r.t. a constant radiation pressure coefficient (returned by reference) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="193" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a84e532cfa5efe399a236b1ab7d97969a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::CannonBallRadiationPressurePartial::wrtArcWiseRadiationPressureCoefficient</definition>
        <argsstring>(Eigen::MatrixXd &amp;partial, const std::shared_ptr&lt; estimatable_parameters::ArcWiseRadiationPressureCoefficient &gt; parameter)</argsstring>
        <name>wrtArcWiseRadiationPressureCoefficient</name>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>partial</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/d71/classtudat_1_1estimatable__parameters_1_1ArcWiseRadiationPressureCoefficient" kindref="compound">estimatable_parameters::ArcWiseRadiationPressureCoefficient</ref> &gt;</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Function to compute the partial derivative w.r.t. an arcwise radiation pressure coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the partial derivative w.r.t. an arcwise radiation pressure coefficient <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter of arcwise radiation pressure coefficient w.r.t. which partial is to be taken </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partial</parametername>
</parameternamelist>
<parameterdescription>
<para>Partial derivative w.r.t. an arcwise radiation pressure coefficient (returned by reference) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="206" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="206" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ac146f0ef1adda30ba9657bac6e563692" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::CannonBallRadiationPressurePartial::update</definition>
        <argsstring>(const double currentTime=0.0)</argsstring>
        <name>update</name>
        <reimplements refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a6801a8f31cc0fcdb9679c2db6be3b157">update</reimplements>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Function for updating partial w.r.t. the bodies&apos; positions. </para>
        </briefdescription>
        <detaileddescription>
<para>Function for updating common blocks of partial to current state. For the radiation pressure acceleration, position partial is computed and set. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partials are to be calculated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="236" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="236" bodyend="253"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class to calculate the partials of the cannnonball radiation pressure acceleration w.r.t. parameters and states. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>tudat::acceleration_partials::AccelerationPartial</label>
        <link refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>tudat::orbit_determination::StateDerivativePartial</label>
        <link refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial"/>
      </node>
      <node id="1">
        <label>tudat::acceleration_partials::CannonBallRadiationPressurePartial</label>
        <link refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>tudat::acceleration_partials::AccelerationPartial</label>
        <link refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>acceleratedBody_</edgelabel>
          <edgelabel>acceleratingBody_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>iterator</label>
      </node>
      <node id="3">
        <label>tudat::orbit_determination::StateDerivativePartial</label>
        <link refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial"/>
        <childnode refid="4" relation="usage">
          <edgelabel>isCurrentDoubleParameterPartialSetIterator_</edgelabel>
          <edgelabel>isCurrentVectorParameterPartialSetIterator_</edgelabel>
          <edgelabel>parameterDoublePartialFunctionIterator_</edgelabel>
          <edgelabel>parameterVectorPartialFunctionIterator_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="1">
        <label>tudat::acceleration_partials::CannonBallRadiationPressurePartial</label>
        <link refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" line="42" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" bodystart="43" bodyend="278"/>
    <listofallmembers>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a655662aa6427373647cc9c26327e9565" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>acceleratedBody_</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ad75c2fd80e766c5d326d4019866d585f" prot="private" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>acceleratedBodyMassFunction_</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a789b7652753ba36d55a607c2dee97ebc" prot="private" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>acceleratedBodyState_</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1aa0cb4d885b7833a39db39212a797ebd2" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>acceleratingBody_</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1ad4f4594c6e13138a1895dd008a14bf7e" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>AccelerationPartial</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1aacaaf221e1d39de40b6d9e3b881b9e42" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>accelerationSize_</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a32cc6c58e4aa187b2110b4c6c7d4ccf4" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>accelerationType_</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a86d56fba661784b5dc43e5179a7e8105" prot="private" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>areaFunction_</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a9cb4e0e8afc1ab6732f5c27a3a9a2633" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>CannonBallRadiationPressurePartial</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a6699f3159f79975406d3fcc1f9002d1b" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>currentDoubleParameterPartials_</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ad7bf88998aa12843942d2d66555fa011" prot="private" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>currentPartialWrtPosition_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1abbca0ac294a29b7d1efc16a68d7c4582" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>currentTime_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a1091be37858cb2fbef57b803e944ac60" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>currentVectorParameterPartials_</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a0bf7d418855165be4d40b82cfbeb115c" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getAcceleratedBody</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1ac74a861f66f3362524aec1f0266513cf" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getAcceleratingBody</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a6b6e323de35eaeb1292e4bfb410da7b1" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getAccelerationType</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1ac31393221aeef20ea4ee5d7d0ad59aba" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getCurrentDoubleParameterPartial</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1adf72962ebc3a9a2008170009c26f553c" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getCurrentParameterPartial</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1acdfcbf63330d5b2b04fbaeb3787c8f68" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getCurrentParameterPartial</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a2ba60d5dd1c131412a8f1aae8dd47a21" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getCurrentVectorParameterPartial</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a1b40573f9d0a7ad203e379327f13757e" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getDerivativeFunctionWrtStateOfIntegratedBody</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a01893338e6faedd93cc0410bb692ce12" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getIntegratedStateType</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1adbe24dfd4085ec6343ccf18478b52bc0" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getIntegrationReferencePoint</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1af7cc881fead76db604465d28d91e5d92" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getParameterPartialFunction</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ada6608f46cde95e33cf6f31f6b2a332b" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>getParameterPartialFunction</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1aad4f9e664da456462d4cb8b764679f1f" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>integratedStateType_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a0c30598298c59647e997203dc0ad664c" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>integrationReferencePoint_</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1ab6d26ee307ebc4bb8f2cdca9f53e5097" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>isAccelerationPartialWrtAdditionalBodyNonnullptr</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1ad91136949f633458e8b970a5baacb9ce" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>isCurrentDoubleParameterPartialSet_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1aebd9e9721d7194fea38a286e94391d97" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>isCurrentDoubleParameterPartialSetIterator_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a90cb1a317764b060601778e2a515d305" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>isCurrentVectorParameterPartialSet_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1adc2943bcf127c42d392e57e574b0fa1f" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>isCurrentVectorParameterPartialSetIterator_</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1acb1a163e59f398cba8929feb0c64627d" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>isStateDerivativeDependentOnIntegratedAdditionalStateTypes</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1ab05fd603c6228f4639e6f00ac4f9527c" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>isStateDerivativeDependentOnIntegratedState</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a300a3a9234fd8eb9fd4f5d50778a4321" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>parameterDoublePartialFunctionIterator_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a3e7c12925372ee2844f8f76d2dae4a77" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>parameterDoublePartialFunctions_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1ae86be0f3c3a487ce1706e0829caca26e" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>parameterVectorPartialFunctionIterator_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a799da4695ca3bea29aaed8b761c9c3b3" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>parameterVectorPartialFunctions_</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a04d2b4f40f0f1f42fa14385ed0a7bf8a" prot="private" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>radiationPressureCoefficientFunction_</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a0f8bc3f7ea176c0a57f51bdb9fc78e28" prot="private" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>radiationPressureFunction_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a7b26a08bb4990220a7d2f40f3681274a" prot="protected" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>resetCurrentParameterValues</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a3654d540045886559b6592dc4f30bab8" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>resetTime</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1aa0245f5f6b58423905b64709dac39a4c" prot="protected" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>resetTimeOfMemberObjects</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a481fc771c0a87996bc469b34ead49db9" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>setParameterPartialUpdateFunction</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a646f021c7c884446d482b9b0ab1e14f4" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>setParameterPartialUpdateFunction</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a81b84d56b5252a3a5af97aefa7402186" prot="private" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>sourceBodyState_</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a4827d172b38b466f65f4da68500f53ea" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>StateDerivativePartial</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ac146f0ef1adda30ba9657bac6e563692" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>update</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a7a6f8bf919e2a0c16bc254738123b5b4" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>updateParameterPartials</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a53491f7d5c94bd64b71c5190b9793a64" prot="protected" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>updateParameterPartialsOfMemberObjects</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a84e532cfa5efe399a236b1ab7d97969a" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtArcWiseRadiationPressureCoefficient</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ac665acb9479084781d8445a48ef6f612" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtNonTranslationalStateOfAdditionalBody</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a17003fa377113426b3e556a78f147941" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtParameter</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1ae12101f97027e73084d3d80dbc7059b3" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtParameter</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1a7105f4ca7565bc0b0ffe893755ee3b26" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtPositionOfAcceleratedBody</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1ac7c82002af8222d1de3cf7c2a5d37341" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtPositionOfAcceleratingBody</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1ab222ba1108201aa02e916c64ce82d599" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtPositionOfAdditionalBody</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1afe5f40aa8a37b0b7498d703a4a3355c2" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtRadiationPressureCoefficient</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a0576a63608bc8bee1da8bf2aea0ea7b6" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtStateOfAcceleratedBody</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a8bfba67b7f9e9a3d6021b2b1759fc33e" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtStateOfAcceleratingBody</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a8e21b7ff67f97af2e7e2a963cd0da3b2" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtStateOfAdditionalBody</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1ad3bb8ec281acf660baed8eb5127fcf5d" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtVelocityOfAcceleratedBody</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1ab411157f1ab0d7b8bdcb771024b4f5a9" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtVelocityOfAcceleratingBody</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1a1566f99b2cfd42d523c06ee6c1559435" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>wrtVelocityOfAdditionalBody</name></member>
      <member refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial_1ab373fff70206231b312a988e59902038" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>~AccelerationPartial</name></member>
      <member refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial_1aaf82430eca086ce0e21ed0c8b0359f24" prot="public" virt="non-virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>~CannonBallRadiationPressurePartial</name></member>
      <member refid="de/db9/classtudat_1_1orbit__determination_1_1StateDerivativePartial_1a05f085a890b27518ca24446ac22bdb3e" prot="public" virt="virtual"><scope>tudat::acceleration_partials::CannonBallRadiationPressurePartial</scope><name>~StateDerivativePartial</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
