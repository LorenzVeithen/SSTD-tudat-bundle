<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dc/d02/namespacetudat_1_1acceleration__partials" kind="namespace" language="C++">
    <compoundname>tudat::acceleration_partials</compoundname>
    <innerclass refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial" prot="public">tudat::acceleration_partials::AccelerationPartial</innerclass>
    <innerclass refid="da/df7/classtudat_1_1acceleration__partials_1_1AerodynamicAccelerationPartial" prot="public">tudat::acceleration_partials::AerodynamicAccelerationPartial</innerclass>
    <innerclass refid="d3/d2b/classtudat_1_1acceleration__partials_1_1CentralGravitationPartial" prot="public">tudat::acceleration_partials::CentralGravitationPartial</innerclass>
    <innerclass refid="d2/d2b/classtudat_1_1acceleration__partials_1_1DirectTidalDissipationAccelerationPartial" prot="public">tudat::acceleration_partials::DirectTidalDissipationAccelerationPartial</innerclass>
    <innerclass refid="dd/d46/classtudat_1_1acceleration__partials_1_1EmpiricalAccelerationPartial" prot="public">tudat::acceleration_partials::EmpiricalAccelerationPartial</innerclass>
    <innerclass refid="d7/d5f/classtudat_1_1acceleration__partials_1_1MutualSphericalHarmonicsGravityPartial" prot="public">tudat::acceleration_partials::MutualSphericalHarmonicsGravityPartial</innerclass>
    <innerclass refid="d9/dc3/classtudat_1_1acceleration__partials_1_1PanelledRadiationPressurePartial" prot="public">tudat::acceleration_partials::PanelledRadiationPressurePartial</innerclass>
    <innerclass refid="dd/dd8/classtudat_1_1acceleration__partials_1_1CannonBallRadiationPressurePartial" prot="public">tudat::acceleration_partials::CannonBallRadiationPressurePartial</innerclass>
    <innerclass refid="d8/db0/classtudat_1_1acceleration__partials_1_1RelativisticAccelerationPartial" prot="public">tudat::acceleration_partials::RelativisticAccelerationPartial</innerclass>
    <innerclass refid="d0/d11/classtudat_1_1acceleration__partials_1_1SphericalHarmonicsGravityPartial" prot="public">tudat::acceleration_partials::SphericalHarmonicsGravityPartial</innerclass>
    <innerclass refid="d7/dd0/classtudat_1_1acceleration__partials_1_1ThirdBodyGravityPartial" prot="public">tudat::acceleration_partials::ThirdBodyGravityPartial</innerclass>
    <innerclass refid="d6/d4c/classtudat_1_1acceleration__partials_1_1MomentumWheelDesaturationPartial" prot="public">tudat::acceleration_partials::MomentumWheelDesaturationPartial</innerclass>
    <innerclass refid="d4/dd6/classtudat_1_1acceleration__partials_1_1ConstantTorquePartial" prot="public">tudat::acceleration_partials::ConstantTorquePartial</innerclass>
    <innerclass refid="d1/dfe/classtudat_1_1acceleration__partials_1_1InertialTorquePartial" prot="public">tudat::acceleration_partials::InertialTorquePartial</innerclass>
    <innerclass refid="dd/d0e/classtudat_1_1acceleration__partials_1_1SecondDegreeGravitationalTorquePartial" prot="public">tudat::acceleration_partials::SecondDegreeGravitationalTorquePartial</innerclass>
    <innerclass refid="dd/dd9/classtudat_1_1acceleration__partials_1_1SphericalHarmonicGravitationalTorquePartial" prot="public">tudat::acceleration_partials::SphericalHarmonicGravitationalTorquePartial</innerclass>
    <innerclass refid="d7/dd4/classtudat_1_1acceleration__partials_1_1TorquePartial" prot="public">tudat::acceleration_partials::TorquePartial</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d1/d29/inertiaTensorPartial_8h_1a9b13f1bff896080e4fbde91a3a6672fc" prot="public" static="yes" mutable="no">
        <type>const Eigen::Matrix3d</type>
        <definition>const Eigen::Matrix3d tudat::acceleration_partials::UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_C20</definition>
        <argsstring></argsstring>
        <name>UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_C20</name>
        <initializer>=
        ( Eigen::Matrix3d( ) &lt;&lt; 1.0 / 3.0, 0.0, 0.0,
          0.0, 1.0 / 3.0, 0.0,
          0.0, 0.0, -2.0 / 3.0 ).finished( )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" line="26" column="30" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d29/inertiaTensorPartial_8h_1ac3defc5e8c9a9eb192c4b29eb8391378" prot="public" static="yes" mutable="no">
        <type>const Eigen::Matrix3d</type>
        <definition>const Eigen::Matrix3d tudat::acceleration_partials::UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_C21</definition>
        <argsstring></argsstring>
        <name>UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_C21</name>
        <initializer>=
        ( Eigen::Matrix3d( ) &lt;&lt; 0.0, 0.0, -1.0,
          0.0, 0.0, 0.0,
          -1.0, 0.0, 0.0 ).finished( )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" line="32" column="30" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d29/inertiaTensorPartial_8h_1a869fb999a98b9d13751fa4494aac0c7d" prot="public" static="yes" mutable="no">
        <type>const Eigen::Matrix3d</type>
        <definition>const Eigen::Matrix3d tudat::acceleration_partials::UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_C22</definition>
        <argsstring></argsstring>
        <name>UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_C22</name>
        <initializer>=
        ( Eigen::Matrix3d( ) &lt;&lt; -2.0, 0.0, 0.0,
          0.0, 2.0, 0.0,
          0.0, 0.0, 0.0 ).finished( )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" line="37" column="30" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d29/inertiaTensorPartial_8h_1a356f5ae35148a620a329bc3f61c8a889" prot="public" static="yes" mutable="no">
        <type>const Eigen::Matrix3d</type>
        <definition>const Eigen::Matrix3d tudat::acceleration_partials::UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_S21</definition>
        <argsstring></argsstring>
        <name>UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_S21</name>
        <initializer>=
        ( Eigen::Matrix3d( ) &lt;&lt; 0.0, 0.0, 0.0,
          0.0, 0.0, -1.0,
          0.0, -1.0, 0.0 ).finished( )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" line="42" column="30" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d29/inertiaTensorPartial_8h_1afad00acd494526a8951f11ab4a7ee5c7" prot="public" static="yes" mutable="no">
        <type>const Eigen::Matrix3d</type>
        <definition>const Eigen::Matrix3d tudat::acceleration_partials::UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_S22</definition>
        <argsstring></argsstring>
        <name>UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_S22</name>
        <initializer>=
        ( Eigen::Matrix3d( ) &lt;&lt; 0.0, -2.0, 0.0,
          -2.0, 0.0, 0.0,
          0.0, 0.0, 0.0 ).finished( )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" line="47" column="30" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d29/inertiaTensorPartial_8h_1a5ec30c03495b33de6af343d4f34892cb" prot="public" static="yes" mutable="no">
        <type>const Eigen::Matrix3d</type>
        <definition>const Eigen::Matrix3d tudat::acceleration_partials::UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_MEAN_MOMENT</definition>
        <argsstring></argsstring>
        <name>UNSCALED_INERTIAL_TENSOR_PARTIAL_WRT_MEAN_MOMENT</name>
        <initializer>=
        Eigen::Matrix3d::Identity( )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" line="52" column="30" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/inertiaTensorPartial.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dd/d2d/centralGravityAccelerationPartial_8h_1aa68b3a343d68b1ced39ed938dec7ef19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::acceleration_partials::calculatePartialOfPointMassGravityWrtPositionOfAcceleratedBody</definition>
        <argsstring>(const Eigen::Vector3d &amp;acceleratedBodyPosition, const Eigen::Vector3d &amp;acceleratingBodyPosition, const double gravitationalParameter)</argsstring>
        <name>calculatePartialOfPointMassGravityWrtPositionOfAcceleratedBody</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>acceleratedBodyPosition</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>acceleratingBodyPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Calculates partial derivative of point mass gravitational acceleration wrt the position of body undergoing acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates partial derivative of point mass gravitational acceleration wrt the position of body undergoing acceleration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>acceleratedBodyPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of body being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleratingBodyPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of gravitating body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix with the Jacobian of the acceleration vector w.r.t. the position vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/centralGravityAccelerationPartial.cpp" line="21" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/centralGravityAccelerationPartial.cpp" bodystart="21" bodyend="38" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/centralGravityAccelerationPartial.h" declline="32" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/centralGravityAccelerationPartial_8h_1af370a54e1ae26719e88b4d49df5e583d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::acceleration_partials::computePartialOfCentralGravityWrtGravitationalParameter</definition>
        <argsstring>(const Eigen::Vector3d &amp;acceleratedBodyPosition, const Eigen::Vector3d &amp;acceleratingBodyPosition)</argsstring>
        <name>computePartialOfCentralGravityWrtGravitationalParameter</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>acceleratedBodyPosition</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>acceleratingBodyPosition</declname>
        </param>
        <briefdescription>
<para>Calculates partial derivative of point mass gravitational acceleration wrt gravitational parameter of the central body. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates partial derivative of point mass gravitational acceleration wrt gravitational parameter of the central body. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>acceleratedBodyPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of body being accelerated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleratingBodyPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector with the partial of the acceleration vector w.r.t. ational parameter of the central body. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/centralGravityAccelerationPartial.cpp" line="41" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/centralGravityAccelerationPartial.cpp" bodystart="41" bodyend="51" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/centralGravityAccelerationPartial.h" declline="44" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/centralGravityAccelerationPartial_8h_1a22f66f74783754b69654701f5573f0c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::acceleration_partials::computePartialOfCentralGravityWrtGravitationalParameter</definition>
        <argsstring>(const Eigen::Vector3d &amp;gravitationalAcceleration, const double gravitationalParameter)</argsstring>
        <name>computePartialOfCentralGravityWrtGravitationalParameter</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>gravitationalAcceleration</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <briefdescription>
<para>Calculates partial derivative of point mass gravitational acceleration wrt gravitational parameter of the central body. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates partial derivative of point mass gravitational acceleration wrt gravitational parameter of the central body. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gravitationalAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational acceleration vector for which partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of gravitating body. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector with the partial of the acceleration vector w.r.t. ational parameter of the central body. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/centralGravityAccelerationPartial.cpp" line="54" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/centralGravityAccelerationPartial.cpp" bodystart="54" bodyend="58" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/centralGravityAccelerationPartial.h" declline="55" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/directTidalDissipationAccelerationPartial_8h_1a5956b3a82c8b822d1a7715dc46b5b1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::acceleration_partials::computeDirectTidalAccelerationDueToTideOnPlanetWrtPosition</definition>
        <argsstring>(const Eigen::Vector6d relativeStateOfBodyExertingTide, const Eigen::Vector3d planetAngularVelocityVector, const double currentTidalAccelerationMultiplier, const double timeLag, const bool includeDirectRadialComponent)</argsstring>
        <name>computeDirectTidalAccelerationDueToTideOnPlanetWrtPosition</name>
        <param>
          <type>const Eigen::Vector6d</type>
          <declname>relativeStateOfBodyExertingTide</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>planetAngularVelocityVector</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTidalAccelerationMultiplier</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeLag</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>includeDirectRadialComponent</declname>
        </param>
        <briefdescription>
<para>Function to compute partial derivative of direct tidal acceleration due to tide on planet w.r.t. position of satellite. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute partial derivative of direct tidal acceleration due to tide on planet w.r.t. position of satellite (equal to -1 * partial w.r.t. position of planet) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeStateOfBodyExertingTide</parametername>
</parameternamelist>
<parameterdescription>
<para>State of satellite w.r.t. host planet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>planetAngularVelocityVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Angular velocity vector ogf host planet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTidalAccelerationMultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar multiplier that is common to all vector terms (term outside of brackets in Eq. (3) of Lainey et al. (2007)). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeLag</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> lag of tidal bulge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>includeDirectRadialComponent</parametername>
</parameternamelist>
<parameterdescription>
<para>True if term independent of time lag is to be included, false otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of direct tidal acceleration due to tide on planet w.r.t. position of satellite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.cpp" line="22" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.cpp" bodystart="22" bodyend="46" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.h" declline="36" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/directTidalDissipationAccelerationPartial_8h_1a1bc3ea78fca66188cceecf89ca70e905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::acceleration_partials::computeDirectTidalAccelerationDueToTideOnPlanetWrtVelocity</definition>
        <argsstring>(const Eigen::Vector6d relativeStateOfBodyExertingTide, const double currentTidalAccelerationMultiplier, const double timeLag)</argsstring>
        <name>computeDirectTidalAccelerationDueToTideOnPlanetWrtVelocity</name>
        <param>
          <type>const Eigen::Vector6d</type>
          <declname>relativeStateOfBodyExertingTide</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTidalAccelerationMultiplier</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeLag</declname>
        </param>
        <briefdescription>
<para>Function to compute partial derivative of direct tidal acceleration due to tide on planet w.r.t. velocity of satellite. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute partial derivative of direct tidal acceleration due to tide on planet w.r.t. velocity of satellite/.</para>
<para>Function to compute partial derivative of direct tidal acceleration due to tide on planet w.r.t. velocity of satellite (equal to -1 * partial w.r.t. velocity of planet) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeStateOfBodyExertingTide</parametername>
</parameternamelist>
<parameterdescription>
<para>State of satellite w.r.t. host planet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTidalAccelerationMultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar multiplier that is common to all vector terms (term outside of brackets in Eq. (3) of Lainey et al. (2007)). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeLag</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> lag of tidal bulge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of direct tidal acceleration due to tide on planet w.r.t. velocity of satellite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.cpp" line="49" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.cpp" bodystart="49" bodyend="59" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.h" declline="50" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/directTidalDissipationAccelerationPartial_8h_1a5cbf3b120386f3e6d355d1100200c653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::acceleration_partials::computeDirectTidalAccelerationDueToTideOnSatelliteWrtPosition</definition>
        <argsstring>(const Eigen::Vector6d relativeStateOfBodyExertingTide, const double currentTidalAccelerationMultiplier, const double timeLag, const bool includeDirectRadialComponent)</argsstring>
        <name>computeDirectTidalAccelerationDueToTideOnSatelliteWrtPosition</name>
        <param>
          <type>const Eigen::Vector6d</type>
          <declname>relativeStateOfBodyExertingTide</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTidalAccelerationMultiplier</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeLag</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>includeDirectRadialComponent</declname>
        </param>
        <briefdescription>
<para>Function to compute partial derivative of direct tidal acceleration due to tide on satellite w.r.t. position of satellite. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute partial derivative of direct tidal acceleration due to tide on satellite w.r.t. position of satellite (equal to -1 * partial w.r.t. position of planet) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeStateOfBodyExertingTide</parametername>
</parameternamelist>
<parameterdescription>
<para>State of satellite w.r.t. host planet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTidalAccelerationMultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar multiplier that is common to all vector terms (term outside of brackets in Eq. (3) of Lainey et al. (2007)). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeLag</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> lag of tidal bulge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>includeDirectRadialComponent</parametername>
</parameternamelist>
<parameterdescription>
<para>True if term independent of time lag is to be included, false otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of direct tidal acceleration due to tide on satellite w.r.t. position of satellite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.cpp" line="62" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.cpp" bodystart="62" bodyend="82" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.h" declline="65" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/directTidalDissipationAccelerationPartial_8h_1a7696ff1a4de7091bec0673e347db5a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::acceleration_partials::computeDirectTidalAccelerationDueToTideOnSatelliteWrtVelocity</definition>
        <argsstring>(const Eigen::Vector6d relativeStateOfBodyExertingTide, const double currentTidalAccelerationMultiplier, const double timeLag)</argsstring>
        <name>computeDirectTidalAccelerationDueToTideOnSatelliteWrtVelocity</name>
        <param>
          <type>const Eigen::Vector6d</type>
          <declname>relativeStateOfBodyExertingTide</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTidalAccelerationMultiplier</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeLag</declname>
        </param>
        <briefdescription>
<para>Function to compute partial derivative of direct tidal acceleration due to tide on satellite w.r.t. velocity of satellite. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute partial derivative of direct tidal acceleration due to tide on satellite w.r.t. velocity of satellite (equal to -1 * partial w.r.t. velocity of planet) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeStateOfBodyExertingTide</parametername>
</parameternamelist>
<parameterdescription>
<para>State of satellite w.r.t. host planet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTidalAccelerationMultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar multiplier that is common to all vector terms (term outside of brackets in Eq. (3) of Lainey et al. (2007)). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeLag</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> lag of tidal bulge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of direct tidal acceleration due to tide on satellite w.r.t. velocity of satellite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.cpp" line="85" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.cpp" bodystart="85" bodyend="93" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/directTidalDissipationAccelerationPartial.h" declline="79" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/d8a/empiricalAccelerationPartial_8h_1a6ca54731c68743fd79c1ac55b35a63fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 1, 6 &gt;</type>
        <definition>Eigen::Matrix&lt; double, 1, 6 &gt; tudat::acceleration_partials::calculateNumericalPartialOfTrueAnomalyWrtState</definition>
        <argsstring>(const Eigen::Vector6d &amp;cartesianElements, const double gravitationalParameter, const Eigen::Vector6d &amp;cartesianStateElementPerturbations)</argsstring>
        <name>calculateNumericalPartialOfTrueAnomalyWrtState</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>cartesianElements</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>cartesianStateElementPerturbations</declname>
        </param>
        <briefdescription>
<para>Function determine the numerical partial derivative of the true anomaly wrt the elements of the Cartesian state. </para>
        </briefdescription>
        <detaileddescription>
<para>unction determine the numerical partial derivative of the true anomaly wrt the elements of the Cartesian state, from the Cartesian state as input. A first-order central difference with a user-defined Cartesian state perturbation vector is used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianElements</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal Cartesian elements at which the partials are to be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of central body around which Keplerian orbit is given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianStateElementPerturbations</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical perturbations of Cartesian state that are to be used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial of Cartesian state wrt true anomaly of orbit. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/empiricalAccelerationPartial.cpp" line="23" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/empiricalAccelerationPartial.cpp" bodystart="23" bodyend="76" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/empiricalAccelerationPartial.h" declline="38" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1a427f429d234c39ae1d7c98cf5d7db706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::emptyFunction</definition>
        <argsstring>()</argsstring>
        <name>emptyFunction</name>
        <briefdescription>
<para>Dummy function used for update, performs no calculations. </para>
        </briefdescription>
        <detaileddescription>
<para>Dummy function used for update, performs no calculations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="20" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="20" bodyend="20" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1ae3511c6080522876843003f26d1f59c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::emptyTimeFunction</definition>
        <argsstring>(const double time)</argsstring>
        <name>emptyTimeFunction</name>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Dummy function used for update, performs no calculations. </para>
        </briefdescription>
        <detaileddescription>
<para>Dummy function used for update, performs no calculations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Input parameter, not used by function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="23" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="23" bodyend="23" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1af37434e14fa23f237a393f58a00fe732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::acceleration_partials::calculateAccelerationWrtStatePartials</definition>
        <argsstring>(std::function&lt; void(Eigen::Vector6d) &gt; setBodyState, std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; accelerationModel, Eigen::Vector6d originalState, Eigen::Vector3d statePerturbation, int startIndex, std::function&lt; void() &gt; updateFunction=emptyFunction, const double evaluationTime=TUDAT_NAN)</argsstring>
        <name>calculateAccelerationWrtStatePartials</name>
        <param>
          <type>std::function&lt; void(Eigen::Vector6d) &gt;</type>
          <declname>setBodyState</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
          <declname>accelerationModel</declname>
        </param>
        <param>
          <type>Eigen::Vector6d</type>
          <declname>originalState</declname>
        </param>
        <param>
          <type>Eigen::Vector3d</type>
          <declname>statePerturbation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>std::function&lt; void() &gt;</type>
          <declname>updateFunction</declname>
          <defval>emptyFunction</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>evaluationTime</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
<para>Function to numerical compute the partial derivative of an acceleration w.r.t. a body state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to numerical compute the partial derivative of an acceleration w.r.t. a body state (position or velocity), using a first-order central difference method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setBodyState</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to reset the current state w.r.t. which the partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration model for which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>originalState</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal state at which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statePerturbation</parametername>
</parameternamelist>
<parameterdescription>
<para>Perturbation to the position or velocity that is to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Start index in the state vector from where the statePerturbation is to be added (i.e. 0 if function is to compute partial w.r.t. position, 3 if w.r.t velocity). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change of the body state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluationTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated (default NaN). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical partial of the acceleration w.r.t. position or velocity (depending on function input). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="26" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="26" bodyend="82" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="56" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1a4dcf120bf0cd8b7eb683be8e2940c680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd tudat::acceleration_partials::calculateTorqueWrtRotationalStatePartials</definition>
        <argsstring>(std::function&lt; void(Eigen::Vector7d) &gt; setBodyRotationalState, std::shared_ptr&lt; basic_astrodynamics::TorqueModel &gt; torqueModel, Eigen::Vector7d originalRotationalState, Eigen::VectorXd statePerturbations, int startIndex, int numberOfEntries, std::function&lt; void() &gt; updateFunction=emptyFunction, const double evaluationTime=TUDAT_NAN)</argsstring>
        <name>calculateTorqueWrtRotationalStatePartials</name>
        <param>
          <type>std::function&lt; void(Eigen::Vector7d) &gt;</type>
          <declname>setBodyRotationalState</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">basic_astrodynamics::TorqueModel</ref> &gt;</type>
          <declname>torqueModel</declname>
        </param>
        <param>
          <type>Eigen::Vector7d</type>
          <declname>originalRotationalState</declname>
        </param>
        <param>
          <type>Eigen::VectorXd</type>
          <declname>statePerturbations</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numberOfEntries</declname>
        </param>
        <param>
          <type>std::function&lt; void() &gt;</type>
          <declname>updateFunction</declname>
          <defval>emptyFunction</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>evaluationTime</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
<para>Function to numerical compute the partial derivative of a torque w.r.t. a body rotational state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to numerical compute the partial derivative of an torque w.r.t. a body rotational state elements using a first-order central difference method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setBodyRotationalState</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to reset the current rotational state w.r.t. which the partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>torqueModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Torque model for which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>originalRotationalState</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal rotational state at which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statePerturbations</parametername>
</parameternamelist>
<parameterdescription>
<para>Perturbation to the states that is to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Start index in the state vector from where the statePerturbation is to be added (i.e. 0 if function is to compute partial w.r.t. quaternion, 4 if w.r.t angular velocity). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfEntries</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer denoting the number of entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change of the body state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluationTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated (default NaN). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical partial of the torque w.r.t. body rotational state elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="143" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="143" bodyend="200" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="80" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1a4a50541c6d16c7acfac6db94174e82c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd tudat::acceleration_partials::calculateAccelerationDeviationDueToOrientationChange</definition>
        <argsstring>(const std::function&lt; void(Eigen::Vector7d) &gt; setBodyRotationalState, std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; accelerationModel, const Eigen::Vector7d &amp;originalRotationalState, const Eigen::Vector4d &amp;commandedQuaternionPerturbation, std::vector&lt; Eigen::Vector4d &gt; &amp;appliedQuaternionPerturbation, std::function&lt; void() &gt; updateFunction=emptyFunction, const double evaluationTime=TUDAT_NAN)</argsstring>
        <name>calculateAccelerationDeviationDueToOrientationChange</name>
        <param>
          <type>const std::function&lt; void(Eigen::Vector7d) &gt;</type>
          <declname>setBodyRotationalState</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
          <declname>accelerationModel</declname>
        </param>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>originalRotationalState</declname>
        </param>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>commandedQuaternionPerturbation</declname>
        </param>
        <param>
          <type>std::vector&lt; Eigen::Vector4d &gt; &amp;</type>
          <declname>appliedQuaternionPerturbation</declname>
        </param>
        <param>
          <type>std::function&lt; void() &gt;</type>
          <declname>updateFunction</declname>
          <defval>emptyFunction</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>evaluationTime</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
<para>Function to numerical compute the partial derivative of a acceleration w.r.t. a body rotational quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to numerical compute the partial derivative of an acceleration w.r.t. a body rotational quaternion elements using a first-order central difference method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setBodyRotationalState</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to reset the current rotational state w.r.t. which the partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration model for which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>originalRotationalState</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal rotational state at which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>commandedQuaternionPerturbation</parametername>
</parameternamelist>
<parameterdescription>
<para>Perturbation to the quaternion that is to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>appliedQuaternionPerturbation</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternion perturbations that were actually applied (after manifold correction) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change of the body state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluationTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated (default NaN). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical partial of the acceleration w.r.t. body rotational quaternion elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="203" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="203" bodyend="247" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="103" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1a3a4344a4dd4ddd6600c55934853ae233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd tudat::acceleration_partials::calculateTorqueWrtTranslationalStatePartials</definition>
        <argsstring>(std::function&lt; void(Eigen::Vector6d) &gt; setBodyState, std::shared_ptr&lt; basic_astrodynamics::TorqueModel &gt; torqueModel, Eigen::Vector6d originalState, Eigen::Vector3d statePerturbation, int startIndex, std::function&lt; void() &gt; updateFunction=emptyFunction, const double evaluationTime=TUDAT_NAN)</argsstring>
        <name>calculateTorqueWrtTranslationalStatePartials</name>
        <param>
          <type>std::function&lt; void(Eigen::Vector6d) &gt;</type>
          <declname>setBodyState</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">basic_astrodynamics::TorqueModel</ref> &gt;</type>
          <declname>torqueModel</declname>
        </param>
        <param>
          <type>Eigen::Vector6d</type>
          <declname>originalState</declname>
        </param>
        <param>
          <type>Eigen::Vector3d</type>
          <declname>statePerturbation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>std::function&lt; void() &gt;</type>
          <declname>updateFunction</declname>
          <defval>emptyFunction</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>evaluationTime</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
<para>Function to numerical compute the partial derivative of a torque w.r.t. a body translational state. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to numerical compute the partial derivative of an torque w.r.t. a body translational state elements using a first-order central difference method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setBodyState</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to reset the current translational state w.r.t. which the partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>torqueModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Torque model for which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>originalState</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal translational state at which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statePerturbation</parametername>
</parameternamelist>
<parameterdescription>
<para>Perturbation to the states that is to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Start index in the state vector from where the statePerturbation is to be added (i.e. 0 if function is to compute partial w.r.t. position, 3 if w.r.t velocity). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change of the body state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluationTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated (default NaN). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical partial of the torque w.r.t. body translational state elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="85" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="85" bodyend="140" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="126" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1a4fb7596dbf25758faaa3476173422abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd tudat::acceleration_partials::calculateTorqueDeviationDueToOrientationChange</definition>
        <argsstring>(const std::function&lt; void(Eigen::Vector7d) &gt; setBodyRotationalState, const std::shared_ptr&lt; basic_astrodynamics::TorqueModel &gt; torqueModel, const Eigen::Vector7d &amp;originalRotationalState, const Eigen::Vector4d &amp;commandedQuaternionPerturbation, std::vector&lt; Eigen::Vector4d &gt; &amp;appliedQuaternionPerturbation, std::function&lt; void() &gt; updateFunction=emptyFunction, const double evaluationTime=TUDAT_NAN)</argsstring>
        <name>calculateTorqueDeviationDueToOrientationChange</name>
        <param>
          <type>const std::function&lt; void(Eigen::Vector7d) &gt;</type>
          <declname>setBodyRotationalState</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">basic_astrodynamics::TorqueModel</ref> &gt;</type>
          <declname>torqueModel</declname>
        </param>
        <param>
          <type>const Eigen::Vector7d &amp;</type>
          <declname>originalRotationalState</declname>
        </param>
        <param>
          <type>const Eigen::Vector4d &amp;</type>
          <declname>commandedQuaternionPerturbation</declname>
        </param>
        <param>
          <type>std::vector&lt; Eigen::Vector4d &gt; &amp;</type>
          <declname>appliedQuaternionPerturbation</declname>
        </param>
        <param>
          <type>std::function&lt; void() &gt;</type>
          <declname>updateFunction</declname>
          <defval>emptyFunction</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>evaluationTime</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
<para>Function to numerical compute the partial derivative of a torque w.r.t. a body rotational quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to numerical compute the partial derivative of an torque w.r.t. a body rotational quaternion elements using a first-order central difference method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setBodyRotationalState</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to reset the current rotational state w.r.t. which the partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>torqueModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Torque model for which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>originalRotationalState</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal rotational state at which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>commandedQuaternionPerturbation</parametername>
</parameternamelist>
<parameterdescription>
<para>Perturbation to the quaternion that is to be used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>appliedQuaternionPerturbation</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternion perturbations that were actually applied (after manifold correction) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change of the body state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluationTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be evaluated (default NaN). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical partial of the torque w.r.t. body rotational quaternion elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="250" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="250" bodyend="291" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="148" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1afcff2ba91fb4710ca11d12e77659c5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::acceleration_partials::calculateAccelerationWrtParameterPartials</definition>
        <argsstring>(std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; double &gt; &gt; parameter, std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; accelerationModel, double parameterPerturbation, std::function&lt; void() &gt; updateDependentVariables=emptyFunction, const double currentTime=0.0, std::function&lt; void(const double) &gt; timeDependentUpdateDependentVariables=emptyTimeFunction)</argsstring>
        <name>calculateAccelerationWrtParameterPartials</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; double &gt; &gt;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
          <declname>accelerationModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>parameterPerturbation</declname>
        </param>
        <param>
          <type>std::function&lt; void() &gt;</type>
          <declname>updateDependentVariables</declname>
          <defval>emptyFunction</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>std::function&lt; void(const double) &gt;</type>
          <declname>timeDependentUpdateDependentVariables</declname>
          <defval>emptyTimeFunction</defval>
        </param>
        <briefdescription>
<para>Function to numerical compute the partial derivative of an acceleration w.r.t. a double parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to numerical compute the partial derivative of an acceleration w.r.t. a double parameter, using a first-order central difference method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Object describing the parameter w.r.t. which the partial is to be taken. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration model for which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterPerturbation</parametername>
</parameternamelist>
<parameterdescription>
<para>Perturbation to be used for parameter value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change in parameter, for models that do not explicitly depend on the current time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeDependentUpdateDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change in parameters for models that do explicitly depend on the current time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical partial of the acceleration w.r.t. given parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="294" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="294" bodyend="339" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="171" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1ac97615c0f6a429d91daaa6a39eb6ecde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::acceleration_partials::calculateTorqueWrtParameterPartials</definition>
        <argsstring>(std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; double &gt; &gt; parameter, std::shared_ptr&lt; basic_astrodynamics::TorqueModel &gt; torqueModel, double parameterPerturbation, std::function&lt; void() &gt; updateDependentVariables=emptyFunction, const double currentTime=0.0, std::function&lt; void(const double) &gt; timeDependentUpdateDependentVariables=emptyTimeFunction)</argsstring>
        <name>calculateTorqueWrtParameterPartials</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; double &gt; &gt;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">basic_astrodynamics::TorqueModel</ref> &gt;</type>
          <declname>torqueModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>parameterPerturbation</declname>
        </param>
        <param>
          <type>std::function&lt; void() &gt;</type>
          <declname>updateDependentVariables</declname>
          <defval>emptyFunction</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>std::function&lt; void(const double) &gt;</type>
          <declname>timeDependentUpdateDependentVariables</declname>
          <defval>emptyTimeFunction</defval>
        </param>
        <briefdescription>
<para>Function to numerical compute the partial derivative of an torque w.r.t. a double parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to numerical compute the partial derivative of an torque w.r.t. a double parameter, using a first-order central difference method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Object describing the parameter w.r.t. which the partial is to be taken. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>torqueModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Torque model for which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterPerturbation</parametername>
</parameternamelist>
<parameterdescription>
<para>Perturbation to be used for parameter value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change in parameter, for models that do not explicitly depend on the current time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeDependentUpdateDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change in parameters for models that do explicitly depend on the current time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical partial of the torque w.r.t. given parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="342" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="342" bodyend="388" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="193" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1aad29af7b2065931ef40526d1cd69236b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt; double, 3, Eigen::Dynamic &gt; tudat::acceleration_partials::calculateAccelerationWrtParameterPartials</definition>
        <argsstring>(std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::VectorXd &gt; &gt; parameter, std::shared_ptr&lt; basic_astrodynamics::AccelerationModel&lt; Eigen::Vector3d &gt; &gt; accelerationModel, Eigen::VectorXd parameterPerturbation, std::function&lt; void() &gt; updateDependentVariables=emptyFunction, const double currentTime=0.0, std::function&lt; void(const double) &gt; timeDependentUpdateDependentVariables=emptyTimeFunction)</argsstring>
        <name>calculateAccelerationWrtParameterPartials</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::VectorXd &gt; &gt;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d1/db4/classtudat_1_1basic__astrodynamics_1_1AccelerationModel" kindref="compound">basic_astrodynamics::AccelerationModel</ref>&lt; Eigen::Vector3d &gt; &gt;</type>
          <declname>accelerationModel</declname>
        </param>
        <param>
          <type>Eigen::VectorXd</type>
          <declname>parameterPerturbation</declname>
        </param>
        <param>
          <type>std::function&lt; void() &gt;</type>
          <declname>updateDependentVariables</declname>
          <defval>emptyFunction</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>std::function&lt; void(const double) &gt;</type>
          <declname>timeDependentUpdateDependentVariables</declname>
          <defval>emptyTimeFunction</defval>
        </param>
        <briefdescription>
<para>Function to numerical compute the partial derivative of an acceleration w.r.t. a vector parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to numerical compute the partial derivative of an acceleration w.r.t. a vector parameter, using a first-order central difference method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Object describing the parameter w.r.t. which the partial is to be taken. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accelerationModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration model for which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterPerturbation</parametername>
</parameternamelist>
<parameterdescription>
<para>Perturbations to be used for parameter value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change in parameter, for models that do not explicitly depend on the current time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeDependentUpdateDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change in parameters for models that do explicitly depend on the current time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical partial of the acceleration w.r.t. given parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="391" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="391" bodyend="455" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="215" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d6/d81/numericalAccelerationPartial_8h_1a1f387fdda826416ae19cedd50a408e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt; double, 3, Eigen::Dynamic &gt; tudat::acceleration_partials::calculateTorqueWrtParameterPartials</definition>
        <argsstring>(std::shared_ptr&lt; estimatable_parameters::EstimatableParameter&lt; Eigen::VectorXd &gt; &gt; parameter, std::shared_ptr&lt; basic_astrodynamics::TorqueModel &gt; torqueModel, Eigen::VectorXd parameterPerturbation, std::function&lt; void() &gt; updateDependentVariables=emptyFunction, const double currentTime=0.0, std::function&lt; void(const double) &gt; timeDependentUpdateDependentVariables=emptyTimeFunction)</argsstring>
        <name>calculateTorqueWrtParameterPartials</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/d7c/classtudat_1_1estimatable__parameters_1_1EstimatableParameter" kindref="compound">estimatable_parameters::EstimatableParameter</ref>&lt; Eigen::VectorXd &gt; &gt;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/dfb/classtudat_1_1basic__astrodynamics_1_1TorqueModel" kindref="compound">basic_astrodynamics::TorqueModel</ref> &gt;</type>
          <declname>torqueModel</declname>
        </param>
        <param>
          <type>Eigen::VectorXd</type>
          <declname>parameterPerturbation</declname>
        </param>
        <param>
          <type>std::function&lt; void() &gt;</type>
          <declname>updateDependentVariables</declname>
          <defval>emptyFunction</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>currentTime</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>std::function&lt; void(const double) &gt;</type>
          <declname>timeDependentUpdateDependentVariables</declname>
          <defval>emptyTimeFunction</defval>
        </param>
        <briefdescription>
<para>Function to numerical compute the partial derivative of an torque w.r.t. a vector parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to numerical compute the partial derivative of an torque w.r.t. a vector parameter, using a first-order central difference method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Object describing the parameter w.r.t. which the partial is to be taken. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>torqueModel</parametername>
</parameternamelist>
<parameterdescription>
<para>Torque model for which the partial derivative is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterPerturbation</parametername>
</parameternamelist>
<parameterdescription>
<para>Perturbation to be used for parameter value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change in parameter, for models that do not explicitly depend on the current time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which partial is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeDependentUpdateDependentVariables</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to update the required environment models following the change in parameters for models that do explicitly depend on the current time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical partial of the torque w.r.t. given parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" line="458" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.cpp" bodystart="458" bodyend="522" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/numericalAccelerationPartial.h" declline="237" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d5/dc1/radiationPressureAccelerationPartial_8h_1ab27e6fcf0704e3c2c984b414880bc9db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::acceleration_partials::computePartialOfCannonBallRadiationPressureAccelerationWrtRadiationPressureCoefficient</definition>
        <argsstring>(const double radiationPressure, const double area, const double bodyMass, const Eigen::Vector3d &amp;vectorToSource)</argsstring>
        <name>computePartialOfCannonBallRadiationPressureAccelerationWrtRadiationPressureCoefficient</name>
        <param>
          <type>const double</type>
          <declname>radiationPressure</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>area</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bodyMass</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>vectorToSource</declname>
        </param>
        <briefdescription>
<para>Calculates partial derivative of cannon ball radiation pressure acceleration wrt radiation pressure coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates partial derivative of cannon ball radiation pressure acceleration wrt radiation pressure coefficient. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radiationPressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Current radiation pressure (in N/m^2) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para>(Reference) area for radiation pressure acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyMass</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of body undergoing acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vectorToSource</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector from body undergoing acceleration to source of radiation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of cannon ball radiation pressure acceleration wrt radiation pressure coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.cpp" line="21" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.cpp" bodystart="21" bodyend="28" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/radiationPressureAccelerationPartial.h" declline="35" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="de/d71/relativisticAccelerationPartial_8h_1a115bf6c657b6acfcc70ba6bfebb39492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::computePartialOfSchwarzschildAccelerationCorrectionWrtPosition</definition>
        <argsstring>(const Eigen::Vector6d &amp;relativeState, Eigen::Vector3d &amp;currentAcceleration, Eigen::Matrix3d &amp;partialMatrix, const double gravitationalParameter, const double ppnParameterGamma=1.0, const double ppnParameterBeta=1.0)</argsstring>
        <name>computePartialOfSchwarzschildAccelerationCorrectionWrtPosition</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>relativeState</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>currentAcceleration</declname>
        </param>
        <param>
          <type>Eigen::Matrix3d &amp;</type>
          <declname>partialMatrix</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ppnParameterGamma</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>ppnParameterBeta</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Function to compute partial of Schwarzschild acceleration correction w.r.t. position of body undergoing acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute partial of Schwarzschild acceleration correction w.r.t. position of body undergoing acceleration <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeState</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of body undergoing, w.r.t. body exerting, acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>Current Schwarzschild acceleration correction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partialMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested (returnd by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppnParameterGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>PPN parameter gamma </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppnParameterBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>PPN parameter beta </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.cpp" line="20" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.cpp" bodystart="20" bodyend="34" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d71/relativisticAccelerationPartial_8h_1aaedc9a9ab339431a5b0630e6b71e1026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::computePartialOfSchwarzschildAccelerationCorrectionWrtVelocity</definition>
        <argsstring>(const Eigen::Vector6d &amp;relativeState, Eigen::Matrix3d &amp;partialMatrix, const double gravitationalParameter, const double ppnParameterGamma=1.0)</argsstring>
        <name>computePartialOfSchwarzschildAccelerationCorrectionWrtVelocity</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>relativeState</declname>
        </param>
        <param>
          <type>Eigen::Matrix3d &amp;</type>
          <declname>partialMatrix</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ppnParameterGamma</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Function to compute partial of Schwarzschild acceleration correction w.r.t. velocity of body undergoing acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute partial of Schwarzschild acceleration correction w.r.t. velocity of body undergoing acceleration <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeState</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of body undergoing, w.r.t. body exerting, acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partialMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested (returnd by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppnParameterGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>PPN parameter gamma </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.cpp" line="37" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.cpp" bodystart="37" bodyend="50" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d71/relativisticAccelerationPartial_8h_1ac786fe59e5af1d959168ab7cc1ab5fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::computePartialOfSchwarzschildAccelerationCorrectionWrtGravitationalParameter</definition>
        <argsstring>(const Eigen::Vector6d &amp;relativeState, const double gravitationalParameter, Eigen::MatrixXd &amp;partialMatrix, const double ppnParameterGamma=1.0, const double ppnParameterBeta=1.0)</argsstring>
        <name>computePartialOfSchwarzschildAccelerationCorrectionWrtGravitationalParameter</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>relativeState</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>partialMatrix</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>ppnParameterGamma</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>ppnParameterBeta</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Function to compute partial derivative of Schwarzschild acceleration correction w.r.t. central body gravitational patameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute partial derivative of Schwarzschild acceleration correction w.r.t. central body gravitational patameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeState</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of body undergoing, w.r.t. body exerting, acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partialMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested (returnd by reference) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppnParameterGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>PPN parameter gamma </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ppnParameterBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>PPN parameter bet </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.cpp" line="53" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.cpp" bodystart="53" bodyend="68" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.h" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d71/relativisticAccelerationPartial_8h_1a92c5994c3e480a5e8088ffe7b6ba087b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::computePartialOfSchwarzschildAccelerationCorrectionWrtPpnParameterGamma</definition>
        <argsstring>(const Eigen::Vector6d &amp;relativeState, const double gravitationalParameter, Eigen::MatrixXd &amp;partialMatrix)</argsstring>
        <name>computePartialOfSchwarzschildAccelerationCorrectionWrtPpnParameterGamma</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>relativeState</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>partialMatrix</declname>
        </param>
        <briefdescription>
<para>Function to compute the partial derivative of Schwarzschild acceleration correction w.r.t. PPN parameter gamma. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the partial derivative of Schwarzschild acceleration correction w.r.t. PPN parameter gamma <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeState</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian state of body undergoing, w.r.t. body exerting, acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partialMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested (returnd by reference) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.cpp" line="71" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.cpp" bodystart="71" bodyend="82" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.h" declline="74" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d71/relativisticAccelerationPartial_8h_1a3589c892f5dfc8de760138dd430263d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::computePartialOfSchwarzschildAccelerationCorrectionWrtPpnParameterBeta</definition>
        <argsstring>(const Eigen::Vector6d &amp;relativeState, const double gravitationalParameter, Eigen::MatrixXd &amp;partialMatrix)</argsstring>
        <name>computePartialOfSchwarzschildAccelerationCorrectionWrtPpnParameterBeta</name>
        <param>
          <type>const Eigen::Vector6d &amp;</type>
          <declname>relativeState</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>partialMatrix</declname>
        </param>
        <briefdescription>
<para>Function to compute the partial derivative of Schwarzschild acceleration correction w.r.t. PPN parameter beta. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the partial derivative of Schwarzschild acceleration correction w.r.t. PPN parameter beta <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>relativeState</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of body undergoing, w.r.t. body exerting, acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of body exerting acceleration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partialMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested (returnd by reference) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.cpp" line="85" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.cpp" bodystart="85" bodyend="95" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/relativisticAccelerationPartial.h" declline="86" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d03/sphericalHarmonicPartialFunctions_8h_1aab5651dd3547266ffb7b02ed42af8412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::computePotentialSphericalHessian</definition>
        <argsstring>(const double distance, const double radiusPowerTerm, const double cosineOfOrderLongitude, const double sineOfOrderLongitude, const double cosineOfLatitude, const double sineOfLatitude, const double preMultiplier, const int degree, const int order, const double cosineHarmonicCoefficient, const double sineHarmonicCoefficient, const double legendrePolynomial, const double legendrePolynomialDerivative, const double legendrePolynomialSecondDerivative, Eigen::Matrix3d &amp;sphericalHessian)</argsstring>
        <name>computePotentialSphericalHessian</name>
        <param>
          <type>const double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>radiusPowerTerm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cosineOfOrderLongitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sineOfOrderLongitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cosineOfLatitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sineOfLatitude</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>preMultiplier</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cosineHarmonicCoefficient</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sineHarmonicCoefficient</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>legendrePolynomial</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>legendrePolynomialDerivative</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>legendrePolynomialSecondDerivative</declname>
        </param>
        <param>
          <type>Eigen::Matrix3d &amp;</type>
          <declname>sphericalHessian</declname>
        </param>
        <briefdescription>
<para>Function to compute the spherical Hessian of a single term of a spherical harmonic potential. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the spherical Hessian (i.e. matrix of second derivatives w.r.t. spherical components radius, latitude and longitude) of a single term of a spherical harmonic potential. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance to center of body with gravity field at which the partials are to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radiusPowerTerm</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance divided by the reference radius of the gravity field, to the power (degree + 1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineOfOrderLongitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Cosine of order times the longitude at which the potential is to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineOfOrderLongitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Sine of order times the longitude at which the potential is to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineOfLatitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Cosine of the latitude at which the potential is to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineOfLatitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Sine of the latitude at which the potential is to be calculated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preMultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-multiplier of potential (gravitational parametere divided by reference radius in normal representation) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>degree</parametername>
</parameternamelist>
<parameterdescription>
<para>Degree of the harmonic for which the gradient is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>Order of the harmonic for which the gradient is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineHarmonicCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient which characterizes relative strengh of a harmonic term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineHarmonicCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient which characterizes relative strengh of a harmonic term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legendrePolynomial</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of associated Legendre polynomial with the same degree and order as the to be computed harmonic, and with the sine of the latitude coordinate as polynomial parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legendrePolynomialDerivative</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the derivative of parameter &apos;legendrePolynomial&apos; with respect to the sine of the latitude angle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legendrePolynomialSecondDerivative</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of second derivative of parameter &apos;legendrePolynomial&apos; with respect to the sine of the latitude angle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalHessian</parametername>
</parameternamelist>
<parameterdescription>
<para>Hessian of potential term in spherical coordinates (returned by reference). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" line="29" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" bodystart="29" bodyend="70" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d03/sphericalHarmonicPartialFunctions_8h_1aa82ba508db22b4c760d04ca9d80c2bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::computePotentialSphericalHessian</definition>
        <argsstring>(const Eigen::Vector3d &amp;sphericalPosition, const double referenceRadius, const double preMultiplier, const int degree, const int order, const double cosineHarmonicCoefficient, const double sineHarmonicCoefficient, const double legendrePolynomial, const double legendrePolynomialDerivative, const double legendrePolynomialSecondDerivative, Eigen::Matrix3d &amp;sphericalHessian)</argsstring>
        <name>computePotentialSphericalHessian</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>sphericalPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>preMultiplier</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cosineHarmonicCoefficient</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sineHarmonicCoefficient</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>legendrePolynomial</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>legendrePolynomialDerivative</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>legendrePolynomialSecondDerivative</declname>
        </param>
        <param>
          <type>Eigen::Matrix3d &amp;</type>
          <declname>sphericalHessian</declname>
        </param>
        <briefdescription>
<para>Function to compute the spherical Hessian of a single term of a spherical harmonic potential. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the spherical Hessian (i.e. matrix of second derivatives w.r.t. spherical components radius, latitude and longitude) of a single term of a spherical harmonic potential. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sphericalPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Spherical position (radius, ,latitude, longitude) at which potential partials are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference radius of spherical harmonic potential. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preMultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-multiplier of potential (gravitational parametere divided by reference radius in normal representation) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>degree</parametername>
</parameternamelist>
<parameterdescription>
<para>Degree of the harmonic for which the gradient is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>Order of the harmonic for which the gradient is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineHarmonicCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient which characterizes relative strengh of a harmonic term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineHarmonicCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient which characterizes relative strengh of a harmonic term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legendrePolynomial</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of associated Legendre polynomial with the same degree and order as the to be computed harmonic, and with the sine of the latitude coordinate as polynomial parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legendrePolynomialDerivative</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the derivative of parameter &apos;legendrePolynomial&apos; with respect to the sine of the latitude angle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>legendrePolynomialSecondDerivative</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of second derivative of parameter &apos;legendrePolynomial&apos; with respect to the sine of the latitude angle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalHessian</parametername>
</parameternamelist>
<parameterdescription>
<para>Hessian of potential term in spherical coordinates (returned by reference). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" line="73" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" bodystart="73" bodyend="95" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.h" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d03/sphericalHarmonicPartialFunctions_8h_1aaabd8f5ab357801829df9330a16763f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::computePotentialSphericalHessian</definition>
        <argsstring>(const Eigen::Vector3d &amp;sphericalPosition, const double preMultiplier, const int degree, const int order, const double cosineHarmonicCoefficient, const double sineHarmonicCoefficient, const std::shared_ptr&lt; basic_mathematics::SphericalHarmonicsCache &gt; sphericalHarmonicsCache, Eigen::Matrix3d &amp;sphericalHessian)</argsstring>
        <name>computePotentialSphericalHessian</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>sphericalPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>preMultiplier</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cosineHarmonicCoefficient</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sineHarmonicCoefficient</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/dcc/classtudat_1_1basic__mathematics_1_1SphericalHarmonicsCache" kindref="compound">basic_mathematics::SphericalHarmonicsCache</ref> &gt;</type>
          <declname>sphericalHarmonicsCache</declname>
        </param>
        <param>
          <type>Eigen::Matrix3d &amp;</type>
          <declname>sphericalHessian</declname>
        </param>
        <briefdescription>
<para>Function to compute the spherical Hessian of a single term of a spherical harmonic potential. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the spherical Hessian (i.e. matrix of second derivatives w.r.t. spherical components radius, latitude and longitude) of a single term of a spherical harmonic potential. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sphericalPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Spherical position (radius, ,latitude, longitude) at which potential partials are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preMultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-multiplier of potential (gravitational parametere divided by reference radius in normal representation) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>degree</parametername>
</parameternamelist>
<parameterdescription>
<para>Degree of the harmonic for which the gradient is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>Order of the harmonic for which the gradient is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineHarmonicCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient which characterizes relative strengh of a harmonic term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineHarmonicCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient which characterizes relative strengh of a harmonic term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalHarmonicsCache</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache object containing precomputed spherical harmonics terms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalHessian</parametername>
</parameternamelist>
<parameterdescription>
<para>Hessian of potential term in spherical coordinates (returned by reference). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" line="98" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" bodystart="98" bodyend="120" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d03/sphericalHarmonicPartialFunctions_8h_1ac0b3af03ca73ab7f4243ddd7f0c6d32c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::acceleration_partials::computeCumulativeSphericalHessian</definition>
        <argsstring>(const Eigen::Vector3d &amp;sphericalPosition, const double referenceRadius, const double gravitionalParameter, const Eigen::MatrixXd cosineHarmonicCoefficients, const Eigen::MatrixXd sineHarmonicCoefficients, const std::shared_ptr&lt; basic_mathematics::SphericalHarmonicsCache &gt; sphericalHarmonicsCache)</argsstring>
        <name>computeCumulativeSphericalHessian</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>sphericalPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitionalParameter</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>cosineHarmonicCoefficients</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>sineHarmonicCoefficients</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/dcc/classtudat_1_1basic__mathematics_1_1SphericalHarmonicsCache" kindref="compound">basic_mathematics::SphericalHarmonicsCache</ref> &gt;</type>
          <declname>sphericalHarmonicsCache</declname>
        </param>
        <briefdescription>
<para>Function to compute the spherical Hessian of a full spherical harmonic potential. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute the spherical Hessian (i.e. matrix of second derivatives w.r.t. spherical components radius, latitude and longitude) of a full spherical harmonic potential. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sphericalPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Spherical position (radius, ,latitude, longitude) at which potential partials are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference radius of spherical harmonic potential. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitionalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter used for spherical harmonic expansion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineHarmonicCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of coefficient which characterize the relative strengh of cosine harmonic terms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineHarmonicCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of coefficient which characterize the relative strengh of sine harmonic terms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalHarmonicsCache</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache object containing precomputed spherical harmonics terms. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hessian of potential in spherical coordinates (returned by reference). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" line="123" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" bodystart="123" bodyend="148" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.h" declline="140" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d03/sphericalHarmonicPartialFunctions_8h_1a8f380703d87ec1dd3b023bd30bbeefe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::acceleration_partials::computePartialDerivativeOfBodyFixedSphericalHarmonicAcceleration</definition>
        <argsstring>(const Eigen::Vector3d &amp;cartesianPosition, const Eigen::Vector3d &amp;sphericalPosition, const double referenceRadius, const double gravitionalParameter, const Eigen::MatrixXd cosineHarmonicCoefficients, const Eigen::MatrixXd sineHarmonicCoefficients, const std::shared_ptr&lt; basic_mathematics::SphericalHarmonicsCache &gt; sphericalHarmonicsCache, const Eigen::Vector3d &amp;sphericalPotentialGradient, const Eigen::Matrix3d &amp;sphericalToCartesianGradientMatrix)</argsstring>
        <name>computePartialDerivativeOfBodyFixedSphericalHarmonicAcceleration</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPosition</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>sphericalPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitionalParameter</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>cosineHarmonicCoefficients</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>sineHarmonicCoefficients</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/dcc/classtudat_1_1basic__mathematics_1_1SphericalHarmonicsCache" kindref="compound">basic_mathematics::SphericalHarmonicsCache</ref> &gt;</type>
          <declname>sphericalHarmonicsCache</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>sphericalPotentialGradient</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>sphericalToCartesianGradientMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate partial of spherical harmonic acceleration w.r.t. position of body undergoing acceleration (in the body-fixed frame)</para>
<para>Calculate partial of spherical harmonic acceleration w.r.t. position of body undergoing acceleration (in the body-fixed frame) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position at which potential partials are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Spherical position (radius, ,latitude, longitude) at which potential partials are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference radius of spherical harmonic potential. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitionalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter used for spherical harmonic expansion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineHarmonicCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Cosine spherical harmonic coefficients. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineHarmonicCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Sine spherical harmonic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalHarmonicsCache</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache object containing precomputed spherical harmonics terms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalPotentialGradient</parametername>
</parameternamelist>
<parameterdescription>
<para>Potential gradient in spherical coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalToCartesianGradientMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to convert (by premultiplication) a spherical gradient to a Cartesian gradient </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial of spherical harmonic acceleration w.r.t. position of body undergoinng acceleration (equals minus partial of spherical harmonic acceleration w.r.t. position of body exerting acceleration) with both acceleration and position in body-fixed frame.</para>
</simplesect>
Calculate partial of spherical harmonic acceleration w.r.t. position of body undergoing acceleration (in the body-fixed frame) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" line="152" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" bodystart="152" bodyend="177" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.h" declline="168" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d03/sphericalHarmonicPartialFunctions_8h_1a6984db93210cc70a30cdb8c672d5f8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d tudat::acceleration_partials::computePartialDerivativeOfBodyFixedSphericalHarmonicAcceleration</definition>
        <argsstring>(const Eigen::Vector3d &amp;cartesianPosition, const double referenceRadius, const double gravitionalParameter, const Eigen::MatrixXd cosineHarmonicCoefficients, const Eigen::MatrixXd sineHarmonicCoefficients, const std::shared_ptr&lt; basic_mathematics::SphericalHarmonicsCache &gt; sphericalHarmonicsCache)</argsstring>
        <name>computePartialDerivativeOfBodyFixedSphericalHarmonicAcceleration</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitionalParameter</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>cosineHarmonicCoefficients</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd</type>
          <declname>sineHarmonicCoefficients</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/dcc/classtudat_1_1basic__mathematics_1_1SphericalHarmonicsCache" kindref="compound">basic_mathematics::SphericalHarmonicsCache</ref> &gt;</type>
          <declname>sphericalHarmonicsCache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate partial of spherical harmonic acceleration w.r.t. position of body undergoing acceleration (in the body-fixed frame)</para>
<para>Calculate partial of spherical harmonic acceleration w.r.t. position of body undergoing acceleration (in the body-fixed frame) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position at which potential partials are to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference radius of spherical harmonic potential. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitionalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter used for spherical harmonic expansion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cosineHarmonicCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Cosine spherical harmonic coefficients. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sineHarmonicCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Sine spherical harmonic coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalHarmonicsCache</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache object containing precomputed spherical harmonics terms. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial of spherical harmonic acceleration w.r.t. position of body undergoinng acceleration (equals minus partial of spherical harmonic acceleration w.r.t. position of body exerting acceleration) with both acceleration and position in body-fixed frame.</para>
</simplesect>
Calculate partial of spherical harmonic acceleration w.r.t. position of body undergoing acceleration (in the body-fixed frame) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" line="181" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" bodystart="181" bodyend="209" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.h" declline="194" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dc/d03/sphericalHarmonicPartialFunctions_8h_1a7ae1d0f5f5c7b1fcaed58db1151ab572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::calculateSphericalHarmonicGravityWrtCCoefficients</definition>
        <argsstring>(const Eigen::Vector3d &amp;sphericalPosition, const double referenceRadius, const double gravitionalParameter, const std::shared_ptr&lt; basic_mathematics::SphericalHarmonicsCache &gt; sphericalHarmonicsCache, const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;blockIndices, const Eigen::Matrix3d &amp;sphericalToCartesianGradientMatrix, const Eigen::Matrix3d &amp;bodyFixedToIntegrationFrame, Eigen::MatrixXd &amp;partialsMatrix, const int maximumAccelerationDegree, const int maximumAccelerationOrder)</argsstring>
        <name>calculateSphericalHarmonicGravityWrtCCoefficients</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>sphericalPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitionalParameter</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/dcc/classtudat_1_1basic__mathematics_1_1SphericalHarmonicsCache" kindref="compound">basic_mathematics::SphericalHarmonicsCache</ref> &gt;</type>
          <declname>sphericalHarmonicsCache</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;</type>
          <declname>blockIndices</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>sphericalToCartesianGradientMatrix</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>bodyFixedToIntegrationFrame</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>partialsMatrix</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumAccelerationDegree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumAccelerationOrder</declname>
        </param>
        <briefdescription>
<para>Calculate partial of spherical harmonic acceleration w.r.t. a set of cosine coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate partial of spherical harmonic acceleration w.r.t. a set of cosine coefficients <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sphericalPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Spherical coordinate of body undergoing acceleration in frame fixed to body exerting acceleration, as radius, latitude, longitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference radius of spherical harmonic potential. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitionalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter used for spherical harmonic expansion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalHarmonicsCache</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache object containing precomputed spherical harmonics terms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>List of cosine coefficient indices wrt which the partials are to be taken (first and second are degree and order for each vector entry). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalToCartesianGradientMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to convert (by premultiplication) a spherical gradient to a Cartesian gradient </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyFixedToIntegrationFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to rotate from body-fixed to integration frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partialsMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Partials of spherical harmonic acceleration w.r.t. to requested set of cosine coefficients (returned by reference). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAccelerationDegree</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum degree of acceleration for which partial is to be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAccelerationOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum degree of acceleration for which partial is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" line="212" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" bodystart="212" bodyend="256" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.h" declline="220" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d03/sphericalHarmonicPartialFunctions_8h_1acaa624551eba3549915281fa44b564a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::acceleration_partials::calculateSphericalHarmonicGravityWrtSCoefficients</definition>
        <argsstring>(const Eigen::Vector3d &amp;sphericalPosition, const double referenceRadius, const double gravitionalParameter, const std::shared_ptr&lt; basic_mathematics::SphericalHarmonicsCache &gt; sphericalHarmonicsCache, const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;blockIndices, const Eigen::Matrix3d &amp;sphericalToCartesianGradientMatrix, const Eigen::Matrix3d &amp;bodyFixedToIntegrationFrame, Eigen::MatrixXd &amp;partialsMatrix, const int maximumAccelerationDegree, const int maximumAccelerationOrder)</argsstring>
        <name>calculateSphericalHarmonicGravityWrtSCoefficients</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>sphericalPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>referenceRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitionalParameter</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/dcc/classtudat_1_1basic__mathematics_1_1SphericalHarmonicsCache" kindref="compound">basic_mathematics::SphericalHarmonicsCache</ref> &gt;</type>
          <declname>sphericalHarmonicsCache</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;</type>
          <declname>blockIndices</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>sphericalToCartesianGradientMatrix</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>bodyFixedToIntegrationFrame</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>partialsMatrix</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumAccelerationDegree</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>maximumAccelerationOrder</declname>
        </param>
        <briefdescription>
<para>Calculate partial of spherical harmonic acceleration w.r.t. a set of sine coefficients. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate partial of spherical harmonic acceleration w.r.t. a set of sine coefficients <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sphericalPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Spherical coordinate of body undergoing acceleration in frame fixed to body exerting acceleration, as radius, latitude, longitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference radius of spherical harmonic potential. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitionalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter used for spherical harmonic expansion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalHarmonicsCache</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache object containing precomputed spherical harmonics terms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>List of cosine coefficient indices wrt which the partials are to be taken (first and second are degree and order for each vector entry). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sphericalToCartesianGradientMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to convert (by premultiplication) a spherical gradient to a Cartesian gradient </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyFixedToIntegrationFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to rotate from body-fixed to integration frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partialsMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Partials of spherical harmonic acceleration w.r.t. to requested set of sine coefficients (returned by reference). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAccelerationDegree</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum degree of acceleration for which partial is to be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumAccelerationOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum degree of acceleration for which partial is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" line="259" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.cpp" bodystart="259" bodyend="304" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/sphericalHarmonicPartialFunctions.h" declline="250" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="db/d0f/thirdBodyGravityPartial_8h_1a3f47f0158d3e66aa57c48e0011b8319a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DirectGravityPartial</type>
          </param>
        </templateparamlist>
        <type>basic_astrodynamics::AvailableAcceleration</type>
        <definition>basic_astrodynamics::AvailableAcceleration tudat::acceleration_partials::getAccelerationTypeOfThirdBodyGravity</definition>
        <argsstring>(const std::shared_ptr&lt; DirectGravityPartial &gt; directGravityPartial)</argsstring>
        <name>getAccelerationTypeOfThirdBodyGravity</name>
        <param>
          <type>const std::shared_ptr&lt; DirectGravityPartial &gt;</type>
          <declname>directGravityPartial</declname>
        </param>
        <briefdescription>
<para>Function to get the third body acceleration type from the direct acceleration partial object. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get the third body acceleration type from the direct acceleration partial object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directGravityPartial</parametername>
</parameternamelist>
<parameterdescription>
<para>Partial derivative of direct acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type of acceleration for third body acceleration for which direct acceleration partial is given by directGravityPartial (i.e. third_body_central_gravity if input is of type <ref refid="d3/d2b/classtudat_1_1acceleration__partials_1_1CentralGravitationPartial" kindref="compound">CentralGravitationPartial</ref>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/thirdBodyGravityPartial.h" line="38" column="44" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/thirdBodyGravityPartial.h" bodystart="38" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="db/d0f/thirdBodyGravityPartial_8h_1a0311e1a8a3a8a5bbd55db44865ac9f0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tudat::acceleration_partials::getCentralBodyNameFromThirdBodyAccelerationPartial</definition>
        <argsstring>(const std::shared_ptr&lt; AccelerationPartial &gt; accelerationPartial)</argsstring>
        <name>getCentralBodyNameFromThirdBodyAccelerationPartial</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial" kindref="compound">AccelerationPartial</ref> &gt;</type>
          <declname>accelerationPartial</declname>
        </param>
        <briefdescription>
<para>Function to retrieve name of central body of third-body acceleration partial. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve name of central body of third-body acceleration partial, from <ref refid="da/d55/classtudat_1_1acceleration__partials_1_1AccelerationPartial" kindref="compound">AccelerationPartial</ref> base class object input <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accelerationPartial</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration partial model from which central body name is to be retrieved (must be of derived class ThirdBodyGravityPartial&lt; T &gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name of central body of third-body acceleration partial </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/thirdBodyGravityPartial.h" line="519" column="20" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/thirdBodyGravityPartial.h" bodystart="519" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="d7/db8/secondDegreeGravitationalTorquePartial_8h_1ac65aa5e59dbf5ebc90ef98512d4ceea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 4 &gt;</type>
        <definition>Eigen::Matrix&lt; double, 3, 4 &gt; tudat::acceleration_partials::getPartialDerivativeOfSecondDegreeGravitationalTorqueWrtQuaternion</definition>
        <argsstring>(const double premultiplier, const Eigen::Matrix3d &amp;inertiaTensor, const Eigen::Vector3d &amp;bodyFixedRelativePosition, const Eigen::Vector3d &amp;intertialRelativePosition, const std::vector&lt; Eigen::Matrix3d &gt; derivativeOfRotationMatrixWrtQuaternions)</argsstring>
        <name>getPartialDerivativeOfSecondDegreeGravitationalTorqueWrtQuaternion</name>
        <param>
          <type>const double</type>
          <declname>premultiplier</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>inertiaTensor</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>bodyFixedRelativePosition</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>intertialRelativePosition</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Matrix3d &gt;</type>
          <declname>derivativeOfRotationMatrixWrtQuaternions</declname>
        </param>
        <briefdescription>
<para>Function that computes the partial of degree 2 torque w.r.t. the current quaternion elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the partial of degree 2 torque w.r.t. the current quaternion elements <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>premultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Model premultiplier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inertiaTensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Body inertial tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyFixedRelativePosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of body exerting torque, w.r.t. body undergoing torque, expressed in frame fixed to body undergoing torque </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intertialRelativePosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of body exerting torque, w.r.t. body undergoing torque, expressed in inertial frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>derivativeOfRotationMatrixWrtQuaternions</parametername>
</parameternamelist>
<parameterdescription>
<para>Current partial derivative of rotation matrix from body-fixed to base frame w.r.t. quaternion </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of degree 2 torque w.r.t. the current quaternion elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/rotational_dynamics_partials/secondDegreeGravitationalTorquePartial.cpp" line="22" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/rotational_dynamics_partials/secondDegreeGravitationalTorquePartial.cpp" bodystart="22" bodyend="39" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/secondDegreeGravitationalTorquePartial.h" declline="38" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d3/db4/sphericalHarmonicGravitationalTorquePartial_8h_1aa5a4456e08ba5a9df2d1ca63327ac150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 4 &gt;</type>
        <definition>Eigen::Matrix&lt; double, 3, 4 &gt; tudat::acceleration_partials::getPartialDerivativeOfSphericalHarmonicGravitationalTorqueWrtQuaternion</definition>
        <argsstring>(const Eigen::Matrix3d &amp;bodyFixedRelativePositionCrossProductMatrix, const Eigen::Matrix3d &amp;bodyFixedPotentialGradientPositionPartial, const Eigen::Matrix3d &amp;bodyFixedPotentialGradientCrossProductMatrix, const Eigen::Vector3d &amp;inertialRelativePosition, const std::vector&lt; Eigen::Matrix3d &gt; derivativeOfRotationMatrixWrtQuaternions)</argsstring>
        <name>getPartialDerivativeOfSphericalHarmonicGravitationalTorqueWrtQuaternion</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>bodyFixedRelativePositionCrossProductMatrix</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>bodyFixedPotentialGradientPositionPartial</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>bodyFixedPotentialGradientCrossProductMatrix</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>inertialRelativePosition</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Matrix3d &gt;</type>
          <declname>derivativeOfRotationMatrixWrtQuaternions</declname>
        </param>
        <briefdescription>
<para>Function to compute partial derivative of spherical harmonic torque w.r.t. quaternion elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to compute partial derivative of spherical harmonic torque w.r.t. quaternion elements <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bodyFixedRelativePositionCrossProductMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Cross-product matrix for body-fixed relative position of body undergoing torque (w.r.t. body exerting torque) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyFixedPotentialGradientPositionPartial</parametername>
</parameternamelist>
<parameterdescription>
<para>Gradient of spherical harmonic potential, in body-fixed coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bodyFixedPotentialGradientCrossProductMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Cross-product matrix of body-fixed potential gradient </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inertialRelativePosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Inertial relative position of body undergoing torque (w.r.t. body exerting torque) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>derivativeOfRotationMatrixWrtQuaternions</parametername>
</parameternamelist>
<parameterdescription>
<para>Current partial derivative of rotation matrix from body-fixed to base frame w.r.t. quaternion </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial derivative of spherical harmonic torque w.r.t. the current quaternion elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/rotational_dynamics_partials/sphericalHarmonicGravitationalTorquePartial.cpp" line="22" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/rotational_dynamics_partials/sphericalHarmonicGravitationalTorquePartial.cpp" bodystart="22" bodyend="37" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/rotational_dynamics_partials/sphericalHarmonicGravitationalTorquePartial.h" declline="38" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/acceleration_partials/accelerationPartial.h" line="31" column="1"/>
  </compounddef>
</doxygen>
