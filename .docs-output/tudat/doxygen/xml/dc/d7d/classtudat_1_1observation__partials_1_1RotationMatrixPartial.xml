<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>tudat::observation_partials::RotationMatrixPartial</compoundname>
    <derivedcompoundref refid="dd/dbc/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtConstantRotationRate" prot="public" virt="non-virtual">tudat::observation_partials::RotationMatrixPartialWrtConstantRotationRate</derivedcompoundref>
    <derivedcompoundref refid="d6/d44/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtCoreFactor" prot="public" virt="non-virtual">tudat::observation_partials::RotationMatrixPartialWrtCoreFactor</derivedcompoundref>
    <derivedcompoundref refid="d0/dc6/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtFreeCoreNutationRate" prot="public" virt="non-virtual">tudat::observation_partials::RotationMatrixPartialWrtFreeCoreNutationRate</derivedcompoundref>
    <derivedcompoundref refid="da/dfe/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPeriodicSpinVariations" prot="public" virt="non-virtual">tudat::observation_partials::RotationMatrixPartialWrtPeriodicSpinVariations</derivedcompoundref>
    <derivedcompoundref refid="d7/d40/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPolarMotionAmplitude" prot="public" virt="non-virtual">tudat::observation_partials::RotationMatrixPartialWrtPolarMotionAmplitude</derivedcompoundref>
    <derivedcompoundref refid="d2/dea/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPoleOrientation" prot="public" virt="non-virtual">tudat::observation_partials::RotationMatrixPartialWrtPoleOrientation</derivedcompoundref>
    <derivedcompoundref refid="d9/d3f/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtQuaternion" prot="public" virt="non-virtual">tudat::observation_partials::RotationMatrixPartialWrtQuaternion</derivedcompoundref>
    <derivedcompoundref refid="dc/d64/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtRotationalState" prot="public" virt="non-virtual">tudat::observation_partials::RotationMatrixPartialWrtRotationalState</derivedcompoundref>
    <derivedcompoundref refid="d5/d59/classtudat_1_1observation__partials_1_1SynchronousRotationMatrixPartialWrtTranslationalState" prot="public" virt="non-virtual">tudat::observation_partials::SynchronousRotationMatrixPartialWrtTranslationalState</derivedcompoundref>
    <includes refid="d4/dda/rotationMatrixPartial_8h" local="no">rotationMatrixPartial.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1ac90b8767b8be5c52ee6b919ab384f227" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/de4/classtudat_1_1ephemerides_1_1RotationalEphemeris" kindref="compound">ephemerides::RotationalEphemeris</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ephemerides::RotationalEphemeris &gt; tudat::observation_partials::RotationMatrixPartial::rotationModel_</definition>
        <argsstring></argsstring>
        <name>rotationModel_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" line="318" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a9d452105ad40e0190f103a9475e9db42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::observation_partials::RotationMatrixPartial::RotationMatrixPartial</definition>
        <argsstring>(const std::shared_ptr&lt; ephemerides::RotationalEphemeris &gt; rotationModel)</argsstring>
        <name>RotationMatrixPartial</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/de4/classtudat_1_1ephemerides_1_1RotationalEphemeris" kindref="compound">ephemerides::RotationalEphemeris</ref> &gt;</type>
          <declname>rotationModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" line="239" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" bodystart="239" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a74a1aafeff8ba51c4020aef18ec4d42b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual tudat::observation_partials::RotationMatrixPartial::~RotationMatrixPartial</definition>
        <argsstring>()</argsstring>
        <name>~RotationMatrixPartial</name>
        <briefdescription>
<para>Virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" line="243" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" bodystart="243" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a758db711ec18f3efbaa759488e45daf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; Eigen::Matrix3d &gt;</type>
        <definition>virtual std::vector&lt; Eigen::Matrix3d &gt; tudat::observation_partials::RotationMatrixPartial::calculatePartialOfRotationMatrixToBaseFrameWrParameter</definition>
        <argsstring>(const double time)=0</argsstring>
        <name>calculatePartialOfRotationMatrixToBaseFrameWrParameter</name>
        <reimplementedby refid="dd/dbc/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtConstantRotationRate_1af7cfb6213d9fd66a0db3851082ac57e9">calculatePartialOfRotationMatrixToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d2/dea/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPoleOrientation_1a71d9dc1d5b75f3ca59621a680d494d54">calculatePartialOfRotationMatrixToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="da/dfe/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPeriodicSpinVariations_1ae99f6d16402909e27a6bd82d8f857014">calculatePartialOfRotationMatrixToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d7/d40/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPolarMotionAmplitude_1a2c14e28200313ee7c8804f343bb67f76">calculatePartialOfRotationMatrixToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d6/d44/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtCoreFactor_1a1672e6625458823106efdda5aa971638">calculatePartialOfRotationMatrixToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d0/dc6/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtFreeCoreNutationRate_1a270851ffbfe70aff5c088ef7270cf47b">calculatePartialOfRotationMatrixToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d9/d3f/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtQuaternion_1abc6253b011179a9b28881431ee0c59ec">calculatePartialOfRotationMatrixToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="dc/d64/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtRotationalState_1aa78fff3274ad7afd6d0f4ce81c1f6c90">calculatePartialOfRotationMatrixToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d5/d59/classtudat_1_1observation__partials_1_1SynchronousRotationMatrixPartialWrtTranslationalState_1a2684c352946321f8e0f672a1fafab9ed">calculatePartialOfRotationMatrixToBaseFrameWrParameter</reimplementedby>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Function to calculate partials of rotation matrix wrt a parameter (for either double or VectorXd parameters). </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate partials of rotation matrix from the body-fixed to the inertial base frame wrt a parameter. For a double parameter, the size of the return vector is 1, for a VectorXd parameter, the size is equal to the size of the parameter and the entries of the vector returned from here correspond to partials of the same index in the parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which the partial(s) is(are) to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector of partials of rotation matrix from body-fixed to inertial frame wrt parameter(s) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" line="254" column="25"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a21af519e8a78ffd2978586549f3569c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; Eigen::Matrix3d &gt;</type>
        <definition>virtual std::vector&lt; Eigen::Matrix3d &gt; tudat::observation_partials::RotationMatrixPartial::calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</definition>
        <argsstring>(const double time)=0</argsstring>
        <name>calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</name>
        <reimplementedby refid="dd/dbc/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtConstantRotationRate_1a39fef0df8a611b437c64b20dbcda715c">calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d2/dea/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPoleOrientation_1a23a552c424979c94778e71eb9dc6b3c6">calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="da/dfe/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPeriodicSpinVariations_1aa1eafb4c8bee8135d18ceddcaf5578b7">calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d7/d40/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPolarMotionAmplitude_1ad4f89ff8f1d6fea2a7a2b142fac9e206">calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d6/d44/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtCoreFactor_1ae8cd99aee95903df6baf85aac67ac809">calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d0/dc6/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtFreeCoreNutationRate_1a53bb490f7227271865c3b3dc0069e237">calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d9/d3f/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtQuaternion_1a6ff59a77fec35df46c395da9cbe81d03">calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="dc/d64/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtRotationalState_1afd6782822a11194024aa42cf177cc2d5">calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</reimplementedby>
        <reimplementedby refid="d5/d59/classtudat_1_1observation__partials_1_1SynchronousRotationMatrixPartialWrtTranslationalState_1a265aec73b700b7974f106fe1bcd4b53f">calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</reimplementedby>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Function to calculate partials of rotation matrix derivative wrt a parameter (for double or VectorXd parameters). </para>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate partials of rotation matrix derivative from the body-fixed to the inertial base frame. For a double parameter, the size of the return vector is 1, for a VectorXd parameter, the size is equal to the size of the parameter and the entries of the vector returned from here correspond to partials of the same index in the parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which the partial(s) is(are) to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector of partials of rotation matrix from body-fixed to inertial frame wrt parameter(s) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" line="266" column="25"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1ac71e83a0bce8b3b19b687d050eabb1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt; double, 3, Eigen::Dynamic &gt; tudat::observation_partials::RotationMatrixPartial::calculatePartialOfInertialPositionWrtParameter</definition>
        <argsstring>(const double time, const Eigen::Vector3d vectorInLocalFrame)</argsstring>
        <name>calculatePartialOfInertialPositionWrtParameter</name>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>vectorInLocalFrame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate the partial of the position of a vector, which is given in a body-fixed frame, in the inertial frame wrt a parameter.</para>
<para>Function to calculate the partial of the position of a vector, which is given in a body-fixed frame, in the inertial frame wrt a parameter denoting a property of the rotation between a body-fixed and an inertial frame. The type of parameter is defined by the derived class and a a separate derived class is impleneted for each parameter. An example is the change in position of a ground station, as expressed in the inertial frame, wrt a rotational parameter. Each column of the return Matrix denotes a single entry of the parameter (so it is a Vector3d for a double parameter). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which the partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vectorInLocalFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector, expressed in the body-fixed frame, of which the partial in an inertial frame wrt parameter is to be determined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial of the value of the vector in an inertial frame wrt the parameter(s).</para>
</simplesect>
Function to calculate the partial of the position of a vector, which is given in a body-fixed frame, in the inertial frame wrt a parameter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" line="283" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="1071" bodyend="1084"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a3cda8d4ab37d7bab0a8d20a9dd67a298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt; double, 3, Eigen::Dynamic &gt; tudat::observation_partials::RotationMatrixPartial::calculatePartialOfInertialVelocityWrtParameter</definition>
        <argsstring>(const double time, const Eigen::Vector3d vectorInLocalFrame)</argsstring>
        <name>calculatePartialOfInertialVelocityWrtParameter</name>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d</type>
          <declname>vectorInLocalFrame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to calculate the partial of the velocity of a vector, which is given in a body-fixed frame, in the inertial frame wrt a parameter.</para>
<para>Function to calculate the partial of the velocity of a vector, which is given in a body-fixed frame, in the inertial frame wrt a parameter denoting a property of the rotation between a body-fixed and an inertial frame. The type of parameter is defined by the derived class and a a separate derived class is impleneted for each parameter. An example is the change in velocity of a ground station, as expressed in the inertial frame, wrt a rotational parameter. Each column of the return Matrix denotes a single entry of the parameter (so it is a Vector3d for a double parameter). NOTE: This function currently only works for points that are static in a local frame (e.g. 0 velocity in this local frame). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d0/d53/classtudat_1_1Time" kindref="compound">Time</ref> at which the partial is to be evaluated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vectorInLocalFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector, expressed in the body-fixed frame, of which the partial in an inertial frame wrt parameter is to be determined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Partial of the value of the vector in an inertial frame wrt the parameter(s).</para>
</simplesect>
Function to calculate the partial of the velocity of a vector, which is given in a body-fixed frame, in the inertial frame wrt a parameter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" line="303" column="19" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp" bodystart="1088" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a0e55c2d7ab65b053705dcfa3e37048b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string tudat::observation_partials::RotationMatrixPartial::getSecondaryIdentifier</definition>
        <argsstring>()</argsstring>
        <name>getSecondaryIdentifier</name>
        <briefdescription>
<para>Function to return the secondary identifier of the estimated parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to return the secondary identifier of the estimated parameter. This function returns an empty string by default, and can be overridden in the derived class if the associated parameter has a secondary identifier. <simplesect kind="return"><para>Secondary identifier of the estimated parameter </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" line="313" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" bodystart="313" bodyend="316"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for partial derivatives of rotation matrix from body fixed to inertial frame w.r.t. a parameter. </para>
    </briefdescription>
    <detaileddescription>
<para>Base class for partial derivatives of rotation matrix from body fixed to inertial frame w.r.t. a parameter. A derived class is implemented for each estimatable parameter which represents a property of a rotation matrix from a body-fixed frame (as defined by the isParameterRotationMatrixProperty function). Pointers to this class are used for both PositionPartials and the SphericalHarmonicsGravityPartial partial. In this manner, only a single partial object needs to be implemented for both the state and partial and the sh acceleration partial wrt a rotational parameter when such a parameter is added. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7">
        <label>tudat::observation_partials::RotationMatrixPartialWrtPoleOrientation</label>
        <link refid="d2/dea/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPoleOrientation"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>tudat::observation_partials::RotationMatrixPartialWrtPolarMotionAmplitude</label>
        <link refid="d7/d40/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPolarMotionAmplitude"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>tudat::observation_partials::RotationMatrixPartial</label>
        <link refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial"/>
      </node>
      <node id="9">
        <label>tudat::observation_partials::RotationMatrixPartialWrtRotationalState</label>
        <link refid="dc/d64/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtRotationalState"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>tudat::observation_partials::SynchronousRotationMatrixPartialWrtTranslationalState</label>
        <link refid="d5/d59/classtudat_1_1observation__partials_1_1SynchronousRotationMatrixPartialWrtTranslationalState"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>tudat::observation_partials::RotationMatrixPartialWrtQuaternion</label>
        <link refid="d9/d3f/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtQuaternion"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>tudat::observation_partials::RotationMatrixPartialWrtFreeCoreNutationRate</label>
        <link refid="d0/dc6/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtFreeCoreNutationRate"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tudat::observation_partials::RotationMatrixPartialWrtConstantRotationRate</label>
        <link refid="dd/dbc/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtConstantRotationRate"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>tudat::observation_partials::RotationMatrixPartialWrtCoreFactor</label>
        <link refid="d6/d44/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtCoreFactor"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>tudat::observation_partials::RotationMatrixPartialWrtPeriodicSpinVariations</label>
        <link refid="da/dfe/classtudat_1_1observation__partials_1_1RotationMatrixPartialWrtPeriodicSpinVariations"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" line="235" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h" bodystart="236" bodyend="320"/>
    <listofallmembers>
      <member refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1ac71e83a0bce8b3b19b687d050eabb1a9" prot="public" virt="non-virtual"><scope>tudat::observation_partials::RotationMatrixPartial</scope><name>calculatePartialOfInertialPositionWrtParameter</name></member>
      <member refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a3cda8d4ab37d7bab0a8d20a9dd67a298" prot="public" virt="non-virtual"><scope>tudat::observation_partials::RotationMatrixPartial</scope><name>calculatePartialOfInertialVelocityWrtParameter</name></member>
      <member refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a21af519e8a78ffd2978586549f3569c4" prot="public" virt="pure-virtual"><scope>tudat::observation_partials::RotationMatrixPartial</scope><name>calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</name></member>
      <member refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a758db711ec18f3efbaa759488e45daf1" prot="public" virt="pure-virtual"><scope>tudat::observation_partials::RotationMatrixPartial</scope><name>calculatePartialOfRotationMatrixToBaseFrameWrParameter</name></member>
      <member refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a0e55c2d7ab65b053705dcfa3e37048b5" prot="public" virt="virtual"><scope>tudat::observation_partials::RotationMatrixPartial</scope><name>getSecondaryIdentifier</name></member>
      <member refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a9d452105ad40e0190f103a9475e9db42" prot="public" virt="non-virtual"><scope>tudat::observation_partials::RotationMatrixPartial</scope><name>RotationMatrixPartial</name></member>
      <member refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1ac90b8767b8be5c52ee6b919ab384f227" prot="protected" virt="non-virtual"><scope>tudat::observation_partials::RotationMatrixPartial</scope><name>rotationModel_</name></member>
      <member refid="dc/d7d/classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a74a1aafeff8ba51c4020aef18ec4d42b" prot="public" virt="virtual"><scope>tudat::observation_partials::RotationMatrixPartial</scope><name>~RotationMatrixPartial</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
