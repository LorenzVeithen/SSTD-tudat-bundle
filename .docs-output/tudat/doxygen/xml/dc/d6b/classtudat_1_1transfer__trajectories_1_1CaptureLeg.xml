<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg" kind="class" language="C++" prot="public">
    <compoundname>tudat::transfer_trajectories::CaptureLeg</compoundname>
    <basecompoundref refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg" prot="public" virt="non-virtual">tudat::transfer_trajectories::MissionLeg</basecompoundref>
    <includes refid="d0/d16/captureLeg_8h" local="no">captureLeg.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a76b806b1ab9b26fa890bd69474765037" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double tudat::transfer_trajectories::CaptureLeg::captureBodyGravitationalParameter_</definition>
        <argsstring></argsstring>
        <name>captureBodyGravitationalParameter_</name>
        <briefdescription>
<para>The capture body gravitational parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>The gravitational parameter of the capture body in the leg. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="158" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a544f971f7aabb7981f8c3cb3939fa473" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; Eigen::Vector3d &gt;</type>
        <definition>std::shared_ptr&lt; Eigen::Vector3d &gt; tudat::transfer_trajectories::CaptureLeg::velocityBeforeDepartureBodyPtr_</definition>
        <argsstring></argsstring>
        <name>velocityBeforeDepartureBodyPtr_</name>
        <briefdescription>
<para>The velocity of the spacecraft before capture. </para>
        </briefdescription>
        <detaileddescription>
<para>The heliocentric velocity before the capture maneuver. This is passed using a pointer, because this parameter is dependent on the previous leg. The result of the previous leg is not necessarily known when this leg is initiated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="166" column="21" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a905e6a124fecddc3fada79f4d3ebcd0a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double tudat::transfer_trajectories::CaptureLeg::semiMajorAxis_</definition>
        <argsstring></argsstring>
        <name>semiMajorAxis_</name>
        <briefdescription>
<para>The capture orbit semi-major axis. </para>
        </briefdescription>
        <detaileddescription>
<para>The semi-major axis of the intended capture orbit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="172" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a5202174dea02aac3c8c694afc5e96aa4" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double tudat::transfer_trajectories::CaptureLeg::eccentricity_</definition>
        <argsstring></argsstring>
        <name>eccentricity_</name>
        <briefdescription>
<para>The capture orbit eccentricity. </para>
        </briefdescription>
        <detaileddescription>
<para>The eccentricity of the intended capture orbit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="178" column="12" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a5ee53443d1ca3140a2fcfdf7c36d7037" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool tudat::transfer_trajectories::CaptureLeg::includeArrivalDeltaV_</definition>
        <argsstring></argsstring>
        <name>includeArrivalDeltaV_</name>
        <briefdescription>
<para>Boolean denoting whether to include the Delta V of arrival. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="181" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1ad790a85616314c510b0d4cc0485f7f15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tudat::transfer_trajectories::CaptureLeg::CaptureLeg</definition>
        <argsstring>(const Eigen::Vector3d &amp;departureBodyPosition, const double timeOfFlight, const Eigen::Vector3d &amp;departureBodyVelocity, const double centralBodyGravitationalParameter, const double captureBodyGravitationalParameter, std::shared_ptr&lt; Eigen::Vector3d &gt; velocityBeforeDepartureBodyPtr, const double semiMajorAxis, const double eccentricity, const bool includeArrivalDeltaV=true)</argsstring>
        <name>CaptureLeg</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>departureBodyPosition</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeOfFlight</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>departureBodyVelocity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>captureBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Eigen::Vector3d &gt;</type>
          <declname>velocityBeforeDepartureBodyPtr</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>includeArrivalDeltaV</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructor with immediate definition of parameters.. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor, sets objects and functions from which relevant environment and state variables are retrieved. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>departureBodyPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the departure body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeOfFlight</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the leg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureBodyVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity of the departure body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the cebtral body (most cases the Sun). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>captureBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the capture body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocityBeforeDepartureBodyPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the velocity before arriving at the departure body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of the orbit after the capture is performed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity of the orbit after the capture is performed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>includeArrivalDeltaV</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean denoting whether to include the Delta V of arrival. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="57" column="5" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" bodystart="57" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1abd485ad0b4ea4b9364624fbbafa2336f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void tudat::transfer_trajectories::CaptureLeg::calculateLeg</definition>
        <argsstring>(Eigen::Vector3d &amp;velocityBeforeArrivalBody, double &amp;deltaV)</argsstring>
        <name>calculateLeg</name>
        <reimplements refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1a0bdf10878e59021546b758fdb0a9d24b">calculateLeg</reimplements>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>velocityBeforeArrivalBody</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>deltaV</declname>
        </param>
        <briefdescription>
<para>Calculate the leg. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the leg and update the Delta V and the velocity before the next body.</para>
<para>Performs all calculations required for this leg. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocityBeforeArrivalBody</parametername>
</parameternamelist>
<parameterdescription>
<para>the velocity of the spacecraft before it arrives at the target body. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deltaV</parametername>
</parameternamelist>
<parameterdescription>
<para>the delta V required to perform the capture manuever. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="85" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/trajectory_design/captureLeg.cpp" bodystart="12" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1ac72b5b39690c81c3b7f779445c2bd29d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void tudat::transfer_trajectories::CaptureLeg::intermediatePoints</definition>
        <argsstring>(const double maximumTimeStep, std::vector&lt; Eigen::Vector3d &gt; &amp;positionVector, std::vector&lt; double &gt; &amp;timeVector, const double startingTime=0.)</argsstring>
        <name>intermediatePoints</name>
        <reimplements refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1a7f1c4013cb7deb3fdef99a906cf92c58">intermediatePoints</reimplements>
        <param>
          <type>const double</type>
          <declname>maximumTimeStep</declname>
        </param>
        <param>
          <type>std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
          <declname>positionVector</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>timeVector</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>startingTime</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
<para>Calculate intermediate positions and their corresponding times. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates intermediate positions and their corresponding times in the leg, based on a maximum time between two points. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maximumTimeStep</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum time between two points along the trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positionVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of positions along the orbit, space according to the maximum time step. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>The times corresponding to the positions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startingTime</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial time from which the intermediate points are given. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="97" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/trajectory_design/captureLeg.cpp" bodystart="39" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a4ecadc0acbd5b953f7f8d945d0fcec2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void tudat::transfer_trajectories::CaptureLeg::maneuvers</definition>
        <argsstring>(std::vector&lt; Eigen::Vector3d &gt; &amp;positionVector, std::vector&lt; double &gt; &amp;timeVector, std::vector&lt; double &gt; &amp;deltaVVector, const double startingTime=0.)</argsstring>
        <name>maneuvers</name>
        <reimplements refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1aa7775ea89421bce689fb774837e4cf38">maneuvers</reimplements>
        <param>
          <type>std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
          <declname>positionVector</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>timeVector</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>deltaVVector</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>startingTime</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
<para>Return maneuvres along the leg. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the maneuver points, times and sizes along the trajectory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positionVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of the positions of the maneuvers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeVector</parametername>
</parameternamelist>
<parameterdescription>
<para>The times corresponding to the positions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deltaVVector</parametername>
</parameternamelist>
<parameterdescription>
<para>the delta V required for each maneuver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startingTime</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial time from which the maneuvers are given. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="110" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/trajectory_design/captureLeg.cpp" bodystart="65" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1af86fab882ebb91871137d50ce7992f47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void tudat::transfer_trajectories::CaptureLeg::updateEphemeris</definition>
        <argsstring>(const Eigen::Vector3d &amp;departureBodyPosition, const Eigen::Vector3d &amp;arrivalBodyPosition, const Eigen::Vector3d &amp;departureBodyVelocity)</argsstring>
        <name>updateEphemeris</name>
        <reimplements refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1a4add9b280b3c70bb22e7dff519400e97">updateEphemeris</reimplements>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>departureBodyPosition</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>arrivalBodyPosition</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>departureBodyVelocity</declname>
        </param>
        <briefdescription>
<para>Update the ephemeris. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the positions and the velocities to the newly specified values. Required for re-using the class, without re-initializing it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>departureBodyPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>sets the new departure body position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arrivalBodyPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>sets the new arrival body position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>departureBodyVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>sets the new departure body velocity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="123" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" bodystart="123" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a5301c692b52209bbe6185fbf426dbe99" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void tudat::transfer_trajectories::CaptureLeg::updateDefiningVariables</definition>
        <argsstring>(const Eigen::VectorXd &amp;variableVector)</argsstring>
        <name>updateDefiningVariables</name>
        <reimplements refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1aa507d6e5b1d3107e80d3af25c7c67cf4">updateDefiningVariables</reimplements>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>variableVector</declname>
        </param>
        <briefdescription>
<para>Update the defining variables. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the trajectory defining variables to the newly specified values. Required for re-using the class, without re-initializing it. For this leg: time of flight. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variableVector</parametername>
</parameternamelist>
<parameterdescription>
<para>the new variable vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="137" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/trajectory_design/captureLeg.cpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a5358d8d147ec933e60bd4d91a0ae5e34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::transfer_trajectories::CaptureLeg::getCaptureDeltaV</definition>
        <argsstring>(double &amp;captureDeltaV)</argsstring>
        <name>getCaptureDeltaV</name>
        <param>
          <type>double &amp;</type>
          <declname>captureDeltaV</declname>
        </param>
        <briefdescription>
<para>Function to retrieve the value of the capture Delta V. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to retrieve the value of the capture Delta V. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>captureDeltaV</parametername>
</parameternamelist>
<parameterdescription>
<para>Double denoting the value of the capture Delta V. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Double denoting the value of the capture Delta V (returned by reference ). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="145" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" bodystart="145" bodyend="148"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Capture leg class. </para>
    </briefdescription>
    <detaileddescription>
<para>A class that calculates capture maneuver of a spacecraft entering a specified orbit around a body. It also contains the same functionality as the space legs, meaning this class can also be used for a captured phase in a trajectory. For example to calculate a sample &amp; return mission in one go. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>tudat::transfer_trajectories::CaptureLeg</label>
        <link refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tudat::transfer_trajectories::MissionLeg</label>
        <link refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>tudat::transfer_trajectories::CaptureLeg</label>
        <link refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tudat::transfer_trajectories::MissionLeg</label>
        <link refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg"/>
      </node>
    </collaborationgraph>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" line="39" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/trajectory_design/captureLeg.h" bodystart="40" bodyend="183"/>
    <listofallmembers>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1abd485ad0b4ea4b9364624fbbafa2336f" prot="public" virt="virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>calculateLeg</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a76b806b1ab9b26fa890bd69474765037" prot="private" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>captureBodyGravitationalParameter_</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1ad790a85616314c510b0d4cc0485f7f15" prot="public" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>CaptureLeg</name></member>
      <member refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1ae977167cc1bc2b5eefe64729ef970d9b" prot="protected" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>centralBodyGravitationalParameter_</name></member>
      <member refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1ae0fa40d4efb56786cb052e0340663c67" prot="protected" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>deltaV_</name></member>
      <member refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1a1d0f74660ee3b15dd983bf56a9791fff" prot="protected" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>departureBodyPosition_</name></member>
      <member refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1a3c9e40fc0d71bd2e63c928c7fdc2dca8" prot="protected" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>departureBodyVelocity_</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a5202174dea02aac3c8c694afc5e96aa4" prot="private" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>eccentricity_</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a5358d8d147ec933e60bd4d91a0ae5e34" prot="public" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>getCaptureDeltaV</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a5ee53443d1ca3140a2fcfdf7c36d7037" prot="private" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>includeArrivalDeltaV_</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1ac72b5b39690c81c3b7f779445c2bd29d" prot="public" virt="virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>intermediatePoints</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a4ecadc0acbd5b953f7f8d945d0fcec2c" prot="public" virt="virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>maneuvers</name></member>
      <member refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1aceb225a36c934cdbf61e007b68a71dae" prot="public" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>MissionLeg</name></member>
      <member refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1a49fde6343f3591a7b80d83a72fbc7219" prot="public" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>returnDepartureVariables</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a905e6a124fecddc3fada79f4d3ebcd0a" prot="private" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>semiMajorAxis_</name></member>
      <member refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1a4eead2edc9032dfd4e708013ca95208a" prot="protected" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>timeOfFlight_</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a5301c692b52209bbe6185fbf426dbe99" prot="public" virt="virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>updateDefiningVariables</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1af86fab882ebb91871137d50ce7992f47" prot="public" virt="virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>updateEphemeris</name></member>
      <member refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1acb7414acd191de6b0414df6a4587bbc0" prot="protected" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>velocityAfterDeparture_</name></member>
      <member refid="dc/d6b/classtudat_1_1transfer__trajectories_1_1CaptureLeg_1a544f971f7aabb7981f8c3cb3939fa473" prot="private" virt="non-virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>velocityBeforeDepartureBodyPtr_</name></member>
      <member refid="d3/d79/classtudat_1_1transfer__trajectories_1_1MissionLeg_1a0d45afc18d82a6a7d801bc0c4d7c6a09" prot="public" virt="virtual"><scope>tudat::transfer_trajectories::CaptureLeg</scope><name>~MissionLeg</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
