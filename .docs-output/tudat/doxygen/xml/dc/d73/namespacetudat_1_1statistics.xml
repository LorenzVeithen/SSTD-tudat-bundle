<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dc/d73/namespacetudat_1_1statistics" kind="namespace" language="C++">
    <compoundname>tudat::statistics</compoundname>
    <innerclass refid="d4/d04/classtudat_1_1statistics_1_1BoostContinuousProbabilityDistribution" prot="public">tudat::statistics::BoostContinuousProbabilityDistribution</innerclass>
    <innerclass refid="d4/db6/classtudat_1_1statistics_1_1ContinuousProbabilityDistribution" prot="public">tudat::statistics::ContinuousProbabilityDistribution</innerclass>
    <innerclass refid="df/de6/classtudat_1_1statistics_1_1InvertibleContinuousProbabilityDistribution" prot="public">tudat::statistics::InvertibleContinuousProbabilityDistribution</innerclass>
    <innerclass refid="d2/da5/classtudat_1_1statistics_1_1EpanechnikovKernelDistribution" prot="public">tudat::statistics::EpanechnikovKernelDistribution</innerclass>
    <innerclass refid="de/dda/classtudat_1_1statistics_1_1KernelDensityDistribution" prot="public">tudat::statistics::KernelDensityDistribution</innerclass>
    <innerclass refid="d6/d11/classtudat_1_1statistics_1_1GaussianDistributionXd" prot="public">tudat::statistics::GaussianDistributionXd</innerclass>
    <innerclass refid="d7/da3/classtudat_1_1statistics_1_1GaussianCopulaDistributionXd" prot="public">tudat::statistics::GaussianCopulaDistributionXd</innerclass>
    <innerclass refid="d0/dc6/classtudat_1_1statistics_1_1RandomVariableGenerator" prot="public">tudat::statistics::RandomVariableGenerator</innerclass>
    <innerclass refid="d3/dc0/classtudat_1_1statistics_1_1ContinuousRandomVariableGenerator" prot="public">tudat::statistics::ContinuousRandomVariableGenerator</innerclass>
    <innerclass refid="d1/ddd/classtudat_1_1statistics_1_1SimpleLinearRegression" prot="public">tudat::statistics::SimpleLinearRegression</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dd/d38/continuousProbabilityDistributions_8h_1a556c846c147e242890e707d03e9c705d" prot="public" static="no" strong="no">
        <type></type>
        <name>ContinuousBoostStatisticalDistributions</name>
        <enumvalue id="dd/d38/continuousProbabilityDistributions_8h_1a556c846c147e242890e707d03e9c705daa7d8a9221899da0fe903470b482ba0d6" prot="public">
          <name>uniform_boost_distribution</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d38/continuousProbabilityDistributions_8h_1a556c846c147e242890e707d03e9c705daeae5007b0a0e527e20087b67a63e9c09" prot="public">
          <name>normal_boost_distribution</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d38/continuousProbabilityDistributions_8h_1a556c846c147e242890e707d03e9c705da5bfaa03746017e7f5b3539c1174a1dfd" prot="public">
          <name>exponential_boost_distribution</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d38/continuousProbabilityDistributions_8h_1a556c846c147e242890e707d03e9c705da4c05df6d23fe47d6246dcdaedb77c01c" prot="public">
          <name>gamma_boost_distribution</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d38/continuousProbabilityDistributions_8h_1a556c846c147e242890e707d03e9c705da33ffe5910e5dc93ae2e733b430e4d14c" prot="public">
          <name>lognormal_boost_distribution</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d38/continuousProbabilityDistributions_8h_1a556c846c147e242890e707d03e9c705da43e1e2d1afec60ac128bcd63a98f1394" prot="public">
          <name>beta_boost_distribution</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum defining implemented continuous boost distributions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/continuousProbabilityDistributions.h" line="26" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/continuousProbabilityDistributions.h" bodystart="27" bodyend="34"/>
      </memberdef>
      <memberdef kind="enum" id="d7/d3a/kernelDensityDistribution_8h_1aace52222805d40d5318837ed2d4380b4" prot="public" static="no" strong="no">
        <type></type>
        <name>KernelType</name>
        <enumvalue id="d7/d3a/kernelDensityDistribution_8h_1aace52222805d40d5318837ed2d4380b4affbb15b7b2473aaec4ae4c7e43d4eef9" prot="public">
          <name>gaussian_kernel</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d3a/kernelDensityDistribution_8h_1aace52222805d40d5318837ed2d4380b4a4ef9b7fc29ab5de8adba321c537f6923" prot="public">
          <name>epanechnikov_kernel</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Kernel type that is used in the Kernel Density Estimate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/kernelDensityDistribution.h" line="68" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/kernelDensityDistribution.h" bodystart="69" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d7/d3a/kernelDensityDistribution_8h_1af9b60b448a69e29e2b3736456700e074" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="de/dda/classtudat_1_1statistics_1_1KernelDensityDistribution" kindref="compound">KernelDensityDistribution</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; KernelDensityDistribution &gt; tudat::statistics::KernelDensityDistributionPointer</definition>
        <argsstring></argsstring>
        <name>KernelDensityDistributionPointer</name>
        <briefdescription>
<para>Pointer to Kernel Density distribution class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/kernelDensityDistribution.h" line="370" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/kernelDensityDistribution.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d0/de1/simpleLinearRegression_8h_1a3864b5c7500405423a3230a3c28ebef4" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d1/ddd/classtudat_1_1statistics_1_1SimpleLinearRegression" kindref="compound">SimpleLinearRegression</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; SimpleLinearRegression &gt; tudat::statistics::SimpleLinearRegressionPointer</definition>
        <argsstring></argsstring>
        <name>SimpleLinearRegressionPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d1/ddd/classtudat_1_1statistics_1_1SimpleLinearRegression" kindref="compound">SimpleLinearRegression</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/simpleLinearRegression.h" line="212" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/simpleLinearRegression.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d7/da6/basicStatistics_8h_1ae9cae3361e13555f1ce67d6289270bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::statistics::computeAverageOfVectorComponents</definition>
        <argsstring>(const Eigen::VectorXd &amp;vectorOfData)</argsstring>
        <name>computeAverageOfVectorComponents</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vectorOfData</declname>
        </param>
        <briefdescription>
<para>Compute average of the components of a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the average (arithmetic mean) of the components of a vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vectorOfData</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing data to be averaged. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Average of data in vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" line="26" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" bodystart="26" bodyend="29" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" declline="32" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d7/da6/basicStatistics_8h_1a99048088fd842557630e3ec55fc72ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::statistics::computeStandardDeviationOfVectorComponents</definition>
        <argsstring>(const Eigen::VectorXd &amp;vectorOfData)</argsstring>
        <name>computeStandardDeviationOfVectorComponents</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vectorOfData</declname>
        </param>
        <briefdescription>
<para>Compute standard deviation of the components of a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the standard deviation of the components of a vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vectorOfData</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing data to be averaged. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Standard deviation of data in vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" line="32" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" bodystart="32" bodyend="50" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" declline="40" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d7/da6/basicStatistics_8h_1ad53d7a829e9b3e52b3fed28da9c6c4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::statistics::computeSampleMean</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;sampleData)</argsstring>
        <name>computeSampleMean</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>sampleData</declname>
        </param>
        <briefdescription>
<para>Compute sample mean. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes sample mean based on the following unbiased estimator (Spiegel and Stephens, 2008): <formula id="176">\[ \mu_{s} = \frac{ \sum_{i=1}^{N} X_{i} } { N } \]</formula> where <formula id="177">$\mu_{s}$</formula> is the unbiased estimate of the sample mean, <formula id="178">$ N $</formula> is the number of samples, and <formula id="179">$ X $</formula> is the sample value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampleData</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sample mean. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" line="53" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" bodystart="53" bodyend="58" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" declline="54" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d7/da6/basicStatistics_8h_1afeb581111c7f6b5099edcba1f7b7012c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::statistics::computeSampleMean</definition>
        <argsstring>(const std::vector&lt; Eigen::VectorXd &gt; &amp;sampleData)</argsstring>
        <name>computeSampleMean</name>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>sampleData</declname>
        </param>
        <briefdescription>
<para>Compute sample mean for a sample of VectorXd. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes sample mean for a sample of VectorXd based on the following unbiased estimator (Spiegel and Stephens, 2008): <formula id="176">\[ \mu_{s} = \frac{ \sum_{i=1}^{N} X_{i} } { N } \]</formula> where <formula id="177">$\mu_{s}$</formula> is the unbiased estimate of the sample mean, <formula id="178">$ N $</formula> is the number of samples, and <formula id="179">$ X $</formula> is the sample value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampleData</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sample mean. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" line="61" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" bodystart="61" bodyend="67" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" declline="68" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d7/da6/basicStatistics_8h_1a8ec134a1c05369db0767981ac29220d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::statistics::computeSampleVariance</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;sampleData)</argsstring>
        <name>computeSampleVariance</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>sampleData</declname>
        </param>
        <briefdescription>
<para>Compute sample variance . </para>
        </briefdescription>
        <detaileddescription>
<para>Compute sample variance.</para>
<para>Computes sample variance based on the following unbiased estimator (Spiegel and Stephens, 2008): <formula id="180">\[ s^{2}_{s} = \frac{ 1 }{ N - 1 } * \sum_{i=1}^{N} X_{i} ( X_{i} - \bar{ X } )^{ 2 } ) \]</formula> where <formula id="181">$ s^{2}_{s} $</formula> is the unbiased estimate of the sample variance, <formula id="178">$ N $</formula> is the number of samples, <formula id="179">$ X $</formula> is the sample value, and <formula id="182">$ \bar{ X } $</formula> is the sample mean. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampleData</parametername>
</parameternamelist>
<parameterdescription>
<para>Map containing sample data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sample variance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" line="70" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" bodystart="70" bodyend="87" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" declline="84" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d7/da6/basicStatistics_8h_1a05f78ba81369009ae8c255634fd19dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::statistics::computeSampleMedian</definition>
        <argsstring>(std::vector&lt; double &gt; sampleData)</argsstring>
        <name>computeSampleMedian</name>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>sampleData</declname>
        </param>
        <briefdescription>
<para>Compute Sample median. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the median of a set of data samples. (Montgomery, D. C. &amp; Runger, G. C. Applied statistics and Probability for engineers Wiley, 2014)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampleData</parametername>
</parameternamelist>
<parameterdescription>
<para>Map containing sample data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sample variance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" line="90" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" bodystart="90" bodyend="115" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" declline="94" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d7/da6/basicStatistics_8h_1af8b5aa9e0273bf9cbec74e19553e566a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::statistics::computeSampleVariance</definition>
        <argsstring>(const std::vector&lt; Eigen::VectorXd &gt; &amp;sampleData)</argsstring>
        <name>computeSampleVariance</name>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>sampleData</declname>
        </param>
        <briefdescription>
<para>Compute sample variance for a sample of VectorXd. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes sample variance for a sample of VectorXd based on the following unbiased estimator (Spiegel and Stephens, 2008): <formula id="180">\[ s^{2}_{s} = \frac{ 1 }{ N - 1 } * \sum_{i=1}^{N} X_{i} ( X_{i} - \bar{ X } )^{ 2 } ) \]</formula> where <formula id="181">$ s^{2}_{s} $</formula> is the unbiased estimate of the sample variance, <formula id="178">$ N $</formula> is the number of samples, <formula id="179">$ X $</formula> is the sample value, and <formula id="182">$ \bar{ X } $</formula> is the sample mean. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampleData</parametername>
</parameternamelist>
<parameterdescription>
<para>Map containing sample data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sample variance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" line="118" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" bodystart="118" bodyend="135" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" declline="110" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d7/da6/basicStatistics_8h_1af25216cd9dc45bd4932cc2cb55ca15fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd tudat::statistics::computeMovingAverage</definition>
        <argsstring>(const Eigen::VectorXd &amp;sampleData, const unsigned int numberOfAveragingPoints=5)</argsstring>
        <name>computeMovingAverage</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>sampleData</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>numberOfAveragingPoints</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
<para>Compute moving average of vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute moving average of an Eigen vector.</para>
<para>Compute moving average of vector, where the moving average is computed by sliding a window of the specified length along the data. Note that since the window is centered at the current element, the window size (numberOfAveragingPoints) has to be odd. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampleData</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of sample data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfAveragingPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points (including the center point) to be used to compute the moving average. Needs to be an odd number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector containing the moving average of the data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" line="138" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" bodystart="138" bodyend="162" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" declline="122" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d7/da6/basicStatistics_8h_1a6761776b1abedaced5c93c988ced7991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::Vector3d &gt;</type>
        <definition>std::vector&lt; Eigen::Vector3d &gt; tudat::statistics::computeMovingAverage</definition>
        <argsstring>(const std::vector&lt; Eigen::Vector3d &gt; &amp;sampleData, const unsigned int numberOfAveragingPoints=5)</argsstring>
        <name>computeMovingAverage</name>
        <param>
          <type>const std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
          <declname>sampleData</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>numberOfAveragingPoints</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
<para>Compute moving average of a set of Eigen vectors in a STL vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute moving average of a set of Eigen vectors in a STL vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampleData</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of sample data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfAveragingPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points (including the center point) to be used to compute the moving average. Needs to be an odd number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector containing the moving average of the data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" line="165" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" bodystart="165" bodyend="188" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" declline="132" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/da6/basicStatistics_8h_1ae525a275ea13fd505c971478714960dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; double, Eigen::VectorXd &gt;</type>
        <definition>std::map&lt; double, Eigen::VectorXd &gt; tudat::statistics::computeMovingAverage</definition>
        <argsstring>(const std::map&lt; double, Eigen::VectorXd &gt; &amp;sampleData, const unsigned int numberOfAveragingPoints=5)</argsstring>
        <name>computeMovingAverage</name>
        <param>
          <type>const std::map&lt; double, Eigen::VectorXd &gt; &amp;</type>
          <declname>sampleData</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>numberOfAveragingPoints</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
<para>Compute moving average of a set of Eigen vectors in a map. </para>
        </briefdescription>
        <detaileddescription>
<para>Compute moving average of a set of Eigen vectors in a map. The moving average is computed by first combining the map values into a matrix, and then the moving average along each row is taken. Note that since the computeMovingAverage function is used, the window size (numberOfAveragingPoints) has to be odd. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampleData</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of sample data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfAveragingPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points (including the center point) to be used to compute the moving average. Needs to be an odd number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map of data after moving average is applied. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" line="191" column="10" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/basicStatistics.cpp" bodystart="191" bodyend="217" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" declline="145" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d5/dce/boostProbabilityDistributions_8h_1ad1774733ea97f5a42aed7ed9530a0ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/de6/classtudat_1_1statistics_1_1InvertibleContinuousProbabilityDistribution" kindref="compound">InvertibleContinuousProbabilityDistribution</ref>&lt; double &gt; &gt;</type>
        <definition>std::shared_ptr&lt; InvertibleContinuousProbabilityDistribution&lt; double &gt; &gt; tudat::statistics::createBoostRandomVariable</definition>
        <argsstring>(const ContinuousBoostStatisticalDistributions boostDistribution, const std::vector&lt; double &gt; &amp;parameters)</argsstring>
        <name>createBoostRandomVariable</name>
        <param>
          <type>const ContinuousBoostStatisticalDistributions</type>
          <declname>boostDistribution</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Function to create a random variable class of <ref refid="d4/d04/classtudat_1_1statistics_1_1BoostContinuousProbabilityDistribution" kindref="compound">BoostContinuousProbabilityDistribution</ref> type. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a random variable class of <ref refid="d4/d04/classtudat_1_1statistics_1_1BoostContinuousProbabilityDistribution" kindref="compound">BoostContinuousProbabilityDistribution</ref> type, which links random variable interfaces of this architecture to implementations from boost. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>boostDistribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of distribution of which a random variable class is to be generated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Free parameters of requested distribution (for instance mean and standard deviation for Gaussian distribution, see implementation for order of parameter, if relevant) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Random variable class of <ref refid="d4/d04/classtudat_1_1statistics_1_1BoostContinuousProbabilityDistribution" kindref="compound">BoostContinuousProbabilityDistribution</ref> type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/boostProbabilityDistributions.cpp" line="23" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/boostProbabilityDistributions.cpp" bodystart="23" bodyend="139" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/boostProbabilityDistributions.h" declline="105" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="dd/d38/continuousProbabilityDistributions_8h_1aa9c2099119f861b3c0489eaf364a9472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::statistics::evaluateGaussianPdf</definition>
        <argsstring>(const double independentVariable, const double mean, const double standardDeviation)</argsstring>
        <name>evaluateGaussianPdf</name>
        <param>
          <type>const double</type>
          <declname>independentVariable</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>standardDeviation</declname>
        </param>
        <briefdescription>
<para>Function to evaluate pdf of Gaussian distribution. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate probability distribution function of Gaussian distribution <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentVariable</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of indpendent variable at which pdf it is to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean of Gaussian distribution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>standardDeviation</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation of Gaussian distribution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of given pdf at requested independent variable value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/continuousProbabilityDistributions.cpp" line="23" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/continuousProbabilityDistributions.cpp" bodystart="23" bodyend="28" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/continuousProbabilityDistributions.h" declline="44" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dd/d38/continuousProbabilityDistributions_8h_1a80d08c64d2ccdd02e7b0cbfd27e24334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::statistics::calculateGaussianCdf</definition>
        <argsstring>(const double independentVariable, const double mean, const double standardDeviation)</argsstring>
        <name>calculateGaussianCdf</name>
        <param>
          <type>const double</type>
          <declname>independentVariable</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>standardDeviation</declname>
        </param>
        <briefdescription>
<para>Function to evaluate cdf of Gaussian distribution. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to evaluate cumulative distribution function of Gaussian distribution <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>independentVariable</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of indpendent variable at which cdf it is to be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean of Gaussian distribution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>standardDeviation</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation of Gaussian distribution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of given cdf at requested independent variable value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/continuousProbabilityDistributions.cpp" line="31" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/continuousProbabilityDistributions.cpp" bodystart="31" bodyend="34" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/continuousProbabilityDistributions.h" declline="54" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d7/d05/randomSampling_8h_1a20834156519a19044046a90b2a05dc46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt; Eigen::VectorXd &gt; tudat::statistics::generateRandomSampleFromGenerator</definition>
        <argsstring>(const int numberOfSamples, const std::vector&lt; std::shared_ptr&lt; RandomVariableGenerator&lt; double &gt; &gt; &gt; randomVariableGenerators)</argsstring>
        <name>generateRandomSampleFromGenerator</name>
        <param>
          <type>const int</type>
          <declname>numberOfSamples</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="d0/dc6/classtudat_1_1statistics_1_1RandomVariableGenerator" kindref="compound">RandomVariableGenerator</ref>&lt; double &gt; &gt; &gt;</type>
          <declname>randomVariableGenerators</declname>
        </param>
        <briefdescription>
<para>Generate sample of random vectors, with entries of each vector independently, but not identically, distributed. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate sample of random vectors, with entries of each vector independently, but not identically, distributed according to probability distributions provided as input. Size of each sample is define by size of vector randomVariableGenerators. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numberOfSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples that are to be generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>randomVariableGenerators</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability distributions for the entries of the random vectors (i.e. entry i of this vector is distribution of entry i of each sample). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of samples according to given distribution settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" line="28" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" bodystart="28" bodyend="46" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/randomSampling.h" declline="38" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/d05/randomSampling_8h_1af1d89f8784d6476abdedf87bdcea4b2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt; Eigen::VectorXd &gt; tudat::statistics::generateRandomSampleFromGenerator</definition>
        <argsstring>(const int numberOfSamples, const int numberOfDimensions, const std::shared_ptr&lt; RandomVariableGenerator&lt; double &gt; &gt; randomVariableGenerator)</argsstring>
        <name>generateRandomSampleFromGenerator</name>
        <param>
          <type>const int</type>
          <declname>numberOfSamples</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfDimensions</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d0/dc6/classtudat_1_1statistics_1_1RandomVariableGenerator" kindref="compound">RandomVariableGenerator</ref>&lt; double &gt; &gt;</type>
          <declname>randomVariableGenerator</declname>
        </param>
        <briefdescription>
<para>Generate sample of random vectors, with entries of each vector independently and identically distributed. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to generate sample of random vectors, with entries of each vector independently and identically, distributed according to probability distribution provided as input. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numberOfSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples that are to be generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfDimensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each sample. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>randomVariableGenerator</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability distribution used for each of the entries of the random vectors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of samples according to given distribution settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" line="49" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" bodystart="49" bodyend="60" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/randomSampling.h" declline="51" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/d05/randomSampling_8h_1a3203a84f98ae447ed0517d608106c59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt; Eigen::VectorXd &gt; tudat::statistics::generateUniformRandomSample</definition>
        <argsstring>(const int seed, const int numberOfSamples, const Eigen::VectorXd &amp;lowerBound, const Eigen::VectorXd &amp;upperBound)</argsstring>
        <name>generateUniformRandomSample</name>
        <param>
          <type>const int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfSamples</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>lowerBound</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>upperBound</declname>
        </param>
        <briefdescription>
<para>Generate sample of random vectors, with entries of each vector independently, but not identically, uniformly distributed. </para>
        </briefdescription>
        <detaileddescription>
<para>Generator random vector using pseudo random generator.</para>
<para>Function to generate sample of random vectors, with entries of each vector independently, but not identically, uniformly distributed. The size of each sample is defined by the size of the lowerBound and upperBound vectors (which must have identical size). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed of random number generator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples that are to be generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lowerBound</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of lower bounds for the distributions for the entries of the random vectors (i.e. entry i of this vector is lower bound for distribution of entry i of each sample). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upperBound</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of upper bounds for the distributions for the entries of the random vectors (i.e. entry i of this vector is upper bound for distribution of entry i of each sample). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of samples according to given distribution settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" line="65" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" bodystart="65" bodyend="87" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/randomSampling.h" declline="70" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/d05/randomSampling_8h_1a420d842744018877498b8019684ec81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt; Eigen::VectorXd &gt; tudat::statistics::generateUniformRandomSample</definition>
        <argsstring>(const int seed, const int numberOfSamples, const int numberOfDimensions, const double lowerBound=0.0, const double upperBound=1.0)</argsstring>
        <name>generateUniformRandomSample</name>
        <param>
          <type>const int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfSamples</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfDimensions</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lowerBound</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>upperBound</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Generate sample of random vectors, with entries of each vector independently and identically uniformly distributed. </para>
        </briefdescription>
        <detaileddescription>
<para>Generator random vector using pseudo random generator.</para>
<para>Function to generate sample of random vectors, with entries of each vector independently and identically uniformly distributed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed of random number generator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples that are to be generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfDimensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each sample. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lowerBound</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound for the distributions for the entries of the random vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upperBound</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound for the distributions for the entries of the random vectors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of samples according to given distribution settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" line="90" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" bodystart="90" bodyend="98" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/randomSampling.h" declline="85" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/d05/randomSampling_8h_1a9581c1128ae311c2ec654cdd6d39c4a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt; Eigen::VectorXd &gt; tudat::statistics::generateGaussianRandomSample</definition>
        <argsstring>(const int seed, const int numberOfSamples, const Eigen::VectorXd &amp;mean, const Eigen::VectorXd &amp;standardDeviation)</argsstring>
        <name>generateGaussianRandomSample</name>
        <param>
          <type>const int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfSamples</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>standardDeviation</declname>
        </param>
        <briefdescription>
<para>Generate sample of random vectors, with entries of each vector independently, but not identically, Gaussian distributed. </para>
        </briefdescription>
        <detaileddescription>
<para>Generator random vector using pseudo random generator with gaussian distribution (without correlation)</para>
<para>Function to generate sample of random vectors, with entries of each vector independently, but not identically, Gaussian distributed. The size of each sample is defined by the size of the lowerBound and upperBound vectors (which must have identical size). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed of random number generator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples that are to be generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of mean values for the distributions for the entries of the random vectors (i.e. entry i of this vector is mean for distribution of entry i of each sample). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>standardDeviation</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of standard deviations for the distributions for the entries of the random vectors (i.e. entry i of this vector is standard deviation for distribution of entry i of each sample). * </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of samples according to given distribution settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" line="103" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" bodystart="103" bodyend="125" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/randomSampling.h" declline="104" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d7/d05/randomSampling_8h_1acab4f25cabd73c34ab921bc8599eb98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt; Eigen::VectorXd &gt; tudat::statistics::generateGaussianRandomSample</definition>
        <argsstring>(const int seed, const int numberOfSamples, const int numberOfDimensions, const double mean=0.0, const double standardDeviation=1.0)</argsstring>
        <name>generateGaussianRandomSample</name>
        <param>
          <type>const int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfSamples</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfDimensions</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>mean</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>standardDeviation</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Generate sample of random vectors, with entries of each vector independently and identically Gaussian distributed. </para>
        </briefdescription>
        <detaileddescription>
<para>Generator random vector using pseudo random generator with gaussian distribution (without correlation)</para>
<para>Function to generate sample of random vectors, with entries of each vector independently and identically Gaussian distributed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed of random number generator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples that are to be generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfDimensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each samples </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value for the distributions for the entries of the random vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>standardDeviation</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation for the distributions for the entries of the random vectors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set of samples according to given distribution settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" line="129" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomSampling.cpp" bodystart="129" bodyend="137" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/randomSampling.h" declline="119" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d8/d91/randomVariableGenerator_8h_1a2eddc457f1aa6d595048047b8cf83cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; double() &gt;</type>
        <definition>std::function&lt; double() &gt; tudat::statistics::createBoostContinuousRandomVariableGeneratorFunction</definition>
        <argsstring>(const ContinuousBoostStatisticalDistributions boostDistribution, const std::vector&lt; double &gt; &amp;parameters, const double seed)</argsstring>
        <name>createBoostContinuousRandomVariableGeneratorFunction</name>
        <param>
          <type>const ContinuousBoostStatisticalDistributions</type>
          <declname>boostDistribution</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Function to create a random number generating function from a continuous univariate distribution implemented in boost. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a random number generating function from a continuous univariate distribution implemented in boost <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>boostDistribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of distribution of which a random variable class is to be generated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Free parameters of requested distribution (for instance mean and standard deviation for Gaussian distribution, see implementation for order of parameters, if relevant). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed of random number generator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Random number generator according to given distribution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomVariableGenerator.cpp" line="26" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomVariableGenerator.cpp" bodystart="26" bodyend="33" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/randomVariableGenerator.h" declline="120" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d8/d91/randomVariableGenerator_8h_1af4d5bf504d3fa99e1f26cca00b6abbe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d0/dc6/classtudat_1_1statistics_1_1RandomVariableGenerator" kindref="compound">RandomVariableGenerator</ref>&lt; double &gt; &gt;</type>
        <definition>std::shared_ptr&lt; RandomVariableGenerator&lt; double &gt; &gt; tudat::statistics::createBoostContinuousRandomVariableGenerator</definition>
        <argsstring>(const ContinuousBoostStatisticalDistributions boostDistribution, const std::vector&lt; double &gt; &amp;parameters, const double seed)</argsstring>
        <name>createBoostContinuousRandomVariableGenerator</name>
        <param>
          <type>const ContinuousBoostStatisticalDistributions</type>
          <declname>boostDistribution</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Function to create a random number generator from a continuous univariate distribution implemented in boost. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a random number generator from a continuous univariate distribution implemented in boost <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>boostDistribution</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of distribution of which a random variable class is to be generated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Free parameters of requested distribution (for instance mean and standard deviation for Gaussian distribution, see implementation for order of parameters, if relevant). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed of random number generator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Random number generator according to given distribution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomVariableGenerator.cpp" line="36" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/statistics/randomVariableGenerator.cpp" bodystart="36" bodyend="43" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/randomVariableGenerator.h" declline="136" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/statistics/basicStatistics.h" line="23" column="1"/>
  </compounddef>
</doxygen>
