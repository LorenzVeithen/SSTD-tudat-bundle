<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dc/d19/namespacetudat_1_1root__finders" kind="namespace" language="C++">
    <compoundname>tudat::root_finders</compoundname>
    <innerclass refid="d0/d15/classtudat_1_1root__finders_1_1Bisection" prot="public">tudat::root_finders::Bisection</innerclass>
    <innerclass refid="df/d7b/classtudat_1_1root__finders_1_1RootFinderSettings" prot="public">tudat::root_finders::RootFinderSettings</innerclass>
    <innerclass refid="de/d23/classtudat_1_1root__finders_1_1HalleyRootFinder" prot="public">tudat::root_finders::HalleyRootFinder</innerclass>
    <innerclass refid="d5/dfe/classtudat_1_1root__finders_1_1NewtonRaphson" prot="public">tudat::root_finders::NewtonRaphson</innerclass>
    <innerclass refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" prot="public">tudat::root_finders::RootFinder</innerclass>
    <innerclass refid="df/de9/classtudat_1_1root__finders_1_1SecantRootFinder" prot="public">tudat::root_finders::SecantRootFinder</innerclass>
    <innerclass refid="d2/df7/classtudat_1_1root__finders_1_1TerminationCondition" prot="public">tudat::root_finders::TerminationCondition</innerclass>
    <innerclass refid="d8/d55/classtudat_1_1root__finders_1_1MaximumIterationsTerminationCondition" prot="public">tudat::root_finders::MaximumIterationsTerminationCondition</innerclass>
    <innerclass refid="d3/d43/classtudat_1_1root__finders_1_1RootAbsoluteToleranceTerminationCondition" prot="public">tudat::root_finders::RootAbsoluteToleranceTerminationCondition</innerclass>
    <innerclass refid="d6/dd2/classtudat_1_1root__finders_1_1RootRelativeToleranceTerminationCondition" prot="public">tudat::root_finders::RootRelativeToleranceTerminationCondition</innerclass>
    <innerclass refid="d0/d29/classtudat_1_1root__finders_1_1RootFunctionTerminationCondition" prot="public">tudat::root_finders::RootFunctionTerminationCondition</innerclass>
    <innerclass refid="d8/dcb/classtudat_1_1root__finders_1_1CombinedTerminationCondition" prot="public">tudat::root_finders::CombinedTerminationCondition</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d3/d3c/createRootFinder_8h_1a10de2e9c24c721efcc9b6c3a9bf7047f" prot="public" static="no" strong="no">
        <type></type>
        <name>RootFinderType</name>
        <enumvalue id="d3/d3c/createRootFinder_8h_1a10de2e9c24c721efcc9b6c3a9bf7047fa69af8e1ad6196231e48735929a172f64" prot="public">
          <name>bisection_root_finder</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/createRootFinder_8h_1a10de2e9c24c721efcc9b6c3a9bf7047fad739c0acbf0e420e372154375be5bd19" prot="public">
          <name>halley_root_finder</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/createRootFinder_8h_1a10de2e9c24c721efcc9b6c3a9bf7047fa438094a9a0f8dc64ae933c6a7ed1cd0d" prot="public">
          <name>newton_raphson_root_finder</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d3c/createRootFinder_8h_1a10de2e9c24c721efcc9b6c3a9bf7047fab91ba0eeb32032f64c3077f6f0f30734" prot="public">
          <name>secant_root_finder</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum defininf types of root finder. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" line="29" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" bodystart="30" bodyend="35"/>
      </memberdef>
      <memberdef kind="enum" id="d1/daa/terminationConditions_8h_1a79e82df93e3e01b9c2151d65630e572e" prot="public" static="no" strong="no">
        <type></type>
        <name>MaximumIterationHandling</name>
        <enumvalue id="d1/daa/terminationConditions_8h_1a79e82df93e3e01b9c2151d65630e572ea2519bc1d03852413e8abc1d9bf5c5185" prot="public">
          <name>accept_result</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d1/daa/terminationConditions_8h_1a79e82df93e3e01b9c2151d65630e572ea0a41e610f6583c3df5f065d66933680b" prot="public">
          <name>accept_result_with_warning</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d1/daa/terminationConditions_8h_1a79e82df93e3e01b9c2151d65630e572ea7bc3f18bd4a71bd76b326d3dcf988549" prot="public">
          <name>throw_exception</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" line="30" column="1" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" bodystart="31" bodyend="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dc/dfb/rootFinder_8h_1a399bff7c07e903a825465f1e77ab5280" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" kindref="compound">RootFinder</ref>&lt; double &gt; &gt;</type>
        <definition>typedef std::shared_ptr&lt; RootFinder&lt; double &gt; &gt; tudat::root_finders::RootFinderPointer</definition>
        <argsstring></argsstring>
        <name>RootFinderPointer</name>
        <briefdescription>
<para>Typedef for a shared-pointer to a root-finder with double data type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/rootFinder.h" line="116" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/rootFinder.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d3/d3c/createRootFinder_8h_1a726cbc1710747f2935d2bf028b643a7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d7b/classtudat_1_1root__finders_1_1RootFinderSettings" kindref="compound">RootFinderSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RootFinderSettings &gt; tudat::root_finders::bisectionRootFinderSettings</definition>
        <argsstring>(const double relativeIndependentVariableTolerance=TUDAT_NAN, const double absoluteIndependentVariableTolerance=TUDAT_NAN, const double rootFunctionTolerance=TUDAT_NAN, const unsigned int maximumNumberOfIterations=1000, const MaximumIterationHandling maximumIterationHandling=throw_exception)</argsstring>
        <name>bisectionRootFinderSettings</name>
        <param>
          <type>const double</type>
          <declname>relativeIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>absoluteIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rootFunctionTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>maximumNumberOfIterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>const MaximumIterationHandling</type>
          <declname>maximumIterationHandling</declname>
          <defval>throw_exception</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" line="81" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/createRootFinder_8h_1a295ce12c4f0a8b36cf8669f7c6dab1b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d7b/classtudat_1_1root__finders_1_1RootFinderSettings" kindref="compound">RootFinderSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RootFinderSettings &gt; tudat::root_finders::newtonRaphsonRootFinderSettings</definition>
        <argsstring>(const double relativeIndependentVariableTolerance=TUDAT_NAN, const double absoluteIndependentVariableTolerance=TUDAT_NAN, const double rootFunctionTolerance=TUDAT_NAN, const unsigned int maximumNumberOfIterations=1000, const MaximumIterationHandling maximumIterationHandling=throw_exception)</argsstring>
        <name>newtonRaphsonRootFinderSettings</name>
        <param>
          <type>const double</type>
          <declname>relativeIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>absoluteIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rootFunctionTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>maximumNumberOfIterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>const MaximumIterationHandling</type>
          <declname>maximumIterationHandling</declname>
          <defval>throw_exception</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" line="93" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" bodystart="93" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/createRootFinder_8h_1a5b6f7273de1f811ffa5b9dc524538997" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d7b/classtudat_1_1root__finders_1_1RootFinderSettings" kindref="compound">RootFinderSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RootFinderSettings &gt; tudat::root_finders::halleyRootFinderSettings</definition>
        <argsstring>(const double relativeIndependentVariableTolerance=TUDAT_NAN, const double absoluteIndependentVariableTolerance=TUDAT_NAN, const double rootFunctionTolerance=TUDAT_NAN, const unsigned int maximumNumberOfIterations=1000, const MaximumIterationHandling maximumIterationHandling=throw_exception)</argsstring>
        <name>halleyRootFinderSettings</name>
        <param>
          <type>const double</type>
          <declname>relativeIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>absoluteIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rootFunctionTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>maximumNumberOfIterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>const MaximumIterationHandling</type>
          <declname>maximumIterationHandling</declname>
          <defval>throw_exception</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" line="105" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" bodystart="105" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/createRootFinder_8h_1a7252b2ef3fc8a43864a1f296e75e6b71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="df/d7b/classtudat_1_1root__finders_1_1RootFinderSettings" kindref="compound">RootFinderSettings</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RootFinderSettings &gt; tudat::root_finders::secantRootFinderSettings</definition>
        <argsstring>(const double relativeIndependentVariableTolerance=TUDAT_NAN, const double absoluteIndependentVariableTolerance=TUDAT_NAN, const double rootFunctionTolerance=TUDAT_NAN, const unsigned int maximumNumberOfIterations=1000, const MaximumIterationHandling maximumIterationHandling=throw_exception)</argsstring>
        <name>secantRootFinderSettings</name>
        <param>
          <type>const double</type>
          <declname>relativeIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>absoluteIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rootFunctionTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>maximumNumberOfIterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>const MaximumIterationHandling</type>
          <declname>maximumIterationHandling</declname>
          <defval>throw_exception</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" line="117" column="24" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" bodystart="117" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/createRootFinder_8h_1a0b3f21aa00b8fb084078dfdafe142ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tudat::root_finders::doesRootFinderRequireDerivatives</definition>
        <argsstring>(const std::shared_ptr&lt; RootFinderSettings &gt; rootFinderSettings)</argsstring>
        <name>doesRootFinderRequireDerivatives</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d7b/classtudat_1_1root__finders_1_1RootFinderSettings" kindref="compound">RootFinderSettings</ref> &gt;</type>
          <declname>rootFinderSettings</declname>
        </param>
        <briefdescription>
<para>Function to determine whether a root finder requires any analytical derivatives. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to determine whether a root finder requires any analytical derivatives, based on settings for root finder <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rootFinderSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings to be used to create a root finder </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if any analytical derivatives are required, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/root_finders/createRootFinder.cpp" line="20" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/math/root_finders/createRootFinder.cpp" bodystart="20" bodyend="41" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d3/d3c/createRootFinder_8h_1a45edd251f6cdf449becf70fa7a311e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classtudat_1_1root__finders_1_1RootFinder" kindref="compound">RootFinder</ref>&lt; DataType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; RootFinder&lt; DataType &gt; &gt; tudat::root_finders::createRootFinder</definition>
        <argsstring>(const std::shared_ptr&lt; RootFinderSettings &gt; rootFinderSettings, const DataType lowerBound=TUDAT_NAN, const DataType upperBound=TUDAT_NAN, const DataType previousGuess=TUDAT_NAN)</argsstring>
        <name>createRootFinder</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="df/d7b/classtudat_1_1root__finders_1_1RootFinderSettings" kindref="compound">RootFinderSettings</ref> &gt;</type>
          <declname>rootFinderSettings</declname>
        </param>
        <param>
          <type>const DataType</type>
          <declname>lowerBound</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const DataType</type>
          <declname>upperBound</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const DataType</type>
          <declname>previousGuess</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <briefdescription>
<para>Function to create a root finder. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to create a root finde <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rootFinderSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings to be used to create a root finder </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lowerBound</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of search space of independent variables (default NaN; not needed by all root finders). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upperBound</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of search space of independent variables (default NaN; not needed by all root finders). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>previousGuess</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess for root position (default NaN; not needed by all root finders). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" line="147" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/createRootFinder.h" bodystart="147" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="d1/daa/terminationConditions_8h_1a7b10fd43a877788295cc98800f5b886e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tudat::root_finders::checkMaximumIterationsExceeded</definition>
        <argsstring>(const unsigned int numberOfIterations, const unsigned int maximumNumberOfIterations, const MaximumIterationHandling maximumIterationHandling)</argsstring>
        <name>checkMaximumIterationsExceeded</name>
        <param>
          <type>const unsigned int</type>
          <declname>numberOfIterations</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>maximumNumberOfIterations</declname>
        </param>
        <param>
          <type>const MaximumIterationHandling</type>
          <declname>maximumIterationHandling</declname>
        </param>
        <briefdescription>
<para>Check if maximum number of iterations specified has been exceeded. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if maximum number of iterations specified has been exceeded. If the throwRunTimeException, a run-time exception will be triggered, otherwise, the function will return a false value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numberOfIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations that have been completed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumNumberOfIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of iterations specified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>throwRunTimeException</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag that indicates if run-time error should be triggered if maximum number of iterations is exceeded (default=true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag indicating if maximum number of iterations have been exceeded. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" line="49" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" bodystart="49" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="d1/daa/terminationConditions_8h_1a3d403f8a1124edb2ff198a25d8e22f3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tudat::root_finders::checkRootAbsoluteTolerance</definition>
        <argsstring>(const ScalarType currentRootGuess, const ScalarType previousRootGuess, const ScalarType absoluteTolerance)</argsstring>
        <name>checkRootAbsoluteTolerance</name>
        <param>
          <type>const ScalarType</type>
          <declname>currentRootGuess</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>previousRootGuess</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>absoluteTolerance</declname>
        </param>
        <briefdescription>
<para>Check if absolute tolerance for root value has been achieved. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if absolute tolerance has been achieved for successive root values, compared against the specified absolute tolerance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentRootGuess</parametername>
</parameternamelist>
<parameterdescription>
<para>Current value of root. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>previousRootGuess</parametername>
</parameternamelist>
<parameterdescription>
<para>Previous value of root. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>absoluteTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Absolute tolerance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag indicating if absolute tolerance has been achieved. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" line="89" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="d1/daa/terminationConditions_8h_1aa9cf155ff443a731024453f1960e5b01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tudat::root_finders::checkRootRelativeTolerance</definition>
        <argsstring>(const ScalarType currentRootGuess, const ScalarType previousRootGuess, const ScalarType relativeTolerance)</argsstring>
        <name>checkRootRelativeTolerance</name>
        <param>
          <type>const ScalarType</type>
          <declname>currentRootGuess</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>previousRootGuess</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>relativeTolerance</declname>
        </param>
        <briefdescription>
<para>Check if relative tolerance for root value has been achieved. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if relative tolerance has been achieved for successive root values, compared against the specified relative tolerance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentRootGuess</parametername>
</parameternamelist>
<parameterdescription>
<para>Current value of root. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>previousRootGuess</parametername>
</parameternamelist>
<parameterdescription>
<para>Previous value of root. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>relativeTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative tolerance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag indicating if relative tolerance has been achieved. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" line="106" column="13" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="d1/daa/terminationConditions_8h_1a23926526beed098fb8a99521edb84758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tudat::root_finders::checkRootFunctionValueCondition</definition>
        <argsstring>(const ScalarType currentRootFunctionValue, const ScalarType rootToleranceValue)</argsstring>
        <name>checkRootFunctionValueCondition</name>
        <param>
          <type>const ScalarType</type>
          <declname>currentRootFunctionValue</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>rootToleranceValue</declname>
        </param>
        <briefdescription>
<para>Check termination condition (required maximum absolute value of root function) </para>
        </briefdescription>
        <detaileddescription>
<para>Check termination condition (required maximum absolute value of root function) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentRootFunctionValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Current root function value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rootToleranceValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum allowed value fo root function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag indicating if termination condition has been reached. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" line="124" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="d1/daa/terminationConditions_8h_1a7c1b76a01c724a3599edcee97953000f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="d2/df7/classtudat_1_1root__finders_1_1TerminationCondition" kindref="compound">TerminationCondition</ref>&lt; DataType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; TerminationCondition&lt; DataType &gt; &gt; tudat::root_finders::createTerminationCondition</definition>
        <argsstring>(const DataType relativeIndependentVariableTolerance=TUDAT_NAN, const DataType absoluteIndependentVariableTolerance=TUDAT_NAN, const DataType rootFunctionTolerance=TUDAT_NAN, const unsigned int maximumNumberOfIterations=1000, const MaximumIterationHandling maximumIterationHandling=throw_exception)</argsstring>
        <name>createTerminationCondition</name>
        <param>
          <type>const DataType</type>
          <declname>relativeIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const DataType</type>
          <declname>absoluteIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const DataType</type>
          <declname>rootFunctionTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>maximumNumberOfIterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>const MaximumIterationHandling</type>
          <declname>maximumIterationHandling</declname>
          <defval>throw_exception</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" line="378" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" bodystart="378" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="d1/daa/terminationConditions_8h_1a87bfd84965b8e5588fcc6421ce436f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::function&lt; bool(DataType, DataType, DataType, DataType, unsigned int) &gt;</type>
        <definition>std::function&lt; bool( DataType, DataType, DataType, DataType, unsigned int ) &gt; tudat::root_finders::createTerminationConditionFunction</definition>
        <argsstring>(const DataType relativeIndependentVariableTolerance=TUDAT_NAN, const DataType absoluteIndependentVariableTolerance=TUDAT_NAN, const DataType rootFunctionTolerance=TUDAT_NAN, const unsigned int maximumNumberOfIterations=1000, const MaximumIterationHandling maximumIterationHandling=throw_exception)</argsstring>
        <name>createTerminationConditionFunction</name>
        <param>
          <type>const DataType</type>
          <declname>relativeIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const DataType</type>
          <declname>absoluteIndependentVariableTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const DataType</type>
          <declname>rootFunctionTolerance</declname>
          <defval>TUDAT_NAN</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>maximumNumberOfIterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>const MaximumIterationHandling</type>
          <declname>maximumIterationHandling</declname>
          <defval>throw_exception</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" line="425" column="15" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/terminationConditions.h" bodystart="425" bodyend="438"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/math/root_finders/bisection.h" line="38" column="1"/>
  </compounddef>
</doxygen>
