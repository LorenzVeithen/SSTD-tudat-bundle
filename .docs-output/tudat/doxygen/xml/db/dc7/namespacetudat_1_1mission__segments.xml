<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="db/dc7/namespacetudat_1_1mission__segments" kind="namespace" language="C++">
    <compoundname>tudat::mission_segments</compoundname>
    <innerclass refid="d7/d7b/classtudat_1_1mission__segments_1_1PericenterFindingFunctions" prot="public">tudat::mission_segments::PericenterFindingFunctions</innerclass>
    <innerclass refid="df/df3/classtudat_1_1mission__segments_1_1EccentricityFindingFunctions" prot="public">tudat::mission_segments::EccentricityFindingFunctions</innerclass>
    <innerclass refid="d3/d39/classtudat_1_1mission__segments_1_1ImprovedInversePolynomialWall" prot="public">tudat::mission_segments::ImprovedInversePolynomialWall</innerclass>
    <innerclass refid="dd/d48/classtudat_1_1mission__segments_1_1LambertFunctionsGooding" prot="public">tudat::mission_segments::LambertFunctionsGooding</innerclass>
    <innerclass refid="d0/d31/classtudat_1_1mission__segments_1_1LambertTargeter" prot="public">tudat::mission_segments::LambertTargeter</innerclass>
    <innerclass refid="db/da3/classtudat_1_1mission__segments_1_1LambertTargeterGooding" prot="public">tudat::mission_segments::LambertTargeterGooding</innerclass>
    <innerclass refid="d3/d7a/classtudat_1_1mission__segments_1_1LambertTargeterIzzo" prot="public">tudat::mission_segments::LambertTargeterIzzo</innerclass>
    <innerclass refid="d1/d9b/classtudat_1_1mission__segments_1_1MultiRevolutionLambertTargeterIzzo" prot="public">tudat::mission_segments::MultiRevolutionLambertTargeterIzzo</innerclass>
    <innerclass refid="de/de3/classtudat_1_1mission__segments_1_1OscillatingFunctionNovak" prot="public">tudat::mission_segments::OscillatingFunctionNovak</innerclass>
    <innerclass refid="d3/da1/classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo" prot="public">tudat::mission_segments::ZeroRevolutionLambertTargeterIzzo</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d1/d72/gravityAssist_8h_1a388899e8ec8915829ab77a0a13df9696" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d7/d7b/classtudat_1_1mission__segments_1_1PericenterFindingFunctions" kindref="compound">PericenterFindingFunctions</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; PericenterFindingFunctions &gt; tudat::mission_segments::PericenterFindingFunctionsPointer</definition>
        <argsstring></argsstring>
        <name>PericenterFindingFunctionsPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d7/d7b/classtudat_1_1mission__segments_1_1PericenterFindingFunctions" kindref="compound">PericenterFindingFunctions</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/gravityAssist.h" line="183" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/gravityAssist.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/d72/gravityAssist_8h_1aef87e2cd9bd497246f89327045aac1ff" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="df/df3/classtudat_1_1mission__segments_1_1EccentricityFindingFunctions" kindref="compound">EccentricityFindingFunctions</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; EccentricityFindingFunctions &gt; tudat::mission_segments::EccentricityFindingFunctionsPointer</definition>
        <argsstring></argsstring>
        <name>EccentricityFindingFunctionsPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="df/df3/classtudat_1_1mission__segments_1_1EccentricityFindingFunctions" kindref="compound">EccentricityFindingFunctions</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/gravityAssist.h" line="256" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/gravityAssist.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/d8d/improvedInversePolynomialWall_8h_1a9587c308dafefd944aaa7981bdf49ee7" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d3/d39/classtudat_1_1mission__segments_1_1ImprovedInversePolynomialWall" kindref="compound">ImprovedInversePolynomialWall</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; ImprovedInversePolynomialWall &gt; tudat::mission_segments::ImprovedInversePolynomialWallPointer</definition>
        <argsstring></argsstring>
        <name>ImprovedInversePolynomialWallPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d3/d39/classtudat_1_1mission__segments_1_1ImprovedInversePolynomialWall" kindref="compound">ImprovedInversePolynomialWall</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/improvedInversePolynomialWall.h" line="237" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/improvedInversePolynomialWall.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/dc1/lambertRoutines_8h_1ad30322c6c26f6fac51d01313f54af292" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="dd/d48/classtudat_1_1mission__segments_1_1LambertFunctionsGooding" kindref="compound">LambertFunctionsGooding</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; LambertFunctionsGooding &gt; tudat::mission_segments::LambertFunctionsGoodingPointer</definition>
        <argsstring></argsstring>
        <name>LambertFunctionsGoodingPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="dd/d48/classtudat_1_1mission__segments_1_1LambertFunctionsGooding" kindref="compound">LambertFunctionsGooding</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertRoutines.h" line="198" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertRoutines.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/da2/lambertTargeter_8h_1a25fe2fb7bdb47401ef7d8a54f978970e" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d0/d31/classtudat_1_1mission__segments_1_1LambertTargeter" kindref="compound">LambertTargeter</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; LambertTargeter &gt; tudat::mission_segments::LambertTargeterPointer</definition>
        <argsstring></argsstring>
        <name>LambertTargeterPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d0/d31/classtudat_1_1mission__segments_1_1LambertTargeter" kindref="compound">LambertTargeter</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertTargeter.h" line="173" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertTargeter.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/dd3/lambertTargeterGooding_8h_1af121a6b4af22c627c067e068179d213d" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="db/da3/classtudat_1_1mission__segments_1_1LambertTargeterGooding" kindref="compound">LambertTargeterGooding</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; LambertTargeterGooding &gt; tudat::mission_segments::LambertTargeterGoodingPointer</definition>
        <argsstring></argsstring>
        <name>LambertTargeterGoodingPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="db/da3/classtudat_1_1mission__segments_1_1LambertTargeterGooding" kindref="compound">LambertTargeterGooding</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertTargeterGooding.h" line="107" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertTargeterGooding.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/d38/lambertTargeterIzzo_8h_1ae478998c86db25f7bf3c2be4818b96db" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d3/d7a/classtudat_1_1mission__segments_1_1LambertTargeterIzzo" kindref="compound">LambertTargeterIzzo</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; LambertTargeterIzzo &gt; tudat::mission_segments::LambertTargeterIzzoPointer</definition>
        <argsstring></argsstring>
        <name>LambertTargeterIzzoPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to <ref refid="d3/d7a/classtudat_1_1mission__segments_1_1LambertTargeterIzzo" kindref="compound">LambertTargeterIzzo</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertTargeterIzzo.h" line="144" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertTargeterIzzo.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d3/d5e/oscillatingFunctionNovak_8h_1aad9aeb56408c9f875e1c65162ac2546b" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="de/de3/classtudat_1_1mission__segments_1_1OscillatingFunctionNovak" kindref="compound">OscillatingFunctionNovak</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; OscillatingFunctionNovak &gt; tudat::mission_segments::OscillatingFunctionNovakPointer</definition>
        <argsstring></argsstring>
        <name>OscillatingFunctionNovakPointer</name>
        <briefdescription>
<para>Typedef for shared-pointer to oscillatingFunctionNovak object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/oscillatingFunctionNovak.h" line="190" column="25" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/oscillatingFunctionNovak.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/dfa/escapeAndCapture_8h_1aab61b00df50aacf8ead01e505a979f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::mission_segments::computeEscapeOrCaptureDeltaV</definition>
        <argsstring>(const double gravitationalParameter, const double semiMajorAxis, const double eccentricity, const double excessVelocity)</argsstring>
        <name>computeEscapeOrCaptureDeltaV</name>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>semiMajorAxis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>excessVelocity</declname>
        </param>
        <briefdescription>
<para>Compute escape or capture deltaV budget. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the required deltaV to perform a certain escape or capture maneuver to/from the specified orbit from/to the specified excessVelocity. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the escape/capture body. [m^3 s^-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi major axis of the parking orbit. [m] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity of the parking orbit. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>excessVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Excess velocity after the escape or before the capture maneuver. [m s^-1] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deltaV The deltaV required for the escape or capture maneuver. [m s^-1] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/escapeAndCapture.cpp" line="25" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/escapeAndCapture.cpp" bodystart="25" bodyend="38" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/escapeAndCapture.h" declline="34" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d1/d72/gravityAssist_8h_1a802e146fff1ac7de1deb4958211599e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::mission_segments::gravityAssist</definition>
        <argsstring>(const double centralBodyGravitationalParameter, const Eigen::Vector3d &amp;centralBodyVelocity, const Eigen::Vector3d &amp;incomingVelocity, const Eigen::Vector3d &amp;outgoingVelocity, const double smallestPeriapsisDistance, const bool useEccentricityInsteadOfPericenter=true, const double speedTolerance=1.0e-6, root_finders::RootFinderPointer rootFinder=std::make_shared&lt; root_finders::NewtonRaphson&lt; &gt; &gt;(1.0e-12, 1000))</argsstring>
        <name>gravityAssist</name>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>centralBodyVelocity</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>incomingVelocity</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>outgoingVelocity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>smallestPeriapsisDistance</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useEccentricityInsteadOfPericenter</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>speedTolerance</declname>
          <defval>1.0e-6</defval>
        </param>
        <param>
          <type>root_finders::RootFinderPointer</type>
          <declname>rootFinder</declname>
          <defval>std::make_shared&lt; <ref refid="d5/dfe/classtudat_1_1root__finders_1_1NewtonRaphson" kindref="compound">root_finders::NewtonRaphson</ref>&lt; &gt; &gt;(1.0e-12, 1000)</defval>
        </param>
        <briefdescription>
<para>Calculate deltaV of a gravity assist. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the deltaV required to perform a certain gravity assist. This function essentially tries to patch the incoming and outgoing velocity using an unpowered gravity assist. If however the required bending angle cannot be obtained, the deltaV required to patch this is calculated. Likewise the deltaV required to patch the hyperbolic excess velocities is calculated. The sum of the two is the total deltaV required to perform the maneuver and is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the swing-by body.[m^3 s^-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Heliocentric velocity of the swing-by body. [m s^-1] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>incomingVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Heliocentric velocity of the spacecraft before the swing-by. [m s^-1] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outgoingVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Heliocentric velocity of the spacecraft after the swing-by. [m s^-1] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>smallestPeriapsisDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Closest allowable distance to the swing-by body. [m] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useEccentricityInsteadOfPericenter</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to indicate the iteration procedure for matching the bending angle. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speedTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance at which the velocity effect deltaV is deemed 0.0. [-] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rootFinder</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared-pointer to the rootfinder that is to be used. Default is Newton-Raphson using 1000 iterations as maximum and 1.0e-12 relative X-tolerance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deltaV The deltaV required for the gravity assist maneuver. [m s^-1] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/gravityAssist.cpp" line="62" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/gravityAssist.cpp" bodystart="62" bodyend="298" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/gravityAssist.h" declline="58" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d1/d72/gravityAssist_8h_1aa1a6c4be9dd867fa3bf7ff57d0d38ec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::mission_segments::gravityAssist</definition>
        <argsstring>(const double centralBodyGravitationalParameter, const Eigen::Vector3d &amp;centralBodyVelocity, const Eigen::Vector3d &amp;incomingVelocity, const double rotationAngle, const double pericenterRadius)</argsstring>
        <name>gravityAssist</name>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>centralBodyVelocity</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>incomingVelocity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rotationAngle</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>pericenterRadius</declname>
        </param>
        <briefdescription>
<para>Propagate an unpowered gravity assist. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the outgoing velocity of an unpowered gravity assist. The gravity assist is defined by a 3D rotation angle and the pericenter radius of the swing-by maneuver. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the swing-by body.[m^3 s^-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Heliocentric velocity of the swing-by body. [m s^-1] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>incomingVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Heliocentric velocity of the spacecraft before the swing-by. [m s^-1] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle defining the rotation due to the swing-by in the 3D plane. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pericenterRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pericenter radius of the swing-by maneuver. [m] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>outgoingVelocity Heliocentric velocity of the spacecraft after the swing-by. [m s^-1] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/gravityAssist.cpp" line="301" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/gravityAssist.cpp" bodystart="301" bodyend="330" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/gravityAssist.h" declline="79" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d1/d72/gravityAssist_8h_1a50903324620f7af67054ed0e63ad5c1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d tudat::mission_segments::gravityAssist</definition>
        <argsstring>(const double centralBodyGravitationalParameter, const Eigen::Vector3d &amp;centralBodyVelocity, const Eigen::Vector3d &amp;incomingVelocity, const double rotationAngle, const double pericenterRadius, const double deltaV)</argsstring>
        <name>gravityAssist</name>
        <param>
          <type>const double</type>
          <declname>centralBodyGravitationalParameter</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>centralBodyVelocity</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>incomingVelocity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rotationAngle</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>pericenterRadius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>deltaV</declname>
        </param>
        <briefdescription>
<para>Propagate a powered gravity assist. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the outgoing velocity of a powered gravity assist. The gravity assist is defined by a 3D rotation angle, the pericenter radius of the swing-by maneuver and the deltaV magnitude that is applied at the pericenter passage of the gravity assist. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>centralBodyGravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the swing-by body.[m^3 s^-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centralBodyVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Heliocentric velocity of the swing-by body. [m s^-1] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>incomingVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>Heliocentric velocity of the spacecraft before the swing-by. [m s^-1] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotationAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle defining the rotation due to the swing-by in the 3D plane. [rad] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pericenterRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pericenter radius of the swing-by maneuver. [m] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deltaV</parametername>
</parameternamelist>
<parameterdescription>
<para>DeltaV magnitude of the gravity assist that is applied at pericenter [m s^-1] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>outgoingVelocity Heliocentric velocity of the spacecraft after the swing-by. [m s^-1] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/gravityAssist.cpp" line="333" column="17" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/gravityAssist.cpp" bodystart="333" bodyend="384" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/gravityAssist.h" declline="98" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d5/dc1/lambertRoutines_8h_1a35fd47488388298663535dbef6343403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::mission_segments::solveLambertProblemIzzo</definition>
        <argsstring>(const Eigen::Vector3d &amp;cartesianPositionAtDeparture, const Eigen::Vector3d &amp;cartesianPositionAtArrival, const double timeOfFlight, const double gravitationalParameter, Eigen::Vector3d &amp;cartesianVelocityAtDeparture, Eigen::Vector3d &amp;cartesianVelocityAtArrival, const bool isRetrograde=false, const double convergenceTolerance=1e-9, const unsigned int maximumNumberOfIterations=50)</argsstring>
        <name>solveLambertProblemIzzo</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtDeparture</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtArrival</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeOfFlight</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>cartesianVelocityAtDeparture</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>cartesianVelocityAtArrival</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isRetrograde</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>convergenceTolerance</declname>
          <defval>1e-9</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>maximumNumberOfIterations</declname>
          <defval>50</defval>
        </param>
        <briefdescription>
<para>Solve Lambert Problem using Izzo&apos;s algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>Solves the Lambert Problem using Izzo&apos;s algorithm. This code is an implementation of the method developed by Dario Izzo from ESA/ACT and publicly available at: <ulink url="http://keptoolbox.sourceforge.net/">http://keptoolbox.sourceforge.net/</ulink> After verification and validation, it was proven that this algorithm is faster and more robust than the implemented Lancaster &amp; Blanchard and Gooding method. Notably, this method does not suffer from the near-pi singularity (pi-transfers are by nature singular). This method works in adimensional units, meaning that position, time-of-flight and gravitational parameter can be provided in any units, as long as they are coherent across all quantities. Results will be returned in the same units as the input variables. Note that while this implementation does not support multi-revolution transfers, the original algorithm (see link above) does. The root-finder (Secant Method) is currently hard-coded. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position at departure. [Input] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position at arrival. [Input] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeOfFlight</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-of-flight between departure and arrival. [Input] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the central body. [Input] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianVelocityAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity at departure. [Output] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianVelocityAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity at arrival. [Output] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isRetrograde</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to indicate direction of motion. [Input, Optional] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convergenceTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Convergence tolerance for the root-finding process. [Input, Optional] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumNumberOfIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of iterations of the root-finding process. [Input, Optional] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/lambertRoutines.cpp" line="45" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/lambertRoutines.cpp" bodystart="45" bodyend="298" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertRoutines.h" declline="60" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d5/dc1/lambertRoutines_8h_1ace2a3ad8843983db412042a153c38da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tudat::mission_segments::computeTimeOfFlightIzzo</definition>
        <argsstring>(const double xParameter, const double semiPerimeter, const double chord, const bool isLongway, const double semiMajorAxisOfTheMinimumEnergyEllipse)</argsstring>
        <name>computeTimeOfFlightIzzo</name>
        <param>
          <type>const double</type>
          <declname>xParameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>semiPerimeter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>chord</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isLongway</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>semiMajorAxisOfTheMinimumEnergyEllipse</declname>
        </param>
        <briefdescription>
<para>Compute time-of-flight using Lagrange&apos;s equation. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes the time-of-flight according to Lagrange&apos;s equation as a function of the x-parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>x parameter in Izzo&apos;s algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiPerimeter</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-perimeter: <formula id="75">$ s = \frac{ r_1 + r_2 + c }{ 2 } $</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chord</parametername>
</parameternamelist>
<parameterdescription>
<para>Chord: <formula id="76">$ c = \sqrt{ r_1^2 + r_2^2 - 2 * r_1 * r_2 \cos( \theta ) } $</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isLongway</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to indicate if the transfer is long-way ( <formula id="77">$ \theta &gt; \pi $</formula>) or short-way ( <formula id="78">$ \theta &lt; \pi $</formula>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semiMajorAxisOfTheMinimumEnergyEllipse</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis of the minimum energy ellipse: <formula id="79">$ a_m = s / 2 $</formula>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>timeOfFlight Computed time-of-flight. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/lambertRoutines.cpp" line="301" column="8" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/lambertRoutines.cpp" bodystart="301" bodyend="355" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertRoutines.h" declline="82" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d5/dc1/lambertRoutines_8h_1a8f7f84d0cea7f1c68c001b9b0af4633d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tudat::mission_segments::solveLambertProblemGooding</definition>
        <argsstring>(const Eigen::Vector3d &amp;cartesianPositionAtDeparture, const Eigen::Vector3d &amp;cartesianPositionAtArrival, const double timeOfFlight, const double gravitationalParameter, Eigen::Vector3d &amp;cartesianVelocityAtDeparture, Eigen::Vector3d &amp;cartesianVelocityAtArrival, root_finders::RootFinderPointer rootFinder=root_finders::RootFinderPointer())</argsstring>
        <name>solveLambertProblemGooding</name>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtDeparture</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>cartesianPositionAtArrival</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>timeOfFlight</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>gravitationalParameter</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>cartesianVelocityAtDeparture</declname>
        </param>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>cartesianVelocityAtArrival</declname>
        </param>
        <param>
          <type>root_finders::RootFinderPointer</type>
          <declname>rootFinder</declname>
          <defval>root_finders::RootFinderPointer()</defval>
        </param>
        <briefdescription>
<para>Solve Lambert Problem using Gooding&apos;s algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>Solves the Lambert Problem using Lancaster and Blanchard&apos;s algorithm with further improvements by Gooding. The number of revolutions from departure to arrival body is zero by definition in this routine. This can be made user-defined later on. The resulting trajectories are in anti-clockwise (prograde) direction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position at departure [m]. [Input] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianPositionAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian position at arrival [m]. [Input] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeOfFlight</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-of-flight between departure and arrival [s]. [Input] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gravitationalParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Gravitational parameter of the central body [m^3/s^2]. [Input] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianVelocityAtDeparture</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity at departure [m]. [Output] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cartesianVelocityAtArrival</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity at arrival [m]. [Output] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rootFinder</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared-pointer to the rootfinder that is to be used. Default is Newton-Raphson using 1000 iterations as maximum and 1.0e-12 relative X-tolerance. [Input, optional] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/lambertRoutines.cpp" line="358" column="6" bodyfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/src/astro/mission_segments/lambertRoutines.cpp" bodystart="358" bodyend="602" declfile="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/lambertRoutines.h" declline="102" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/.tudat-documented/include/tudat/astro/mission_segments/escapeAndCapture.h" line="21" column="1"/>
  </compounddef>
</doxygen>
