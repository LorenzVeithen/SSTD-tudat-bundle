{
    "type": "package",
    "path": "./tudat-multidoc/docstrings",
    "file": "__package__.yaml",
    "_implicit_name": "docstrings",
    "config": {
        "name": "tudatpy",
        "version": null
    },
    "summary": "TU Delft Astrodynamics Toolbox in Python, or tudatpy, is a library that\nprimarily exposes the powerful set of C++ libraries, Tudat. TudatPy\naims at accelerating the implementation of Tudat simulations, providing\nan interface between Tudat and popular machine learning frameworks and\nestablishing a platform to provide quality education in the field of\nastrodynamics.\n",
    "extended_summary": null,
    "routine_listings": null,
    "see_also": null,
    "notes": null,
    "references": null,
    "examples": null,
    "enums": null,
    "classes": null,
    "functions": null,
    "constants": null,
    "modules": [
        "astro",
        "interface",
        "numerical_simulation",
        "plotting",
        "util"
    ],
    "name": "tudatpy",
    "version": null,
    "astro": {
        "type": "package",
        "path": "./tudat-multidoc/docstrings/astro",
        "file": "__package__.yaml",
        "_implicit_name": "astro",
        "config": null,
        "summary": "Fundamental astrodynamics calculations.",
        "extended_summary": "Provides diverse low-level to support astrodynamics calculations.\nThis module can be used as standalone together with the math module.\nThe other modules make extensive use of the functionality exposed here.\n",
        "routine_listings": null,
        "see_also": null,
        "notes": null,
        "references": null,
        "examples": null,
        "enums": null,
        "classes": null,
        "functions": null,
        "constants": null,
        "modules": [
            "frame_conversion",
            "element_conversion"
        ],
        "name": "astro",
        "version": null,
        "frame_conversion": {
            "type": "module",
            "path": "./tudat-multidoc/docstrings/astro",
            "file": "frame_conversion.yaml",
            "_implicit_name": "frame_conversion",
            "config": null,
            "summary": "Conversions between different reference frames.\n",
            "extended_summary": "This module provide a variety of functions and classes to convert\nbetween different reference frames. Functionality to convert between\ndifferent state representations is provided in the\n:ref:`\\`\\`element_conversion\\`\\`` module.\n",
            "routine_listings": null,
            "see_also": null,
            "notes": "- All reference frames used should be assumed as right handed:\n  :math:`\\mathbf{X}\\times\\mathbf{Y}=\\mathbf{Z}`.\n\n- We distinguish between two different uses of the term 'inertial:\n\n  * An *inertial origin*: the frame has a non-accelerating origin. On solar\n    system scales, the solar system barycenter (SSB) is considered to be \n    the only inertial origin.\n  * An *inertial orientation*: the unit axes of the frame are non-rotating\n    with respect to the celestial background. This module is concerned \n    primarily with conversions between different orientations.\n\n- Examples of and inertial origin include J2000 (a.k.a EME2000), as\n  well as the SPICE-defined ECLIPJ2000 frame (see `this description <https://tudat-space.readthedocs.io/en/latest/_src_user_guide/environment_setup/use_of_reference_frames.html#predefined-orientations>`_\n  on our user guide). The use of the ICRF frame (difference from J2000\n  is <0.1 arcseconds) in Tudat is presently limited to the\n  :ref:`\\`\\`numerical_simulation\\`\\`` model, see\n  :func:`~tudatpy.numerical_simulation.environment_setup.rotation_model.gcrs_to_itrs`.\n\n.. raw:: html\n\n    <object\n    data=\"_static/J2000_.svg\"\n    type=\"image/svg+xml\"\n    class=\"center invertible\">\n    </object>\n",
            "references": ".. [1] Archinal, B.A., Acton, C.H., A\u2019Hearn, M.F. et al. Report of\n       the IAU Working Group on Cartographic Coordinates and\n       Rotational Elements: 2015. Celest Mech Dyn Astr 130, 22\n       (2018). https://doi.org/10.1007/s10569-017-9805-5\n",
            "examples": null,
            "enums": null,
            "classes": null,
            "functions": [
                {
                    "name": "inertial_to_rsw_rotation_matrix",
                    "short_summary": "Computes the rotation matrix from inertial to RSW frame.\n",
                    "deprecation_warning": null,
                    "extended_summary": "Function to compute the rotation matrix from inertial to RSW frame.\nThe RSW frame is defined  by the state of a body w.r.t. to some\ncentral body. The x-axis of the RSW frame points away from the\norigin, and the y-axis lies in the orbital plane, and is positive\nfor in the direction of the velocity vector (but is not colinear\nwith the velocity vector, except for circular orbits). The z-axis\nis perpendicular to the orbital plane, and completes the\nright-handed coordinate system.\n",
                    "parameters": [
                        {
                            "name": "inertial_cartesian_state",
                            "type": "numpy.ndarray",
                            "description": "Cartesian state, in an inertial frame, for which the rotation\nmatrix is to be calculated. Note that the RSW frame is defined\nw.r.t. some central body, and this Cartesian state must be\ndefined w.r.t. that central body (e.g. central body at the\norigin).\n"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "numpy.ndarray",
                        "description": "Rotation matrix from inertial to RSW frame."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "rsw_to_inertial_rotation_matrix",
                    "short_summary": "Computes the rotation matrix from RSW to inertial frame.\n",
                    "deprecation_warning": null,
                    "extended_summary": "Function to compute the rotation matrix from RSW to inertial. The\nRSW frame is defined  by the state of a body w.r.t. to some central\nbody. The x-axis of the RSW frame points away from the origin, and\nthe y-axis lies in the orbital plane, and is positive for in the\ndirection of the velocity vector (but is not colinear with the\nvelocity vector, except for circular orbits). The z-axis is\nperpendicular to the orbital plane, and completes the right-handed\ncoordinate system.\n",
                    "parameters": [
                        {
                            "name": "inertial_cartesian_state",
                            "type": "numpy.ndarray",
                            "description": "Cartesian state, in an inertial frame, for which the rotation\nmatrix is to be calculated. Note that the RSW frame is defined\nw.r.t. some central body, and this Cartesian state must be\ndefined w.r.t. that central body (e.g. central body at the\norigin).\n"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "numpy.ndarray",
                        "description": "Rotation matrix from RSW to inertial frame."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "inertial_to_tnw_rotation_matrix",
                    "short_summary": "Computes the rotation matrix from inertial to TNW frame.\n",
                    "deprecation_warning": null,
                    "extended_summary": "Function to compute the rotation matrix from inertial to TNW frame.\nThe TNW frame is defined by the state of a body w.r.t. to some\ncentral body. The x-axis of the TNW frame points along the velocity\nvector, and the y-axis lies in the orbital plane, and is positive\nin the direction away from the central body (or positive **towards**\nthe central body if the ``n_axis_points_away_from_central_body``\nvariable is set to false, see below). The z-axis is perpendicular\nto the orbital plane, and completes the right-handed coordinate\nsystem.\n",
                    "parameters": [
                        {
                            "name": "inertial_cartesian_state",
                            "type": "numpy.ndarray",
                            "description": "Cartesian state, in an inertial frame, for which the rotation\nmatrix is to be calculated. Note that the RSW frame is defined\nw.r.t. some central body, and this Cartesian state must be\ndefined w.r.t. that central body (e.g. central body at the\norigin).\n"
                        },
                        {
                            "name": "n_axis_points_away_from_central_body",
                            "type": "Boolean",
                            "description": "Boolean (default is ``True``) defining whether the N axis of the\nTNW frame points away from the central body (if ``True``) or\ntowards the central body (if ``False``).\n"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "numpy.ndarray",
                        "description": "Rotation matrix from inertial to TNW frame."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "tnw_to_inertial_rotation_matrix",
                    "short_summary": "Computes the rotation matrix from TNW to inertial frame.\n",
                    "deprecation_warning": null,
                    "extended_summary": "Function to compute the rotation matrix from TNW to inertial frame.\nThe TNW frame is defined by the state of a body w.r.t. to some\ncentral body. The x-axis of the TNW frame points along the velocity\nvector, and the y-axis lies in the orbital plane, and is positive\nin the direction away from the central body (or positive **towards**\nthe central body if the ``n_axis_points_away_from_central_body``\nvariable is set to false, see below). The z-axis is perpendicular\nto the orbital plane, and completes the right-handed coordinate\nsystem.\n",
                    "parameters": [
                        {
                            "name": "inertial_cartesian_state",
                            "type": "numpy.ndarray",
                            "description": "Cartesian state, in an inertial frame, for which the rotation\nmatrix is to be calculated. Note that the TNW frame is defined\nw.r.t. some central body, and this Cartesian state must be\ndefined w.r.t. that central body (e.g. central body at the\norigin).\n"
                        },
                        {
                            "name": "n_axis_points_away_from_central_body",
                            "type": "bool",
                            "description": "Boolean (default=``True``) defining whether the N axis of the\nTNW frame points away from the central body (if ``True``) or\ntowards the central body (if ``False``).\n"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "numpy.ndarray",
                        "description": "Rotation matrix from TNW to inertial frame"
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "inertial_to_body_fixed_rotation_matrix",
                    "short_summary": "Computes the rotation matrix from inertial to body-fixed frame.\n",
                    "deprecation_warning": null,
                    "extended_summary": "Function to compute the rotation matrix from inertial to body-fixed\nframe, using typical pole right ascension (:math:`\\alpha`), pole\ndeclination (:math:`\\delta`), and prime meridian longitude\n(:math:`W`) angles.\n",
                    "parameters": [
                        {
                            "name": "pole_declination",
                            "type": "float",
                            "description": "Declination of body pole in inertial frame (:math:`\\delta`).\n"
                        },
                        {
                            "name": "pole_right_ascension",
                            "type": "float",
                            "description": "Right ascension of body pole in inertial frame (:math:`\\alpha`).\n"
                        },
                        {
                            "name": "prime_meridian_longitude",
                            "type": "float",
                            "description": "Longitude of prime meridian w.r.t. intermediate frame\n(:math:`W`).\n"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "numpy.ndarray",
                        "description": "Rotation matrix from inertial to body-fixed frame"
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": "This definition of a body-fixed orientation is used by, for\ninstance, the IAU Working Group on Cartographic Coordinates and\nRotational Elements. Rotation is performed by a succesive z-x-z\nEuler angle rotation (see Archinal et al. [1]_).\n",
                    "references": null,
                    "examples": null
                },
                {
                    "name": "body_fixed_to_inertial_rotation_matrix",
                    "short_summary": "Computes the rotation matrix from body-fixed to inertial frame.\n",
                    "deprecation_warning": null,
                    "extended_summary": "Function to compute the rotation matrix from body-fixed to inertial\nframe, using typical pole right ascension (:math:`\\alpha`), pole\ndeclination (:math:`\\delta`), and prime meridian longitude\n(:math:`W`) angles.\n",
                    "parameters": [
                        {
                            "name": "pole_declination",
                            "type": "float",
                            "description": "Declination of body pole in inertial frame (:math:`\\delta`).\n"
                        },
                        {
                            "name": "pole_right_ascension",
                            "type": "float",
                            "description": "Right ascension of body pole in inertial frame (:math:`\\alpha`).\n"
                        },
                        {
                            "name": "prime_meridian_longitude",
                            "type": "float",
                            "description": "Longitude of prime meridian w.r.t. intermediate frame\n(:math:`W`).\n"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "numpy.ndarray",
                        "description": "Rotation matrix from body-fixed to inertial frame.\n"
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": "This definition of a body-fixed orientation is used by,\nfor instance, the IAU Working Group on Cartographic Coordinates\nand Rotational Elements. Rotation is performed by a succesive z-x-z\nEuler angle rotation (see Archinal et al. [1]_).\n",
                    "references": null,
                    "examples": null
                }
            ],
            "constants": null,
            "name": "frame_conversion",
            "version": null,
            "inertial_to_rsw_rotation_matrix": "\nComputes the rotation matrix from inertial to RSW frame.\n\n\nFunction to compute the rotation matrix from inertial to RSW frame.\nThe RSW frame is defined  by the state of a body w.r.t. to some\ncentral body. The x-axis of the RSW frame points away from the\norigin, and the y-axis lies in the orbital plane, and is positive\nfor in the direction of the velocity vector (but is not colinear\nwith the velocity vector, except for circular orbits). The z-axis\nis perpendicular to the orbital plane, and completes the\nright-handed coordinate system.\n\n\nParameters\n----------\ninertial_cartesian_state : numpy.ndarray\n    Cartesian state, in an inertial frame, for which the rotation\n    matrix is to be calculated. Note that the RSW frame is defined\n    w.r.t. some central body, and this Cartesian state must be\n    defined w.r.t. that central body (e.g. central body at the\n    origin).\n\nReturns\n-------\nnumpy.ndarray\n    Rotation matrix from inertial to RSW frame.\n\n\n\n\n\n",
            "rsw_to_inertial_rotation_matrix": "\nComputes the rotation matrix from RSW to inertial frame.\n\n\nFunction to compute the rotation matrix from RSW to inertial. The\nRSW frame is defined  by the state of a body w.r.t. to some central\nbody. The x-axis of the RSW frame points away from the origin, and\nthe y-axis lies in the orbital plane, and is positive for in the\ndirection of the velocity vector (but is not colinear with the\nvelocity vector, except for circular orbits). The z-axis is\nperpendicular to the orbital plane, and completes the right-handed\ncoordinate system.\n\n\nParameters\n----------\ninertial_cartesian_state : numpy.ndarray\n    Cartesian state, in an inertial frame, for which the rotation\n    matrix is to be calculated. Note that the RSW frame is defined\n    w.r.t. some central body, and this Cartesian state must be\n    defined w.r.t. that central body (e.g. central body at the\n    origin).\n\nReturns\n-------\nnumpy.ndarray\n    Rotation matrix from RSW to inertial frame.\n\n\n\n\n\n",
            "inertial_to_tnw_rotation_matrix": "\nComputes the rotation matrix from inertial to TNW frame.\n\n\nFunction to compute the rotation matrix from inertial to TNW frame.\nThe TNW frame is defined by the state of a body w.r.t. to some\ncentral body. The x-axis of the TNW frame points along the velocity\nvector, and the y-axis lies in the orbital plane, and is positive\nin the direction away from the central body (or positive **towards**\nthe central body if the ``n_axis_points_away_from_central_body``\nvariable is set to false, see below). The z-axis is perpendicular\nto the orbital plane, and completes the right-handed coordinate\nsystem.\n\n\nParameters\n----------\ninertial_cartesian_state : numpy.ndarray\n    Cartesian state, in an inertial frame, for which the rotation\n    matrix is to be calculated. Note that the RSW frame is defined\n    w.r.t. some central body, and this Cartesian state must be\n    defined w.r.t. that central body (e.g. central body at the\n    origin).\n\nn_axis_points_away_from_central_body : Boolean\n    Boolean (default is ``True``) defining whether the N axis of the\n    TNW frame points away from the central body (if ``True``) or\n    towards the central body (if ``False``).\n\nReturns\n-------\nnumpy.ndarray\n    Rotation matrix from inertial to TNW frame.\n\n\n\n\n\n",
            "tnw_to_inertial_rotation_matrix": "\nComputes the rotation matrix from TNW to inertial frame.\n\n\nFunction to compute the rotation matrix from TNW to inertial frame.\nThe TNW frame is defined by the state of a body w.r.t. to some\ncentral body. The x-axis of the TNW frame points along the velocity\nvector, and the y-axis lies in the orbital plane, and is positive\nin the direction away from the central body (or positive **towards**\nthe central body if the ``n_axis_points_away_from_central_body``\nvariable is set to false, see below). The z-axis is perpendicular\nto the orbital plane, and completes the right-handed coordinate\nsystem.\n\n\nParameters\n----------\ninertial_cartesian_state : numpy.ndarray\n    Cartesian state, in an inertial frame, for which the rotation\n    matrix is to be calculated. Note that the TNW frame is defined\n    w.r.t. some central body, and this Cartesian state must be\n    defined w.r.t. that central body (e.g. central body at the\n    origin).\n\nn_axis_points_away_from_central_body : bool\n    Boolean (default=``True``) defining whether the N axis of the\n    TNW frame points away from the central body (if ``True``) or\n    towards the central body (if ``False``).\n\nReturns\n-------\nnumpy.ndarray\n    Rotation matrix from TNW to inertial frame\n\n\n\n\n\n",
            "inertial_to_body_fixed_rotation_matrix": "\nComputes the rotation matrix from inertial to body-fixed frame.\n\n\nFunction to compute the rotation matrix from inertial to body-fixed\nframe, using typical pole right ascension (:math:`\\alpha`), pole\ndeclination (:math:`\\delta`), and prime meridian longitude\n(:math:`W`) angles.\n\n\nParameters\n----------\npole_declination : float\n    Declination of body pole in inertial frame (:math:`\\delta`).\n\npole_right_ascension : float\n    Right ascension of body pole in inertial frame (:math:`\\alpha`).\n\nprime_meridian_longitude : float\n    Longitude of prime meridian w.r.t. intermediate frame\n    (:math:`W`).\n\nReturns\n-------\nnumpy.ndarray\n    Rotation matrix from inertial to body-fixed frame\n\n\n\nNotes\n-----\nThis definition of a body-fixed orientation is used by, for\ninstance, the IAU Working Group on Cartographic Coordinates and\nRotational Elements. Rotation is performed by a succesive z-x-z\nEuler angle rotation (see Archinal et al. [1]_).\n\n\n\n",
            "body_fixed_to_inertial_rotation_matrix": "\nComputes the rotation matrix from body-fixed to inertial frame.\n\n\nFunction to compute the rotation matrix from body-fixed to inertial\nframe, using typical pole right ascension (:math:`\\alpha`), pole\ndeclination (:math:`\\delta`), and prime meridian longitude\n(:math:`W`) angles.\n\n\nParameters\n----------\npole_declination : float\n    Declination of body pole in inertial frame (:math:`\\delta`).\n\npole_right_ascension : float\n    Right ascension of body pole in inertial frame (:math:`\\alpha`).\n\nprime_meridian_longitude : float\n    Longitude of prime meridian w.r.t. intermediate frame\n    (:math:`W`).\n\nReturns\n-------\nnumpy.ndarray\n    Rotation matrix from body-fixed to inertial frame.\n\n\n\n\nNotes\n-----\nThis definition of a body-fixed orientation is used by,\nfor instance, the IAU Working Group on Cartographic Coordinates\nand Rotational Elements. Rotation is performed by a succesive z-x-z\nEuler angle rotation (see Archinal et al. [1]_).\n\n\n\n"
        },
        "element_conversion": {
            "type": "module",
            "path": "./tudat-multidoc/docstrings/astro",
            "file": "element_conversion.yaml",
            "_implicit_name": "element_conversion",
            "config": null,
            "summary": "Functions for converting between sets of orbital elements.",
            "extended_summary": "This module provide a variety of functions and classes to\nconvert between different representations of translational and\nrotational states (e.g. Cartesian \u2194 Keplerian).\n\n.. note:: Rotations between different reference frames are provided in\n          the :ref:`\\`\\`frame_conversion\\`\\`` module.\n",
            "routine_listings": null,
            "see_also": null,
            "notes": "\nIn general, unless specified otherwise, the Keplerian elements are\nordered as:\n\n+-------+--------------------------------------------------------------------------------------+\n| Index | Keplerian Element                                                                    |\n+-------+--------------------------------------------------------------------------------------+\n| ``0`` | Semi-major axis (except if eccentricity = ``1.0``, then represents semi-latus rectum |\n+-------+--------------------------------------------------------------------------------------+\n| ``1`` | Eccentricity                                                                         |\n+-------+--------------------------------------------------------------------------------------+\n| ``2`` | Inclination                                                                          |\n+-------+--------------------------------------------------------------------------------------+\n| ``3`` | Argument of periapsis                                                                |\n+-------+--------------------------------------------------------------------------------------+\n| ``4`` | Longitude of ascending node                                                          |\n+-------+--------------------------------------------------------------------------------------+\n| ``5`` | True anomaly                                                                         |\n+-------+--------------------------------------------------------------------------------------+\n",
            "references": null,
            "examples": null,
            "enums": null,
            "classes": null,
            "functions": [
                {
                    "name": "cartesian_to_keplerian",
                    "short_summary": "Convert Cartesian to Keplerian elements.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to convert from Cartesian elements to standard Keplerian\nelements.\n\n.. note:: See module level documentation for the standard ordering\n          convention of Keplerian elements used.\n",
                    "parameters": [
                        {
                            "name": "cartesian_elements",
                            "type": "numpy.ndarray",
                            "description": "Cartesian state that is to be converted to Keplerian elements"
                        },
                        {
                            "name": "gravitational_parameter",
                            "type": "float",
                            "description": "Gravitational parameter of central body used for conversion"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "numpy.ndarray",
                        "description": "Keplerian elements, as computed from Cartesian element input."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "keplerian_to_cartesian",
                    "short_summary": "Convert Keplerian elements to Cartesian.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to convert from standard Keplerian elements to Cartesian\nelements.\n\n.. note:: See module level documentation for the standard ordering\n          convention of Keplerian elements used.\n",
                    "parameters": [
                        {
                            "name": "keplerian_elements",
                            "type": "numpy.ndarray",
                            "description": "Keplerian state that is to be converted to Cartesian elements"
                        },
                        {
                            "name": "gravitational_parameter",
                            "type": "float",
                            "description": "Gravitational parameter of central body used for conversion"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "numpy.ndarray",
                        "description": "Keplerian elements, as computed from Cartesian element input."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "keplerian_to_cartesian_elementwise",
                    "short_summary": "Convert Keplerian elements to Cartesian, with elementwise input.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to convert from standard Keplerian elements to Cartesian\nelements, with elementwise input.\n\n.. note:: The final Keplerian element is always the true anomaly.\n",
                    "parameters": [
                        {
                            "name": "semi_major_axis",
                            "type": "float",
                            "description": "Semi-major axis (except if eccentricity = 1.0, then represents semi-latus rectum)"
                        },
                        {
                            "name": "eccentricity",
                            "type": "float",
                            "description": "Eccentricity"
                        },
                        {
                            "name": "inclination",
                            "type": "float",
                            "description": "Inclination"
                        },
                        {
                            "name": "argument_of_periapsis",
                            "type": "float",
                            "description": "Argument of periapsis"
                        },
                        {
                            "name": "longitude_of_ascending_node",
                            "type": "float",
                            "description": "Longitude of ascending node"
                        },
                        {
                            "name": "true_anomaly",
                            "type": "float",
                            "description": "True anomaly"
                        },
                        {
                            "name": "gravitational_parameter",
                            "type": "float",
                            "description": "Gravitational parameter of central body used for conversion"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "numpy.ndarray",
                        "description": "Keplerian elements, as computed from Cartesian element input."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                }
            ],
            "constants": null,
            "name": "element_conversion",
            "version": null,
            "cartesian_to_keplerian": "\nConvert Cartesian to Keplerian elements.\n\nFunction to convert from Cartesian elements to standard Keplerian\nelements.\n\n.. note:: See module level documentation for the standard ordering\n          convention of Keplerian elements used.\n\n\nParameters\n----------\ncartesian_elements : numpy.ndarray\n    Cartesian state that is to be converted to Keplerian elements\ngravitational_parameter : float\n    Gravitational parameter of central body used for conversion\nReturns\n-------\nnumpy.ndarray\n    Keplerian elements, as computed from Cartesian element input.\n\n\n\n\n\n",
            "keplerian_to_cartesian": "\nConvert Keplerian elements to Cartesian.\n\nFunction to convert from standard Keplerian elements to Cartesian\nelements.\n\n.. note:: See module level documentation for the standard ordering\n          convention of Keplerian elements used.\n\n\nParameters\n----------\nkeplerian_elements : numpy.ndarray\n    Keplerian state that is to be converted to Cartesian elements\ngravitational_parameter : float\n    Gravitational parameter of central body used for conversion\nReturns\n-------\nnumpy.ndarray\n    Keplerian elements, as computed from Cartesian element input.\n\n\n\n\n\n",
            "keplerian_to_cartesian_elementwise": "\nConvert Keplerian elements to Cartesian, with elementwise input.\n\nFunction to convert from standard Keplerian elements to Cartesian\nelements, with elementwise input.\n\n.. note:: The final Keplerian element is always the true anomaly.\n\n\nParameters\n----------\nsemi_major_axis : float\n    Semi-major axis (except if eccentricity = 1.0, then represents semi-latus rectum)\neccentricity : float\n    Eccentricity\ninclination : float\n    Inclination\nargument_of_periapsis : float\n    Argument of periapsis\nlongitude_of_ascending_node : float\n    Longitude of ascending node\ntrue_anomaly : float\n    True anomaly\ngravitational_parameter : float\n    Gravitational parameter of central body used for conversion\nReturns\n-------\nnumpy.ndarray\n    Keplerian elements, as computed from Cartesian element input.\n\n\n\n\n\n"
        }
    },
    "interface": {
        "type": "package",
        "path": "./tudat-multidoc/docstrings/interface",
        "file": "__package__.yaml",
        "_implicit_name": "interface",
        "config": null,
        "summary": null,
        "extended_summary": null,
        "routine_listings": null,
        "see_also": null,
        "notes": null,
        "references": null,
        "examples": null,
        "enums": null,
        "classes": null,
        "functions": null,
        "constants": null,
        "modules": [
            "spice"
        ],
        "name": "interface",
        "version": null,
        "spice": {
            "type": "module",
            "path": "./tudat-multidoc/docstrings/interface",
            "file": "spice.yaml",
            "_implicit_name": "spice",
            "config": null,
            "summary": null,
            "extended_summary": "This module provides an interface to NAIF's ``SPICE`` package.\n",
            "routine_listings": null,
            "see_also": null,
            "notes": null,
            "references": null,
            "examples": null,
            "enums": null,
            "classes": [
                {
                    "name": "SpiceEphemeris",
                    "short_summary": "Ephemeris derived class which retrieves the state of a body directly from the SPICE library.",
                    "deprecation_warning": null,
                    "extended_summary": "Ephemeris derived class which retrieves the state of a body directly from the SPICE library.\nThe body of which the ephemeris is to be retrieved, as well as the origin and orientation\nof the reference frame in which the states are returned, and any corrections that are\napplied, are defined once during object construction.\n",
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "__init__",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Constructor, sets the input variables for the calls to the spice function to retrieve state.",
                            "parameters": [
                                {
                                    "name": "target_body_name",
                                    "type": null,
                                    "description": "Name of body of which the ephemeris is to be calculated."
                                },
                                {
                                    "name": "observer_body_name",
                                    "type": null,
                                    "description": "Name of body relative to which the ephemeris is to be calculated."
                                },
                                {
                                    "name": "correct_for_stellar_aberration",
                                    "type": null,
                                    "description": "Boolean whether to correct for stellar Aberration in retrieved values of (observed state).\n"
                                },
                                {
                                    "name": "correct_for_light_time_aberration",
                                    "type": null,
                                    "description": "Boolean whether to correct for light time in retrieved values of (observed state).\n"
                                },
                                {
                                    "name": "converge_ligh_time_aberration",
                                    "type": null,
                                    "description": "Boolean whether to use single iteration or max. 3 iterations for calculating light time.\n"
                                },
                                {
                                    "name": "reference_frame_name",
                                    "type": null,
                                    "description": "Name of the reference frame in which the ephemeris is to be calculated.\n"
                                },
                                {
                                    "name": "reference_julian_day",
                                    "type": null,
                                    "description": "Reference julian day w.r.t. which ephemeris is evaluated.\n"
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "get_cartesian_state",
                            "short_summary": "Get Cartesian state from ephemeris.",
                            "deprecation_warning": null,
                            "extended_summary": " Returns Cartesian state from ephemeris at given Julian day.",
                            "parameters": [
                                {
                                    "name": "seconds_since_epoch",
                                    "type": "float",
                                    "description": "Seconds since epoch at which ephemeris is to be evaluated."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null
                }
            ],
            "functions": [
                {
                    "name": "convert_julian_date_to_ephemeris_time",
                    "short_summary": "Convert a Julian date to ephemeris time (equivalent to TDB in Spice).",
                    "deprecation_warning": null,
                    "extended_summary": "Function to convert a Julian date to ephemeris time, which is\nequivalent to barycentric dynamical time. A leap second kernel\nmust have been loaded to use this function.\n",
                    "parameters": [
                        {
                            "name": "julian_date",
                            "type": "int",
                            "description": "Julian date that is to be converted to ephemeris time."
                        }
                    ],
                    "returns": {
                        "name": "ephemeris_time",
                        "type": "float",
                        "description": "Julian date calculated from ephemeris time."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "convert_ephemeris_time_to_julian_date",
                    "short_summary": "Convert ephemeris time (equivalent to TDB) to a Julian date.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to convert ephemeris time, which is nearly equal to\nbarycentric dynamical time, to the Julian date. A leap second\nkernel must have been loaded to use this function.\n",
                    "parameters": [
                        {
                            "name": "ephemeris_time",
                            "type": "float",
                            "description": "Ephemeris time that is to be converted to Julian date."
                        }
                    ],
                    "returns": {
                        "name": "julian_date",
                        "type": "float",
                        "description": "Julian date calculated from ephemeris time."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "convert_date_string_to_ephemeris_time",
                    "short_summary": "Converts a date string to ephemeris time.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to convert a date string, for instance\n1988 June 13, 3:29:48 to ephemeris time, wrapper for `str2et_c`\nspice function.\n",
                    "parameters": [
                        {
                            "name": "date_string",
                            "type": "str",
                            "description": "String representing the date. See documentation of spice\nfunction `str2et_c` for details on supported formats.\n"
                        }
                    ],
                    "returns": {
                        "name": "ephemeris_time",
                        "type": "str",
                        "description": "Ephemeris time corresponding to given date_string."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_body_cartesian_state_at_epoch",
                    "short_summary": "Get Cartesian state of a body, as observed from another body.",
                    "deprecation_warning": null,
                    "extended_summary": "This function returns the state of a body, relative to another\nbody, in a frame specified by the user. Corrections for light-time\ncorrection and stellar aberration can be applied to obtain the\nstate of one of the bodies, as observed from the other. Wrapper\nfor `spkezr_c` spice function.\n",
                    "parameters": [
                        {
                            "name": "target_body_name",
                            "type": "str",
                            "description": "Name of the body of which the state is to be obtained. A kernel\nwith the ephemeris of this body must have been loaded. The\nstring must be a spice-recognized name or ID.\n"
                        },
                        {
                            "name": "observer_body_name",
                            "type": "str",
                            "description": "Name of the body relative to which the state is to be obtained.\nA kernel with the ephemeris of this body must have been loaded.\nThe string must be a spice-recognized name or ID.\n"
                        },
                        {
                            "name": "reference_frame_name",
                            "type": "str",
                            "description": "The spice-recognized name of the reference frame in which the\nstate is to be returned. Spice kernel(s) required to perform\nthe necessary conversion from the states of the target and\nobserver bodies to this frame need to have been loaded.\n"
                        },
                        {
                            "name": "aberration_corrections",
                            "type": "str",
                            "description": "Setting for correction for setting corrections. See Spice\ndocumentation for extended discussion.\nShort summary:\n\n- NONE: none\n- LT: light time corrected (one iteration for calculation)\n- CN: light time corrected (multiple iterations, max 3) for calculation\n- S: Stellar aberration corrected.\n- XLT and XCN: can be provided to make the ephemeris time input argument the transmission time, instead of reception time. Arguments can be combined (i.e.\"LT+S\" or \"XCN+S\").\n"
                        },
                        {
                            "name": "ephemeris_time",
                            "type": "float",
                            "description": "Observation time (or transmission time of observed light, see description\nof aberrationCorrections).\n"
                        }
                    ],
                    "returns": {
                        "name": "cartesian_state_vector",
                        "type": "np.ndarray[6,]",
                        "description": "Cartesian state vector (x,y,z, position+velocity)."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_body_cartesian_position_at_epoch",
                    "short_summary": "Get Cartesian position of a body, as observed from another body.",
                    "deprecation_warning": null,
                    "extended_summary": "This function returns the position of a body, relative to another\nbody, in a frame specified by the user. Corrections for light-time\ncorrection and stellar aberration can be applied to obtain the\nstate of one of the bodies, as observed from the other. Wrapper\nfor `spkpos_c` spice function.\n",
                    "parameters": [
                        {
                            "name": "target_body_name",
                            "type": "str",
                            "description": "Name of the body of which the state is to be obtained. A kernel\nwith the ephemeris of this body must have been loaded. The\nstring must be a spice-recognized name or ID.\n"
                        },
                        {
                            "name": "observer_body_name",
                            "type": "str",
                            "description": "Name of the body relative to which the state is to be obtained.\nA kernel with the ephemeris of this body must have been loaded.\nThe string must be a spice-recognized name or ID.\n"
                        },
                        {
                            "name": "reference_frame_name",
                            "type": "str",
                            "description": "The spice-recognized name of the reference frame in which the\nstate is to be returned. Spice kernel(s) required to perform\nthe necessary conversion from the states of the target and\nobserver bodies to this frame need to have been loaded.\n"
                        },
                        {
                            "name": "aberration_corrections",
                            "type": "str",
                            "description": "Setting for correction for setting corrections. See Spice\ndocumentation for extended discussion.\nShort summary:\n\n- NONE: none\n- LT: light time corrected (one iteration for calculation)\n- CN: light time corrected (multiple iterations, max 3) for calculation,\n- S: Stellar aberration corrected.\n- XLT and XCN: can be provided to make the ephemeris time input argument the transmission time, instead of reception time. Arguments can be combined (i.e.\"LT+S\" or \"XCN+S\").\n"
                        },
                        {
                            "name": "ephemeris_time",
                            "type": "float",
                            "description": "Observation time (or transmission time of observed light, see description\nof aberrationCorrections).\n"
                        }
                    ],
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_cartesian_state_from_tle_at_epoch",
                    "short_summary": "Get Cartesian state of a satellite from its two-line element set at a specified epoch.",
                    "deprecation_warning": null,
                    "extended_summary": "This function retrieves the state of a satellite at a certain epoch\nby propagating the SGP or SDP models (near-Earth resp. deep space)\nwith the given two-line elements (TLE). This function serves as a\nwrapper for the `ev2lin_` function in CSpice.\n",
                    "parameters": [
                        {
                            "name": "epoch",
                            "type": "float",
                            "description": "Time in seconds since J2000 at which the state is to be retrieved."
                        },
                        {
                            "name": "tle",
                            "type": ":class:`~tudatpy.kernel.astro.ephemerides.Tle`",
                            "description": "Shared pointer to a Tle object containing the SGP/SDP model parameters as derived from the element set."
                        }
                    ],
                    "returns": {
                        "name": "cartesian_state_vector",
                        "type": "np.ndarray[6,]",
                        "description": "Cartesian state vector (x,y,z, position+velocity)."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "compute_rotation_quaternion_between_frames",
                    "short_summary": "Compute quaternion of rotation between two frames.",
                    "deprecation_warning": null,
                    "extended_summary": "This function computes the quaternion of rotation between two\nframes at a given time instant. kernels defining the two frames,\nas well as any required intermediate frames, at the requested\ntime must have been loaded. Wrapper for `pxform_c` spice function.\n",
                    "parameters": [
                        {
                            "name": "original_frame",
                            "type": null,
                            "description": "Reference frame from which the rotation is made."
                        },
                        {
                            "name": "new_frame",
                            "type": null,
                            "description": "Reference frame to which the rotation is made."
                        },
                        {
                            "name": "ephemeris_time",
                            "type": null,
                            "description": "Value of ephemeris time at which rotation is to be determined."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Rotation quaternion from original to new frame at given time."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "compute_rotation_matrix_derivative_between_frames",
                    "short_summary": "Computes time derivative of rotation matrix between two frames.",
                    "deprecation_warning": null,
                    "extended_summary": "This function computes the derivative of the rotation matrix\nbetween two frames at a given time instant. kernels defining the\ntwo frames, as well as any required intermediate frames, at the\nrequested time must have been loaded. Wrapper for (part of) `sxform_c` spice function.\n",
                    "parameters": [
                        {
                            "name": "original_frame",
                            "type": null,
                            "description": "Reference frame from which the rotation is made."
                        },
                        {
                            "name": "new_frame",
                            "type": null,
                            "description": "Reference frame to which the rotation is made."
                        },
                        {
                            "name": "ephemeris_time",
                            "type": null,
                            "description": "Value of ephemeris time at which rotation is to be determined."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Time derivative of rotation matrix from original to new frame at given time."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_angular_velocity_vector_of_frame_in_original_frame",
                    "short_summary": "Computes the angular velocity of one frame w.r.t. to another frame.",
                    "deprecation_warning": null,
                    "extended_summary": "Computes the angular velocity of one frame w.r.t. to another frame.\nat a given time instant. kernels defining the two frames, as well\nas any required intermediate frames, at the requested time must\nhave been loaded. Wrapper for `xf2rav_c`_ spice function (utilizing `sxform_c`_).\n\n.. _`xf2rav_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/xf2rav_c.html\n.. _`sxform_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sxform_c.html\n",
                    "parameters": [
                        {
                            "name": "original_frame",
                            "type": null,
                            "description": "Reference frame from which the rotation is made."
                        },
                        {
                            "name": "new_frame",
                            "type": null,
                            "description": "Reference frame to which the rotation is made."
                        },
                        {
                            "name": "ephemeris_time",
                            "type": null,
                            "description": "Value of ephemeris time at which rotation is to be determined."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Angular velocity of newFrame w.r.t. originalFrame, expressed in originalFrame."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_body_properties",
                    "short_summary": "Get property of a body from Spice.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to retrieve a property of a body from Spice, wraps the bodvrd_c Spice function.\n",
                    "parameters": [
                        {
                            "name": "body_name",
                            "type": null,
                            "description": "Name of the body of which the property is to be retrieved."
                        },
                        {
                            "name": "property",
                            "type": null,
                            "description": "Name of the property that is to be retrieved. Naming conventions can be found\nin the `bodvrd_c`_ function documentation.\n\n.. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n"
                        },
                        {
                            "name": "maximum_number_of_values",
                            "type": "int",
                            "description": "Number of values by which the property is expressed (i.e. 1 for\ngravitational parameter, 3 for tri-axial ellipsoid principal axes).\n"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Property value(s) expressed in an STL vector of doubles."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": "Function returns values with distance unit km, not m!\n",
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_body_gravitational_parameter",
                    "short_summary": "Get gravitational parameter of a body.",
                    "deprecation_warning": null,
                    "extended_summary": "This function retrieves the gravitational parameter of a body.\nWraps the `bodvrd_c`_ spice function with \"GM\" as property type.\n\n.. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n",
                    "parameters": [
                        {
                            "name": "body",
                            "type": null,
                            "description": "Name of the body of which the parameter is to be retrieved."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Gravitational parameter of requested body."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_average_radius",
                    "short_summary": "Get the (arithmetic) mean of the three principal axes of the tri-axial ellipsoid shape.",
                    "deprecation_warning": null,
                    "extended_summary": "Returns the (arithmetic) mean of the three principal axes of the\ntri-axial ellipsoid shape of the requested body. Uses the `bodvrd_c` spice function with \"RADII\" as property type.\n\n.. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n",
                    "parameters": [
                        {
                            "name": "body",
                            "type": null,
                            "description": "Name of the body of which the average radius is to be retrieved."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Arithmetic mean of principal axes of tri-axial ellipsoid shape model of body."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "convert_body_name_to_naif_id",
                    "short_summary": "Convert a body name to its NAIF identification number.",
                    "deprecation_warning": null,
                    "extended_summary": "This function converts a body name to its NAIF identification\nnumber. The NAIF id number is required for a number of spice\nfunctions, whereas the name is easily interpretable by the user.\nWrapper for the ``bods2c_c`` function.\n",
                    "parameters": [
                        {
                            "name": "body_name",
                            "type": null,
                            "description": "Name of the body for which NAIF id is to be retrieved."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "NAIF id number for the body with bodyName."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "check_body_property_in_kernel_pool",
                    "short_summary": "Check if a certain property of a body is in the kernel pool.",
                    "deprecation_warning": null,
                    "extended_summary": "This function checks if a certain property of a body is in the\nkernel pool. These properties are defined in PCK kernels. Their\nnames are given in the kernel file, typical names can be found in\nthe Spice documentation. Wrapper for the `bodfnd_c`_ function.\n\n.. _`bodfnd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodfnd_c.html\n",
                    "parameters": [
                        {
                            "name": "body_name",
                            "type": null,
                            "description": "Name of the body of which the property is to be checked."
                        },
                        {
                            "name": "body_property",
                            "type": null,
                            "description": "Name of the property of which the presence is to be checked, not case-sensitive."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "bool",
                        "description": "True if property is in pool, false if not."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_standard_kernels",
                    "short_summary": "Get the paths to the default legacy kernels.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "load_standard_kernels",
                    "short_summary": "Load the default legacy kernels.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": [
                        {
                            "name": "kernel_paths",
                            "type": "list[str]",
                            "description": "Optional addition kernels to be loaded."
                        }
                    ],
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_total_count_of_kernels_loaded",
                    "short_summary": "Get the number of spice kernels currently loaded.",
                    "deprecation_warning": null,
                    "extended_summary": "This function returns the amount of Spice kernels that are loaded\ninto the kernel pool. The same kernel can be loaded multiple times.\nWrapper for the `ktotal_c`_ function.\n\n.. _`ktotal_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/ktotal_c.html\n",
                    "parameters": null,
                    "returns": {
                        "name": "n_kernels",
                        "type": "int",
                        "description": "Number of spice kernels currently loaded."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "load_kernel",
                    "short_summary": "Loads a Spice kernel into the pool.",
                    "deprecation_warning": null,
                    "extended_summary": "This function loads a Spice kernel into the kernel pool, from which\nit can be used by the various internal spice routines. Matters\nregarding the manner in which Spice handles different kernels\ncontaining the same information can be found in the spice required\nreading documentation, kernel section. Wrapper for the `furnsh_c`_\nfunction.\n\n.. _`furnsh_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/furnsh_c.html\n",
                    "parameters": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "description": "Path to the spice kernel to be loaded."
                        }
                    ],
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "clear_kernels",
                    "short_summary": "Clear all loaded spice kernels.",
                    "deprecation_warning": null,
                    "extended_summary": "This function removes all Spice kernels from the kernel pool.\nWrapper for the `kclear_c`_ function.\n\n.. _`kclear_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/kclear_c.html\n",
                    "parameters": null,
                    "returns": {
                        "name": null,
                        "type": "None",
                        "description": null
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                }
            ],
            "constants": null,
            "name": "spice",
            "version": null,
            "convert_julian_date_to_ephemeris_time": "\nConvert a Julian date to ephemeris time (equivalent to TDB in Spice).\n\nFunction to convert a Julian date to ephemeris time, which is\nequivalent to barycentric dynamical time. A leap second kernel\nmust have been loaded to use this function.\n\n\nParameters\n----------\njulian_date : int\n    Julian date that is to be converted to ephemeris time.\nReturns\n-------\nephemeris_time : float    Julian date calculated from ephemeris time.\n\n\n\n\n\n",
            "convert_ephemeris_time_to_julian_date": "\nConvert ephemeris time (equivalent to TDB) to a Julian date.\n\nFunction to convert ephemeris time, which is nearly equal to\nbarycentric dynamical time, to the Julian date. A leap second\nkernel must have been loaded to use this function.\n\n\nParameters\n----------\nephemeris_time : float\n    Ephemeris time that is to be converted to Julian date.\nReturns\n-------\njulian_date : float    Julian date calculated from ephemeris time.\n\n\n\n\n\n",
            "convert_date_string_to_ephemeris_time": "\nConverts a date string to ephemeris time.\n\nFunction to convert a date string, for instance\n1988 June 13, 3:29:48 to ephemeris time, wrapper for `str2et_c`\nspice function.\n\n\nParameters\n----------\ndate_string : str\n    String representing the date. See documentation of spice\n    function `str2et_c` for details on supported formats.\n\nReturns\n-------\nephemeris_time : str    Ephemeris time corresponding to given date_string.\n\n\n\n\n\n",
            "get_body_cartesian_state_at_epoch": "\nGet Cartesian state of a body, as observed from another body.\n\nThis function returns the state of a body, relative to another\nbody, in a frame specified by the user. Corrections for light-time\ncorrection and stellar aberration can be applied to obtain the\nstate of one of the bodies, as observed from the other. Wrapper\nfor `spkezr_c` spice function.\n\n\nParameters\n----------\ntarget_body_name : str\n    Name of the body of which the state is to be obtained. A kernel\n    with the ephemeris of this body must have been loaded. The\n    string must be a spice-recognized name or ID.\n\nobserver_body_name : str\n    Name of the body relative to which the state is to be obtained.\n    A kernel with the ephemeris of this body must have been loaded.\n    The string must be a spice-recognized name or ID.\n\nreference_frame_name : str\n    The spice-recognized name of the reference frame in which the\n    state is to be returned. Spice kernel(s) required to perform\n    the necessary conversion from the states of the target and\n    observer bodies to this frame need to have been loaded.\n\naberration_corrections : str\n    Setting for correction for setting corrections. See Spice\n    documentation for extended discussion.\n    Short summary:\n\n    - NONE: none\n    - LT: light time corrected (one iteration for calculation)\n    - CN: light time corrected (multiple iterations, max 3) for calculation\n    - S: Stellar aberration corrected.\n    - XLT and XCN: can be provided to make the ephemeris time input argument the transmission time, instead of reception time. Arguments can be combined (i.e.\"LT+S\" or \"XCN+S\").\n\nephemeris_time : float\n    Observation time (or transmission time of observed light, see description\n    of aberrationCorrections).\n\nReturns\n-------\ncartesian_state_vector : np.ndarray[6,]    Cartesian state vector (x,y,z, position+velocity).\n\n\n\n\n\n",
            "get_body_cartesian_position_at_epoch": "\nGet Cartesian position of a body, as observed from another body.\n\nThis function returns the position of a body, relative to another\nbody, in a frame specified by the user. Corrections for light-time\ncorrection and stellar aberration can be applied to obtain the\nstate of one of the bodies, as observed from the other. Wrapper\nfor `spkpos_c` spice function.\n\n\nParameters\n----------\ntarget_body_name : str\n    Name of the body of which the state is to be obtained. A kernel\n    with the ephemeris of this body must have been loaded. The\n    string must be a spice-recognized name or ID.\n\nobserver_body_name : str\n    Name of the body relative to which the state is to be obtained.\n    A kernel with the ephemeris of this body must have been loaded.\n    The string must be a spice-recognized name or ID.\n\nreference_frame_name : str\n    The spice-recognized name of the reference frame in which the\n    state is to be returned. Spice kernel(s) required to perform\n    the necessary conversion from the states of the target and\n    observer bodies to this frame need to have been loaded.\n\naberration_corrections : str\n    Setting for correction for setting corrections. See Spice\n    documentation for extended discussion.\n    Short summary:\n\n    - NONE: none\n    - LT: light time corrected (one iteration for calculation)\n    - CN: light time corrected (multiple iterations, max 3) for calculation,\n    - S: Stellar aberration corrected.\n    - XLT and XCN: can be provided to make the ephemeris time input argument the transmission time, instead of reception time. Arguments can be combined (i.e.\"LT+S\" or \"XCN+S\").\n\nephemeris_time : float\n    Observation time (or transmission time of observed light, see description\n    of aberrationCorrections).\n\n\n\n\n\n",
            "get_cartesian_state_from_tle_at_epoch": "\nGet Cartesian state of a satellite from its two-line element set at a specified epoch.\n\nThis function retrieves the state of a satellite at a certain epoch\nby propagating the SGP or SDP models (near-Earth resp. deep space)\nwith the given two-line elements (TLE). This function serves as a\nwrapper for the `ev2lin_` function in CSpice.\n\n\nParameters\n----------\nepoch : float\n    Time in seconds since J2000 at which the state is to be retrieved.\ntle : :class:`~tudatpy.kernel.astro.ephemerides.Tle`\n    Shared pointer to a Tle object containing the SGP/SDP model parameters as derived from the element set.\nReturns\n-------\ncartesian_state_vector : np.ndarray[6,]    Cartesian state vector (x,y,z, position+velocity).\n\n\n\n\n\n",
            "compute_rotation_quaternion_between_frames": "\nCompute quaternion of rotation between two frames.\n\nThis function computes the quaternion of rotation between two\nframes at a given time instant. kernels defining the two frames,\nas well as any required intermediate frames, at the requested\ntime must have been loaded. Wrapper for `pxform_c` spice function.\n\n\nParameters\n----------\noriginal_frame\n    Reference frame from which the rotation is made.\nnew_frame\n    Reference frame to which the rotation is made.\nephemeris_time\n    Value of ephemeris time at which rotation is to be determined.\nReturns\n-------\nRotation quaternion from original to new frame at given time.\n\n\n\n\n\n",
            "compute_rotation_matrix_derivative_between_frames": "\nComputes time derivative of rotation matrix between two frames.\n\nThis function computes the derivative of the rotation matrix\nbetween two frames at a given time instant. kernels defining the\ntwo frames, as well as any required intermediate frames, at the\nrequested time must have been loaded. Wrapper for (part of) `sxform_c` spice function.\n\n\nParameters\n----------\noriginal_frame\n    Reference frame from which the rotation is made.\nnew_frame\n    Reference frame to which the rotation is made.\nephemeris_time\n    Value of ephemeris time at which rotation is to be determined.\nReturns\n-------\nTime derivative of rotation matrix from original to new frame at given time.\n\n\n\n\n\n",
            "get_angular_velocity_vector_of_frame_in_original_frame": "\nComputes the angular velocity of one frame w.r.t. to another frame.\n\nComputes the angular velocity of one frame w.r.t. to another frame.\nat a given time instant. kernels defining the two frames, as well\nas any required intermediate frames, at the requested time must\nhave been loaded. Wrapper for `xf2rav_c`_ spice function (utilizing `sxform_c`_).\n\n.. _`xf2rav_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/xf2rav_c.html\n.. _`sxform_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sxform_c.html\n\n\nParameters\n----------\noriginal_frame\n    Reference frame from which the rotation is made.\nnew_frame\n    Reference frame to which the rotation is made.\nephemeris_time\n    Value of ephemeris time at which rotation is to be determined.\nReturns\n-------\nAngular velocity of newFrame w.r.t. originalFrame, expressed in originalFrame.\n\n\n\n\n\n",
            "get_body_properties": "\nGet property of a body from Spice.\n\nFunction to retrieve a property of a body from Spice, wraps the bodvrd_c Spice function.\n\n\nParameters\n----------\nbody_name\n    Name of the body of which the property is to be retrieved.\nproperty\n    Name of the property that is to be retrieved. Naming conventions can be found\n    in the `bodvrd_c`_ function documentation.\n\n    .. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n\nmaximum_number_of_values : int\n    Number of values by which the property is expressed (i.e. 1 for\n    gravitational parameter, 3 for tri-axial ellipsoid principal axes).\n\nReturns\n-------\nProperty value(s) expressed in an STL vector of doubles.\n\n\n\nNotes\n-----\nFunction returns values with distance unit km, not m!\n\n\n\n",
            "get_body_gravitational_parameter": "\nGet gravitational parameter of a body.\n\nThis function retrieves the gravitational parameter of a body.\nWraps the `bodvrd_c`_ spice function with \"GM\" as property type.\n\n.. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n\n\nParameters\n----------\nbody\n    Name of the body of which the parameter is to be retrieved.\nReturns\n-------\nGravitational parameter of requested body.\n\n\n\n\n\n",
            "get_average_radius": "\nGet the (arithmetic) mean of the three principal axes of the tri-axial ellipsoid shape.\n\nReturns the (arithmetic) mean of the three principal axes of the\ntri-axial ellipsoid shape of the requested body. Uses the `bodvrd_c` spice function with \"RADII\" as property type.\n\n.. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n\n\nParameters\n----------\nbody\n    Name of the body of which the average radius is to be retrieved.\nReturns\n-------\nArithmetic mean of principal axes of tri-axial ellipsoid shape model of body.\n\n\n\n\n\n",
            "convert_body_name_to_naif_id": "\nConvert a body name to its NAIF identification number.\n\nThis function converts a body name to its NAIF identification\nnumber. The NAIF id number is required for a number of spice\nfunctions, whereas the name is easily interpretable by the user.\nWrapper for the ``bods2c_c`` function.\n\n\nParameters\n----------\nbody_name\n    Name of the body for which NAIF id is to be retrieved.\nReturns\n-------\nNAIF id number for the body with bodyName.\n\n\n\n\n\n",
            "check_body_property_in_kernel_pool": "\nCheck if a certain property of a body is in the kernel pool.\n\nThis function checks if a certain property of a body is in the\nkernel pool. These properties are defined in PCK kernels. Their\nnames are given in the kernel file, typical names can be found in\nthe Spice documentation. Wrapper for the `bodfnd_c`_ function.\n\n.. _`bodfnd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodfnd_c.html\n\n\nParameters\n----------\nbody_name\n    Name of the body of which the property is to be checked.\nbody_property\n    Name of the property of which the presence is to be checked, not case-sensitive.\nReturns\n-------\nbool\n    True if property is in pool, false if not.\n\n\n\n\n\n",
            "get_standard_kernels": "\nGet the paths to the default legacy kernels.\n\n\n\n\n\n",
            "load_standard_kernels": "\nLoad the default legacy kernels.\n\n\nParameters\n----------\nkernel_paths : list[str]\n    Optional addition kernels to be loaded.\n\n\n\n\n",
            "get_total_count_of_kernels_loaded": "\nGet the number of spice kernels currently loaded.\n\nThis function returns the amount of Spice kernels that are loaded\ninto the kernel pool. The same kernel can be loaded multiple times.\nWrapper for the `ktotal_c`_ function.\n\n.. _`ktotal_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/ktotal_c.html\n\nReturns\n-------\nn_kernels : int    Number of spice kernels currently loaded.\n\n\n\n\n\n",
            "load_kernel": "\nLoads a Spice kernel into the pool.\n\nThis function loads a Spice kernel into the kernel pool, from which\nit can be used by the various internal spice routines. Matters\nregarding the manner in which Spice handles different kernels\ncontaining the same information can be found in the spice required\nreading documentation, kernel section. Wrapper for the `furnsh_c`_\nfunction.\n\n.. _`furnsh_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/furnsh_c.html\n\n\nParameters\n----------\nfile_path : str\n    Path to the spice kernel to be loaded.\n\n\n\n\n",
            "clear_kernels": "\nClear all loaded spice kernels.\n\nThis function removes all Spice kernels from the kernel pool.\nWrapper for the `kclear_c`_ function.\n\n.. _`kclear_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/kclear_c.html\n\nReturns\n-------\nNone\n    None\n\n\n\n\n\n",
            "SpiceEphemeris": {
                "name": "SpiceEphemeris",
                "short_summary": "Ephemeris derived class which retrieves the state of a body directly from the SPICE library.",
                "deprecation_warning": null,
                "extended_summary": "Ephemeris derived class which retrieves the state of a body directly from the SPICE library.\nThe body of which the ephemeris is to be retrieved, as well as the origin and orientation\nof the reference frame in which the states are returned, and any corrections that are\napplied, are defined once during object construction.\n",
                "parameters": null,
                "attributes": null,
                "properties": null,
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "methods": [
                    {
                        "name": "__init__",
                        "short_summary": "Constructor.",
                        "deprecation_warning": null,
                        "extended_summary": "Constructor, sets the input variables for the calls to the spice function to retrieve state.",
                        "parameters": [
                            {
                                "name": "target_body_name",
                                "type": null,
                                "description": "Name of body of which the ephemeris is to be calculated."
                            },
                            {
                                "name": "observer_body_name",
                                "type": null,
                                "description": "Name of body relative to which the ephemeris is to be calculated."
                            },
                            {
                                "name": "correct_for_stellar_aberration",
                                "type": null,
                                "description": "Boolean whether to correct for stellar Aberration in retrieved values of (observed state).\n"
                            },
                            {
                                "name": "correct_for_light_time_aberration",
                                "type": null,
                                "description": "Boolean whether to correct for light time in retrieved values of (observed state).\n"
                            },
                            {
                                "name": "converge_ligh_time_aberration",
                                "type": null,
                                "description": "Boolean whether to use single iteration or max. 3 iterations for calculating light time.\n"
                            },
                            {
                                "name": "reference_frame_name",
                                "type": null,
                                "description": "Name of the reference frame in which the ephemeris is to be calculated.\n"
                            },
                            {
                                "name": "reference_julian_day",
                                "type": null,
                                "description": "Reference julian day w.r.t. which ephemeris is evaluated.\n"
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "get_cartesian_state",
                        "short_summary": "Get Cartesian state from ephemeris.",
                        "deprecation_warning": null,
                        "extended_summary": " Returns Cartesian state from ephemeris at given Julian day.",
                        "parameters": [
                            {
                                "name": "seconds_since_epoch",
                                "type": "float",
                                "description": "Seconds since epoch at which ephemeris is to be evaluated."
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "autoclass": null,
                "__init__": "\nConstructor.\n\nConstructor, sets the input variables for the calls to the spice function to retrieve state.\n\nParameters\n----------\ntarget_body_name\n    Name of body of which the ephemeris is to be calculated.\nobserver_body_name\n    Name of body relative to which the ephemeris is to be calculated.\ncorrect_for_stellar_aberration\n    Boolean whether to correct for stellar Aberration in retrieved values of (observed state).\n\ncorrect_for_light_time_aberration\n    Boolean whether to correct for light time in retrieved values of (observed state).\n\nconverge_ligh_time_aberration\n    Boolean whether to use single iteration or max. 3 iterations for calculating light time.\n\nreference_frame_name\n    Name of the reference frame in which the ephemeris is to be calculated.\n\nreference_julian_day\n    Reference julian day w.r.t. which ephemeris is evaluated.\n\n\n\n\n\n",
                "get_cartesian_state": "\nGet Cartesian state from ephemeris.\n\n Returns Cartesian state from ephemeris at given Julian day.\n\nParameters\n----------\nseconds_since_epoch : float\n    Seconds since epoch at which ephemeris is to be evaluated.\n\n\n\n\n",
                "__docstring__": "\nEphemeris derived class which retrieves the state of a body directly from the SPICE library.\n\nEphemeris derived class which retrieves the state of a body directly from the SPICE library.\nThe body of which the ephemeris is to be retrieved, as well as the origin and orientation\nof the reference frame in which the states are returned, and any corrections that are\napplied, are defined once during object construction.\n\n\n\n\n\n"
            }
        }
    },
    "numerical_simulation": {
        "type": "package",
        "path": "./tudat-multidoc/docstrings/numerical_simulation",
        "file": "__package__.yaml",
        "_implicit_name": "numerical_simulation",
        "config": null,
        "summary": null,
        "extended_summary": "",
        "routine_listings": null,
        "see_also": null,
        "notes": null,
        "references": null,
        "examples": null,
        "enums": null,
        "classes": [
            {
                "name": "SingleArcSimulator",
                "short_summary": "Base class to define single arc dynamics simulator settings.",
                "deprecation_warning": null,
                "extended_summary": null,
                "parameters": null,
                "attributes": null,
                "properties": [
                    {
                        "name": "state_history",
                        "type": "dict[float, numpy.ndarray]",
                        "description": "Numerical solution of the equations of motion as key-value pairs. The key denotes the epoch. The value contains the\nnumerically calculated state at this epoch. For this function, the states are always converted to so-called\n'conventional' formulations (e.g. Cartesian states for translational dynamics), see `here <https://tudat-space.readthedocs.io/en/latest/_src_api/propagation_setup/settings/conventional_vs_propagated_coordinates.html>`_\nfor detailed. For the history of the states that were actually propagated, use the ``unprocessed_state_history``.\n\n.. note:: For propagation of translational dynamics using cowell\n          propagator, the conventional and propagated\n          coordinates are identical.\n",
                        "readonly": true
                    },
                    {
                        "name": "unprocessed_state_history",
                        "type": "dict[float, numpy.ndarray]",
                        "description": "Raw numerical solution of the equations of motion as key-value pairs. The key denotes the epoch. The value contains the\nnumerically calculated state at this epoch. This attribute contains the states of the propagated bodies expressed in the\n\"raw\" form in which the propagation took place. For instance, when using a Gauss-Kepler propagation scheme, this\nattribute will contain the numerically propagated Keplerian elements at each time epoch\n",
                        "readonly": false
                    },
                    {
                        "name": "dependent_variable_history",
                        "type": "dict[float, numpy.ndarray]",
                        "description": "Dependent variables computed during the propagation as key-value pairs.\nThey are returned in the order with the same order of the DependentVariableSaveSettings object as values,\nas value, with the epoch as key.\n",
                        "readonly": false
                    },
                    {
                        "name": "cumulative_computation_time_history",
                        "type": "dict[float, float]",
                        "description": "History of cumulative computation time in seconds needed during the propagation as key-value\npairs. At each epoch (key) the computation time (value) in seconds is the total computation time\nused up to and including that time step.\n",
                        "readonly": false
                    },
                    {
                        "name": "cumulative_number_of_function_evaluations",
                        "type": "dict[float, int]",
                        "description": "This function returns the history of cumulative number of function evaluations taken during the propagation as key-value\npairs. At each epoch (key), the number of computed function evaluations (value) are given up to and including that time step.\n",
                        "readonly": false
                    },
                    {
                        "name": "integrator_settings",
                        "type": "IntegratorSettings",
                        "description": "Settings to create the numerical integrator that is to be used\nfor the integration of the equations of motion\n",
                        "readonly": false
                    },
                    {
                        "name": "state_derivative_function",
                        "type": "callable[[float, numpy.ndarray], numpy.ndarray]",
                        "description": "Function that performs a single state derivative function evaluation. This function takes the numerically propagated\nstate, and current independent variable (time) as input, and returns the derivative of the state that is then used\nby the numerical integration routine. Typically, this function is NOT used directly by users.\n",
                        "readonly": false
                    },
                    {
                        "name": "environment_updater",
                        "type": "EnvironmentUpdater",
                        "description": "Object used in the propagation to update the enviroment, it uses the current time and numerically calulcated state\nto update the translational state, rotational state, flight conditions, etc. of all bodies in the simulation to be\nconsistent with this time and state.  Typically, this class is NOT used directly by users.\n",
                        "readonly": false
                    },
                    {
                        "name": "propagation_termination_details",
                        "type": "PropagationTerminationDetails",
                        "description": "Object describing the details of the event that triggered the termination of the last propagation.\n",
                        "readonly": false
                    },
                    {
                        "name": "dependent_variable_ids",
                        "type": "dict[int, str]",
                        "description": "Key-value container with the starting entry of the dependent variables saved (key), along with associated ID (value).\n",
                        "readonly": false
                    },
                    {
                        "name": "integration_completed_successfully",
                        "type": "bool",
                        "description": "Boolean defining whether the last propagation was finished\nsuccesfully, as defined by the termination conditions, or if\nit was terminated prematurely (for instance due to an\nexception, or an Inf/NaN state entry being detected).\n",
                        "readonly": false
                    }
                ],
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "methods": [
                    {
                        "name": "ctor",
                        "short_summary": "Class constructor.",
                        "deprecation_warning": null,
                        "extended_summary": "Class constructor defining environment, propagation and\nintegrations models, as well as a number of settings related\nto simulation output and processing.\n\n.. note:: When using default settings, creating an object of\n          this type automatically triggers the propagation\n",
                        "parameters": [
                            {
                                "name": "bodies",
                                "type": "SystemOfBodies",
                                "description": "Object defining the physical environment, with all\nproperties of artificial and natural bodies.\n"
                            },
                            {
                                "name": "integrator_settings",
                                "type": "IntegratorSettings",
                                "description": "Settings to create the numerical integrator that is to be\nused for the integration of the equations of motion\n"
                            },
                            {
                                "name": "are_equations_of_motion_to_be_integrated",
                                "type": "Bool, default = True",
                                "description": "Boolean defining whether the propagation should be\nperformed immediately (default), or at a later time when\ncalling the :py:attr:`~integrate_equations_of_motion`\nfunction.\n"
                            },
                            {
                                "name": "clear_numerical_solutions",
                                "type": "Bool, default = False",
                                "description": "Boolean defining whether the propagation results should be\ndeleted after the propagation is terminated. If this is\ndone, the :py:attr:`~state_history`,\n:py:attr:`~unprocessed_state_history` and\n:py:attr:`~dependent_variable_history` will not be\naccessible. Putting this setting to True (deleting the\nresults) is only sensible when the\n:py:attr:`~set_integrated_result` is set to True. In that\ncase, the propagated states are *not* accesible directly\nfrom this objects, but the results are used to update the\nenvironment, *e.g.* update the ephemeris of the propagated\nbody with the numerical results.\n"
                            },
                            {
                                "name": "set_integrated_result",
                                "type": "Bool, default = False",
                                "description": "Boolean defining whether the propagation results are to\nbe used to update the environment. If this variable is set\nto False, the numerical propagation results can be\nretrieved from this object (provided the\n:py:attr:`~clear_numerical_solutions` is set to False),\nbut the (for instance) Ephemeris of the propagated body\nis not updated with the propagation results. If this\nvariable is set to True, the properties of the propagated\n:class:`~tudatpy.numerical_simulation.environment.Body`\nobject will be updated as per the numerical results.\nDepending on the state type, this will result in:\n   - **Translational**: The ephemeris of the propagated body\n     will be updated.\n\n     .. note:: This requires the propagated body to be\n               endowed with a tabulated ephemeris.\n\n   - **Rotational**: The rotational ephemeris of the\n     propagated body will be updated.\n\n     .. note:: This requires the propagated body to be\n               endowed with a tabulated rotational\n               ephemeris.\n\n   - **Mass**: The mass function of the propagated body\n     will be updated.\n"
                            },
                            {
                                "name": "print_dependent_variable_data",
                                "type": "bool, default = True",
                                "description": "Boolean defining whether the meaning and indices of the\nentries of the dependent variable data are to be printed to\nthe console.\n\n.. note:: The same information can be retrieved from the\n          :py:attr:`~dependent_variable_ids`\n          property.\n"
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "integrate_equations_of_motion",
                        "short_summary": "This function numerically (re-)integrates the equations of\nmotion.\n",
                        "deprecation_warning": null,
                        "extended_summary": "This function numerically (re-)integrates the equations of\nmotion, using the settings set through the constructor and a\nnew initial state vector provided here.\n",
                        "parameters": [
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial state vector that is to be used for numerical\nintegration. Note that this state should be in the correct\nframe (i.e. relative to central_bodies in\npropagator_settings), and in Cartesian elements (even when\nusing a different propagation scheme than Cowell).\n\n.. note:: When using default settings for the class\n          constructor, this function is called during object\n          creation.\n"
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "autoclass": {
                    "members": null,
                    "undoc_members": null,
                    "private_members": null,
                    "special_members": "__init__",
                    "no_undoc_members": null,
                    "inherited_members": null
                }
            }
        ],
        "functions": null,
        "constants": null,
        "modules": [
            "environment_setup",
            "propagation_setup",
            "environment",
            "propagation"
        ],
        "name": "numerical_simulation",
        "version": null,
        "SingleArcSimulator": {
            "name": "SingleArcSimulator",
            "short_summary": "Base class to define single arc dynamics simulator settings.",
            "deprecation_warning": null,
            "extended_summary": null,
            "parameters": null,
            "attributes": null,
            "properties": [
                {
                    "name": "state_history",
                    "type": "dict[float, numpy.ndarray]",
                    "description": "Numerical solution of the equations of motion as key-value pairs. The key denotes the epoch. The value contains the\nnumerically calculated state at this epoch. For this function, the states are always converted to so-called\n'conventional' formulations (e.g. Cartesian states for translational dynamics), see `here <https://tudat-space.readthedocs.io/en/latest/_src_api/propagation_setup/settings/conventional_vs_propagated_coordinates.html>`_\nfor detailed. For the history of the states that were actually propagated, use the ``unprocessed_state_history``.\n\n.. note:: For propagation of translational dynamics using cowell\n          propagator, the conventional and propagated\n          coordinates are identical.\n",
                    "readonly": true
                },
                {
                    "name": "unprocessed_state_history",
                    "type": "dict[float, numpy.ndarray]",
                    "description": "Raw numerical solution of the equations of motion as key-value pairs. The key denotes the epoch. The value contains the\nnumerically calculated state at this epoch. This attribute contains the states of the propagated bodies expressed in the\n\"raw\" form in which the propagation took place. For instance, when using a Gauss-Kepler propagation scheme, this\nattribute will contain the numerically propagated Keplerian elements at each time epoch\n",
                    "readonly": false
                },
                {
                    "name": "dependent_variable_history",
                    "type": "dict[float, numpy.ndarray]",
                    "description": "Dependent variables computed during the propagation as key-value pairs.\nThey are returned in the order with the same order of the DependentVariableSaveSettings object as values,\nas value, with the epoch as key.\n",
                    "readonly": false
                },
                {
                    "name": "cumulative_computation_time_history",
                    "type": "dict[float, float]",
                    "description": "History of cumulative computation time in seconds needed during the propagation as key-value\npairs. At each epoch (key) the computation time (value) in seconds is the total computation time\nused up to and including that time step.\n",
                    "readonly": false
                },
                {
                    "name": "cumulative_number_of_function_evaluations",
                    "type": "dict[float, int]",
                    "description": "This function returns the history of cumulative number of function evaluations taken during the propagation as key-value\npairs. At each epoch (key), the number of computed function evaluations (value) are given up to and including that time step.\n",
                    "readonly": false
                },
                {
                    "name": "integrator_settings",
                    "type": "IntegratorSettings",
                    "description": "Settings to create the numerical integrator that is to be used\nfor the integration of the equations of motion\n",
                    "readonly": false
                },
                {
                    "name": "state_derivative_function",
                    "type": "callable[[float, numpy.ndarray], numpy.ndarray]",
                    "description": "Function that performs a single state derivative function evaluation. This function takes the numerically propagated\nstate, and current independent variable (time) as input, and returns the derivative of the state that is then used\nby the numerical integration routine. Typically, this function is NOT used directly by users.\n",
                    "readonly": false
                },
                {
                    "name": "environment_updater",
                    "type": "EnvironmentUpdater",
                    "description": "Object used in the propagation to update the enviroment, it uses the current time and numerically calulcated state\nto update the translational state, rotational state, flight conditions, etc. of all bodies in the simulation to be\nconsistent with this time and state.  Typically, this class is NOT used directly by users.\n",
                    "readonly": false
                },
                {
                    "name": "propagation_termination_details",
                    "type": "PropagationTerminationDetails",
                    "description": "Object describing the details of the event that triggered the termination of the last propagation.\n",
                    "readonly": false
                },
                {
                    "name": "dependent_variable_ids",
                    "type": "dict[int, str]",
                    "description": "Key-value container with the starting entry of the dependent variables saved (key), along with associated ID (value).\n",
                    "readonly": false
                },
                {
                    "name": "integration_completed_successfully",
                    "type": "bool",
                    "description": "Boolean defining whether the last propagation was finished\nsuccesfully, as defined by the termination conditions, or if\nit was terminated prematurely (for instance due to an\nexception, or an Inf/NaN state entry being detected).\n",
                    "readonly": false
                }
            ],
            "yields": null,
            "other_parameters": null,
            "raises": null,
            "warns": null,
            "warnings": null,
            "see_also": null,
            "notes": null,
            "references": null,
            "examples": null,
            "methods": [
                {
                    "name": "ctor",
                    "short_summary": "Class constructor.",
                    "deprecation_warning": null,
                    "extended_summary": "Class constructor defining environment, propagation and\nintegrations models, as well as a number of settings related\nto simulation output and processing.\n\n.. note:: When using default settings, creating an object of\n          this type automatically triggers the propagation\n",
                    "parameters": [
                        {
                            "name": "bodies",
                            "type": "SystemOfBodies",
                            "description": "Object defining the physical environment, with all\nproperties of artificial and natural bodies.\n"
                        },
                        {
                            "name": "integrator_settings",
                            "type": "IntegratorSettings",
                            "description": "Settings to create the numerical integrator that is to be\nused for the integration of the equations of motion\n"
                        },
                        {
                            "name": "are_equations_of_motion_to_be_integrated",
                            "type": "Bool, default = True",
                            "description": "Boolean defining whether the propagation should be\nperformed immediately (default), or at a later time when\ncalling the :py:attr:`~integrate_equations_of_motion`\nfunction.\n"
                        },
                        {
                            "name": "clear_numerical_solutions",
                            "type": "Bool, default = False",
                            "description": "Boolean defining whether the propagation results should be\ndeleted after the propagation is terminated. If this is\ndone, the :py:attr:`~state_history`,\n:py:attr:`~unprocessed_state_history` and\n:py:attr:`~dependent_variable_history` will not be\naccessible. Putting this setting to True (deleting the\nresults) is only sensible when the\n:py:attr:`~set_integrated_result` is set to True. In that\ncase, the propagated states are *not* accesible directly\nfrom this objects, but the results are used to update the\nenvironment, *e.g.* update the ephemeris of the propagated\nbody with the numerical results.\n"
                        },
                        {
                            "name": "set_integrated_result",
                            "type": "Bool, default = False",
                            "description": "Boolean defining whether the propagation results are to\nbe used to update the environment. If this variable is set\nto False, the numerical propagation results can be\nretrieved from this object (provided the\n:py:attr:`~clear_numerical_solutions` is set to False),\nbut the (for instance) Ephemeris of the propagated body\nis not updated with the propagation results. If this\nvariable is set to True, the properties of the propagated\n:class:`~tudatpy.numerical_simulation.environment.Body`\nobject will be updated as per the numerical results.\nDepending on the state type, this will result in:\n   - **Translational**: The ephemeris of the propagated body\n     will be updated.\n\n     .. note:: This requires the propagated body to be\n               endowed with a tabulated ephemeris.\n\n   - **Rotational**: The rotational ephemeris of the\n     propagated body will be updated.\n\n     .. note:: This requires the propagated body to be\n               endowed with a tabulated rotational\n               ephemeris.\n\n   - **Mass**: The mass function of the propagated body\n     will be updated.\n"
                        },
                        {
                            "name": "print_dependent_variable_data",
                            "type": "bool, default = True",
                            "description": "Boolean defining whether the meaning and indices of the\nentries of the dependent variable data are to be printed to\nthe console.\n\n.. note:: The same information can be retrieved from the\n          :py:attr:`~dependent_variable_ids`\n          property.\n"
                        }
                    ],
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "integrate_equations_of_motion",
                    "short_summary": "This function numerically (re-)integrates the equations of\nmotion.\n",
                    "deprecation_warning": null,
                    "extended_summary": "This function numerically (re-)integrates the equations of\nmotion, using the settings set through the constructor and a\nnew initial state vector provided here.\n",
                    "parameters": [
                        {
                            "name": "initial_states",
                            "type": "numpy.ndarray",
                            "description": "Initial state vector that is to be used for numerical\nintegration. Note that this state should be in the correct\nframe (i.e. relative to central_bodies in\npropagator_settings), and in Cartesian elements (even when\nusing a different propagation scheme than Cowell).\n\n.. note:: When using default settings for the class\n          constructor, this function is called during object\n          creation.\n"
                        }
                    ],
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                }
            ],
            "autoclass": {
                "members": null,
                "undoc_members": null,
                "private_members": null,
                "special_members": "__init__",
                "no_undoc_members": null,
                "inherited_members": null
            },
            "ctor": "\nClass constructor.\n\nClass constructor defining environment, propagation and\nintegrations models, as well as a number of settings related\nto simulation output and processing.\n\n.. note:: When using default settings, creating an object of\n          this type automatically triggers the propagation\n\n\nParameters\n----------\nbodies : SystemOfBodies\n    Object defining the physical environment, with all\n    properties of artificial and natural bodies.\n\nintegrator_settings : IntegratorSettings\n    Settings to create the numerical integrator that is to be\n    used for the integration of the equations of motion\n\nare_equations_of_motion_to_be_integrated : Bool, default = True\n    Boolean defining whether the propagation should be\n    performed immediately (default), or at a later time when\n    calling the :py:attr:`~integrate_equations_of_motion`\n    function.\n\nclear_numerical_solutions : Bool, default = False\n    Boolean defining whether the propagation results should be\n    deleted after the propagation is terminated. If this is\n    done, the :py:attr:`~state_history`,\n    :py:attr:`~unprocessed_state_history` and\n    :py:attr:`~dependent_variable_history` will not be\n    accessible. Putting this setting to True (deleting the\n    results) is only sensible when the\n    :py:attr:`~set_integrated_result` is set to True. In that\n    case, the propagated states are *not* accesible directly\n    from this objects, but the results are used to update the\n    environment, *e.g.* update the ephemeris of the propagated\n    body with the numerical results.\n\nset_integrated_result : Bool, default = False\n    Boolean defining whether the propagation results are to\n    be used to update the environment. If this variable is set\n    to False, the numerical propagation results can be\n    retrieved from this object (provided the\n    :py:attr:`~clear_numerical_solutions` is set to False),\n    but the (for instance) Ephemeris of the propagated body\n    is not updated with the propagation results. If this\n    variable is set to True, the properties of the propagated\n    :class:`~tudatpy.numerical_simulation.environment.Body`\n    object will be updated as per the numerical results.\n    Depending on the state type, this will result in:\n       - **Translational**: The ephemeris of the propagated body\n         will be updated.\n\n         .. note:: This requires the propagated body to be\n                   endowed with a tabulated ephemeris.\n\n       - **Rotational**: The rotational ephemeris of the\n         propagated body will be updated.\n\n         .. note:: This requires the propagated body to be\n                   endowed with a tabulated rotational\n                   ephemeris.\n\n       - **Mass**: The mass function of the propagated body\n         will be updated.\n\nprint_dependent_variable_data : bool, default = True\n    Boolean defining whether the meaning and indices of the\n    entries of the dependent variable data are to be printed to\n    the console.\n\n    .. note:: The same information can be retrieved from the\n              :py:attr:`~dependent_variable_ids`\n              property.\n\n\n\n\n\n",
            "integrate_equations_of_motion": "\nThis function numerically (re-)integrates the equations of\nmotion.\n\n\nThis function numerically (re-)integrates the equations of\nmotion, using the settings set through the constructor and a\nnew initial state vector provided here.\n\n\nParameters\n----------\ninitial_states : numpy.ndarray\n    Initial state vector that is to be used for numerical\n    integration. Note that this state should be in the correct\n    frame (i.e. relative to central_bodies in\n    propagator_settings), and in Cartesian elements (even when\n    using a different propagation scheme than Cowell).\n\n    .. note:: When using default settings for the class\n              constructor, this function is called during object\n              creation.\n\n\n\n\n\n",
            "state_history": "\n**read-only**\n\nNumerical solution of the equations of motion as key-value pairs. The key denotes the epoch. The value contains the\nnumerically calculated state at this epoch. For this function, the states are always converted to so-called\n'conventional' formulations (e.g. Cartesian states for translational dynamics), see `here <https://tudat-space.readthedocs.io/en/latest/_src_api/propagation_setup/settings/conventional_vs_propagated_coordinates.html>`_\nfor detailed. For the history of the states that were actually propagated, use the ``unprocessed_state_history``.\n\n.. note:: For propagation of translational dynamics using cowell\n          propagator, the conventional and propagated\n          coordinates are identical.\n\n\n:type: dict[float, numpy.ndarray]\n",
            "unprocessed_state_history": "\nRaw numerical solution of the equations of motion as key-value pairs. The key denotes the epoch. The value contains the\nnumerically calculated state at this epoch. This attribute contains the states of the propagated bodies expressed in the\n\"raw\" form in which the propagation took place. For instance, when using a Gauss-Kepler propagation scheme, this\nattribute will contain the numerically propagated Keplerian elements at each time epoch\n\n\n:type: dict[float, numpy.ndarray]\n",
            "dependent_variable_history": "\nDependent variables computed during the propagation as key-value pairs.\nThey are returned in the order with the same order of the DependentVariableSaveSettings object as values,\nas value, with the epoch as key.\n\n\n:type: dict[float, numpy.ndarray]\n",
            "cumulative_computation_time_history": "\nHistory of cumulative computation time in seconds needed during the propagation as key-value\npairs. At each epoch (key) the computation time (value) in seconds is the total computation time\nused up to and including that time step.\n\n\n:type: dict[float, float]\n",
            "cumulative_number_of_function_evaluations": "\nThis function returns the history of cumulative number of function evaluations taken during the propagation as key-value\npairs. At each epoch (key), the number of computed function evaluations (value) are given up to and including that time step.\n\n\n:type: dict[float, int]\n",
            "integrator_settings": "\nSettings to create the numerical integrator that is to be used\nfor the integration of the equations of motion\n\n\n:type: IntegratorSettings\n",
            "state_derivative_function": "\nFunction that performs a single state derivative function evaluation. This function takes the numerically propagated\nstate, and current independent variable (time) as input, and returns the derivative of the state that is then used\nby the numerical integration routine. Typically, this function is NOT used directly by users.\n\n\n:type: callable[[float, numpy.ndarray], numpy.ndarray]\n",
            "environment_updater": "\nObject used in the propagation to update the enviroment, it uses the current time and numerically calulcated state\nto update the translational state, rotational state, flight conditions, etc. of all bodies in the simulation to be\nconsistent with this time and state.  Typically, this class is NOT used directly by users.\n\n\n:type: EnvironmentUpdater\n",
            "propagation_termination_details": "\nObject describing the details of the event that triggered the termination of the last propagation.\n\n\n:type: PropagationTerminationDetails\n",
            "dependent_variable_ids": "\nKey-value container with the starting entry of the dependent variables saved (key), along with associated ID (value).\n\n\n:type: dict[int, str]\n",
            "integration_completed_successfully": "\nBoolean defining whether the last propagation was finished\nsuccesfully, as defined by the termination conditions, or if\nit was terminated prematurely (for instance due to an\nexception, or an Inf/NaN state entry being detected).\n\n\n:type: bool\n",
            "__docstring__": "\nBase class to define single arc dynamics simulator settings.\n\n\n\n\n\n"
        },
        "environment_setup": {
            "type": "package",
            "path": "./tudat-multidoc/docstrings/numerical_simulation/environment_setup",
            "file": "__package__.yaml",
            "_implicit_name": "environment_setup",
            "config": null,
            "summary": null,
            "extended_summary": "This module consists of factory functions for setting up the\nenvironment models in a simulation.\n",
            "routine_listings": null,
            "see_also": null,
            "notes": null,
            "references": null,
            "examples": null,
            "enums": null,
            "classes": [
                {
                    "name": "BodyListSettings",
                    "short_summary": "Class for defining settings for the creation of a system of bodies.",
                    "deprecation_warning": null,
                    "extended_summary": "Class for defining settings for the creation of a system of bodies. This object is typicall created from default settings, and\nthen adapted to the user's specific needs.\n",
                    "parameters": null,
                    "attributes": [
                        {
                            "name": "frame_origin",
                            "type": "str",
                            "description": "Definition of the global frame origin for the bodies"
                        },
                        {
                            "name": "frame_orientation",
                            "type": "str",
                            "description": "Definition of the global frame orienation for the bodies"
                        }
                    ],
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "get",
                            "short_summary": "This function extracts a single BodySettings object .",
                            "deprecation_warning": null,
                            "extended_summary": null,
                            "parameters": [
                                {
                                    "name": "body_name",
                                    "type": "str",
                                    "description": "Name of the body for which settings are to be retrieved\n"
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null
                },
                {
                    "name": "BodySettings",
                    "short_summary": "Class for defining settings for the creation of a single body.",
                    "deprecation_warning": null,
                    "extended_summary": "Class for defining settings for the creation of a single body, this object is typically stored inside a\n:class:`BodyListSettings`, object.\n",
                    "parameters": null,
                    "attributes": null,
                    "properties": [
                        {
                            "name": "constant_mass",
                            "type": "float",
                            "description": "Mass that gets assigned to the vehicle. Note that this mass does *not* automatically define a gravity field   # [py]\nmodel, but is instead used for the calculation of non-conservative forces only. When creating a body with a gravity field,   # [py]\nleave this entry empty.   # [py]\n",
                            "readonly": false
                        },
                        {
                            "name": "atmosphere_settings",
                            "type": "AtmosphereSettings",
                            "description": "Object that defines the settings of the atmosphere model that is to be created. Note that wind model settings  # [py]\nmay be defined inside this object. A variable of this type is typically assigned by using a factory function from the  # [py]\n:ref:`tudatpy.numerical_simulation.environment_setup.atmosphere` module.  # [py]\n",
                            "readonly": false
                        },
                        {
                            "name": "ephemeris_settings",
                            "type": "EphemerisSettings",
                            "description": "Object that defines the settings of the ephemeris model that is to be created. A variable of this type is typically  # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.ephemeris` module.  # [py]\n",
                            "readonly": false
                        },
                        {
                            "name": "gravity_field_settings",
                            "type": "GravityFieldSettings",
                            "description": "Object that defines the settings of the gravity field model that is to be created. A variable of this type is typically  # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.gravity_field` module.  # [py]\n",
                            "readonly": false
                        },
                        {
                            "name": "rotation_model_settings",
                            "type": "RotationModelSettings",
                            "description": "Object that defines the settings of the rotation model that is to be created. A variable of this type is typically # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.rotation_model` module. # [py]\n",
                            "readonly": false
                        },
                        {
                            "name": "shape_settings",
                            "type": "BodyShapeSettings",
                            "description": "Object that defines the settings of the shape model that is to be created. A variable of this type is typically # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.shape` module. # [py]\n",
                            "readonly": false
                        }
                    ],
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": null,
                    "autoclass": null
                }
            ],
            "functions": [
                {
                    "name": "get_default_body_settings",
                    "short_summary": "Function that retrieves the default settings for the given set of input bodies.",
                    "deprecation_warning": null,
                    "extended_summary": "Function that retrieves the default settings for the given set of input bodies. Default settings are described in\ndetail `here <https://tudat-space.readthedocs.io/en/latest/_src_api/environment_setup/create_bodies/default_settings.html>`_ .\nNote that if a body is provided as input for which default settings do not exist, an exception is thrown. In addition\nto settings for each separate body, this function returns an object that defines the global frame origin and orientation,\n",
                    "parameters": [
                        {
                            "name": "bodies",
                            "type": "list[str]",
                            "description": "List of name of bodies for which default settings are to be retrieved."
                        },
                        {
                            "name": "base_frame_origin",
                            "type": "str",
                            "description": "Base frame origin of the set of bodies that is to be created."
                        },
                        {
                            "name": "base_frame_orientation",
                            "type": "str",
                            "description": "Base frame orientation of the set of bodies that is to be created."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "BodyListSettings",
                        "description": "Object containing the settings for the SystemOfBodies that are to be created"
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_default_body_settings_time_limited",
                    "short_summary": "Function that retrieves the default settings for the given set of input bodies, with a limited valid time interval.",
                    "deprecation_warning": null,
                    "extended_summary": "Same as :ref:`get_default_body_settings`, but with body settings valid over a limited time interval. This makes the\nthe extraction of states from ephemerides more computationally efficient, at the expense of more RAM usage, and a\nconstrained time interval over which the ephemerides are valid. See `this page <https://tudat-space.readthedocs.io/en/latest/_src_api/environment_setup/valid_time_range.html>`_ for more details.\n",
                    "parameters": [
                        {
                            "name": "bodies",
                            "type": "list[str]",
                            "description": "List of name of bodies for which default settings are to be retrieved."
                        },
                        {
                            "name": "initial_time",
                            "type": "float",
                            "description": "Start time from which the environment settings should be created."
                        },
                        {
                            "name": "final_time",
                            "type": "float",
                            "description": "End time up to which the environment settings should be created."
                        },
                        {
                            "name": "base_frame_origin",
                            "type": "str",
                            "description": "Base frame origin of the set of bodies that is to be created."
                        },
                        {
                            "name": "base_frame_orientation",
                            "type": "str",
                            "description": "Base frame orientation of the set of bodies that is to be created."
                        },
                        {
                            "name": "time_step",
                            "type": "float, default = 300.0",
                            "description": "Time step to be used for the tabulated ephemeris."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "BodyListSettings",
                        "description": "Object containing the settings for the SystemOfBodies that are to be created"
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                }
            ],
            "constants": null,
            "modules": [
                "aerodynamic_coefficients",
                "atmosphere",
                "ephemeris",
                "gravity_field",
                "radiation_pressure",
                "rotation_model",
                "shape"
            ],
            "name": "environment_setup",
            "version": null,
            "get_default_body_settings": "\nFunction that retrieves the default settings for the given set of input bodies.\n\nFunction that retrieves the default settings for the given set of input bodies. Default settings are described in\ndetail `here <https://tudat-space.readthedocs.io/en/latest/_src_api/environment_setup/create_bodies/default_settings.html>`_ .\nNote that if a body is provided as input for which default settings do not exist, an exception is thrown. In addition\nto settings for each separate body, this function returns an object that defines the global frame origin and orientation,\n\n\nParameters\n----------\nbodies : list[str]\n    List of name of bodies for which default settings are to be retrieved.\nbase_frame_origin : str\n    Base frame origin of the set of bodies that is to be created.\nbase_frame_orientation : str\n    Base frame orientation of the set of bodies that is to be created.\nReturns\n-------\nBodyListSettings\n    Object containing the settings for the SystemOfBodies that are to be created\n\n\n\n\n\n",
            "get_default_body_settings_time_limited": "\nFunction that retrieves the default settings for the given set of input bodies, with a limited valid time interval.\n\nSame as :ref:`get_default_body_settings`, but with body settings valid over a limited time interval. This makes the\nthe extraction of states from ephemerides more computationally efficient, at the expense of more RAM usage, and a\nconstrained time interval over which the ephemerides are valid. See `this page <https://tudat-space.readthedocs.io/en/latest/_src_api/environment_setup/valid_time_range.html>`_ for more details.\n\n\nParameters\n----------\nbodies : list[str]\n    List of name of bodies for which default settings are to be retrieved.\ninitial_time : float\n    Start time from which the environment settings should be created.\nfinal_time : float\n    End time up to which the environment settings should be created.\nbase_frame_origin : str\n    Base frame origin of the set of bodies that is to be created.\nbase_frame_orientation : str\n    Base frame orientation of the set of bodies that is to be created.\ntime_step : float, default = 300.0\n    Time step to be used for the tabulated ephemeris.\nReturns\n-------\nBodyListSettings\n    Object containing the settings for the SystemOfBodies that are to be created\n\n\n\n\n\n",
            "BodyListSettings": {
                "name": "BodyListSettings",
                "short_summary": "Class for defining settings for the creation of a system of bodies.",
                "deprecation_warning": null,
                "extended_summary": "Class for defining settings for the creation of a system of bodies. This object is typicall created from default settings, and\nthen adapted to the user's specific needs.\n",
                "parameters": null,
                "attributes": [
                    {
                        "name": "frame_origin",
                        "type": "str",
                        "description": "Definition of the global frame origin for the bodies"
                    },
                    {
                        "name": "frame_orientation",
                        "type": "str",
                        "description": "Definition of the global frame orienation for the bodies"
                    }
                ],
                "properties": null,
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "methods": [
                    {
                        "name": "get",
                        "short_summary": "This function extracts a single BodySettings object .",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": [
                            {
                                "name": "body_name",
                                "type": "str",
                                "description": "Name of the body for which settings are to be retrieved\n"
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "autoclass": null,
                "get": "\nThis function extracts a single BodySettings object .\n\n\nParameters\n----------\nbody_name : str\n    Name of the body for which settings are to be retrieved\n\n\n\n\n\n",
                "__docstring__": "\nClass for defining settings for the creation of a system of bodies.\n\nClass for defining settings for the creation of a system of bodies. This object is typicall created from default settings, and\nthen adapted to the user's specific needs.\n\n\nAttributes\n----------\nframe_origin : str\n    Definition of the global frame origin for the bodies\nframe_orientation : str\n    Definition of the global frame orienation for the bodies\n\n\n\n\n"
            },
            "BodySettings": {
                "name": "BodySettings",
                "short_summary": "Class for defining settings for the creation of a single body.",
                "deprecation_warning": null,
                "extended_summary": "Class for defining settings for the creation of a single body, this object is typically stored inside a\n:class:`BodyListSettings`, object.\n",
                "parameters": null,
                "attributes": null,
                "properties": [
                    {
                        "name": "constant_mass",
                        "type": "float",
                        "description": "Mass that gets assigned to the vehicle. Note that this mass does *not* automatically define a gravity field   # [py]\nmodel, but is instead used for the calculation of non-conservative forces only. When creating a body with a gravity field,   # [py]\nleave this entry empty.   # [py]\n",
                        "readonly": false
                    },
                    {
                        "name": "atmosphere_settings",
                        "type": "AtmosphereSettings",
                        "description": "Object that defines the settings of the atmosphere model that is to be created. Note that wind model settings  # [py]\nmay be defined inside this object. A variable of this type is typically assigned by using a factory function from the  # [py]\n:ref:`tudatpy.numerical_simulation.environment_setup.atmosphere` module.  # [py]\n",
                        "readonly": false
                    },
                    {
                        "name": "ephemeris_settings",
                        "type": "EphemerisSettings",
                        "description": "Object that defines the settings of the ephemeris model that is to be created. A variable of this type is typically  # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.ephemeris` module.  # [py]\n",
                        "readonly": false
                    },
                    {
                        "name": "gravity_field_settings",
                        "type": "GravityFieldSettings",
                        "description": "Object that defines the settings of the gravity field model that is to be created. A variable of this type is typically  # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.gravity_field` module.  # [py]\n",
                        "readonly": false
                    },
                    {
                        "name": "rotation_model_settings",
                        "type": "RotationModelSettings",
                        "description": "Object that defines the settings of the rotation model that is to be created. A variable of this type is typically # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.rotation_model` module. # [py]\n",
                        "readonly": false
                    },
                    {
                        "name": "shape_settings",
                        "type": "BodyShapeSettings",
                        "description": "Object that defines the settings of the shape model that is to be created. A variable of this type is typically # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.shape` module. # [py]\n",
                        "readonly": false
                    }
                ],
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "methods": null,
                "autoclass": null,
                "constant_mass": "\nMass that gets assigned to the vehicle. Note that this mass does *not* automatically define a gravity field   # [py]\nmodel, but is instead used for the calculation of non-conservative forces only. When creating a body with a gravity field,   # [py]\nleave this entry empty.   # [py]\n\n\n:type: float\n",
                "atmosphere_settings": "\nObject that defines the settings of the atmosphere model that is to be created. Note that wind model settings  # [py]\nmay be defined inside this object. A variable of this type is typically assigned by using a factory function from the  # [py]\n:ref:`tudatpy.numerical_simulation.environment_setup.atmosphere` module.  # [py]\n\n\n:type: AtmosphereSettings\n",
                "ephemeris_settings": "\nObject that defines the settings of the ephemeris model that is to be created. A variable of this type is typically  # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.ephemeris` module.  # [py]\n\n\n:type: EphemerisSettings\n",
                "gravity_field_settings": "\nObject that defines the settings of the gravity field model that is to be created. A variable of this type is typically  # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.gravity_field` module.  # [py]\n\n\n:type: GravityFieldSettings\n",
                "rotation_model_settings": "\nObject that defines the settings of the rotation model that is to be created. A variable of this type is typically # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.rotation_model` module. # [py]\n\n\n:type: RotationModelSettings\n",
                "shape_settings": "\nObject that defines the settings of the shape model that is to be created. A variable of this type is typically # [py]\nassigned by using a factory function from the :ref:`tudatpy.numerical_simulation.environment_setup.shape` module. # [py]\n\n\n:type: BodyShapeSettings\n",
                "__docstring__": "\nClass for defining settings for the creation of a single body.\n\nClass for defining settings for the creation of a single body, this object is typically stored inside a\n:class:`BodyListSettings`, object.\n\n\n\n\n\n"
            },
            "aerodynamic_coefficients": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/environment_setup",
                "file": "aerodynamic_coefficients.yaml",
                "_implicit_name": "aerodynamic_coefficients",
                "config": null,
                "summary": null,
                "extended_summary": null,
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": null,
                "classes": [
                    {
                        "name": "AerodynamicCoefficientSettings",
                        "short_summary": "Base class for providing settings for aerodynamic interface model.",
                        "deprecation_warning": null,
                        "extended_summary": "Functional (base) class for settings of aerodynamic interface models that require no\ninformation in addition to their type.\nAerodynamic interface model settings requiring additional information must be defined using an object derived from this class.\n",
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "ConstantAerodynamicCoefficientSettings",
                        "short_summary": "Class for defining model settings from constant aerodynamic coefficients.",
                        "deprecation_warning": null,
                        "extended_summary": "`AerodynamicCoefficientSettings` derived class for aerodynamic interface model settings using only constant aerodynamic coefficients.",
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "constant",
                        "short_summary": "Factory function for creating aerodynamic interface model settings entirely from constant coefficients.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining aerodynamic interface model entirely from constant aerodynamic coefficients,\ni.e. coefficients are not a function of any independent variables.\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `ConstantAerodynamicCoefficientSettings` object.\n",
                        "parameters": [
                            {
                                "name": "reference_area",
                                "type": "float",
                                "description": "Reference area with which aerodynamic forces and moments are non-dimensionalized."
                            },
                            {
                                "name": "constant_force_coefficient",
                                "type": "ndarray",
                                "description": "Constant force coefficients."
                            },
                            {
                                "name": "are_coefficients_in_aerodynamic_frame",
                                "type": "bool, default = true",
                                "description": "Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame\n(drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).\n"
                            },
                            {
                                "name": "are_coefficients_in_negative_axis_direction",
                                "type": "bool, default = true",
                                "description": "Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or\naerodynamic frame (see arg are_coefficients_in_aerodynamic_frame).  # [py]\nNote that for drag, side and lift force, the coefficients are typically defined in negative direction.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ConstantAerodynamicCoefficientSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom",
                        "short_summary": "Factory function for creating aerodynamic interface model settings from custom coefficients.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining aerodynamic interface model via a custom force coefficient function\n(function of independent variable).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `CustomAerodynamicCoefficientSettings` object.\n",
                        "parameters": [
                            {
                                "name": "force_coefficient_function",
                                "type": "callable[[list[float]], numpy.ndarray[numpy.float64[3, 1]]]",
                                "description": "Function that is defining the aerodynamic coefficients as function of an independent variable (see arg independent_variable_names). # [py]\n"
                            },
                            {
                                "name": "reference_area",
                                "type": "float",
                                "description": "Reference area with which aerodynamic forces and moments are non-dimensionalized."
                            },
                            {
                                "name": "independent_variable_name",
                                "type": "list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables]",
                                "description": "Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined."
                            },
                            {
                                "name": "are_coefficients_in_aerodynamic_frame",
                                "type": "bool, default = true",
                                "description": "Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame\n(drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).\n"
                            },
                            {
                                "name": "are_coefficients_in_negative_axis_direction",
                                "type": "bool, default = true",
                                "description": "Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or\naerodynamic frame (see arg are_coefficients_in_aerodynamic_frame). # [py]\nNote that for drag, side and lift force, the coefficients are typically defined in negative direction.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CustomAerodynamicCoefficientSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "tabulated_one_dimensional",
                        "short_summary": "Factory function for creating aerodynamic interface model settings from user-defined, 1-d tabulated coefficients.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining aerodynamic interface model via user-defined, 1-dimensional, tabulated aerodynamic force and moment coefficients\n(tabulated w.r.t. independent variable).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `TabulatedAerodynamicCoefficientSettings` object (via `TabulatedAerodynamicCoefficientSettingsBase` class).\n",
                        "parameters": [
                            {
                                "name": "independent_variables",
                                "type": "list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables]",
                                "description": "Values of indepependent variables at which the coefficients in the input multi vector are defined (size 1)"
                            },
                            {
                                "name": "force_coefficients",
                                "type": "list[numpy.ndarray[numpy.float64[3, 1]]]",
                                "description": "Values of force coefficients at independent variables defined by independent_variables. # [py]\n"
                            },
                            {
                                "name": "moment_coefficients",
                                "type": "list[numpy.ndarray[numpy.float64[3, 1]]]",
                                "description": "Values of moment coefficients at independent variables defined by independent_variables. # [py]\n"
                            },
                            {
                                "name": "reference_area",
                                "type": "float",
                                "description": "Reference area with which aerodynamic forces and moments are non-dimensionalized."
                            },
                            {
                                "name": "reference_length",
                                "type": "float",
                                "description": "Reference length with which aerodynamic moments about x- and z- axes are non-dimensionalized."
                            },
                            {
                                "name": "lateral_reference_length",
                                "type": "float",
                                "description": "Reference length with which aerodynamic moment about y-axis is non-dimensionalized."
                            },
                            {
                                "name": "moment_reference_point",
                                "type": "float",
                                "description": "Point w.r.t. aerodynamic moment is calculated."
                            },
                            {
                                "name": "independent_variable_name",
                                "type": "list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables]",
                                "description": "Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined."
                            },
                            {
                                "name": "are_coefficients_in_aerodynamic_frame",
                                "type": "bool, default = true",
                                "description": "Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame\n(drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).\n"
                            },
                            {
                                "name": "are_coefficients_in_negative_axis_direction",
                                "type": "bool, default = true",
                                "description": "Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or\naerodynamic frame (see arg areCoefficientsInAerodynamicFrame).\nNote that for drag, side and lift force, the coefficients are typically defined in negative direction.\n"
                            },
                            {
                                "name": "interpolator_settings",
                                "type": "math.interpolators.InterpolatorSettings",
                                "description": "Interpolator settings object, # [py]\nwhere the conditions for interpolation of tabulated inputs are saved.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "TabulatedAerodynamicCoefficientSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "tabulated_force_only",
                        "short_summary": "Factory function for creating aerodynamic interface model settings from user-defined, 1-d tabulated force coefficients.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining aerodynamic interface model via user-defined, 1-dimensional, tabulated aerodynamic force coefficients\n(tabulated w.r.t. independent variable).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `TabulatedAerodynamicCoefficientSettings` object (via `TabulatedAerodynamicCoefficientSettingsBase` class).\n",
                        "parameters": [
                            {
                                "name": "independent_variables",
                                "type": "list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables]",
                                "description": "Values of indepependent variables at which the coefficients in the input multi vector are defined (size 1)"
                            },
                            {
                                "name": "force_coefficients",
                                "type": "list[numpy.ndarray[numpy.float64[3, 1]]]",
                                "description": "Values of force coefficients at independent variables defined by independent_variables. # [py]\n"
                            },
                            {
                                "name": "reference_area",
                                "type": "float",
                                "description": "Reference area with which aerodynamic forces and moments are non-dimensionalized."
                            },
                            {
                                "name": "independent_variable_name",
                                "type": "list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables]",
                                "description": "Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined."
                            },
                            {
                                "name": "are_coefficients_in_aerodynamic_frame",
                                "type": "bool, default = true",
                                "description": "Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame\n(drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).\n"
                            },
                            {
                                "name": "are_coefficients_in_negative_axis_direction",
                                "type": "bool, default = true",
                                "description": "Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or\naerodynamic frame (see arg areCoefficientsInAerodynamicFrame).\nNote that for drag, side and lift force, the coefficients are typically defined in negative direction.\n"
                            },
                            {
                                "name": "interpolator_settings",
                                "type": "math.interpolators.InterpolatorSettings",
                                "description": "Interpolator settings object, # [py]\nwhere the conditions for interpolation of tabulated inputs are saved.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "TabulatedAerodynamicCoefficientSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled_by_constant",
                        "short_summary": "Factory function for creating aerodynamic interface model settings by applying one constant scaling factor/value to all coefficients of an existing model settings object.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by one constant factor or value.\nVia the `is_scaling_absolute` # [py]\nboolean, the user can apply a constant scaling factor or an absolute value to the resulting force and moment coefficients (for instance for an uncertainty analysis).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `ScaledAerodynamicCoefficientInterfaceSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_coefficient_settings",
                                "type": "AerodynamicCoefficientSettings",
                                "description": "Existing aerodynamic interface model settings object that is used as the base for the scaled settings object."
                            },
                            {
                                "name": "force_scaling_constant",
                                "type": "float",
                                "description": "Constant scaling factor to be applied to all aerodynamic force coefficients."
                            },
                            {
                                "name": "moment_scaling_constant",
                                "type": "float",
                                "description": "Constant scaling factor to be applied to all aerodynamic moment coefficients."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool",
                                "description": "Boolean indicating whether aerodynamic coefficient scaling is absolute.\nSetting this boolean to true will add the scaling value to the base value,\ninstead of the default behaviour of multiplying the base value by the scaling factor.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ScaledAerodynamicCoefficientInterfaceSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled_by_vector",
                        "short_summary": "Factory function for creating aerodynamic interface model settings by applying constant scaling factors/values to the coefficients of an existing model settings object.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by constant factors or values.\nVia the `is_scaling_absolute` # [py]\nboolean, the user can apply one constant scaling factor or an absolute value to each resulting force and moment coefficient (for instance for an uncertainty analysis).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `ScaledAerodynamicCoefficientInterfaceSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_coefficient_settings",
                                "type": "AerodynamicCoefficientSettings",
                                "description": "Existing aerodynamic interface model settings object that is used as the base for the scaled settings object."
                            },
                            {
                                "name": "force_scaling_vector",
                                "type": "numpy.ndarray[numpy.float64[3, 1]]",
                                "description": "Constant scaling factors to be applied to each aerodynamic force coefficient."
                            },
                            {
                                "name": "moment_scaling_vector",
                                "type": "numpy.ndarray[numpy.float64[3, 1]]",
                                "description": "Constant scaling factors to be applied to each aerodynamic moment coefficient."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool",
                                "description": "Boolean indicating whether aerodynamic coefficient scaling is absolute.\nSetting this boolean to true will add the scaling value to the base value,\ninstead of the default behaviour of multiplying the base value by the scaling factor.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ScaledAerodynamicCoefficientInterfaceSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled_by_vector_function",
                        "short_summary": "Factory function for creating aerodynamic interface model settings by applying custom scaling factors/values to the coefficients of an existing model settings object.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by custom factors or values.\nVia the `is_scaling_absolute` # [py]\nboolean, the user can apply the scaling factors or absolute values to each resulting force and moment coefficient (for instance for an uncertainty analysis).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `ScaledAerodynamicCoefficientInterfaceSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_coefficient_settings",
                                "type": "AerodynamicCoefficientSettings",
                                "description": "Existing aerodynamic interface model settings object that is used as the base for the scaled settings object."
                            },
                            {
                                "name": "force_scaling_vector_function",
                                "type": "callable[[float], numpy.ndarray[numpy.float64[3, 1]]]",
                                "description": "Custom scaling factors to be applied to each aerodynamic force coefficient."
                            },
                            {
                                "name": "moment_scaling_vector_function",
                                "type": "callable[[float], numpy.ndarray[numpy.float64[3, 1]]]",
                                "description": "Custom scaling factors to be applied to each aerodynamic moment coefficient."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool",
                                "description": "Boolean indicating whether aerodynamic coefficient scaling is absolute.\nSetting this boolean to true will add the scaling value to the base value,\ninstead of the default behaviour of multiplying the base value by the scaling factor.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ScaledAerodynamicCoefficientInterfaceSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "aerodynamic_coefficients",
                "version": null,
                "constant": "\nFactory function for creating aerodynamic interface model settings entirely from constant coefficients.\n\nFactory function for settings object, defining aerodynamic interface model entirely from constant aerodynamic coefficients,\ni.e. coefficients are not a function of any independent variables.\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `ConstantAerodynamicCoefficientSettings` object.\n\n\nParameters\n----------\nreference_area : float\n    Reference area with which aerodynamic forces and moments are non-dimensionalized.\nconstant_force_coefficient : ndarray\n    Constant force coefficients.\nare_coefficients_in_aerodynamic_frame : bool, default = true\n    Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame\n    (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).\n\nare_coefficients_in_negative_axis_direction : bool, default = true\n    Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or\n    aerodynamic frame (see arg are_coefficients_in_aerodynamic_frame).  # [py]\n    Note that for drag, side and lift force, the coefficients are typically defined in negative direction.\n\nReturns\n-------\nConstantAerodynamicCoefficientSettings\n    None\n\n\n\n\n\n",
                "custom": "\nFactory function for creating aerodynamic interface model settings from custom coefficients.\n\nFactory function for settings object, defining aerodynamic interface model via a custom force coefficient function\n(function of independent variable).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `CustomAerodynamicCoefficientSettings` object.\n\n\nParameters\n----------\nforce_coefficient_function : callable[[list[float]], numpy.ndarray[numpy.float64[3, 1]]]\n    Function that is defining the aerodynamic coefficients as function of an independent variable (see arg independent_variable_names). # [py]\n\nreference_area : float\n    Reference area with which aerodynamic forces and moments are non-dimensionalized.\nindependent_variable_name : list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables]\n    Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined.\nare_coefficients_in_aerodynamic_frame : bool, default = true\n    Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame\n    (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).\n\nare_coefficients_in_negative_axis_direction : bool, default = true\n    Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or\n    aerodynamic frame (see arg are_coefficients_in_aerodynamic_frame). # [py]\n    Note that for drag, side and lift force, the coefficients are typically defined in negative direction.\n\nReturns\n-------\nCustomAerodynamicCoefficientSettings\n    None\n\n\n\n\n\n",
                "tabulated_one_dimensional": "\nFactory function for creating aerodynamic interface model settings from user-defined, 1-d tabulated coefficients.\n\nFactory function for settings object, defining aerodynamic interface model via user-defined, 1-dimensional, tabulated aerodynamic force and moment coefficients\n(tabulated w.r.t. independent variable).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `TabulatedAerodynamicCoefficientSettings` object (via `TabulatedAerodynamicCoefficientSettingsBase` class).\n\n\nParameters\n----------\nindependent_variables : list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables]\n    Values of indepependent variables at which the coefficients in the input multi vector are defined (size 1)\nforce_coefficients : list[numpy.ndarray[numpy.float64[3, 1]]]\n    Values of force coefficients at independent variables defined by independent_variables. # [py]\n\nmoment_coefficients : list[numpy.ndarray[numpy.float64[3, 1]]]\n    Values of moment coefficients at independent variables defined by independent_variables. # [py]\n\nreference_area : float\n    Reference area with which aerodynamic forces and moments are non-dimensionalized.\nreference_length : float\n    Reference length with which aerodynamic moments about x- and z- axes are non-dimensionalized.\nlateral_reference_length : float\n    Reference length with which aerodynamic moment about y-axis is non-dimensionalized.\nmoment_reference_point : float\n    Point w.r.t. aerodynamic moment is calculated.\nindependent_variable_name : list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables]\n    Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined.\nare_coefficients_in_aerodynamic_frame : bool, default = true\n    Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame\n    (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).\n\nare_coefficients_in_negative_axis_direction : bool, default = true\n    Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or\n    aerodynamic frame (see arg areCoefficientsInAerodynamicFrame).\n    Note that for drag, side and lift force, the coefficients are typically defined in negative direction.\n\ninterpolator_settings : math.interpolators.InterpolatorSettings\n    Interpolator settings object, # [py]\n    where the conditions for interpolation of tabulated inputs are saved.\n\nReturns\n-------\nTabulatedAerodynamicCoefficientSettings\n    None\n\n\n\n\n\n",
                "tabulated_force_only": "\nFactory function for creating aerodynamic interface model settings from user-defined, 1-d tabulated force coefficients.\n\nFactory function for settings object, defining aerodynamic interface model via user-defined, 1-dimensional, tabulated aerodynamic force coefficients\n(tabulated w.r.t. independent variable).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `TabulatedAerodynamicCoefficientSettings` object (via `TabulatedAerodynamicCoefficientSettingsBase` class).\n\n\nParameters\n----------\nindependent_variables : list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables]\n    Values of indepependent variables at which the coefficients in the input multi vector are defined (size 1)\nforce_coefficients : list[numpy.ndarray[numpy.float64[3, 1]]]\n    Values of force coefficients at independent variables defined by independent_variables. # [py]\n\nreference_area : float\n    Reference area with which aerodynamic forces and moments are non-dimensionalized.\nindependent_variable_name : list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables]\n    Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined.\nare_coefficients_in_aerodynamic_frame : bool, default = true\n    Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame\n    (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).\n\nare_coefficients_in_negative_axis_direction : bool, default = true\n    Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or\n    aerodynamic frame (see arg areCoefficientsInAerodynamicFrame).\n    Note that for drag, side and lift force, the coefficients are typically defined in negative direction.\n\ninterpolator_settings : math.interpolators.InterpolatorSettings\n    Interpolator settings object, # [py]\n    where the conditions for interpolation of tabulated inputs are saved.\n\nReturns\n-------\nTabulatedAerodynamicCoefficientSettings\n    None\n\n\n\n\n\n",
                "scaled_by_constant": "\nFactory function for creating aerodynamic interface model settings by applying one constant scaling factor/value to all coefficients of an existing model settings object.\n\nFactory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by one constant factor or value.\nVia the `is_scaling_absolute` # [py]\nboolean, the user can apply a constant scaling factor or an absolute value to the resulting force and moment coefficients (for instance for an uncertainty analysis).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `ScaledAerodynamicCoefficientInterfaceSettings` object.\n\n\nParameters\n----------\nunscaled_coefficient_settings : AerodynamicCoefficientSettings\n    Existing aerodynamic interface model settings object that is used as the base for the scaled settings object.\nforce_scaling_constant : float\n    Constant scaling factor to be applied to all aerodynamic force coefficients.\nmoment_scaling_constant : float\n    Constant scaling factor to be applied to all aerodynamic moment coefficients.\nis_scaling_absolute : bool\n    Boolean indicating whether aerodynamic coefficient scaling is absolute.\n    Setting this boolean to true will add the scaling value to the base value,\n    instead of the default behaviour of multiplying the base value by the scaling factor.\n\nReturns\n-------\nScaledAerodynamicCoefficientInterfaceSettings\n    None\n\n\n\n\n\n",
                "scaled_by_vector": "\nFactory function for creating aerodynamic interface model settings by applying constant scaling factors/values to the coefficients of an existing model settings object.\n\nFactory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by constant factors or values.\nVia the `is_scaling_absolute` # [py]\nboolean, the user can apply one constant scaling factor or an absolute value to each resulting force and moment coefficient (for instance for an uncertainty analysis).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `ScaledAerodynamicCoefficientInterfaceSettings` object.\n\n\nParameters\n----------\nunscaled_coefficient_settings : AerodynamicCoefficientSettings\n    Existing aerodynamic interface model settings object that is used as the base for the scaled settings object.\nforce_scaling_vector : numpy.ndarray[numpy.float64[3, 1]]\n    Constant scaling factors to be applied to each aerodynamic force coefficient.\nmoment_scaling_vector : numpy.ndarray[numpy.float64[3, 1]]\n    Constant scaling factors to be applied to each aerodynamic moment coefficient.\nis_scaling_absolute : bool\n    Boolean indicating whether aerodynamic coefficient scaling is absolute.\n    Setting this boolean to true will add the scaling value to the base value,\n    instead of the default behaviour of multiplying the base value by the scaling factor.\n\nReturns\n-------\nScaledAerodynamicCoefficientInterfaceSettings\n    None\n\n\n\n\n\n",
                "scaled_by_vector_function": "\nFactory function for creating aerodynamic interface model settings by applying custom scaling factors/values to the coefficients of an existing model settings object.\n\nFactory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by custom factors or values.\nVia the `is_scaling_absolute` # [py]\nboolean, the user can apply the scaling factors or absolute values to each resulting force and moment coefficient (for instance for an uncertainty analysis).\nThis function creates an instance of an `AerodynamicCoefficientSettings` derived `ScaledAerodynamicCoefficientInterfaceSettings` object.\n\n\nParameters\n----------\nunscaled_coefficient_settings : AerodynamicCoefficientSettings\n    Existing aerodynamic interface model settings object that is used as the base for the scaled settings object.\nforce_scaling_vector_function : callable[[float], numpy.ndarray[numpy.float64[3, 1]]]\n    Custom scaling factors to be applied to each aerodynamic force coefficient.\nmoment_scaling_vector_function : callable[[float], numpy.ndarray[numpy.float64[3, 1]]]\n    Custom scaling factors to be applied to each aerodynamic moment coefficient.\nis_scaling_absolute : bool\n    Boolean indicating whether aerodynamic coefficient scaling is absolute.\n    Setting this boolean to true will add the scaling value to the base value,\n    instead of the default behaviour of multiplying the base value by the scaling factor.\n\nReturns\n-------\nScaledAerodynamicCoefficientInterfaceSettings\n    None\n\n\n\n\n\n",
                "AerodynamicCoefficientSettings": {
                    "__docstring__": "\nBase class for providing settings for aerodynamic interface model.\n\nFunctional (base) class for settings of aerodynamic interface models that require no\ninformation in addition to their type.\nAerodynamic interface model settings requiring additional information must be defined using an object derived from this class.\n\n\n\n\n\n"
                },
                "ConstantAerodynamicCoefficientSettings": {
                    "__docstring__": "\nClass for defining model settings from constant aerodynamic coefficients.\n\n`AerodynamicCoefficientSettings` derived class for aerodynamic interface model settings using only constant aerodynamic coefficients.\n\n\n\n\n"
                }
            },
            "atmosphere": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/environment_setup",
                "file": "atmosphere.yaml",
                "_implicit_name": "atmosphere",
                "config": null,
                "summary": null,
                "extended_summary": "This module consists of factory functions for setting up the\natmosphere models of celestial bodies in an environment.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": null,
                "classes": [
                    {
                        "name": "WindModelSettings",
                        "short_summary": "Class for providing settings for wind model.",
                        "deprecation_warning": null,
                        "extended_summary": "Functional (base) class for settings of wind models that require no information in addition to their type.\nWind model classes requiring additional information must be created using an object derived from this class.\n",
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "AtmosphereSettings",
                        "short_summary": "Base class for providing settings for atmosphere model.",
                        "deprecation_warning": null,
                        "extended_summary": "Functional (base) class for settings of atmosphere models that require no information in addition to their type.\nAtmosphere model classes requiring additional information must be created using an object derived from this class.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "wind_settings",
                                "type": "WindModelSettings",
                                "description": "Wind model settings for the atmosphere model settings object."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "ExponentialAtmosphereSettings",
                        "short_summary": "Class for providing settings for exponential atmosphere model.",
                        "deprecation_warning": null,
                        "extended_summary": "`AtmosphereSettings` derived class for a defining the settings of an exponential atmosphere model.",
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "constant_wind_model",
                        "short_summary": "Factory function for creating wind model settings with constant wind velocity.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining wind model entirely from constant wind velocity in a given reference frame.\nThis function creates an instance of an `WindModelSettings` derived `ConstantWindModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "wind_velocity",
                                "type": "numpy.ndarray[numpy.float64[3, 1]]",
                                "description": "Constant wind velocity in the specified reference frame.\n"
                            },
                            {
                                "name": "associated_reference_frame",
                                "type": "numerical_simulation.environment.AerodynamicsReferenceFrames, default = AerodynamicsReferenceFrames.vertical_frame",
                                "description": "Reference frame in which constant wind velocity is defined.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ConstantWindModelSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_wind_model",
                        "short_summary": "Factory function for creating wind model settings with custom wind velocity.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining wind model entirely from custom wind velocity function in a given reference frame.\nThe custom wind velocity has to be given as a function of altitude, longitude, latitude and time.\nThis function creates an instance of an `WindModelSettings` derived `CustomWindModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "wind_velocity",
                                "type": "callable[[float, float, float, float], numpy.ndarray[numpy.float64[3, 1]]]",
                                "description": "Custom wind velocity function (w.r.t. altitude, longitude, latitude and time) in the specified reference frame.\n"
                            },
                            {
                                "name": "associated_reference_frame",
                                "type": "numerical_simulation.environment.AerodynamicsReferenceFrames, default = AerodynamicsReferenceFrames.vertical_frame",
                                "description": "Reference frame in which constant wind velocity is defined.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CustomWindModelSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "exponential_predefined",
                        "short_summary": "Factory function for creating atmospheric model settings from pre-defined exponential model.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining atmosphere model from pre-defined exponential model.\nModel settings available for bodies Earth and Mars.\nThis function creates an instance of an `AtmosphereSettings` derived `ExponentialAtmosphereSettings` object.\n",
                        "parameters": [
                            {
                                "name": "body_name",
                                "type": "str",
                                "description": "Body for which pre-defined model settings are to be loaded. Available bodies \"Earth\", \"Mars\".\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ExponentialAtmosphereSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "exponential",
                        "short_summary": "Factory function for creating atmospheric model settings from fully parametrized exponential model.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining exponential atmosphere model from fully parametrized model.\nThis means that in addition to scale height and ground-level air density parameters the user can specify a constant temperature\nand even non-standard values for gas constant and speficic heats ratio.\nThis function creates an instance of an `AtmosphereSettings` derived `ExponentialAtmosphereSettings` object.\n",
                        "parameters": [
                            {
                                "name": "scale_height",
                                "type": "float",
                                "description": "Scale height for density profile of atmosphere."
                            },
                            {
                                "name": "surface_density",
                                "type": "float",
                                "description": "Atmospheric density at ground level."
                            },
                            {
                                "name": "constant_temperature",
                                "type": "float, default = 288.15",
                                "description": "Constant atmospheric temperature."
                            },
                            {
                                "name": "specific_gas_constant",
                                "type": "float, default = constants.SPECIFIC_GAS_CONSTANT_AIR",
                                "description": "Specific gas constant for (constant) atmospheric chemical composition."
                            },
                            {
                                "name": "ratio_specific_heats",
                                "type": "float, default = 1.4",
                                "description": "Ratio of specific heats for (constant) atmospheric chemical composition."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ExponentialAtmosphereSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "nrlmsise00",
                        "short_summary": "Factory function for creating NRLMSISE-00 atmospheric model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining atmosphere model in accordance to NRLMSISE-00 atmospheric model.\nNote that NRLMSISE-00 is a global reference model for Earth's atmosphere.\nThis function creates an instance of an `AtmosphereSettings` object.\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "AtmosphereSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_constant_temperature",
                        "short_summary": "Factory function for creating atmospheric model settings from custom density profile.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining constant temperature atmosphere model from custom density profile.\nThe user is specifying the density profile as a function of altitude.\nThis function creates an instance of an `AtmosphereSettings` derived `CustomConstantTemperatureAtmosphereSettings` object.\n",
                        "parameters": [
                            {
                                "name": "density_function",
                                "type": "callable[[float], float]",
                                "description": "Function to retrieve the density at the current altitude.\n"
                            },
                            {
                                "name": "constant_temperature",
                                "type": "float",
                                "description": "Constant atmospheric temperature."
                            },
                            {
                                "name": "specific_gas_constant",
                                "type": "float, default = 287.0",
                                "description": "Specific gas constant for (constant) atmospheric chemical composition."
                            },
                            {
                                "name": "ratio_specific_heats",
                                "type": "float, default = 1.4",
                                "description": "Ratio of specific heats for (constant) atmospheric chemical composition."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CustomConstantTemperatureAtmosphereSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_four_dimensional_constant_temperature",
                        "short_summary": "Factory function for creating atmospheric model settings from custom density profile.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining constant temperature atmosphere model from custom density profile.\nThe user is specifying the density profile as a function of altitude, longitude, latitude and time.\nThis function creates an instance of an `AtmosphereSettings` derived `CustomConstantTemperatureAtmosphereSettings` object.\n",
                        "parameters": [
                            {
                                "name": "density_function",
                                "type": "callable[[float, float, float, float], float]",
                                "description": "Function to retrieve the density at the current altitude, longitude, latitude and time.\n"
                            },
                            {
                                "name": "constant_temperature",
                                "type": "float",
                                "description": "Constant atmospheric temperature."
                            },
                            {
                                "name": "specific_gas_constant",
                                "type": "float, default = 287.0",
                                "description": "Specific gas constant for (constant) atmospheric chemical composition."
                            },
                            {
                                "name": "ratio_specific_heats",
                                "type": "float, default = 1.4",
                                "description": "Ratio of specific heats for (constant) atmospheric chemical composition."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CustomConstantTemperatureAtmosphereSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled_by_function",
                        "short_summary": "Factory function for creating scaled atmospheric model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining atmospheric model based on scaling an existing atmospheric settings object.\nThe user can apply custom scaling factors (or absolute values) to the air densities of the existing model settings (for instance for an uncertainty analysis).\nThis function creates an instance of an `AtmosphereSettings` derived `ScaledAtmosphereSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_atmosphere_settings",
                                "type": "AtmosphereSettings",
                                "description": "Sets base settings of atmosphere model to be scaled."
                            },
                            {
                                "name": "density_scaling_function",
                                "type": "float",
                                "description": "Specifies air density scaling factors as a function of time."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool, default=false",
                                "description": "Boolean indicating whether density scaling is absolute. Setting this boolean to true will add the scaling value to the basline density, instead of the default behaviour of multiplying the baseline density by the scaling value.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ScaledAtmosphereSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled_by_constant",
                        "short_summary": "Factory function for creating scaled atmospheric model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining atmospheric model based on an scaling of an existing atmospheric settings object.\nThe user can apply a scaling factor (or an absolute value) to the air densities of the existing model settings (for instance for an uncertainty analysis).\nThis function creates an instance of an `AtmosphereSettings` derived `ScaledAtmosphereSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_atmosphere_settings",
                                "type": "AtmosphereSettings",
                                "description": "Sets base settings of atmosphere model to be scaled."
                            },
                            {
                                "name": "density_scaling",
                                "type": "float",
                                "description": "Constant scaling factor to be applied to the entire air density profile."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool, default=false",
                                "description": "Boolean indicating whether density scaling is absolute. Setting this boolean to true will add the scaling value to the basline density, instead of the default behaviour of multiplying the baseline density by the scaling value.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ScaledAtmosphereSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "atmosphere",
                "version": null,
                "constant_wind_model": "\nFactory function for creating wind model settings with constant wind velocity.\n\nFactory function for settings object, defining wind model entirely from constant wind velocity in a given reference frame.\nThis function creates an instance of an `WindModelSettings` derived `ConstantWindModelSettings` object.\n\n\nParameters\n----------\nwind_velocity : numpy.ndarray[numpy.float64[3, 1]]\n    Constant wind velocity in the specified reference frame.\n\nassociated_reference_frame : numerical_simulation.environment.AerodynamicsReferenceFrames, default = AerodynamicsReferenceFrames.vertical_frame\n    Reference frame in which constant wind velocity is defined.\n\nReturns\n-------\nConstantWindModelSettings\n    None\n\n\n\n\n\n",
                "custom_wind_model": "\nFactory function for creating wind model settings with custom wind velocity.\n\nFactory function for settings object, defining wind model entirely from custom wind velocity function in a given reference frame.\nThe custom wind velocity has to be given as a function of altitude, longitude, latitude and time.\nThis function creates an instance of an `WindModelSettings` derived `CustomWindModelSettings` object.\n\n\nParameters\n----------\nwind_velocity : callable[[float, float, float, float], numpy.ndarray[numpy.float64[3, 1]]]\n    Custom wind velocity function (w.r.t. altitude, longitude, latitude and time) in the specified reference frame.\n\nassociated_reference_frame : numerical_simulation.environment.AerodynamicsReferenceFrames, default = AerodynamicsReferenceFrames.vertical_frame\n    Reference frame in which constant wind velocity is defined.\n\nReturns\n-------\nCustomWindModelSettings\n    None\n\n\n\n\n\n",
                "exponential_predefined": "\nFactory function for creating atmospheric model settings from pre-defined exponential model.\n\nFactory function for settings object, defining atmosphere model from pre-defined exponential model.\nModel settings available for bodies Earth and Mars.\nThis function creates an instance of an `AtmosphereSettings` derived `ExponentialAtmosphereSettings` object.\n\n\nParameters\n----------\nbody_name : str\n    Body for which pre-defined model settings are to be loaded. Available bodies \"Earth\", \"Mars\".\n\nReturns\n-------\nExponentialAtmosphereSettings\n    None\n\n\n\n\n\n",
                "exponential": "\nFactory function for creating atmospheric model settings from fully parametrized exponential model.\n\nFactory function for settings object, defining exponential atmosphere model from fully parametrized model.\nThis means that in addition to scale height and ground-level air density parameters the user can specify a constant temperature\nand even non-standard values for gas constant and speficic heats ratio.\nThis function creates an instance of an `AtmosphereSettings` derived `ExponentialAtmosphereSettings` object.\n\n\nParameters\n----------\nscale_height : float\n    Scale height for density profile of atmosphere.\nsurface_density : float\n    Atmospheric density at ground level.\nconstant_temperature : float, default = 288.15\n    Constant atmospheric temperature.\nspecific_gas_constant : float, default = constants.SPECIFIC_GAS_CONSTANT_AIR\n    Specific gas constant for (constant) atmospheric chemical composition.\nratio_specific_heats : float, default = 1.4\n    Ratio of specific heats for (constant) atmospheric chemical composition.\nReturns\n-------\nExponentialAtmosphereSettings\n    None\n\n\n\n\n\n",
                "nrlmsise00": "\nFactory function for creating NRLMSISE-00 atmospheric model settings.\n\nFactory function for settings object, defining atmosphere model in accordance to NRLMSISE-00 atmospheric model.\nNote that NRLMSISE-00 is a global reference model for Earth's atmosphere.\nThis function creates an instance of an `AtmosphereSettings` object.\n\nReturns\n-------\nAtmosphereSettings\n    None\n\n\n\n\n\n",
                "custom_constant_temperature": "\nFactory function for creating atmospheric model settings from custom density profile.\n\nFactory function for settings object, defining constant temperature atmosphere model from custom density profile.\nThe user is specifying the density profile as a function of altitude.\nThis function creates an instance of an `AtmosphereSettings` derived `CustomConstantTemperatureAtmosphereSettings` object.\n\n\nParameters\n----------\ndensity_function : callable[[float], float]\n    Function to retrieve the density at the current altitude.\n\nconstant_temperature : float\n    Constant atmospheric temperature.\nspecific_gas_constant : float, default = 287.0\n    Specific gas constant for (constant) atmospheric chemical composition.\nratio_specific_heats : float, default = 1.4\n    Ratio of specific heats for (constant) atmospheric chemical composition.\nReturns\n-------\nCustomConstantTemperatureAtmosphereSettings\n    None\n\n\n\n\n\n",
                "custom_four_dimensional_constant_temperature": "\nFactory function for creating atmospheric model settings from custom density profile.\n\nFactory function for settings object, defining constant temperature atmosphere model from custom density profile.\nThe user is specifying the density profile as a function of altitude, longitude, latitude and time.\nThis function creates an instance of an `AtmosphereSettings` derived `CustomConstantTemperatureAtmosphereSettings` object.\n\n\nParameters\n----------\ndensity_function : callable[[float, float, float, float], float]\n    Function to retrieve the density at the current altitude, longitude, latitude and time.\n\nconstant_temperature : float\n    Constant atmospheric temperature.\nspecific_gas_constant : float, default = 287.0\n    Specific gas constant for (constant) atmospheric chemical composition.\nratio_specific_heats : float, default = 1.4\n    Ratio of specific heats for (constant) atmospheric chemical composition.\nReturns\n-------\nCustomConstantTemperatureAtmosphereSettings\n    None\n\n\n\n\n\n",
                "scaled_by_function": "\nFactory function for creating scaled atmospheric model settings.\n\nFactory function for settings object, defining atmospheric model based on scaling an existing atmospheric settings object.\nThe user can apply custom scaling factors (or absolute values) to the air densities of the existing model settings (for instance for an uncertainty analysis).\nThis function creates an instance of an `AtmosphereSettings` derived `ScaledAtmosphereSettings` object.\n\n\nParameters\n----------\nunscaled_atmosphere_settings : AtmosphereSettings\n    Sets base settings of atmosphere model to be scaled.\ndensity_scaling_function : float\n    Specifies air density scaling factors as a function of time.\nis_scaling_absolute : bool, default=false\n    Boolean indicating whether density scaling is absolute. Setting this boolean to true will add the scaling value to the basline density, instead of the default behaviour of multiplying the baseline density by the scaling value.\n\nReturns\n-------\nScaledAtmosphereSettings\n    None\n\n\n\n\n\n",
                "scaled_by_constant": "\nFactory function for creating scaled atmospheric model settings.\n\nFactory function for settings object, defining atmospheric model based on an scaling of an existing atmospheric settings object.\nThe user can apply a scaling factor (or an absolute value) to the air densities of the existing model settings (for instance for an uncertainty analysis).\nThis function creates an instance of an `AtmosphereSettings` derived `ScaledAtmosphereSettings` object.\n\n\nParameters\n----------\nunscaled_atmosphere_settings : AtmosphereSettings\n    Sets base settings of atmosphere model to be scaled.\ndensity_scaling : float\n    Constant scaling factor to be applied to the entire air density profile.\nis_scaling_absolute : bool, default=false\n    Boolean indicating whether density scaling is absolute. Setting this boolean to true will add the scaling value to the basline density, instead of the default behaviour of multiplying the baseline density by the scaling value.\n\nReturns\n-------\nScaledAtmosphereSettings\n    None\n\n\n\n\n\n",
                "WindModelSettings": {
                    "__docstring__": "\nClass for providing settings for wind model.\n\nFunctional (base) class for settings of wind models that require no information in addition to their type.\nWind model classes requiring additional information must be created using an object derived from this class.\n\n\n\n\n\n"
                },
                "AtmosphereSettings": {
                    "__docstring__": "\nBase class for providing settings for atmosphere model.\n\nFunctional (base) class for settings of atmosphere models that require no information in addition to their type.\nAtmosphere model classes requiring additional information must be created using an object derived from this class.\n\n\nAttributes\n----------\nwind_settings : WindModelSettings\n    Wind model settings for the atmosphere model settings object.\n\n\n\n\n"
                },
                "ExponentialAtmosphereSettings": {
                    "__docstring__": "\nClass for providing settings for exponential atmosphere model.\n\n`AtmosphereSettings` derived class for a defining the settings of an exponential atmosphere model.\n\n\n\n\n"
                }
            },
            "ephemeris": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/environment_setup",
                "file": "ephemeris.yaml",
                "_implicit_name": "ephemeris",
                "config": null,
                "summary": null,
                "extended_summary": "This module consists of factory functions for setting up the\nephemeris models of celestial bodies in an environment.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": null,
                "classes": [
                    {
                        "name": "EphemerisSettings",
                        "short_summary": "Base class for providing settings for ephemeris model.",
                        "deprecation_warning": null,
                        "extended_summary": "Functional (base) class for settings of ephemeris models that require no information in addition to their type (and frame origin and orientation).\nEphemeris model classes requiring additional information must be created using an object derived from this class.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "ephemeris_type",
                                "type": "EphemerisType",
                                "description": "Type of ephemeris that is to be created."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str",
                                "description": "Origin of frame in which ephemeris data is to be defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str",
                                "description": "Orientation of frame in which ephemeris data is to be defined."
                            },
                            {
                                "name": "make_multi_arc_ephemeris",
                                "type": "bool",
                                "description": "Boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "ScaledEphemerisSettings",
                        "short_summary": "Class for defining settings from scaling existing ephemeris settings.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for a new ephemeris created from scaling an existing ephemeris settings object. It allows the user to apply a scaling factor to the resulting Cartesian states (for instance for an uncertainty analysis).",
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "DirectSpiceEphemerisSettings",
                        "short_summary": "Class for defining settings of an ephemeris linked directly to Spice.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for ephemeris which are directly linked to Spice.",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "correct_for_stellar_aberration",
                                "type": "bool",
                                "description": "Boolean defining whether to correct for stellar abberations in retrieved values (of observed state)."
                            },
                            {
                                "name": "correct_for_light_time_aberration",
                                "type": "bool",
                                "description": "Boolean defining whether to correct for light time in retrieved values (of observed state)."
                            },
                            {
                                "name": "converge_light_time_aberration",
                                "type": "bool",
                                "description": "Boolean defining whether to use single iteration or max. 3 iterations for calculating light time correction."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "InterpolatedSpiceEphemerisSettings",
                        "short_summary": "Class for defining settings of an ephemeris interpolated from Spice data.",
                        "deprecation_warning": null,
                        "extended_summary": "`DirectSpiceEphemerisSettings` derived class for setting ephemerides to be created from interpolated Spice ephemeris data.",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time from which interpolated data from Spice should be created."
                            },
                            {
                                "name": "final_time",
                                "type": "float",
                                "description": "Final time from which interpolated data from Spice should be created."
                            },
                            {
                                "name": "time_step",
                                "type": "float",
                                "description": "Time step setting to be used for the state interpolation."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "ApproximateJplEphemerisSettings",
                        "short_summary": "Class for creating settings of approximate ephemeris for major planets.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for approximate ephemeris for major planets as inplemented in ApproximateJplEphemerisSettings class and derived class (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).",
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "ConstantEphemerisSettings",
                        "short_summary": "Class for defining settings of constant ephemerides.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for ephemerides producing a constant (time-independent) state.",
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "CustomEphemerisSettings",
                        "short_summary": "Class for defining settings of a custom ephemeris.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for ephemerides which represent an ideal Kepler orbit.",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "initial_state_in_keplerian_elements",
                                "type": "numpy.ndarray",
                                "description": "Kepler elements at time epochOfInitialState."
                            },
                            {
                                "name": "epoch_of_initial_state",
                                "type": "float",
                                "description": "Time at which initialStateInKeplerianElements represents the Keplerian state."
                            },
                            {
                                "name": "central_body_gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of the central body that is used in the computations."
                            },
                            {
                                "name": "root_finder_absolute_tolerance",
                                "type": "float",
                                "description": "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            },
                            {
                                "name": "root_finder_maximum_number_of_iterations",
                                "type": "float",
                                "description": "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "TabulatedEphemerisSettings",
                        "short_summary": "Class for defining settings of ephemeris to be created from tabulated data.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for ephemeris created from tabulated data. The provided data is interpolated into ephemerides.",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "body_state_history",
                                "type": "dict",
                                "description": "Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray)."
                            },
                            {
                                "name": "use_long_double_states",
                                "type": "bool",
                                "description": "Boolean defining whether increased numerical precision (long double type) is to be used when creating the ephemeris."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "direct_spice",
                        "short_summary": "Factory function for creating ephemeris model settings entirely from Spice.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model directly and entirely from Spice.\nRequires an appropriate Spice kernel to be loaded.\nThis function creates an instance of an `EphemerisSettings` derived `DirectSpiceEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "body_name_to_use",
                                "type": "str, default = \"\"",
                                "description": "?"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "DirectSpiceEphemerisSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "interpolated_spice",
                        "short_summary": "Factory function for creating ephemeris model settings using interpolated Spice data.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time from which interpolated data from Spice should be created."
                            },
                            {
                                "name": "final_time",
                                "type": "float",
                                "description": "Final time from which interpolated data from Spice should be created."
                            },
                            {
                                "name": "time_step",
                                "type": "float",
                                "description": "Time step with which interpolated data from Spice should be created."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "interpolator_settings",
                                "type": "std::make_shared< interpolators::InterpolatorSettings >, default=std::make_shared< interpolators::LagrangeInterpolatorSettings >( 6 )",
                                "description": "Settings to be used for the state interpolation."
                            },
                            {
                                "name": "body_name_to_use",
                                "type": "str, default = \"\"",
                                "description": "?"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "InterpolatedSpiceEphemerisSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "approximate_jpl_model",
                        "short_summary": "Factory function for creating approximate ephemeris model settings for major planets.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining approximate ephemeris model for major planets.\nIn this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).\nThis function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object.\n",
                        "parameters": [
                            {
                                "name": "body_name",
                                "type": "str",
                                "description": "String that is attempted to be matched to an identifier for the body that the ephemeris is to be created for."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ApproximateJplEphemerisSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "constant",
                        "short_summary": "Factory function for creating constant ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model with a constant, time-independent state.\nThis function creates an instance of an `EphemerisSettings` derived `constantEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "constant_state",
                                "type": "numpy.ndarray",
                                "description": "Constant state that will be provided as output of the ephemeris at all times."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ConstantEphemerisSettings",
                            "description": ""
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom",
                        "short_summary": "Factory function for creating custom ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model with a custom state.\nThis allows the user to provide an custom state function as ephemeris model.\nThe state function (pointer) must be taking a time (float) as input and returning the Cartesian state (numpy.ndarray).\nThis function creates an instance of an `EphemerisSettings` derived `customEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "custom_state_function",
                                "type": null,
                                "description": "Function returning the state as a function of time."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CustomEphemerisSettings",
                            "description": ""
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "keplerian",
                        "short_summary": "Factory function for creating Keplerian ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from the given Kepler elements.\nThese are taken as the elements at the ``initial_state_epoch`` and propagated to any other time using the provided ``central_body_gravitational_parameter``.\nSee Frame/State Transformations (`link`) for more details on orbital elements in Tudat.\nThis function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "initial_state_in_keplerian_elements",
                                "type": "numpy.ndarray",
                                "description": "Kepler elements at time epochOfInitialState."
                            },
                            {
                                "name": "initial_state_epoch",
                                "type": "float",
                                "description": "Time at which initialStateInKeplerianElements represents the Keplerian state."
                            },
                            {
                                "name": "central_body_gravitational_parameter",
                                "type": "float",
                                "description": "Effective gravitational parameter of the central body that is used in the computations. Note that when the Keplerian orbit is to represent the relative state of two massive bodies, with one of these bodies as the origin this values should be the *sum* of the two bodies' gravitational parameters"
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "root_finder_absolute_tolerance",
                                "type": "float",
                                "description": "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            },
                            {
                                "name": "root_finder_maximum_number_of_iterations",
                                "type": "float",
                                "description": "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "KeplerEphemerisSettings",
                            "description": ""
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "keplerian_from_spice",
                        "short_summary": "Factory function for creating Keplerian ephemeris model settings with initial state from Spice.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from an initial state from Spice.\nThe Kepler elements inferred from the initial state are propagated to any other time using the provided ``central_body_gravitational_parameter``.\nSee Frame/State Transformations (`link`) for more details on orbital elements in Tudat.\nThis function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Name of body for which to create ephemeris settings and infer initial state from Spice."
                            },
                            {
                                "name": "initial_state_epoch",
                                "type": "float",
                                "description": "Time at which initialStateInKeplerianElements represents the Keplerian state."
                            },
                            {
                                "name": "central_body_gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of the central body that is used in the computations."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "root_finder_absolute_tolerance",
                                "type": "float",
                                "description": "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            },
                            {
                                "name": "root_finder_maximum_number_of_iterations",
                                "type": "float",
                                "description": "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "KeplerEphemerisSettings",
                            "description": ""
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled_by_constant",
                        "short_summary": "Factory function for creating scaled ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_ephemeris_settings",
                                "type": "EphemerisSettings",
                                "description": "Sets base settings of ephemeris to be scaled."
                            },
                            {
                                "name": "scaling_constant",
                                "type": "float",
                                "description": "Constant scaling factor to be applied to all elements of the Cartesian state."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool, default=false",
                                "description": "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ScaledEphemerisSettings",
                            "description": ""
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled_by_vector",
                        "short_summary": "Factory function for creating scaled ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_ephemeris_settings",
                                "type": "EphemerisSettings",
                                "description": "Sets base settings of ephemeris to be scaled."
                            },
                            {
                                "name": "scaling_vector",
                                "type": "numpy.ndarray[numpy.float64[6, 1]]",
                                "description": "Vector containing scaling factors to be applied to each element of the Cartesian state."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool, default=false",
                                "description": "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ScaledEphemerisSettings",
                            "description": ""
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled_by_vector_function",
                        "short_summary": "Factory function for creating scaled ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_ephemeris_settings",
                                "type": "EphemerisSettings",
                                "description": "Sets base settings of ephemeris to be scaled."
                            },
                            {
                                "name": "scaling_vector_function",
                                "type": "callable[[float], numpy.ndarray[numpy.float64[6, 1]]]",
                                "description": "Function returning a vector with the scaling factors to be applied to each element of the Cartesian state."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool, default=false",
                                "description": "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ScaledEphemerisSettings",
                            "description": ""
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "tabulated",
                        "short_summary": "Factory function for creating ephemeris model settings from tabulated data.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model to be created from tabulated data.\nCurrently the data that is provided gets interpolated by a 6th order Lagrange interpolator (hardcoded).\nAt the edges of the interpolation interval a cubic spline interpolator is used to suppres the influence of Runge's phenomenon.\nThis function creates an instance of an `EphemerisSettings` derived `TabulatedEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "body_state_history",
                                "type": "dict",
                                "description": "Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray)."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "TabulatedEphemerisSettings",
                            "description": ""
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "ephemeris",
                "version": null,
                "direct_spice": "\nFactory function for creating ephemeris model settings entirely from Spice.\n\nFactory function for settings object, defining ephemeris model directly and entirely from Spice.\nRequires an appropriate Spice kernel to be loaded.\nThis function creates an instance of an `EphemerisSettings` derived `DirectSpiceEphemerisSettings` object.\n\n\nParameters\n----------\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\nbody_name_to_use : str, default = \"\"\n    ?\nReturns\n-------\nDirectSpiceEphemerisSettings\n    None\n\n\n\n\n\n",
                "interpolated_spice": "\nFactory function for creating ephemeris model settings using interpolated Spice data.\n\n\nParameters\n----------\ninitial_time : float\n    Initial time from which interpolated data from Spice should be created.\nfinal_time : float\n    Final time from which interpolated data from Spice should be created.\ntime_step : float\n    Time step with which interpolated data from Spice should be created.\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\ninterpolator_settings : std::make_shared< interpolators::InterpolatorSettings >, default=std::make_shared< interpolators::LagrangeInterpolatorSettings >( 6 )\n    Settings to be used for the state interpolation.\nbody_name_to_use : str, default = \"\"\n    ?\nReturns\n-------\nInterpolatedSpiceEphemerisSettings\n    None\n\n\n\n\n\n",
                "approximate_jpl_model": "\nFactory function for creating approximate ephemeris model settings for major planets.\n\nFactory function for settings object, defining approximate ephemeris model for major planets.\nIn this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).\nThis function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object.\n\n\nParameters\n----------\nbody_name : str\n    String that is attempted to be matched to an identifier for the body that the ephemeris is to be created for.\nReturns\n-------\nApproximateJplEphemerisSettings\n    None\n\n\n\n\n\n",
                "constant": "\nFactory function for creating constant ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model with a constant, time-independent state.\nThis function creates an instance of an `EphemerisSettings` derived `constantEphemerisSettings` object.\n\n\nParameters\n----------\nconstant_state : numpy.ndarray\n    Constant state that will be provided as output of the ephemeris at all times.\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\nReturns\n-------\nConstantEphemerisSettings\n    \n\n\n\n\n\n",
                "custom": "\nFactory function for creating custom ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model with a custom state.\nThis allows the user to provide an custom state function as ephemeris model.\nThe state function (pointer) must be taking a time (float) as input and returning the Cartesian state (numpy.ndarray).\nThis function creates an instance of an `EphemerisSettings` derived `customEphemerisSettings` object.\n\n\nParameters\n----------\ncustom_state_function\n    Function returning the state as a function of time.\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\nReturns\n-------\nCustomEphemerisSettings\n    \n\n\n\n\n\n",
                "keplerian": "\nFactory function for creating Keplerian ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from the given Kepler elements.\nThese are taken as the elements at the ``initial_state_epoch`` and propagated to any other time using the provided ``central_body_gravitational_parameter``.\nSee Frame/State Transformations (`link`) for more details on orbital elements in Tudat.\nThis function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.\n\n\nParameters\n----------\ninitial_state_in_keplerian_elements : numpy.ndarray\n    Kepler elements at time epochOfInitialState.\ninitial_state_epoch : float\n    Time at which initialStateInKeplerianElements represents the Keplerian state.\ncentral_body_gravitational_parameter : float\n    Effective gravitational parameter of the central body that is used in the computations. Note that when the Keplerian orbit is to represent the relative state of two massive bodies, with one of these bodies as the origin this values should be the *sum* of the two bodies' gravitational parameters\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\nroot_finder_absolute_tolerance : float\n    Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState.\nroot_finder_maximum_number_of_iterations : float\n    Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState.\nReturns\n-------\nKeplerEphemerisSettings\n    \n\n\n\n\n\n",
                "keplerian_from_spice": "\nFactory function for creating Keplerian ephemeris model settings with initial state from Spice.\n\nFactory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from an initial state from Spice.\nThe Kepler elements inferred from the initial state are propagated to any other time using the provided ``central_body_gravitational_parameter``.\nSee Frame/State Transformations (`link`) for more details on orbital elements in Tudat.\nThis function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.\n\n\nParameters\n----------\nbody : str\n    Name of body for which to create ephemeris settings and infer initial state from Spice.\ninitial_state_epoch : float\n    Time at which initialStateInKeplerianElements represents the Keplerian state.\ncentral_body_gravitational_parameter : float\n    Gravitational parameter of the central body that is used in the computations.\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\nroot_finder_absolute_tolerance : float\n    Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState.\nroot_finder_maximum_number_of_iterations : float\n    Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState.\nReturns\n-------\nKeplerEphemerisSettings\n    \n\n\n\n\n\n",
                "scaled_by_constant": "\nFactory function for creating scaled ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n\n\nParameters\n----------\nunscaled_ephemeris_settings : EphemerisSettings\n    Sets base settings of ephemeris to be scaled.\nscaling_constant : float\n    Constant scaling factor to be applied to all elements of the Cartesian state.\nis_scaling_absolute : bool, default=false\n    Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value.\nReturns\n-------\nScaledEphemerisSettings\n    \n\n\n\n\n\n",
                "scaled_by_vector": "\nFactory function for creating scaled ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n\n\nParameters\n----------\nunscaled_ephemeris_settings : EphemerisSettings\n    Sets base settings of ephemeris to be scaled.\nscaling_vector : numpy.ndarray[numpy.float64[6, 1]]\n    Vector containing scaling factors to be applied to each element of the Cartesian state.\nis_scaling_absolute : bool, default=false\n    Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value.\nReturns\n-------\nScaledEphemerisSettings\n    \n\n\n\n\n\n",
                "scaled_by_vector_function": "\nFactory function for creating scaled ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n\n\nParameters\n----------\nunscaled_ephemeris_settings : EphemerisSettings\n    Sets base settings of ephemeris to be scaled.\nscaling_vector_function : callable[[float], numpy.ndarray[numpy.float64[6, 1]]]\n    Function returning a vector with the scaling factors to be applied to each element of the Cartesian state.\nis_scaling_absolute : bool, default=false\n    Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value.\nReturns\n-------\nScaledEphemerisSettings\n    \n\n\n\n\n\n",
                "tabulated": "\nFactory function for creating ephemeris model settings from tabulated data.\n\nFactory function for settings object, defining ephemeris model to be created from tabulated data.\nCurrently the data that is provided gets interpolated by a 6th order Lagrange interpolator (hardcoded).\nAt the edges of the interpolation interval a cubic spline interpolator is used to suppres the influence of Runge's phenomenon.\nThis function creates an instance of an `EphemerisSettings` derived `TabulatedEphemerisSettings` object.\n\n\nParameters\n----------\nbody_state_history : dict\n    Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray).\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\nReturns\n-------\nTabulatedEphemerisSettings\n    \n\n\n\n\n\n",
                "EphemerisSettings": {
                    "__docstring__": "\nBase class for providing settings for ephemeris model.\n\nFunctional (base) class for settings of ephemeris models that require no information in addition to their type (and frame origin and orientation).\nEphemeris model classes requiring additional information must be created using an object derived from this class.\n\n\nAttributes\n----------\nephemeris_type : EphemerisType\n    Type of ephemeris that is to be created.\nframe_origin : str\n    Origin of frame in which ephemeris data is to be defined.\nframe_orientation : str\n    Orientation of frame in which ephemeris data is to be defined.\nmake_multi_arc_ephemeris : bool\n    Boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris.\n\n\n\n\n"
                },
                "ScaledEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings from scaling existing ephemeris settings.\n\n`EphemerisSettings` derived class for a new ephemeris created from scaling an existing ephemeris settings object. It allows the user to apply a scaling factor to the resulting Cartesian states (for instance for an uncertainty analysis).\n\n\n\n\n"
                },
                "DirectSpiceEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings of an ephemeris linked directly to Spice.\n\n`EphemerisSettings` derived class for ephemeris which are directly linked to Spice.\n\nAttributes\n----------\ncorrect_for_stellar_aberration : bool\n    Boolean defining whether to correct for stellar abberations in retrieved values (of observed state).\ncorrect_for_light_time_aberration : bool\n    Boolean defining whether to correct for light time in retrieved values (of observed state).\nconverge_light_time_aberration : bool\n    Boolean defining whether to use single iteration or max. 3 iterations for calculating light time correction.\n\n\n\n\n"
                },
                "InterpolatedSpiceEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings of an ephemeris interpolated from Spice data.\n\n`DirectSpiceEphemerisSettings` derived class for setting ephemerides to be created from interpolated Spice ephemeris data.\n\nAttributes\n----------\ninitial_time : float\n    Initial time from which interpolated data from Spice should be created.\nfinal_time : float\n    Final time from which interpolated data from Spice should be created.\ntime_step : float\n    Time step setting to be used for the state interpolation.\n\n\n\n\n"
                },
                "ApproximateJplEphemerisSettings": {
                    "__docstring__": "\nClass for creating settings of approximate ephemeris for major planets.\n\n`EphemerisSettings` derived class for approximate ephemeris for major planets as inplemented in ApproximateJplEphemerisSettings class and derived class (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).\n\n\n\n\n"
                },
                "ConstantEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings of constant ephemerides.\n\n`EphemerisSettings` derived class for ephemerides producing a constant (time-independent) state.\n\n\n\n\n"
                },
                "CustomEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings of a custom ephemeris.\n\n`EphemerisSettings` derived class for ephemerides which represent an ideal Kepler orbit.\n\nAttributes\n----------\ninitial_state_in_keplerian_elements : numpy.ndarray\n    Kepler elements at time epochOfInitialState.\nepoch_of_initial_state : float\n    Time at which initialStateInKeplerianElements represents the Keplerian state.\ncentral_body_gravitational_parameter : float\n    Gravitational parameter of the central body that is used in the computations.\nroot_finder_absolute_tolerance : float\n    Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState.\nroot_finder_maximum_number_of_iterations : float\n    Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState.\n\n\n\n\n"
                },
                "TabulatedEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings of ephemeris to be created from tabulated data.\n\n`EphemerisSettings` derived class for ephemeris created from tabulated data. The provided data is interpolated into ephemerides.\n\nAttributes\n----------\nbody_state_history : dict\n    Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray).\nuse_long_double_states : bool\n    Boolean defining whether increased numerical precision (long double type) is to be used when creating the ephemeris.\n\n\n\n\n"
                }
            },
            "gravity_field": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/environment_setup",
                "file": "gravity_field.yaml",
                "_implicit_name": "gravity_field",
                "config": null,
                "summary": null,
                "extended_summary": "This module consists of factory functions for setting up the\ngravitational potential models of celestial bodies in an environment.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": [
                    {
                        "name": "GravityFieldType",
                        "short_summary": "Enumeration of gravity field types.",
                        "extended_summary": "Enumeration of gravity field types supported by tudat.\n",
                        "members": [
                            {
                                "name": "central_gravity",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "central_spice_gravity",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "spherical_harmonic_gravity",
                                "description": null,
                                "value": null
                            }
                        ]
                    },
                    {
                        "name": "SphericalHarmonicsModel",
                        "short_summary": "Enumeration of spherical harmonics models.",
                        "extended_summary": "Enumeration of spherical harmonics models supported by tudat.\n",
                        "members": [
                            {
                                "name": "custom_model",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "egm96",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "ggm02c",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "ggm02s",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "glgm3150",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "lpe200",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "jgmro120d",
                                "description": null,
                                "value": null
                            }
                        ]
                    }
                ],
                "classes": [
                    {
                        "name": "GravityFieldSettings",
                        "short_summary": "Base class for providing settings for automatic gravity field model creation.",
                        "deprecation_warning": null,
                        "extended_summary": "This class is a functional base class for settings of gravity field models that require no information in addition to their type.\nGravity field model classes requiring additional information must be created using an object derived from this class.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "gravity_field_type",
                                "type": "GravityFieldType",
                                "description": "Type of gravity field model that is to be created."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "__init__",
                                "short_summary": null,
                                "deprecation_warning": null,
                                "extended_summary": null,
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "CentralGravityFieldSettings",
                        "short_summary": "`GravityFieldSettings` derived class defining settings of point mass gravity field.",
                        "deprecation_warning": null,
                        "extended_summary": "Derived class of `GravityFieldSettings` for central gravity fields, which are defined by a single gravitational parameter.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of central gravity field."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "SphericalHarmonicsGravityFieldSettings",
                        "short_summary": "`GravityFieldSettings` derived class defining settings of spherical harmonic gravity field representation.",
                        "deprecation_warning": null,
                        "extended_summary": "Derived class of `GravityFieldSettings` for gravity fields, which are defined by a spherical harmonic gravity field representation.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of gravity field."
                            },
                            {
                                "name": "reference_radius",
                                "type": "float",
                                "description": "Reference radius of spherical harmonic field expansion."
                            },
                            {
                                "name": "normalized_cosine_coefficients",
                                "type": "numpy.ndarray",
                                "description": "Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j."
                            },
                            {
                                "name": "normalized_sine_coefficients",
                                "type": "numpy.ndarray",
                                "description": "Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j."
                            },
                            {
                                "name": "associated_reference_frame",
                                "type": "str",
                                "description": "Identifier for body-fixed reference frame with which the coefficients are associated."
                            },
                            {
                                "name": "create_time_dependent_field",
                                "type": "bool",
                                "description": "Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed intially)."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "central",
                        "short_summary": "Factory function for central gravity field settings object.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a point-mass gravity field model with user-defined gravitational parameter.\nThis function returns a `GravityFieldSettings` derived `CentralGravityFieldSettings` object.\n",
                        "parameters": [
                            {
                                "name": "gravitational_parameter",
                                "type": "float",
                                "description": null
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CentralGravityFieldSettings",
                            "description": "`CentralGravityFieldSettings` object defined by the provided gravitational parameter."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "central_spice",
                        "short_summary": "Factory function to create central gravity field settings from Spice settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a point-mass gravity field model with gravitational parameter from Spice.\nThis function returns a `GravityFieldSettings` object of gravity field type ``central_spice``.\n",
                        "parameters": [
                            {
                                "name": "None",
                                "type": null,
                                "description": null
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "GravityFieldSettings",
                            "description": "`GravityFieldSettings` object defined by gravitational parameters from Spice settings."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic",
                        "short_summary": "Factory function for creating a spherical harmonics gravity field settings object.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a gravity field model through spherical harmonic expansion.\nThe associated reference frame must presently be the same frame ID as the target frame of the body\u2019s rotation model.\nIt represents the frame in which the spherical harmonic field is defined.\nSpherical harmonic coefficients used for this environment model must *always* be fully normalized.\nTo normalize unnormalized spherical harmonic coefficients, see `spherical_harmonics_normalization`.\nThis function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.\n",
                        "parameters": [
                            {
                                "name": "gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of gravity field."
                            },
                            {
                                "name": "reference_radius",
                                "type": "float",
                                "description": "Reference radius of spherical harmonic field expansion."
                            },
                            {
                                "name": "normalized_cosine_coefficients",
                                "type": "numpy.ndarray",
                                "description": "Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j.\nAs such, note that entry (0,0) of cosine coefficients should be equal to 1.\n"
                            },
                            {
                                "name": "normalized_sine_coefficients",
                                "type": "numpy.ndarray",
                                "description": "Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j."
                            },
                            {
                                "name": "associated_reference_frame",
                                "type": "str",
                                "description": "Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SphericalHarmonicsGravityFieldSettings",
                            "description": "`SphericalHarmonicsGravityFieldSettings` object defined by the provided parameters."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic_triaxial_body",
                        "short_summary": "Factory function for spherical harmonics gravity field settings object from triaxial ellipsoid parameters.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a gravity field model through spherical harmonic expansion of a homogeneous triaxial ellipsoid.\nThe constant mass distribution in the specified ellipsoid shape is expanded to obtain a spherical harmonic coefficient representation.\nGravity fields from this setting object are expressed in normalized spherical harmonic coefficients.\n(%!) The x-, y- and z-axis of the ... ABC (?).\nThis function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.\n",
                        "parameters": [
                            {
                                "name": "axis_a",
                                "type": "float",
                                "description": "Dimension of largest axis of triaxial ellipsoid."
                            },
                            {
                                "name": "axis_b",
                                "type": "float",
                                "description": "Dimension of intermediate axis of triaxial ellipsoid."
                            },
                            {
                                "name": "axis_c",
                                "type": "float",
                                "description": "Dimension of smallest axis of triaxial ellipsoid."
                            },
                            {
                                "name": "density",
                                "type": "float",
                                "description": "Density of ellipsoid."
                            },
                            {
                                "name": "maximum_degree",
                                "type": "int",
                                "description": "Maximum degree of spherical harmonics expansion."
                            },
                            {
                                "name": "maximum_order",
                                "type": "int",
                                "description": "Maximum order of spherical harmonics expansion."
                            },
                            {
                                "name": "associated_reference_frame",
                                "type": "str",
                                "description": "Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SphericalHarmonicsGravityFieldSettings",
                            "description": "`SphericalHarmonicsGravityFieldSettings` object defined by expansion of homogeneous triaxial ellipsoid."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "gravity_field",
                "version": null,
                "central": "\nFactory function for central gravity field settings object.\n\nFactory function for settings object, defining a point-mass gravity field model with user-defined gravitational parameter.\nThis function returns a `GravityFieldSettings` derived `CentralGravityFieldSettings` object.\n\n\nParameters\n----------\ngravitational_parameter : float\n    None\nReturns\n-------\nCentralGravityFieldSettings\n    `CentralGravityFieldSettings` object defined by the provided gravitational parameter.\n\n\n\n\n\n",
                "central_spice": "\nFactory function to create central gravity field settings from Spice settings.\n\nFactory function for settings object, defining a point-mass gravity field model with gravitational parameter from Spice.\nThis function returns a `GravityFieldSettings` object of gravity field type ``central_spice``.\n\n\nParameters\n----------\nNone\n    None\nReturns\n-------\nGravityFieldSettings\n    `GravityFieldSettings` object defined by gravitational parameters from Spice settings.\n\n\n\n\n\n",
                "spherical_harmonic": "\nFactory function for creating a spherical harmonics gravity field settings object.\n\nFactory function for settings object, defining a gravity field model through spherical harmonic expansion.\nThe associated reference frame must presently be the same frame ID as the target frame of the body\u2019s rotation model.\nIt represents the frame in which the spherical harmonic field is defined.\nSpherical harmonic coefficients used for this environment model must *always* be fully normalized.\nTo normalize unnormalized spherical harmonic coefficients, see `spherical_harmonics_normalization`.\nThis function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.\n\n\nParameters\n----------\ngravitational_parameter : float\n    Gravitational parameter of gravity field.\nreference_radius : float\n    Reference radius of spherical harmonic field expansion.\nnormalized_cosine_coefficients : numpy.ndarray\n    Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j.\n    As such, note that entry (0,0) of cosine coefficients should be equal to 1.\n\nnormalized_sine_coefficients : numpy.ndarray\n    Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j.\nassociated_reference_frame : str\n    Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.\nReturns\n-------\nSphericalHarmonicsGravityFieldSettings\n    `SphericalHarmonicsGravityFieldSettings` object defined by the provided parameters.\n\n\n\n\n\n",
                "spherical_harmonic_triaxial_body": "\nFactory function for spherical harmonics gravity field settings object from triaxial ellipsoid parameters.\n\nFactory function for settings object, defining a gravity field model through spherical harmonic expansion of a homogeneous triaxial ellipsoid.\nThe constant mass distribution in the specified ellipsoid shape is expanded to obtain a spherical harmonic coefficient representation.\nGravity fields from this setting object are expressed in normalized spherical harmonic coefficients.\n(%!) The x-, y- and z-axis of the ... ABC (?).\nThis function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.\n\n\nParameters\n----------\naxis_a : float\n    Dimension of largest axis of triaxial ellipsoid.\naxis_b : float\n    Dimension of intermediate axis of triaxial ellipsoid.\naxis_c : float\n    Dimension of smallest axis of triaxial ellipsoid.\ndensity : float\n    Density of ellipsoid.\nmaximum_degree : int\n    Maximum degree of spherical harmonics expansion.\nmaximum_order : int\n    Maximum order of spherical harmonics expansion.\nassociated_reference_frame : str\n    Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.\nReturns\n-------\nSphericalHarmonicsGravityFieldSettings\n    `SphericalHarmonicsGravityFieldSettings` object defined by expansion of homogeneous triaxial ellipsoid.\n\n\n\n\n\n",
                "GravityFieldSettings": {
                    "name": "GravityFieldSettings",
                    "short_summary": "Base class for providing settings for automatic gravity field model creation.",
                    "deprecation_warning": null,
                    "extended_summary": "This class is a functional base class for settings of gravity field models that require no information in addition to their type.\nGravity field model classes requiring additional information must be created using an object derived from this class.\n",
                    "parameters": null,
                    "attributes": [
                        {
                            "name": "gravity_field_type",
                            "type": "GravityFieldType",
                            "description": "Type of gravity field model that is to be created."
                        }
                    ],
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "__init__",
                            "short_summary": null,
                            "deprecation_warning": null,
                            "extended_summary": null,
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "__init__": "\n\n\n\n\n",
                    "__docstring__": "\nBase class for providing settings for automatic gravity field model creation.\n\nThis class is a functional base class for settings of gravity field models that require no information in addition to their type.\nGravity field model classes requiring additional information must be created using an object derived from this class.\n\n\nAttributes\n----------\ngravity_field_type : GravityFieldType\n    Type of gravity field model that is to be created.\n\n\n\n\n"
                },
                "CentralGravityFieldSettings": {
                    "__docstring__": "\n`GravityFieldSettings` derived class defining settings of point mass gravity field.\n\nDerived class of `GravityFieldSettings` for central gravity fields, which are defined by a single gravitational parameter.\n\n\nAttributes\n----------\ngravitational_parameter : float\n    Gravitational parameter of central gravity field.\n\n\n\n\n"
                },
                "SphericalHarmonicsGravityFieldSettings": {
                    "__docstring__": "\n`GravityFieldSettings` derived class defining settings of spherical harmonic gravity field representation.\n\nDerived class of `GravityFieldSettings` for gravity fields, which are defined by a spherical harmonic gravity field representation.\n\n\nAttributes\n----------\ngravitational_parameter : float\n    Gravitational parameter of gravity field.\nreference_radius : float\n    Reference radius of spherical harmonic field expansion.\nnormalized_cosine_coefficients : numpy.ndarray\n    Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j.\nnormalized_sine_coefficients : numpy.ndarray\n    Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j.\nassociated_reference_frame : str\n    Identifier for body-fixed reference frame with which the coefficients are associated.\ncreate_time_dependent_field : bool\n    Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed intially).\n\n\n\n\n"
                },
                "GravityFieldType": {
                    "central_gravity": "",
                    "central_spice_gravity": "",
                    "spherical_harmonic_gravity": "",
                    "__docstring__": "\nEnumeration of gravity field types.\n\nEnumeration of gravity field types supported by tudat.\n\n\n\n\n\n",
                    "name": "GravityFieldType",
                    "short_summary": "Enumeration of gravity field types.",
                    "extended_summary": "Enumeration of gravity field types supported by tudat.\n",
                    "members": [
                        {
                            "name": "central_gravity",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "central_spice_gravity",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "spherical_harmonic_gravity",
                            "description": null,
                            "value": null
                        }
                    ]
                },
                "SphericalHarmonicsModel": {
                    "custom_model": "",
                    "egm96": "",
                    "ggm02c": "",
                    "ggm02s": "",
                    "glgm3150": "",
                    "lpe200": "",
                    "jgmro120d": "",
                    "__docstring__": "\nEnumeration of spherical harmonics models.\n\nEnumeration of spherical harmonics models supported by tudat.\n\n\n\n\n\n",
                    "name": "SphericalHarmonicsModel",
                    "short_summary": "Enumeration of spherical harmonics models.",
                    "extended_summary": "Enumeration of spherical harmonics models supported by tudat.\n",
                    "members": [
                        {
                            "name": "custom_model",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "egm96",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "ggm02c",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "ggm02s",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "glgm3150",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "lpe200",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "jgmro120d",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            },
            "radiation_pressure": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/environment_setup",
                "file": "radiation_pressure.yaml",
                "_implicit_name": "radiation_pressure",
                "config": null,
                "summary": null,
                "extended_summary": "This module consists of factory functions for setting up the\nradiation pressure models of celestial bodies in an environment.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": [
                    {
                        "name": "RadiationPressureType",
                        "short_summary": "Enumeration of available radiation pressure types.",
                        "extended_summary": "Enumeration of radiation pressure types supported by tudat.\n",
                        "members": [
                            {
                                "name": "cannonball_radiation_pressure_interface",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "panelled_radiation_pressure_interface",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "solar_sailing_radiation_pressure_interface",
                                "description": null,
                                "value": null
                            }
                        ]
                    }
                ],
                "classes": [
                    {
                        "name": "RadiationPressureInterfaceSettings",
                        "short_summary": "Base class for providing settings for radiation pressure interface models.",
                        "deprecation_warning": null,
                        "extended_summary": "Functional (base) class for settings of radiation pressure interface models that require no information in addition to their type.\nRadiation pressure interface model settings requiring additional information must be defined using an object derived from this class.\n",
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "CannonBallRadiationPressureInterfaceSettings",
                        "short_summary": "Class for defining model settings of a cannonball radiation pressure interface.",
                        "deprecation_warning": null,
                        "extended_summary": "`RadiationPressureInterfaceSettings` derived class for cannonball radiation pressure interface model settings.",
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "cannonball",
                        "short_summary": "Factory function for creating cannonball radiation pressure interface model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining cannonball radiation pressure interface model.\nThis function creates an instance of a `RadiationPressureInterfaceSettings` derived `CannonBallRadiationPressureInterfaceSettings` object.\n",
                        "parameters": [
                            {
                                "name": "source_body",
                                "type": "str",
                                "description": "Name of body emitting the radiation."
                            },
                            {
                                "name": "reference_area",
                                "type": "float",
                                "description": "Surface area that undergoes radiation pressure."
                            },
                            {
                                "name": "radiation_pressure_coefficient",
                                "type": "float",
                                "description": "Radiation pressure coefficient."
                            },
                            {
                                "name": "occulting_bodies",
                                "type": "list[str], default = ['']",
                                "description": "List of bodies causing (partial) occultation."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CannonBallRadiationPressureInterfaceSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "panelled",
                        "short_summary": "Factory function for creating panelled radiation pressure interface model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining panelled radiation pressure interface model.\nThis function creates an instance of a `RadiationPressureInterfaceSettings` derived `PanelledRadiationPressureInterfaceSettings` object.\n",
                        "parameters": [
                            {
                                "name": "source_body",
                                "type": "str",
                                "description": "Name of body emitting the radiation."
                            },
                            {
                                "name": "emissivities",
                                "type": "list[float]",
                                "description": "List containing the panels' emissivities. # [py]\n"
                            },
                            {
                                "name": "areas",
                                "type": "list[float]",
                                "description": "List containing the panels' areas. # [py]\n"
                            },
                            {
                                "name": "diffusion_coefficients",
                                "type": "list[float]",
                                "description": "List containing diffuse reflection coefficients of the panels. # [py]\n"
                            },
                            {
                                "name": "surface_normals_in_body_fixed_frame",
                                "type": "list[numpy.ndarray[numpy.float64[3, 1]]]",
                                "description": "List containing the (constant) surface normals of the panels, expressed in the body-fixed frame. # [py]\n"
                            },
                            {
                                "name": "occulting_bodies",
                                "type": "list[str], default = ['']",
                                "description": "List of bodies causing (partial) occultation."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "PanelledRadiationPressureInterfaceSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "radiation_pressure",
                "version": null,
                "cannonball": "\nFactory function for creating cannonball radiation pressure interface model settings.\n\nFactory function for settings object, defining cannonball radiation pressure interface model.\nThis function creates an instance of a `RadiationPressureInterfaceSettings` derived `CannonBallRadiationPressureInterfaceSettings` object.\n\n\nParameters\n----------\nsource_body : str\n    Name of body emitting the radiation.\nreference_area : float\n    Surface area that undergoes radiation pressure.\nradiation_pressure_coefficient : float\n    Radiation pressure coefficient.\nocculting_bodies : list[str], default = ['']\n    List of bodies causing (partial) occultation.\nReturns\n-------\nCannonBallRadiationPressureInterfaceSettings\n    None\n\n\n\n\n\n",
                "panelled": "\nFactory function for creating panelled radiation pressure interface model settings.\n\nFactory function for settings object, defining panelled radiation pressure interface model.\nThis function creates an instance of a `RadiationPressureInterfaceSettings` derived `PanelledRadiationPressureInterfaceSettings` object.\n\n\nParameters\n----------\nsource_body : str\n    Name of body emitting the radiation.\nemissivities : list[float]\n    List containing the panels' emissivities. # [py]\n\nareas : list[float]\n    List containing the panels' areas. # [py]\n\ndiffusion_coefficients : list[float]\n    List containing diffuse reflection coefficients of the panels. # [py]\n\nsurface_normals_in_body_fixed_frame : list[numpy.ndarray[numpy.float64[3, 1]]]\n    List containing the (constant) surface normals of the panels, expressed in the body-fixed frame. # [py]\n\nocculting_bodies : list[str], default = ['']\n    List of bodies causing (partial) occultation.\nReturns\n-------\nPanelledRadiationPressureInterfaceSettings\n    None\n\n\n\n\n\n",
                "RadiationPressureInterfaceSettings": {
                    "__docstring__": "\nBase class for providing settings for radiation pressure interface models.\n\nFunctional (base) class for settings of radiation pressure interface models that require no information in addition to their type.\nRadiation pressure interface model settings requiring additional information must be defined using an object derived from this class.\n\n\n\n\n\n"
                },
                "CannonBallRadiationPressureInterfaceSettings": {
                    "__docstring__": "\nClass for defining model settings of a cannonball radiation pressure interface.\n\n`RadiationPressureInterfaceSettings` derived class for cannonball radiation pressure interface model settings.\n\n\n\n\n"
                },
                "RadiationPressureType": {
                    "cannonball_radiation_pressure_interface": "",
                    "panelled_radiation_pressure_interface": "",
                    "solar_sailing_radiation_pressure_interface": "",
                    "__docstring__": "\nEnumeration of available radiation pressure types.\n\nEnumeration of radiation pressure types supported by tudat.\n\n\n\n\n\n",
                    "name": "RadiationPressureType",
                    "short_summary": "Enumeration of available radiation pressure types.",
                    "extended_summary": "Enumeration of radiation pressure types supported by tudat.\n",
                    "members": [
                        {
                            "name": "cannonball_radiation_pressure_interface",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "panelled_radiation_pressure_interface",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "solar_sailing_radiation_pressure_interface",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            },
            "rotation_model": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/environment_setup",
                "file": "rotation_model.yaml",
                "_implicit_name": "rotation_model",
                "config": null,
                "summary": null,
                "extended_summary": "This module consists of factory functions for setting up the\nrotation models of celestial bodies in an environment.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": [
                    {
                        "name": "RotationModelType",
                        "short_summary": "Enumeration of rotation model types.",
                        "extended_summary": "Enumeration of rotation model types supported by tudat.\n",
                        "members": [
                            {
                                "name": "simple_rotation_model",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "spice_rotation_model",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "gcrs_to_itrs_rotation_model",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "synchronous_rotation_model",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "planetary_rotation_model",
                                "description": null,
                                "value": null
                            }
                        ]
                    },
                    {
                        "name": "IAUConventions",
                        "short_summary": "Enumeration of IAU conventions for Earth rotation.",
                        "extended_summary": "Enumeration of IAU conventions for Earth rotation supported by tudat.\n",
                        "members": [
                            {
                                "name": "iau_2000_a",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "iau_2000_b",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "iau_2006",
                                "description": null,
                                "value": null
                            }
                        ]
                    }
                ],
                "classes": [
                    {
                        "name": "RotationModelSettings",
                        "short_summary": "Base class for providing settings for automatic rotation model creation.",
                        "deprecation_warning": null,
                        "extended_summary": "This class is a functional base class for settings of rotation models that require no information in addition to their type.\nBasic rotation model has constant orientation of the rotation axis (body-fixed z-axis) and constant rotation rate about this axis.\nRotation models requiring additional information must be created using the factory functions which create the specific object derived from this base class.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "rotation_type",
                                "type": "RotationModelType",
                                "description": "Type of rotation model that is to be created."
                            },
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target frame of rotation model."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "simple",
                        "short_summary": "Factory function for creating simple rotation model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a basic rotation model with constant orientation of the rotation axis and constant rotation rate about this axis.\nRotation from original (inertial) to target (body-fixed) frame at some reference time ``initial_time`` is defined by the ``initial_orientation`` rotation matrix.\nRotation about the body-fixed z-axis is defined by the ``rotation_rate`` float variable (in rad/s).\nThis function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target frame of rotation model."
                            },
                            {
                                "name": "initial_orientation",
                                "type": "numpy.ndarray",
                                "description": "Orientation of target frame in base frame at initial time."
                            },
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time (reference epoch for rotation matrices)."
                            },
                            {
                                "name": "rotation_rate",
                                "type": "float",
                                "description": "Constant rotation rate [rad/s] about rotational axis."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SimpleRotationModelSettings",
                            "description": "Simple rotation model settings object (derived from `RotationModelSettings` base class)."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "simple_from_spice",
                        "short_summary": "Factory function for creating simple rotation model settings using initial orientation and rotaton rates from Spice.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a simple rotation model with the added functionality that the initial orientation and rotation rate are extracted from Spice, as opposed to provided manually.\nNote that *only* the initial orientation and rotation rate ( at the time defined by `initial_time` ) are extracted from Spice.\nThe distinction between the two target frame inputs is the following\n\n  - the ``target_frame`` parameter is the name of frame that Tudat assigns to the body-fixed frame\n  - the ``target_frame_spice`` is the name of the frame in Spice for which the initial orientation and rotation rate are extracted.\n\nThis function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target frame of rotation model."
                            },
                            {
                                "name": "target_frame_spice",
                                "type": "str",
                                "description": "Spice reference of target frame."
                            },
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time (reference epoch for rotation matrices)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SimpleRotationModelSettings",
                            "description": "Simple rotation model settings object (derived from RotationModelSettings base class) with target frame info inferred from Spice."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "synchronous",
                        "short_summary": "Factory function for creating synchronous rotational ephemeris settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a synchronous rotation model where rotation of a body is defined from its relative orbit w.r.t. some central body. Specifically\n- the body-fixed x-axis is *always* pointing towards the central body\n- the body-fixed z-axis is *always* perpendicular to the orbital plane (along the direction of\n.. math:: \\mathbf{x} \\cross \\mathbf{v} )\n- the body-fixed y-axis completes the right-handed reference frame\n\nSuch a model can be useful for, for instance, approximate rotation of tidally locked natural satellites or nadir-pointing spacraft.\nThis function creates an instance of a `RotationModelSettings` derived `SynchronousRotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "central_body_name",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Spice reference of target frame."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SynchronousRotationModelSettings",
                            "description": "Synchonous rotation model settings object (derived from RotationModelSettings base class)."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spice",
                        "short_summary": "Factory function for creating rotation model settings from the Spice interface.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a rotation model directly (and entirely) from Spice interface.\nThis function creates an instance of a `RotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target frame of rotation model."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "RotationModelSettings",
                            "description": "Rotation model settings object inferred from Spice rotational model."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "gcrs_to_itrs",
                        "short_summary": "Factory function for creating high-accuracy Earth rotation model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining high-accuracy Earth rotation model according to the IERS 2010 Conventions.\nThis settings class has various options to deviate from the default settings, typical applications will use default.\nNote that for this model the original frame must be J2000 or GCRS (in the case of the former, the frame bias between GCRS and J2000 is automatically corrected for). The target frame (e.g. body-fixed frame) name is ITRS.\nThe precession-nutation theory may be `iau_2000a` / `iau_2000b` or `iau_2006`, as implemented in the SOFA toolbox. Alternative options to modify the input (not shown above) include the EOP correction file, input time scale, short period UT1 and polar motion variations.\nThe target frame (e.g. body-fixed frame) name is ITRS.\nThis function creates an instance of a `RotationModelSettings` derived `gcrsToItrsRotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "precession_nutation_theory",
                                "type": "default=tba::iau_2006",
                                "description": "Setting theory for modelling Earth nutation.\n"
                            },
                            {
                                "name": "base_frame",
                                "type": "str, default='GCRS'",
                                "description": "Base frame of rotation model"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "GcrsToItrsRotationModelSettings",
                            "description": "High-accuracy Earth rotation model settings object (derived from RotationModelSettings base class)."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "constant",
                        "short_summary": "Factory function for creating simple rotation model settings for target-frames with constant orientation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining simple rotation model setting objects with constant rotation matrix.\nThese model settings are for target frames which do not have a rotational rate in the base frame and are fully defined by their initial orientation.\nThis function creates an instance of a `RotationModelSettings` derived `SimpleRotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target frame of rotation model."
                            },
                            {
                                "name": "initial_orientation",
                                "type": "numpy.ndarray",
                                "description": "Orientation of target frame in base frame at initial time (constant throughout)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SimpleRotationModelSettings",
                            "description": "Simple rotation model settings object (derived from RotationModelSettings base class) with constant orientation of target in base frame."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "rotation_model",
                "version": null,
                "simple": "\nFactory function for creating simple rotation model settings.\n\nFactory function for settings object, defining a basic rotation model with constant orientation of the rotation axis and constant rotation rate about this axis.\nRotation from original (inertial) to target (body-fixed) frame at some reference time ``initial_time`` is defined by the ``initial_orientation`` rotation matrix.\nRotation about the body-fixed z-axis is defined by the ``rotation_rate`` float variable (in rad/s).\nThis function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object.\n\n\nParameters\n----------\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Target frame of rotation model.\ninitial_orientation : numpy.ndarray\n    Orientation of target frame in base frame at initial time.\ninitial_time : float\n    Initial time (reference epoch for rotation matrices).\nrotation_rate : float\n    Constant rotation rate [rad/s] about rotational axis.\nReturns\n-------\nSimpleRotationModelSettings\n    Simple rotation model settings object (derived from `RotationModelSettings` base class).\n\n\n\n\n\n",
                "simple_from_spice": "\nFactory function for creating simple rotation model settings using initial orientation and rotaton rates from Spice.\n\nFactory function for settings object, defining a simple rotation model with the added functionality that the initial orientation and rotation rate are extracted from Spice, as opposed to provided manually.\nNote that *only* the initial orientation and rotation rate ( at the time defined by `initial_time` ) are extracted from Spice.\nThe distinction between the two target frame inputs is the following\n\n  - the ``target_frame`` parameter is the name of frame that Tudat assigns to the body-fixed frame\n  - the ``target_frame_spice`` is the name of the frame in Spice for which the initial orientation and rotation rate are extracted.\n\nThis function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object.\n\n\nParameters\n----------\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Target frame of rotation model.\ntarget_frame_spice : str\n    Spice reference of target frame.\ninitial_time : float\n    Initial time (reference epoch for rotation matrices).\nReturns\n-------\nSimpleRotationModelSettings\n    Simple rotation model settings object (derived from RotationModelSettings base class) with target frame info inferred from Spice.\n\n\n\n\n\n",
                "synchronous": "\nFactory function for creating synchronous rotational ephemeris settings.\n\nFactory function for settings object, defining a synchronous rotation model where rotation of a body is defined from its relative orbit w.r.t. some central body. Specifically\n- the body-fixed x-axis is *always* pointing towards the central body\n- the body-fixed z-axis is *always* perpendicular to the orbital plane (along the direction of\n.. math:: \\mathbf{x} \\cross \\mathbf{v} )\n- the body-fixed y-axis completes the right-handed reference frame\n\nSuch a model can be useful for, for instance, approximate rotation of tidally locked natural satellites or nadir-pointing spacraft.\nThis function creates an instance of a `RotationModelSettings` derived `SynchronousRotationModelSettings` object.\n\n\nParameters\n----------\ncentral_body_name : str\n    Base frame of rotation model.\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Spice reference of target frame.\nReturns\n-------\nSynchronousRotationModelSettings\n    Synchonous rotation model settings object (derived from RotationModelSettings base class).\n\n\n\n\n\n",
                "spice": "\nFactory function for creating rotation model settings from the Spice interface.\n\nFactory function for settings object, defining a rotation model directly (and entirely) from Spice interface.\nThis function creates an instance of a `RotationModelSettings` object.\n\n\nParameters\n----------\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Target frame of rotation model.\nReturns\n-------\nRotationModelSettings\n    Rotation model settings object inferred from Spice rotational model.\n\n\n\n\n\n",
                "gcrs_to_itrs": "\nFactory function for creating high-accuracy Earth rotation model settings.\n\nFactory function for settings object, defining high-accuracy Earth rotation model according to the IERS 2010 Conventions.\nThis settings class has various options to deviate from the default settings, typical applications will use default.\nNote that for this model the original frame must be J2000 or GCRS (in the case of the former, the frame bias between GCRS and J2000 is automatically corrected for). The target frame (e.g. body-fixed frame) name is ITRS.\nThe precession-nutation theory may be `iau_2000a` / `iau_2000b` or `iau_2006`, as implemented in the SOFA toolbox. Alternative options to modify the input (not shown above) include the EOP correction file, input time scale, short period UT1 and polar motion variations.\nThe target frame (e.g. body-fixed frame) name is ITRS.\nThis function creates an instance of a `RotationModelSettings` derived `gcrsToItrsRotationModelSettings` object.\n\n\nParameters\n----------\nprecession_nutation_theory : default=tba::iau_2006\n    Setting theory for modelling Earth nutation.\n\nbase_frame : str, default='GCRS'\n    Base frame of rotation model\nReturns\n-------\nGcrsToItrsRotationModelSettings\n    High-accuracy Earth rotation model settings object (derived from RotationModelSettings base class).\n\n\n\n\n\n",
                "constant": "\nFactory function for creating simple rotation model settings for target-frames with constant orientation.\n\nFactory function for settings object, defining simple rotation model setting objects with constant rotation matrix.\nThese model settings are for target frames which do not have a rotational rate in the base frame and are fully defined by their initial orientation.\nThis function creates an instance of a `RotationModelSettings` derived `SimpleRotationModelSettings` object.\n\n\nParameters\n----------\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Target frame of rotation model.\ninitial_orientation : numpy.ndarray\n    Orientation of target frame in base frame at initial time (constant throughout).\nReturns\n-------\nSimpleRotationModelSettings\n    Simple rotation model settings object (derived from RotationModelSettings base class) with constant orientation of target in base frame.\n\n\n\n\n\n",
                "RotationModelSettings": {
                    "__docstring__": "\nBase class for providing settings for automatic rotation model creation.\n\nThis class is a functional base class for settings of rotation models that require no information in addition to their type.\nBasic rotation model has constant orientation of the rotation axis (body-fixed z-axis) and constant rotation rate about this axis.\nRotation models requiring additional information must be created using the factory functions which create the specific object derived from this base class.\n\n\nAttributes\n----------\nrotation_type : RotationModelType\n    Type of rotation model that is to be created.\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Target frame of rotation model.\n\n\n\n\n"
                },
                "RotationModelType": {
                    "simple_rotation_model": "",
                    "spice_rotation_model": "",
                    "gcrs_to_itrs_rotation_model": "",
                    "synchronous_rotation_model": "",
                    "planetary_rotation_model": "",
                    "__docstring__": "\nEnumeration of rotation model types.\n\nEnumeration of rotation model types supported by tudat.\n\n\n\n\n\n",
                    "name": "RotationModelType",
                    "short_summary": "Enumeration of rotation model types.",
                    "extended_summary": "Enumeration of rotation model types supported by tudat.\n",
                    "members": [
                        {
                            "name": "simple_rotation_model",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "spice_rotation_model",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "gcrs_to_itrs_rotation_model",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "synchronous_rotation_model",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "planetary_rotation_model",
                            "description": null,
                            "value": null
                        }
                    ]
                },
                "IAUConventions": {
                    "iau_2000_a": "",
                    "iau_2000_b": "",
                    "iau_2006": "",
                    "__docstring__": "\nEnumeration of IAU conventions for Earth rotation.\n\nEnumeration of IAU conventions for Earth rotation supported by tudat.\n\n\n\n\n\n",
                    "name": "IAUConventions",
                    "short_summary": "Enumeration of IAU conventions for Earth rotation.",
                    "extended_summary": "Enumeration of IAU conventions for Earth rotation supported by tudat.\n",
                    "members": [
                        {
                            "name": "iau_2000_a",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "iau_2000_b",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "iau_2006",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            },
            "shape": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/environment_setup",
                "file": "shape.yaml",
                "_implicit_name": "shape",
                "config": null,
                "summary": null,
                "extended_summary": "This module consists of factory functions for setting up the\nshape models of celestial bodies in an environment.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": null,
                "classes": [
                    {
                        "name": "BodyShapeSettings",
                        "short_summary": "Base class for providing settings for body shape model.",
                        "deprecation_warning": null,
                        "extended_summary": "Functional (base) class for settings of body shape models that require no information in addition to their type.\nBody shape model settings requiring additional information must be defined using an object derived from this class.\n",
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "SphericalBodyShapeSettings",
                        "short_summary": "Class for defining model settings of a strictly spherical body shape.",
                        "deprecation_warning": null,
                        "extended_summary": "`BodyShapeSettings` derived class for strictly spherical body shape model settings.",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "radius",
                                "type": "float",
                                "description": "Radius specifying spherical body shape."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "OblateSphericalBodyShapeSettings",
                        "short_summary": "Class for defining model settings of a oblate spherical body shape.",
                        "deprecation_warning": null,
                        "extended_summary": "`BodyShapeSettings` derived class for oblate spherical body shape model settings.",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "equatorial_radius",
                                "type": "float",
                                "description": "Equatorial radius of the oblate spherical body shape."
                            },
                            {
                                "name": "flattening",
                                "type": "float",
                                "description": "Flattening of spheroid shape model."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "spherical",
                        "short_summary": "Factory function for creating spherical body shape model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining strictly spherical body shape model entirely from single radius parameter.\nThis function creates an instance of an `BodyShapeModel` derived `SphericalBodyShapeSettings` object.\n",
                        "parameters": [
                            {
                                "name": "radius",
                                "type": "float",
                                "description": "Radius specifying spherical body shape."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SphericalBodyShapeSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_spice",
                        "short_summary": "Factory function for creating spherical body shape model settings entirely from spice.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining spherical body shape model entirely from spice parameters.\nThis function creates an instance of an `BodyShapeModel` object.\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "BodyShapeSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "oblate_spherical",
                        "short_summary": "Factory function for creating oblate spherical body shape model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining oblate spherical body shape model from equatorial radius and flattening parameter.\nThis function creates an instance of an `BodyShapeModel` derived `OblateSphericalBodyShapeSettings` object.\n",
                        "parameters": [
                            {
                                "name": "flattening",
                                "type": "float",
                                "description": "Flattening parameter specifying oblate spherical body shape."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "OblateSphericalBodyShapeSettings",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "shape",
                "version": null,
                "spherical": "\nFactory function for creating spherical body shape model settings.\n\nFactory function for settings object, defining strictly spherical body shape model entirely from single radius parameter.\nThis function creates an instance of an `BodyShapeModel` derived `SphericalBodyShapeSettings` object.\n\n\nParameters\n----------\nradius : float\n    Radius specifying spherical body shape.\nReturns\n-------\nSphericalBodyShapeSettings\n    None\n\n\n\n\n\n",
                "spherical_spice": "\nFactory function for creating spherical body shape model settings entirely from spice.\n\nFactory function for settings object, defining spherical body shape model entirely from spice parameters.\nThis function creates an instance of an `BodyShapeModel` object.\n\nReturns\n-------\nBodyShapeSettings\n    None\n\n\n\n\n\n",
                "oblate_spherical": "\nFactory function for creating oblate spherical body shape model settings.\n\nFactory function for settings object, defining oblate spherical body shape model from equatorial radius and flattening parameter.\nThis function creates an instance of an `BodyShapeModel` derived `OblateSphericalBodyShapeSettings` object.\n\n\nParameters\n----------\nflattening : float\n    Flattening parameter specifying oblate spherical body shape.\nReturns\n-------\nOblateSphericalBodyShapeSettings\n    None\n\n\n\n\n\n",
                "BodyShapeSettings": {
                    "__docstring__": "\nBase class for providing settings for body shape model.\n\nFunctional (base) class for settings of body shape models that require no information in addition to their type.\nBody shape model settings requiring additional information must be defined using an object derived from this class.\n\n\n\n\n\n"
                },
                "SphericalBodyShapeSettings": {
                    "__docstring__": "\nClass for defining model settings of a strictly spherical body shape.\n\n`BodyShapeSettings` derived class for strictly spherical body shape model settings.\n\nAttributes\n----------\nradius : float\n    Radius specifying spherical body shape.\n\n\n\n\n"
                },
                "OblateSphericalBodyShapeSettings": {
                    "__docstring__": "\nClass for defining model settings of a oblate spherical body shape.\n\n`BodyShapeSettings` derived class for oblate spherical body shape model settings.\n\nAttributes\n----------\nequatorial_radius : float\n    Equatorial radius of the oblate spherical body shape.\nflattening : float\n    Flattening of spheroid shape model.\n\n\n\n\n"
                }
            }
        },
        "propagation_setup": {
            "type": "package",
            "path": "./tudat-multidoc/docstrings/numerical_simulation/propagation_setup",
            "file": "__package__.yaml",
            "_implicit_name": "propagation_setup",
            "config": null,
            "summary": null,
            "extended_summary": "This module consists of factory functions for setting up the\npropagation component of a simulation.\n",
            "routine_listings": null,
            "see_also": null,
            "notes": null,
            "references": null,
            "examples": null,
            "enums": null,
            "classes": null,
            "functions": [
                {
                    "name": "create_acceleration_models",
                    "short_summary": "Function to create a set of acceleration models from a dictionary of bodies linked to acceleration model types.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to create a set of acceleration models from a map of bodies and acceleration model types. The propagated\nbodies and central bodies are provided as two separate lists with the same order.\n",
                    "parameters": [
                        {
                            "name": "body_system",
                            "type": "SystemOfBodies",
                            "description": "System of bodies to be used in the propagation."
                        },
                        {
                            "name": "selected_acceleration_per_body",
                            "type": "SelectedAccelerationMap",
                            "description": "Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key."
                        },
                        {
                            "name": "bodies_to_propagate",
                            "type": "list",
                            "description": "List of bodies to propagate."
                        },
                        {
                            "name": "central_bodies",
                            "type": "list",
                            "description": "List of central bodies, each referred to each propagated body in the same order."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "AccelerationMap",
                        "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration models."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "create_torque_models",
                    "short_summary": "Function to create a set of acceleration models from a dictionary of bodies linked to acceleration model types.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to create a set of acceleration models from a map of bodies and acceleration model types. The propagated\nbodies is provided as a list.\n",
                    "parameters": [
                        {
                            "name": "body_system",
                            "type": "SystemOfBodies",
                            "description": "System of bodies to be used in the propagation."
                        },
                        {
                            "name": "selected_torque_per_body",
                            "type": "SelectedTorqueMap",
                            "description": "Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key."
                        },
                        {
                            "name": "bodies_to_propagate",
                            "type": "list",
                            "description": "List of bodies to propagate."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "TorqueModelMap",
                        "description": "Set of torques acting on the bodies to propagate, provided as torque models."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_initial_state_of_bodies",
                    "short_summary": "Function to get the states of a set of bodies, with respect to some set of central bodies, at the requested time.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to get the states of a set of bodies, with respect to some set of central bodies, at the requested time.\n",
                    "parameters": [
                        {
                            "name": "bodies_to_propagate",
                            "type": "list[str]",
                            "description": "List of bodies to be propagated."
                        },
                        {
                            "name": "central_bodies",
                            "type": "list[str]",
                            "description": "List of central bodies, each referred to a body being propagated (in the same order)."
                        },
                        {
                            "name": "bodies_to_propagate",
                            "type": "body_system",
                            "description": "System of bodies used in the propagation."
                        },
                        {
                            "name": "initial_time",
                            "type": "float",
                            "description": "Initial time of the propagation."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "numpy.ndarray",
                        "description": "Time at which the states should be retrieved."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                }
            ],
            "constants": null,
            "modules": [
                "acceleration",
                "dependent_variable",
                "integrator",
                "mass_rate",
                "propagator",
                "torque",
                "thrust"
            ],
            "name": "propagation_setup",
            "version": null,
            "create_acceleration_models": "\nFunction to create a set of acceleration models from a dictionary of bodies linked to acceleration model types.\n\nFunction to create a set of acceleration models from a map of bodies and acceleration model types. The propagated\nbodies and central bodies are provided as two separate lists with the same order.\n\n\nParameters\n----------\nbody_system : SystemOfBodies\n    System of bodies to be used in the propagation.\nselected_acceleration_per_body : SelectedAccelerationMap\n    Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key.\nbodies_to_propagate : list\n    List of bodies to propagate.\ncentral_bodies : list\n    List of central bodies, each referred to each propagated body in the same order.\nReturns\n-------\nAccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration models.\n\n\n\n\n\n",
            "create_torque_models": "\nFunction to create a set of acceleration models from a dictionary of bodies linked to acceleration model types.\n\nFunction to create a set of acceleration models from a map of bodies and acceleration model types. The propagated\nbodies is provided as a list.\n\n\nParameters\n----------\nbody_system : SystemOfBodies\n    System of bodies to be used in the propagation.\nselected_torque_per_body : SelectedTorqueMap\n    Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key.\nbodies_to_propagate : list\n    List of bodies to propagate.\nReturns\n-------\nTorqueModelMap\n    Set of torques acting on the bodies to propagate, provided as torque models.\n\n\n\n\n\n",
            "get_initial_state_of_bodies": "\nFunction to get the states of a set of bodies, with respect to some set of central bodies, at the requested time.\n\nFunction to get the states of a set of bodies, with respect to some set of central bodies, at the requested time.\n\n\nParameters\n----------\nbodies_to_propagate : list[str]\n    List of bodies to be propagated.\ncentral_bodies : list[str]\n    List of central bodies, each referred to a body being propagated (in the same order).\nbodies_to_propagate : body_system\n    System of bodies used in the propagation.\ninitial_time : float\n    Initial time of the propagation.\nReturns\n-------\nnumpy.ndarray\n    Time at which the states should be retrieved.\n\n\n\n\n\n",
            "acceleration": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/propagation_setup",
                "file": "acceleration.yaml",
                "_implicit_name": "acceleration",
                "config": null,
                "summary": null,
                "extended_summary": "This module provides the functionality for creating acceleration\nsettings.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": [
                    {
                        "name": "AvailableAcceleration",
                        "short_summary": "Enumeration of available acceleration types.",
                        "extended_summary": "Enumeration of acceleration types supported by tudat.\n",
                        "members": [
                            {
                                "name": "undefined_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "point_mass_gravity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "central_gravity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "aerodynamic_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "cannon_ball_radiation_pressure_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "spherical_harmonic_gravity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "mutual_spherical_harmonic_gravity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "third_body_point_mass_gravity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "third_body_central_gravity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "third_body_spherical_harmonic_gravity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "third_body_mutual_spherical_harmonic_gravity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "thrust_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "relativistic_correction_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "empirical_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "direct_tidal_dissipation_in_central_body_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "direct_tidal_dissipation_in_orbiting_body_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "panelled_radiation_pressure_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "momentum_wheel_desaturation_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "solar_sail_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "custom_acceleration_type",
                                "description": null,
                                "value": null
                            }
                        ]
                    }
                ],
                "classes": [
                    {
                        "name": "AccelerationSettings",
                        "short_summary": "Functional base class to define settings for accelerations.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "SphericalHarmonicAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for the spherical harmonic acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "MutualSphericalHarmonicAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for the mutual spherical harmonic acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "RelativisticAccelerationCorrectionSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for the relativistic acceleration correction.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "EmpiricalAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for the empirical acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "CustomAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for custom acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "DirectTidalDissipationAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "ThrustAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "direction_settings",
                                "type": "ThrustDirectionSettings",
                                "description": "Thrust direction settings object."
                            },
                            {
                                "name": "magnitude_settings",
                                "type": "ThrustMagnitudeSettings",
                                "description": "Thrust magnitude settings object."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "MomentumWheelDesaturationAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for momentum wheel desaturation acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "point_mass_gravity",
                        "short_summary": "Creates settings for the point-mass gravity acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for the point-mass gravity acceleration. The body exerting the acceleration needs to have a\ngravity field model defined.\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "AccelerationSettings",
                            "description": "Acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "aerodynamic",
                        "short_summary": "Creates settings for the aerodynamic acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for the aerodynamic acceleration. The body exerting the acceleration needs to have an\natmosphere defined.\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "AccelerationSettings",
                            "description": "Acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "cannonball_radiation_pressure",
                        "short_summary": "Creates settings for the cannonball radiation pressure acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for the radiation pressure acceleration, for which a cannonball model is used. In this model,\nthe effective acceleration is colinear with the vector connecting the source of radiation and the target.\nThe body undergoing the acceleration needs to have a radiation pressure model defined, while the body emitting\nradiation needs to have radiative properties defined (the Sun has default ones).\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "AccelerationSettings",
                            "description": "Acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic_gravity",
                        "short_summary": "Creates settings for the spherical harmonic gravity acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for the spherical harmonic gravity acceleration, accounting for a finite (given) number\nof degree and order. The body exerting the acceleration needs to have a spherical harmonic gravity field model\ndefined.\n",
                        "parameters": [
                            {
                                "name": "maximum_degree",
                                "type": "int",
                                "description": "Maximum degree of the spherical harmonic expansion."
                            },
                            {
                                "name": "maximum_order",
                                "type": "int",
                                "description": "Maximum order of the spherical harmonic expansion."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SphericalHarmonicAccelerationSettings",
                            "description": "Spherical harmonic acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "mutual_spherical_harmonic_gravity",
                        "short_summary": "Creates settings for the mutual spherical harmonic gravity acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for the mutual spherical harmonic gravity acceleration, accounting for a finite (given) number\nof degree and order for both bodies. Both the body exerting the acceleration and the body undergoing it need to\nhave spherical harmonic gravity field models defined. In addition, the body undergoing the acceleration needs to\nhave a rotational model defined. For the case where a third-body mutual spherical harmonic acceleration,\nadditional parameters have to be provided that denote the expansion degree/order of the central body.\n",
                        "parameters": [
                            {
                                "name": "maximum_degree_body_exerting",
                                "type": "int",
                                "description": "Maximum degree of the spherical harmonic expansion for the body exerting the acceleration."
                            },
                            {
                                "name": "maximum_order_body_exerting",
                                "type": "int",
                                "description": "Maximum order of the spherical harmonic expansion for the body exerting the acceleration."
                            },
                            {
                                "name": "maximum_degree_body_undergoing",
                                "type": "int",
                                "description": "Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration."
                            },
                            {
                                "name": "maximum_order_body_undergoing",
                                "type": "int",
                                "description": "Maximum order of the spherical harmonic expansion for the body undergoing the acceleration."
                            },
                            {
                                "name": "maximum_degree_central_body",
                                "type": "int, default=0",
                                "description": "Maximum degree of the spherical harmonic expansion for the central body, if needed."
                            },
                            {
                                "name": "maximum_order_central_body",
                                "type": "int, default=0",
                                "description": "Maximum order of the spherical harmonic expansion for the central body, if needed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "MutualSphericalHarmonicAccelerationSettings",
                            "description": "Spherical harmonic acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "relativistic_correction",
                        "short_summary": "Creates settings for the relativistic acceleration correction.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for typical relativistic acceleration corrections: the Schwarzschild, Lense-Thirring and de\nSitter terms (see 'General relativity and Space Geodesy' by L. Combrinck, 2012). It implements the model of\n2010 Conventions (chapter 10, section 3). Here, the \u2018primary body\u2019 for a planetary orbiter should always be set\nas the Sun (only relevant for de Sitter correction). The angular momentum vector of the orbited body is only\nrelevant for Lense-Thirring correction.\n",
                        "parameters": [
                            {
                                "name": "use_schwarzschild",
                                "type": "bool",
                                "description": "Maximum degree of the spherical harmonic expansion for the body exerting the acceleration."
                            },
                            {
                                "name": "use_lense_thirring",
                                "type": "bool",
                                "description": "Maximum order of the spherical harmonic expansion for the body exerting the acceleration."
                            },
                            {
                                "name": "use_de_sitter",
                                "type": "bool",
                                "description": "Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration."
                            },
                            {
                                "name": "de_sitter_central_body",
                                "type": "str, default=\"\"",
                                "description": "Maximum order of the spherical harmonic expansion for the body undergoing the acceleration."
                            },
                            {
                                "name": "lense_thirring_angular_momentum",
                                "type": "numpy.ndarray, default=numpy.array([0, 0, 0])",
                                "description": "Maximum degree of the spherical harmonic expansion for the central body, if needed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "RelativisticAccelerationCorrectionSettings",
                            "description": "Relativistic acceleration correction settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "empirical",
                        "short_summary": "Creates settings for empirical acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for empirical accelerations. These are expressed in the\nRSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).\nThe acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:\na constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of\nthe RSW frame.\n",
                        "parameters": [
                            {
                                "name": "constant_acceleration",
                                "type": "numpy.ndarray, default=numpy.array([0, 0, 0])",
                                "description": "Constant term, defined in the RSW frame."
                            },
                            {
                                "name": "sine_acceleration",
                                "type": "numpy.ndarray, default=numpy.array([0, 0, 0])",
                                "description": "Sine term (function of the true anomaly), defined in the RSW frame.."
                            },
                            {
                                "name": "cosine_acceleration",
                                "type": "numpy.ndarray, default=numpy.array([0, 0, 0])",
                                "description": "Cosine term (function of the true anomaly), defined in the RSW frame.."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "EmpiricalAccelerationSettings",
                            "description": "Empirical acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom",
                        "short_summary": "Creates settings for custom acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for empirical accelerations. These are expressed in the\nRSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).\nThe acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:\na constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of\nthe RSW frame.\n",
                        "parameters": [
                            {
                                "name": "acceleration_function",
                                "type": "callable[[float], list]",
                                "description": "Custom acceleration function with time as an independent variable."
                            },
                            {
                                "name": "scaling_function",
                                "type": "callable[[float], float], default=None",
                                "description": "Scaling function with time as an independent variable to be multiplied by the custom acceleration function."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CustomAccelerationSettings",
                            "description": "Custom acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "direct_tidal_dissipation_acceleration",
                        "short_summary": "Creates settings for custom acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for tidal accelerations. The direct of tidal effects in a satellite system is applied directly as\nan acceleration (as opposed to a modification of spherical harmonic coefficients).\nThe model is based on Lainey et al. (2007, 2012). It can compute the acceleration due to tides, and in\nparticular tidal dissipation, on a planetary satellite. The acceleration computed can account for either the\neffect of tide raised on the satellite by the planet or on the planet by the satellite. The satellite is assumed\nto be tidally locked to the planet.\n",
                        "parameters": [
                            {
                                "name": "k2_love_number",
                                "type": "float",
                                "description": "Value of the k2 Love number."
                            },
                            {
                                "name": "time_lag",
                                "type": "float",
                                "description": "Value of the tidal time lag."
                            },
                            {
                                "name": "include_direct_radial_component",
                                "type": "bool, default=True",
                                "description": "It denotes whether the term independent of the time lag is to be computed."
                            },
                            {
                                "name": "use_tide_raised_on_planet",
                                "type": "bool, default=True",
                                "description": "It denotes whether the tide raised on the planet is to be modelled (if true) or the tide raised on the satellite (if false)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "DirectTidalDissipationAccelerationSettings",
                            "description": "Direct tidal dissipation acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "momentum_wheel_desaturation_acceleration",
                        "short_summary": "Creates settings for momentum wheel desaturation acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "The acceleration model is purpose-built to represent short bursts of thrust, such as a momentum wheel desaturation.\nA typical use case is precise orbit determination, but the functionality can be used just as well in propagation\n(for instance to model an impulsive manuever in a continuous manner when going from preliminary modelling to\n'full' modelling). The thrust is modelled similarly to Fig. 3 of Alessi et al. (2012), with the main difference\nbeing that a third-order polynomial to go from zero acceleration to the maximum acceleration level is employed.\nBy using a 3rd-order polynomial and imposing continuity in the value and first derivative of the acceleration,\ndefining the 'rise time' (time it takes acceleration to go from 0 to its maximum level), the total time where\nthere is non-zero thrust ('total maneuver time'), and the total Delta V exerted by a single maneuver,\nthe acceleration profile is fully defined.\n",
                        "parameters": [
                            {
                                "name": "thrust_mid_times",
                                "type": "list[float]",
                                "description": "Set of middle point in times in the maneuver denoting the epoch of each maneuver."
                            },
                            {
                                "name": "delta_v_values",
                                "type": "list[numpy.ndarray]",
                                "description": "Set of delta V, one for each maneuver."
                            },
                            {
                                "name": "total_maneuver_time",
                                "type": "float",
                                "description": "Total duration of every maneuver."
                            },
                            {
                                "name": "maneuver_rise_time",
                                "type": "float",
                                "description": "Time taken by the acceleration to go from zero to its maximum level."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "MomentumWheelDesaturationAccelerationSettings",
                            "description": "Momentum wheel desaturation acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "thrust_from_direction_and_magnitude",
                        "short_summary": "Creates settings for thrust acceleration from thrust guidance settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for thrust acceleration from thrust guidance settings. The thrust direction and magnitude are\nsupplied  separately in the form of dedicated settings objects (see the API for the respective classes).\n",
                        "parameters": [
                            {
                                "name": "thrust_direction_settings",
                                "type": "ThrustDirectionSettings",
                                "description": "Thrust direction settings object."
                            },
                            {
                                "name": "thrust_magnitude_settings",
                                "type": "ThrustMagnitudeSettings",
                                "description": "Thrust magnitude settings object."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ThrustAccelerationSettings",
                            "description": "Thrust acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "thrust_from_interpolator_variable_isp",
                        "short_summary": "Creates settings for thrust acceleration from interpolated thrust data with variable specific impulse.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for thrust acceleration from interpolated thrust data and variable specific impulse. The thrust \ndirection and magnitude is defined through the related interpolator (which uses time as independent variable) and \nit returns the thrust direction vector in the specified frame (it can be local-vertical-local-horizontal or inertial). \nThe specific impulse is defined through a user-defined function of time.\n",
                        "parameters": [
                            {
                                "name": "data_interpolation_settings",
                                "type": "DataInterpolationSettings<float, numpy.ndarray>",
                                "description": "Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time."
                            },
                            {
                                "name": "specific_impulse_function",
                                "type": "callable[[double], double]",
                                "description": "Specific impulse provided as a function of time."
                            },
                            {
                                "name": "thrust_frame",
                                "type": "ThrustFrames, default=unspecified_thrust_frame",
                                "description": "Frame in which the thrust direction vector is represented."
                            },
                            {
                                "name": "central_body",
                                "type": "str, default=\"\"",
                                "description": "Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ThrustAccelerationSettings",
                            "description": "Thrust acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "thrust_from_interpolator",
                        "short_summary": "Creates settings for thrust acceleration from interpolated thrust data with constant specific impulse.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for thrust acceleration from interpolated thrust data and constant specific impulse. The thrust \ndirection and magnitude is defined through the related interpolator (which uses time as independent variable) and \nit returns the thrust direction vector in the specified frame (it can be local-vertical-local-horizontal or inertial). \n",
                        "parameters": [
                            {
                                "name": "data_interpolation_settings",
                                "type": "DataInterpolationSettings<float, numpy.ndarray>",
                                "description": "Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time."
                            },
                            {
                                "name": "constant_specific_impulse",
                                "type": "float",
                                "description": "Constant specific impulse."
                            },
                            {
                                "name": "thrust_frame",
                                "type": "ThrustFrames, default=unspecified_thrust_frame",
                                "description": "Frame in which the thrust direction vector is represented."
                            },
                            {
                                "name": "central_body",
                                "type": "str, default=\"\"",
                                "description": "Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ThrustAccelerationSettings",
                            "description": "Thrust acceleration settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "acceleration",
                "version": null,
                "point_mass_gravity": "\nCreates settings for the point-mass gravity acceleration.\n\nCreates settings for the point-mass gravity acceleration. The body exerting the acceleration needs to have a\ngravity field model defined.\n\nReturns\n-------\nAccelerationSettings\n    Acceleration settings object.\n\n\n\n\n\n",
                "aerodynamic": "\nCreates settings for the aerodynamic acceleration.\n\nCreates settings for the aerodynamic acceleration. The body exerting the acceleration needs to have an\natmosphere defined.\n\nReturns\n-------\nAccelerationSettings\n    Acceleration settings object.\n\n\n\n\n\n",
                "cannonball_radiation_pressure": "\nCreates settings for the cannonball radiation pressure acceleration.\n\nCreates settings for the radiation pressure acceleration, for which a cannonball model is used. In this model,\nthe effective acceleration is colinear with the vector connecting the source of radiation and the target.\nThe body undergoing the acceleration needs to have a radiation pressure model defined, while the body emitting\nradiation needs to have radiative properties defined (the Sun has default ones).\n\nReturns\n-------\nAccelerationSettings\n    Acceleration settings object.\n\n\n\n\n\n",
                "spherical_harmonic_gravity": "\nCreates settings for the spherical harmonic gravity acceleration.\n\nCreates settings for the spherical harmonic gravity acceleration, accounting for a finite (given) number\nof degree and order. The body exerting the acceleration needs to have a spherical harmonic gravity field model\ndefined.\n\n\nParameters\n----------\nmaximum_degree : int\n    Maximum degree of the spherical harmonic expansion.\nmaximum_order : int\n    Maximum order of the spherical harmonic expansion.\nReturns\n-------\nSphericalHarmonicAccelerationSettings\n    Spherical harmonic acceleration settings object.\n\n\n\n\n\n",
                "mutual_spherical_harmonic_gravity": "\nCreates settings for the mutual spherical harmonic gravity acceleration.\n\nCreates settings for the mutual spherical harmonic gravity acceleration, accounting for a finite (given) number\nof degree and order for both bodies. Both the body exerting the acceleration and the body undergoing it need to\nhave spherical harmonic gravity field models defined. In addition, the body undergoing the acceleration needs to\nhave a rotational model defined. For the case where a third-body mutual spherical harmonic acceleration,\nadditional parameters have to be provided that denote the expansion degree/order of the central body.\n\n\nParameters\n----------\nmaximum_degree_body_exerting : int\n    Maximum degree of the spherical harmonic expansion for the body exerting the acceleration.\nmaximum_order_body_exerting : int\n    Maximum order of the spherical harmonic expansion for the body exerting the acceleration.\nmaximum_degree_body_undergoing : int\n    Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration.\nmaximum_order_body_undergoing : int\n    Maximum order of the spherical harmonic expansion for the body undergoing the acceleration.\nmaximum_degree_central_body : int, default=0\n    Maximum degree of the spherical harmonic expansion for the central body, if needed.\nmaximum_order_central_body : int, default=0\n    Maximum order of the spherical harmonic expansion for the central body, if needed.\nReturns\n-------\nMutualSphericalHarmonicAccelerationSettings\n    Spherical harmonic acceleration settings object.\n\n\n\n\n\n",
                "relativistic_correction": "\nCreates settings for the relativistic acceleration correction.\n\nCreates settings for typical relativistic acceleration corrections: the Schwarzschild, Lense-Thirring and de\nSitter terms (see 'General relativity and Space Geodesy' by L. Combrinck, 2012). It implements the model of\n2010 Conventions (chapter 10, section 3). Here, the \u2018primary body\u2019 for a planetary orbiter should always be set\nas the Sun (only relevant for de Sitter correction). The angular momentum vector of the orbited body is only\nrelevant for Lense-Thirring correction.\n\n\nParameters\n----------\nuse_schwarzschild : bool\n    Maximum degree of the spherical harmonic expansion for the body exerting the acceleration.\nuse_lense_thirring : bool\n    Maximum order of the spherical harmonic expansion for the body exerting the acceleration.\nuse_de_sitter : bool\n    Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration.\nde_sitter_central_body : str, default=\"\"\n    Maximum order of the spherical harmonic expansion for the body undergoing the acceleration.\nlense_thirring_angular_momentum : numpy.ndarray, default=numpy.array([0, 0, 0])\n    Maximum degree of the spherical harmonic expansion for the central body, if needed.\nReturns\n-------\nRelativisticAccelerationCorrectionSettings\n    Relativistic acceleration correction settings object.\n\n\n\n\n\n",
                "empirical": "\nCreates settings for empirical acceleration.\n\nCreates settings for empirical accelerations. These are expressed in the\nRSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).\nThe acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:\na constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of\nthe RSW frame.\n\n\nParameters\n----------\nconstant_acceleration : numpy.ndarray, default=numpy.array([0, 0, 0])\n    Constant term, defined in the RSW frame.\nsine_acceleration : numpy.ndarray, default=numpy.array([0, 0, 0])\n    Sine term (function of the true anomaly), defined in the RSW frame..\ncosine_acceleration : numpy.ndarray, default=numpy.array([0, 0, 0])\n    Cosine term (function of the true anomaly), defined in the RSW frame..\nReturns\n-------\nEmpiricalAccelerationSettings\n    Empirical acceleration settings object.\n\n\n\n\n\n",
                "custom": "\nCreates settings for custom acceleration.\n\nCreates settings for empirical accelerations. These are expressed in the\nRSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).\nThe acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:\na constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of\nthe RSW frame.\n\n\nParameters\n----------\nacceleration_function : callable[[float], list]\n    Custom acceleration function with time as an independent variable.\nscaling_function : callable[[float], float], default=None\n    Scaling function with time as an independent variable to be multiplied by the custom acceleration function.\nReturns\n-------\nCustomAccelerationSettings\n    Custom acceleration settings object.\n\n\n\n\n\n",
                "direct_tidal_dissipation_acceleration": "\nCreates settings for custom acceleration.\n\nCreates settings for tidal accelerations. The direct of tidal effects in a satellite system is applied directly as\nan acceleration (as opposed to a modification of spherical harmonic coefficients).\nThe model is based on Lainey et al. (2007, 2012). It can compute the acceleration due to tides, and in\nparticular tidal dissipation, on a planetary satellite. The acceleration computed can account for either the\neffect of tide raised on the satellite by the planet or on the planet by the satellite. The satellite is assumed\nto be tidally locked to the planet.\n\n\nParameters\n----------\nk2_love_number : float\n    Value of the k2 Love number.\ntime_lag : float\n    Value of the tidal time lag.\ninclude_direct_radial_component : bool, default=True\n    It denotes whether the term independent of the time lag is to be computed.\nuse_tide_raised_on_planet : bool, default=True\n    It denotes whether the tide raised on the planet is to be modelled (if true) or the tide raised on the satellite (if false).\nReturns\n-------\nDirectTidalDissipationAccelerationSettings\n    Direct tidal dissipation acceleration settings object.\n\n\n\n\n\n",
                "momentum_wheel_desaturation_acceleration": "\nCreates settings for momentum wheel desaturation acceleration.\n\nThe acceleration model is purpose-built to represent short bursts of thrust, such as a momentum wheel desaturation.\nA typical use case is precise orbit determination, but the functionality can be used just as well in propagation\n(for instance to model an impulsive manuever in a continuous manner when going from preliminary modelling to\n'full' modelling). The thrust is modelled similarly to Fig. 3 of Alessi et al. (2012), with the main difference\nbeing that a third-order polynomial to go from zero acceleration to the maximum acceleration level is employed.\nBy using a 3rd-order polynomial and imposing continuity in the value and first derivative of the acceleration,\ndefining the 'rise time' (time it takes acceleration to go from 0 to its maximum level), the total time where\nthere is non-zero thrust ('total maneuver time'), and the total Delta V exerted by a single maneuver,\nthe acceleration profile is fully defined.\n\n\nParameters\n----------\nthrust_mid_times : list[float]\n    Set of middle point in times in the maneuver denoting the epoch of each maneuver.\ndelta_v_values : list[numpy.ndarray]\n    Set of delta V, one for each maneuver.\ntotal_maneuver_time : float\n    Total duration of every maneuver.\nmaneuver_rise_time : float\n    Time taken by the acceleration to go from zero to its maximum level.\nReturns\n-------\nMomentumWheelDesaturationAccelerationSettings\n    Momentum wheel desaturation acceleration settings object.\n\n\n\n\n\n",
                "thrust_from_direction_and_magnitude": "\nCreates settings for thrust acceleration from thrust guidance settings.\n\nCreates settings for thrust acceleration from thrust guidance settings. The thrust direction and magnitude are\nsupplied  separately in the form of dedicated settings objects (see the API for the respective classes).\n\n\nParameters\n----------\nthrust_direction_settings : ThrustDirectionSettings\n    Thrust direction settings object.\nthrust_magnitude_settings : ThrustMagnitudeSettings\n    Thrust magnitude settings object.\nReturns\n-------\nThrustAccelerationSettings\n    Thrust acceleration settings object.\n\n\n\n\n\n",
                "thrust_from_interpolator_variable_isp": "\nCreates settings for thrust acceleration from interpolated thrust data with variable specific impulse.\n\nCreates settings for thrust acceleration from interpolated thrust data and variable specific impulse. The thrust \ndirection and magnitude is defined through the related interpolator (which uses time as independent variable) and \nit returns the thrust direction vector in the specified frame (it can be local-vertical-local-horizontal or inertial). \nThe specific impulse is defined through a user-defined function of time.\n\n\nParameters\n----------\ndata_interpolation_settings : DataInterpolationSettings<float, numpy.ndarray>\n    Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time.\nspecific_impulse_function : callable[[double], double]\n    Specific impulse provided as a function of time.\nthrust_frame : ThrustFrames, default=unspecified_thrust_frame\n    Frame in which the thrust direction vector is represented.\ncentral_body : str, default=\"\"\n    Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default).\nReturns\n-------\nThrustAccelerationSettings\n    Thrust acceleration settings object.\n\n\n\n\n\n",
                "thrust_from_interpolator": "\nCreates settings for thrust acceleration from interpolated thrust data with constant specific impulse.\n\nCreates settings for thrust acceleration from interpolated thrust data and constant specific impulse. The thrust \ndirection and magnitude is defined through the related interpolator (which uses time as independent variable) and \nit returns the thrust direction vector in the specified frame (it can be local-vertical-local-horizontal or inertial). \n\n\nParameters\n----------\ndata_interpolation_settings : DataInterpolationSettings<float, numpy.ndarray>\n    Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time.\nconstant_specific_impulse : float\n    Constant specific impulse.\nthrust_frame : ThrustFrames, default=unspecified_thrust_frame\n    Frame in which the thrust direction vector is represented.\ncentral_body : str, default=\"\"\n    Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default).\nReturns\n-------\nThrustAccelerationSettings\n    Thrust acceleration settings object.\n\n\n\n\n\n",
                "AccelerationSettings": {
                    "__docstring__": "\nFunctional base class to define settings for accelerations.\n\n\n\n\n\n"
                },
                "SphericalHarmonicAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for the spherical harmonic acceleration.\n\n\n\n\n\n"
                },
                "MutualSphericalHarmonicAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for the mutual spherical harmonic acceleration.\n\n\n\n\n\n"
                },
                "RelativisticAccelerationCorrectionSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for the relativistic acceleration correction.\n\n\n\n\n\n"
                },
                "EmpiricalAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for the empirical acceleration.\n\n\n\n\n\n"
                },
                "CustomAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for custom acceleration.\n\n\n\n\n\n"
                },
                "DirectTidalDissipationAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration.\n\n\n\n\n\n"
                },
                "ThrustAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration.\n\n\nAttributes\n----------\ndirection_settings : ThrustDirectionSettings\n    Thrust direction settings object.\nmagnitude_settings : ThrustMagnitudeSettings\n    Thrust magnitude settings object.\n\n\n\n\n"
                },
                "MomentumWheelDesaturationAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for momentum wheel desaturation acceleration.\n\n\n\n\n\n"
                },
                "AvailableAcceleration": {
                    "undefined_acceleration_type": "",
                    "point_mass_gravity_type": "",
                    "central_gravity_type": "",
                    "aerodynamic_type": "",
                    "cannon_ball_radiation_pressure_type": "",
                    "spherical_harmonic_gravity_type": "",
                    "mutual_spherical_harmonic_gravity_type": "",
                    "third_body_point_mass_gravity_type": "",
                    "third_body_central_gravity_type": "",
                    "third_body_spherical_harmonic_gravity_type": "",
                    "third_body_mutual_spherical_harmonic_gravity_type": "",
                    "thrust_acceleration_type": "",
                    "relativistic_correction_acceleration_type": "",
                    "empirical_acceleration_type": "",
                    "direct_tidal_dissipation_in_central_body_acceleration_type": "",
                    "direct_tidal_dissipation_in_orbiting_body_acceleration_type": "",
                    "panelled_radiation_pressure_acceleration_type": "",
                    "momentum_wheel_desaturation_acceleration_type": "",
                    "solar_sail_acceleration_type": "",
                    "custom_acceleration_type": "",
                    "__docstring__": "\nEnumeration of available acceleration types.\n\nEnumeration of acceleration types supported by tudat.\n\n\n\n\n\n",
                    "name": "AvailableAcceleration",
                    "short_summary": "Enumeration of available acceleration types.",
                    "extended_summary": "Enumeration of acceleration types supported by tudat.\n",
                    "members": [
                        {
                            "name": "undefined_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "point_mass_gravity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "central_gravity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "aerodynamic_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "cannon_ball_radiation_pressure_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "spherical_harmonic_gravity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "mutual_spherical_harmonic_gravity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "third_body_point_mass_gravity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "third_body_central_gravity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "third_body_spherical_harmonic_gravity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "third_body_mutual_spherical_harmonic_gravity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "thrust_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "relativistic_correction_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "empirical_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "direct_tidal_dissipation_in_central_body_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "direct_tidal_dissipation_in_orbiting_body_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "panelled_radiation_pressure_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "momentum_wheel_desaturation_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "solar_sail_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "custom_acceleration_type",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            },
            "dependent_variable": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/propagation_setup",
                "file": "dependent_variable.yaml",
                "_implicit_name": "dependent_variable",
                "config": null,
                "summary": null,
                "extended_summary": "This module provides the functionality for creating dependent variable\nsettings.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": [
                    {
                        "name": "PropagationDependentVariables",
                        "short_summary": "Enumeration of available propagation dependent variables.",
                        "extended_summary": "Enumeration of propagation dependent variables supported by tudat.\n",
                        "members": [
                            {
                                "name": "mach_number_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "altitude_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "airspeed_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "local_density_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "relative_speed_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "relative_position_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "relative_distance_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "relative_velocity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "radiation_pressure_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "total_acceleration_norm_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "single_acceleration_norm_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "total_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "single_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "aerodynamic_force_coefficients_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "aerodynamic_moment_coefficients_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "rotation_matrix_to_body_fixed_frame_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "intermediate_aerodynamic_rotation_matrix_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "relative_body_aerodynamic_orientation_angle_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "body_fixed_airspeed_based_velocity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "total_aerodynamic_g_load_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "stagnation_point_heat_flux_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "local_temperature_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "geodetic_latitude_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "control_surface_deflection_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "total_mass_rate_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "lvlh_to_inertial_frame_rotation_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "periapsis_altitude_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "total_torque_norm_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "single_torque_norm_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "total_torque_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "single_torque_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "body_fixed_groundspeed_based_velocity_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "keplerian_state_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "modified_equinoctial_state_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "spherical_harmonic_acceleration_terms_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "spherical_harmonic_acceleration_norm_terms_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "body_fixed_relative_cartesian_position_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "body_fixed_relative_spherical_position_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "total_gravity_field_variation_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "single_gravity_field_variation_acceleration_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "single_gravity_field_variation_acceleration_terms_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "acceleration_partial_wrt_body_translational_state_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "local_dynamic_pressure_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "local_aerodynamic_heat_rate_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "euler_angles_to_body_fixed_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "current_body_mass_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "radiation_pressure_coefficient_type",
                                "description": null,
                                "value": null
                            }
                        ]
                    }
                ],
                "classes": [
                    {
                        "name": "VariableSettings",
                        "short_summary": "Functional base class to define settings for variables.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "SingleDependentVariableSaveSettings",
                        "short_summary": "`VariableSettings`-derived class to define settings for dependent variables that are to be saved during propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "SingleAccelerationDependentVariableSaveSettings",
                        "short_summary": "`SingleDependentVariableSaveSettings`-derived class to save a single acceleration (norm or vector) during propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "create",
                        "short_summary": "Function to create settings for a generic dependent variable.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to create settings for a dependent variable. It creates objects that calculate dependent variables\nfrom the objects that define their settings. It is usually not relevant nor useful for the user.\n",
                        "parameters": [
                            {
                                "name": "dependent_variable_list",
                                "type": "list[SingleDependentVariableSaveSettings]",
                                "description": "List of dependent variables to be saved."
                            },
                            {
                                "name": "print_variable_indices",
                                "type": "bool, default=True",
                                "description": "Whether the types of dependent variables to be saved should be printed on the terminal."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "mach_number",
                        "short_summary": "Function to add the Mach number to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the Mach number to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with atmosphere with respect to which the Mach number is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "altitude",
                        "short_summary": "Function to add the altitude to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the altitude to the dependent variables to save. It requires an aerodynamic acceleration to be acting on the vehicle and it depends on the central body's shape.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with atmosphere with respect to which the altitude is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "airspeed",
                        "short_summary": "Function to add the airspeed to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the airspeed to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with atmosphere with respect to which the airspeed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "density",
                        "short_summary": "Function to add the local density to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the density (at position of body undergoing acceleration) to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "body_with_atmosphere",
                                "type": "str",
                                "description": "Body with atmosphere with respect to which the density is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "relative_speed",
                        "short_summary": "Function to add the relative speed (norm of the velocity vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the relative speed (norm of the velocity vector) with respect to a second body to the dependent variables to save. The relative speed is computed between the bodies' centers of mass.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "relative_body",
                                "type": "str",
                                "description": "Body with respect to which the relative speed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "relative_position",
                        "short_summary": "Function to add the relative position vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the relative position vector with respect to a second body to the dependent variables to save. The relative position is computed between the bodies' centers of mass.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "relative_body",
                                "type": "str",
                                "description": "Body with respect to which the relative position is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "relative_distance",
                        "short_summary": "Function to add the relative distance (norm of the position vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the relative distance (norm of the position vector) with respect to a second body to the dependent variables to save. The relative distance is computed between the bodies' centers of mass.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "relative_body",
                                "type": "str",
                                "description": "Body with respect to which the relative distance is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "relative_velocity",
                        "short_summary": "Function to add the relative velocity vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the relative velocity vector with respect to a second body to the dependent variables to save. The relative distance is computed between the bodies' centers of mass.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "relative_body",
                                "type": "str",
                                "description": "Body with respect to which the relative velocity is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "keplerian_state",
                        "short_summary": "Function to add the Keplerian state to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the Keplerian state to the dependent variables to save. The Keplerian state is returned in this order: 1: Semi-major Axis. 2: Eccentricity. 3: Inclination. 4: Argument of Periapsis. 5. Right Ascension of the Ascending Node. 6: True Anomaly.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the Keplerian state is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "modified_equinoctial_state",
                        "short_summary": "Function to add the modified equinoctial state to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the modified equinoctial state to the dependent variables to save. The value of the parameter I is automatically chosen as +1 or -1, depending on whether the inclination is smaller or larger than 90 degrees.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the modified equinoctial state is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_acceleration",
                        "short_summary": "Function to add an acceleration vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add an acceleration vector to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "acceleration_type",
                                "type": "AvailableAcceleration",
                                "description": "Acceleration type to be saved."
                            },
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_acceleration_norm",
                        "short_summary": "Function to add a scalar acceleration (norm of the acceleration vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add a scalar acceleration (norm of the acceleration vector) to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "acceleration_type",
                                "type": "AvailableAcceleration",
                                "description": "Acceleration type to be saved (see `AvailableAcceleration` enum)."
                            },
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_acceleration_norm",
                        "short_summary": "Function to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_acceleration",
                        "short_summary": "Function to add the total acceleration vector acting on a body to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total acceleration vector acting on a body to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_torque_norm",
                        "short_summary": "Function to add a single torque (norm of the torque vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add a single torque (norm of the torque vector) to the dependent variables to save. The altitude depends on the shape of the central body.",
                        "parameters": [
                            {
                                "name": "torque_type",
                                "type": "AvailableTorque",
                                "description": "Torque type to be saved."
                            },
                            {
                                "name": "body_undergoing_torque",
                                "type": "str",
                                "description": "Body undergoing torque."
                            },
                            {
                                "name": "body_exerting_torque",
                                "type": "str",
                                "description": "Body exerting torque."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_torque",
                        "short_summary": "Function to add a single torque vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add a single torque vector to the dependent variables to save. The altitude depends on the shape of the central body.",
                        "parameters": [
                            {
                                "name": "torque_type",
                                "type": "AvailableTorque",
                                "description": "Torque type to be saved."
                            },
                            {
                                "name": "body_undergoing_torque",
                                "type": "str",
                                "description": "Body undergoing torque."
                            },
                            {
                                "name": "body_exerting_torque",
                                "type": "str",
                                "description": "Body exerting torque."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_torque_norm",
                        "short_summary": "Function to add the total torque (norm of the torque vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total torque (norm of the torque vector) to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_torque",
                        "short_summary": "Function to add the total torque vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total torque vector to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic_terms_acceleration",
                        "short_summary": "Function to add a single term of the spherical harmonic acceleration vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add single term of the spherical harmonic acceleration vector to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting acceleration."
                            },
                            {
                                "name": "component_indices",
                                "type": "list[tuple]",
                                "description": "Tuples of (degree, order) indicating the terms to save."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic_terms_acceleration_norm",
                        "short_summary": "Function to add a single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting acceleration."
                            },
                            {
                                "name": "component_indices",
                                "type": "list[tuple]",
                                "description": "Tuples of (degree, order) indicating the terms to save."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "aerodynamic_force_coefficients",
                        "short_summary": "Function to add the aerodynamic force coefficients to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the aerodynamic force coefficients to the dependent variables to save. It requires an aerodynamic acceleration acting on the vehicle. The coefficients are returned in the following order: drag force, side force, lift force.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "aerodynamic_moment_coefficients",
                        "short_summary": "Function to add the aerodynamic moment coefficients to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the aerodynamic force coefficients to the dependent variables to save. It requires an aerodynamic torque acting on the vehicle. The coefficients are returned in the following order: C_l, C_m, C_n (respectively about the X, Y, Z axes of the body-fixed frame, see Mooij 1994).",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "latitude",
                        "short_summary": "Function to add the latitude to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the latitude to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the latitude is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "geodetic_latitude",
                        "short_summary": "Function to add the geodetic latitude to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the geodetic latitude to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the geodetic latitude is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "longitude",
                        "short_summary": "Function to add the longitude to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the longitude to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the longitude is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "heading_angle",
                        "short_summary": "Function to add the heading angle to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the heading angle to the dependent variables to save. The heading angle is the angle between the X-axis of the vertical frame and the XZ-plane in the groundspeed-based trajectory frame (see Mooij, 1994).",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the heading angle is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "flight_path_angle",
                        "short_summary": "Function to add the flight path angle to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the flight path angle to the dependent variables to save. The flight path angle is the angle between the X-axis of the groundspeed-based trajectory frame and the local horizontal plane defined in the vertical reference frame (see Mooij, 1994).",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the flight path angle is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "angle_of_attack",
                        "short_summary": "Function to add the angle of attack to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the angle of attack angle to the dependent variables to save. The angle of attack is the angle between the X-axis of the body-fixed reference frame and the XY plane in the groundspeed-based aerodynamic frame (see Mooij, 1994).",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the angle of attack is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "sideslip_angle",
                        "short_summary": "Function to add the sideslip angle to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the sideslip angle to the dependent variables to save. The sideslip angle is ???",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the sideslip angle is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "bank_angle",
                        "short_summary": "Function to add the bank angle to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the bank angle to the dependent variables to save. The bank angle is ???",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the bank angle is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "radiation_pressure",
                        "short_summary": "Function to add the radiation pressure to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the radiation pressure to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "radiating_body",
                                "type": "str",
                                "description": "Radiating body."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_gravity_field_variation_acceleration",
                        "short_summary": "Function to add the total gravity field variation acceleration to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total gravity field variation acceleration to the dependent variables to save. This function does not distinguish between different sources of variations of the gravity field. To select only one contribution, look for the single gravity field variation acceleration.",
                        "parameters": [
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting the acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_gravity_field_variation_acceleration",
                        "short_summary": "Function to add a single gravity field variation acceleration to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add a single gravity field variation acceleration to the dependent variables to save. This function does distinguish between different sources of variations of the gravity field, but not between terms of the spherical harmonic expansion. To select specific combinations of order and degree, look for the single per term gravity field variation acceleration.",
                        "parameters": [
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting the acceleration."
                            },
                            {
                                "name": "deformation_type",
                                "type": "str",
                                "description": "Deformation type (see BodyDeformationTypes)."
                            },
                            {
                                "name": "identifier",
                                "type": "str, default=\"\"",
                                "description": "Identifier for the deformation type."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_per_terms_gravity_field_variation_acceleration",
                        "short_summary": "Function to add specific spherical harmonic terms of a single gravity field variation acceleration to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add specific spherical harmonic terms of a single gravity field variation acceleration to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting the acceleration."
                            },
                            {
                                "name": "component_indices",
                                "type": "list[tuple]",
                                "description": "Tuples of (degree, order) indicating the terms to save."
                            },
                            {
                                "name": "deformation_type",
                                "type": "str",
                                "description": "Deformation type (see BodyDeformationTypes)."
                            },
                            {
                                "name": "identifier",
                                "type": "str, default=\"\"",
                                "description": "Identifier for the deformation type."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "body_fixed_airspeed_velocity",
                        "short_summary": "Function to add the airspeed velocity vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the airspeed velocity vector to the dependent variables to save. The airspeed velocity is expressed with respect to a central body and returned in a frame fixed to the same central body. It requires the central body to have an atmosphere.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the airspeed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "body_fixed_groundspeed_velocity",
                        "short_summary": "Function to add the groundspeed velocity vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the groundspeed velocity vector to the dependent variables to save. The groundspeed velocity is expressed with respect to a central body and returned in a frame fixed to the same central body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the groundspeed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "inertial_to_body_fixed_rotation_frame",
                        "short_summary": "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body of interest."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "lvlh_to_inertial_rotation_matrix",
                        "short_summary": "Function to add the rotation matrix from the Local Vertical, Local Horizontal (LVLH) RF to the inertial RF to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the rotation matrix from the Local Vertical, Local Horizontal (LVLH) RF to the inertial RF to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the groundspeed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "inertial_to_body_fixed_313_euler_angles",
                        "short_summary": "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save. It uses a 313-Euler angles representation.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "intermediate_aerodynamic_rotation_matrix_variable",
                        "short_summary": "Function to add the rotation matrix from the a base aerodynamic RF to a target aerodynamic RF to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the rotation matrix from the a base aerodynamic RF to a target aerodynamic RF to the dependent variables to save. The aerodynamic RFs are collected in the AerodynamicsReferenceFrames enum.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base reference frame for the transformation."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target reference frame for the transformation."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "periapsis_altitude",
                        "short_summary": "Function to add the altitude of periapsis to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the altitude of periapsis to the dependent variables to save. The altitude depends on the shape of the central body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the altitude of periapsis is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "control_surface_deflection",
                        "short_summary": "Function to add the altitude of periapsis to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the altitude of periapsis to the dependent variables to save. The altitude depends on the shape of the central body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "control_surface",
                                "type": "str",
                                "description": "Control surface whose deflection should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "central_body_fixed_spherical_position",
                        "short_summary": "Function to add the spherical, body-fixed position to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the spherical position to the dependent variables to save. The spherical position is expressed in the central body's body-fixed RF.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the spherical, body-fixed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "central_body_fixed_cartesian_position",
                        "short_summary": "Function to add the cartesian, body-fixed position to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the cartesian position to the dependent variables to save. The cartesian position is expressed in the central body's body-fixed RF.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the cartesian, body-fixed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "body_mass",
                        "short_summary": "Function to add the body mass to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the body mass to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "radiation_pressure_coefficient",
                        "short_summary": "Function to add the radiation pressure coefficient to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the radiation pressure coefficient to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "emitting_body",
                                "type": "str",
                                "description": "Emitting body."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "local_temperature",
                        "short_summary": "Function to add the local temperature to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the local temperature to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "local_dynamic_pressure",
                        "short_summary": "Function to add the local temperature to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the local temperature to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "local_aerodynamic_heat_rate",
                        "short_summary": "Function to add the local aerodynamic heat rate to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the local aerodynamic heat rate felt by the vehicle based on the current velocity and atmospheric conditions to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "local_aerodynamic_g_load",
                        "short_summary": "Function to add the total aerodynamic G-load to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total aerodynamic G-load induced by the aerodynamic acceleration to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "stagnation_point_heat_flux",
                        "short_summary": "Function to add the heat flux at the stagnation point to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the heat flux induced by atmospheric friction at the stagnation point to the dependent variables to save. It requires an aerodynamic acceleration to be acting on the body and a vehicle nose radius to be defined.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_mass_rate",
                        "short_summary": "Function to add the total mass rate to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total mass rate to the dependent variables to save. It requires the body mass to be numerically propagated.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "aerodynamic_g_load",
                        "short_summary": "Function to add the aerodynamic g-load to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the aerodynamic g-load to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the aerodynamic g-load is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "dynamic_pressure",
                        "short_summary": "Function to add the dynamic pressure to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the dynamic pressure to the dependent variables to save. It requires the central body to have an atmosphere.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the dynamic pressure is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "atmospheric_temperature",
                        "short_summary": "Function to add the atmospheric temperature to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the atmospheric temperature to the dependent variables to save. It requires the central body to have an atmosphere.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the atmospheric temperature is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "SingleDependentVariableSaveSettings",
                            "description": "Dependent variable settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "dependent_variable",
                "version": null,
                "create": "\nFunction to create settings for a generic dependent variable.\n\nFunction to create settings for a dependent variable. It creates objects that calculate dependent variables\nfrom the objects that define their settings. It is usually not relevant nor useful for the user.\n\n\nParameters\n----------\ndependent_variable_list : list[SingleDependentVariableSaveSettings]\n    List of dependent variables to be saved.\nprint_variable_indices : bool, default=True\n    Whether the types of dependent variables to be saved should be printed on the terminal.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "mach_number": "\nFunction to add the Mach number to the dependent variables to save.\n\nFunction to add the Mach number to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with atmosphere with respect to which the Mach number is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "altitude": "\nFunction to add the altitude to the dependent variables to save.\n\nFunction to add the altitude to the dependent variables to save. It requires an aerodynamic acceleration to be acting on the vehicle and it depends on the central body's shape.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with atmosphere with respect to which the altitude is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "airspeed": "\nFunction to add the airspeed to the dependent variables to save.\n\nFunction to add the airspeed to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with atmosphere with respect to which the airspeed is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "density": "\nFunction to add the local density to the dependent variables to save.\n\nFunction to add the density (at position of body undergoing acceleration) to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nbody_with_atmosphere : str\n    Body with atmosphere with respect to which the density is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "relative_speed": "\nFunction to add the relative speed (norm of the velocity vector) to the dependent variables to save.\n\nFunction to add the relative speed (norm of the velocity vector) with respect to a second body to the dependent variables to save. The relative speed is computed between the bodies' centers of mass.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nrelative_body : str\n    Body with respect to which the relative speed is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "relative_position": "\nFunction to add the relative position vector to the dependent variables to save.\n\nFunction to add the relative position vector with respect to a second body to the dependent variables to save. The relative position is computed between the bodies' centers of mass.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nrelative_body : str\n    Body with respect to which the relative position is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "relative_distance": "\nFunction to add the relative distance (norm of the position vector) to the dependent variables to save.\n\nFunction to add the relative distance (norm of the position vector) with respect to a second body to the dependent variables to save. The relative distance is computed between the bodies' centers of mass.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nrelative_body : str\n    Body with respect to which the relative distance is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "relative_velocity": "\nFunction to add the relative velocity vector to the dependent variables to save.\n\nFunction to add the relative velocity vector with respect to a second body to the dependent variables to save. The relative distance is computed between the bodies' centers of mass.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nrelative_body : str\n    Body with respect to which the relative velocity is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "keplerian_state": "\nFunction to add the Keplerian state to the dependent variables to save.\n\nFunction to add the Keplerian state to the dependent variables to save. The Keplerian state is returned in this order: 1: Semi-major Axis. 2: Eccentricity. 3: Inclination. 4: Argument of Periapsis. 5. Right Ascension of the Ascending Node. 6: True Anomaly.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the Keplerian state is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "modified_equinoctial_state": "\nFunction to add the modified equinoctial state to the dependent variables to save.\n\nFunction to add the modified equinoctial state to the dependent variables to save. The value of the parameter I is automatically chosen as +1 or -1, depending on whether the inclination is smaller or larger than 90 degrees.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the modified equinoctial state is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "single_acceleration": "\nFunction to add an acceleration vector to the dependent variables to save.\n\nFunction to add an acceleration vector to the dependent variables to save.\n\nParameters\n----------\nacceleration_type : AvailableAcceleration\n    Acceleration type to be saved.\nbody_undergoing_acceleration : str\n    Body undergoing acceleration.\nbody_exerting_acceleration : str\n    Body exerting acceleration.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "single_acceleration_norm": "\nFunction to add a scalar acceleration (norm of the acceleration vector) to the dependent variables to save.\n\nFunction to add a scalar acceleration (norm of the acceleration vector) to the dependent variables to save.\n\nParameters\n----------\nacceleration_type : AvailableAcceleration\n    Acceleration type to be saved (see `AvailableAcceleration` enum).\nbody_undergoing_acceleration : str\n    Body undergoing acceleration.\nbody_exerting_acceleration : str\n    Body exerting acceleration.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "total_acceleration_norm": "\nFunction to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save.\n\nFunction to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body undergoing acceleration.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "total_acceleration": "\nFunction to add the total acceleration vector acting on a body to the dependent variables to save.\n\nFunction to add the total acceleration vector acting on a body to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body undergoing acceleration.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "single_torque_norm": "\nFunction to add a single torque (norm of the torque vector) to the dependent variables to save.\n\nFunction to add a single torque (norm of the torque vector) to the dependent variables to save. The altitude depends on the shape of the central body.\n\nParameters\n----------\ntorque_type : AvailableTorque\n    Torque type to be saved.\nbody_undergoing_torque : str\n    Body undergoing torque.\nbody_exerting_torque : str\n    Body exerting torque.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "single_torque": "\nFunction to add a single torque vector to the dependent variables to save.\n\nFunction to add a single torque vector to the dependent variables to save. The altitude depends on the shape of the central body.\n\nParameters\n----------\ntorque_type : AvailableTorque\n    Torque type to be saved.\nbody_undergoing_torque : str\n    Body undergoing torque.\nbody_exerting_torque : str\n    Body exerting torque.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "total_torque_norm": "\nFunction to add the total torque (norm of the torque vector) to the dependent variables to save.\n\nFunction to add the total torque (norm of the torque vector) to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "total_torque": "\nFunction to add the total torque vector to the dependent variables to save.\n\nFunction to add the total torque vector to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "spherical_harmonic_terms_acceleration": "\nFunction to add a single term of the spherical harmonic acceleration vector to the dependent variables to save.\n\nFunction to add single term of the spherical harmonic acceleration vector to the dependent variables to save.\n\nParameters\n----------\nbody_undergoing_acceleration : str\n    Body undergoing acceleration.\nbody_exerting_acceleration : str\n    Body exerting acceleration.\ncomponent_indices : list[tuple]\n    Tuples of (degree, order) indicating the terms to save.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "spherical_harmonic_terms_acceleration_norm": "\nFunction to add a single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save.\n\nFunction to add single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save.\n\nParameters\n----------\nbody_undergoing_acceleration : str\n    Body undergoing acceleration.\nbody_exerting_acceleration : str\n    Body exerting acceleration.\ncomponent_indices : list[tuple]\n    Tuples of (degree, order) indicating the terms to save.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "aerodynamic_force_coefficients": "\nFunction to add the aerodynamic force coefficients to the dependent variables to save.\n\nFunction to add the aerodynamic force coefficients to the dependent variables to save. It requires an aerodynamic acceleration acting on the vehicle. The coefficients are returned in the following order: drag force, side force, lift force.\n\nParameters\n----------\nbody : str\n    Body undergoing acceleration.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "aerodynamic_moment_coefficients": "\nFunction to add the aerodynamic moment coefficients to the dependent variables to save.\n\nFunction to add the aerodynamic force coefficients to the dependent variables to save. It requires an aerodynamic torque acting on the vehicle. The coefficients are returned in the following order: C_l, C_m, C_n (respectively about the X, Y, Z axes of the body-fixed frame, see Mooij 1994).\n\nParameters\n----------\nbody : str\n    Body undergoing acceleration.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "latitude": "\nFunction to add the latitude to the dependent variables to save.\n\nFunction to add the latitude to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the latitude is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "geodetic_latitude": "\nFunction to add the geodetic latitude to the dependent variables to save.\n\nFunction to add the geodetic latitude to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the geodetic latitude is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "longitude": "\nFunction to add the longitude to the dependent variables to save.\n\nFunction to add the longitude to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the longitude is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "heading_angle": "\nFunction to add the heading angle to the dependent variables to save.\n\nFunction to add the heading angle to the dependent variables to save. The heading angle is the angle between the X-axis of the vertical frame and the XZ-plane in the groundspeed-based trajectory frame (see Mooij, 1994).\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the heading angle is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "flight_path_angle": "\nFunction to add the flight path angle to the dependent variables to save.\n\nFunction to add the flight path angle to the dependent variables to save. The flight path angle is the angle between the X-axis of the groundspeed-based trajectory frame and the local horizontal plane defined in the vertical reference frame (see Mooij, 1994).\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the flight path angle is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "angle_of_attack": "\nFunction to add the angle of attack to the dependent variables to save.\n\nFunction to add the angle of attack angle to the dependent variables to save. The angle of attack is the angle between the X-axis of the body-fixed reference frame and the XY plane in the groundspeed-based aerodynamic frame (see Mooij, 1994).\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the angle of attack is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "sideslip_angle": "\nFunction to add the sideslip angle to the dependent variables to save.\n\nFunction to add the sideslip angle to the dependent variables to save. The sideslip angle is ???\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the sideslip angle is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "bank_angle": "\nFunction to add the bank angle to the dependent variables to save.\n\nFunction to add the bank angle to the dependent variables to save. The bank angle is ???\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the bank angle is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "radiation_pressure": "\nFunction to add the radiation pressure to the dependent variables to save.\n\nFunction to add the radiation pressure to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nradiating_body : str\n    Radiating body.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "total_gravity_field_variation_acceleration": "\nFunction to add the total gravity field variation acceleration to the dependent variables to save.\n\nFunction to add the total gravity field variation acceleration to the dependent variables to save. This function does not distinguish between different sources of variations of the gravity field. To select only one contribution, look for the single gravity field variation acceleration.\n\nParameters\n----------\nbody_undergoing_acceleration : str\n    Body whose dependent variable should be saved.\nbody_exerting_acceleration : str\n    Body exerting the acceleration.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "single_gravity_field_variation_acceleration": "\nFunction to add a single gravity field variation acceleration to the dependent variables to save.\n\nFunction to add a single gravity field variation acceleration to the dependent variables to save. This function does distinguish between different sources of variations of the gravity field, but not between terms of the spherical harmonic expansion. To select specific combinations of order and degree, look for the single per term gravity field variation acceleration.\n\nParameters\n----------\nbody_undergoing_acceleration : str\n    Body whose dependent variable should be saved.\nbody_exerting_acceleration : str\n    Body exerting the acceleration.\ndeformation_type : str\n    Deformation type (see BodyDeformationTypes).\nidentifier : str, default=\"\"\n    Identifier for the deformation type.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "single_per_terms_gravity_field_variation_acceleration": "\nFunction to add specific spherical harmonic terms of a single gravity field variation acceleration to the dependent variables to save.\n\nFunction to add specific spherical harmonic terms of a single gravity field variation acceleration to the dependent variables to save.\n\nParameters\n----------\nbody_undergoing_acceleration : str\n    Body whose dependent variable should be saved.\nbody_exerting_acceleration : str\n    Body exerting the acceleration.\ncomponent_indices : list[tuple]\n    Tuples of (degree, order) indicating the terms to save.\ndeformation_type : str\n    Deformation type (see BodyDeformationTypes).\nidentifier : str, default=\"\"\n    Identifier for the deformation type.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "body_fixed_airspeed_velocity": "\nFunction to add the airspeed velocity vector to the dependent variables to save.\n\nFunction to add the airspeed velocity vector to the dependent variables to save. The airspeed velocity is expressed with respect to a central body and returned in a frame fixed to the same central body. It requires the central body to have an atmosphere.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the airspeed is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "body_fixed_groundspeed_velocity": "\nFunction to add the groundspeed velocity vector to the dependent variables to save.\n\nFunction to add the groundspeed velocity vector to the dependent variables to save. The groundspeed velocity is expressed with respect to a central body and returned in a frame fixed to the same central body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the groundspeed is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "inertial_to_body_fixed_rotation_frame": "\nFunction to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.\n\nFunction to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body of interest.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "lvlh_to_inertial_rotation_matrix": "\nFunction to add the rotation matrix from the Local Vertical, Local Horizontal (LVLH) RF to the inertial RF to the dependent variables to save.\n\nFunction to add the rotation matrix from the Local Vertical, Local Horizontal (LVLH) RF to the inertial RF to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the groundspeed is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "inertial_to_body_fixed_313_euler_angles": "\nFunction to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.\n\nFunction to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save. It uses a 313-Euler angles representation.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "intermediate_aerodynamic_rotation_matrix_variable": "\nFunction to add the rotation matrix from the a base aerodynamic RF to a target aerodynamic RF to the dependent variables to save.\n\nFunction to add the rotation matrix from the a base aerodynamic RF to a target aerodynamic RF to the dependent variables to save. The aerodynamic RFs are collected in the AerodynamicsReferenceFrames enum.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nbase_frame : str\n    Base reference frame for the transformation.\ntarget_frame : str\n    Target reference frame for the transformation.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "periapsis_altitude": "\nFunction to add the altitude of periapsis to the dependent variables to save.\n\nFunction to add the altitude of periapsis to the dependent variables to save. The altitude depends on the shape of the central body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the altitude of periapsis is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "control_surface_deflection": "\nFunction to add the altitude of periapsis to the dependent variables to save.\n\nFunction to add the altitude of periapsis to the dependent variables to save. The altitude depends on the shape of the central body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncontrol_surface : str\n    Control surface whose deflection should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "central_body_fixed_spherical_position": "\nFunction to add the spherical, body-fixed position to the dependent variables to save.\n\nFunction to add the spherical position to the dependent variables to save. The spherical position is expressed in the central body's body-fixed RF.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the spherical, body-fixed is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "central_body_fixed_cartesian_position": "\nFunction to add the cartesian, body-fixed position to the dependent variables to save.\n\nFunction to add the cartesian position to the dependent variables to save. The cartesian position is expressed in the central body's body-fixed RF.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the cartesian, body-fixed is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "body_mass": "\nFunction to add the body mass to the dependent variables to save.\n\nFunction to add the body mass to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "radiation_pressure_coefficient": "\nFunction to add the radiation pressure coefficient to the dependent variables to save.\n\nFunction to add the radiation pressure coefficient to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nemitting_body : str\n    Emitting body.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "local_temperature": "\nFunction to add the local temperature to the dependent variables to save.\n\nFunction to add the local temperature to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "local_dynamic_pressure": "\nFunction to add the local temperature to the dependent variables to save.\n\nFunction to add the local temperature to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "local_aerodynamic_heat_rate": "\nFunction to add the local aerodynamic heat rate to the dependent variables to save.\n\nFunction to add the local aerodynamic heat rate felt by the vehicle based on the current velocity and atmospheric conditions to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "local_aerodynamic_g_load": "\nFunction to add the total aerodynamic G-load to the dependent variables to save.\n\nFunction to add the total aerodynamic G-load induced by the aerodynamic acceleration to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "stagnation_point_heat_flux": "\nFunction to add the heat flux at the stagnation point to the dependent variables to save.\n\nFunction to add the heat flux induced by atmospheric friction at the stagnation point to the dependent variables to save. It requires an aerodynamic acceleration to be acting on the body and a vehicle nose radius to be defined.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "total_mass_rate": "\nFunction to add the total mass rate to the dependent variables to save.\n\nFunction to add the total mass rate to the dependent variables to save. It requires the body mass to be numerically propagated.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "aerodynamic_g_load": "\nFunction to add the aerodynamic g-load to the dependent variables to save.\n\nFunction to add the aerodynamic g-load to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the aerodynamic g-load is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "dynamic_pressure": "\nFunction to add the dynamic pressure to the dependent variables to save.\n\nFunction to add the dynamic pressure to the dependent variables to save. It requires the central body to have an atmosphere.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the dynamic pressure is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "atmospheric_temperature": "\nFunction to add the atmospheric temperature to the dependent variables to save.\n\nFunction to add the atmospheric temperature to the dependent variables to save. It requires the central body to have an atmosphere.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the atmospheric temperature is computed.\nReturns\n-------\nSingleDependentVariableSaveSettings\n    Dependent variable settings object.\n\n\n\n\n\n",
                "VariableSettings": {
                    "__docstring__": "\nFunctional base class to define settings for variables.\n\n\n\n\n\n"
                },
                "SingleDependentVariableSaveSettings": {
                    "__docstring__": "\n`VariableSettings`-derived class to define settings for dependent variables that are to be saved during propagation.\n\n\n\n\n\n"
                },
                "SingleAccelerationDependentVariableSaveSettings": {
                    "__docstring__": "\n`SingleDependentVariableSaveSettings`-derived class to save a single acceleration (norm or vector) during propagation.\n\n\n\n\n\n"
                },
                "PropagationDependentVariables": {
                    "mach_number_type": "",
                    "altitude_type": "",
                    "airspeed_type": "",
                    "local_density_type": "",
                    "relative_speed_type": "",
                    "relative_position_type": "",
                    "relative_distance_type": "",
                    "relative_velocity_type": "",
                    "radiation_pressure_type": "",
                    "total_acceleration_norm_type": "",
                    "single_acceleration_norm_type": "",
                    "total_acceleration_type": "",
                    "single_acceleration_type": "",
                    "aerodynamic_force_coefficients_type": "",
                    "aerodynamic_moment_coefficients_type": "",
                    "rotation_matrix_to_body_fixed_frame_type": "",
                    "intermediate_aerodynamic_rotation_matrix_type": "",
                    "relative_body_aerodynamic_orientation_angle_type": "",
                    "body_fixed_airspeed_based_velocity_type": "",
                    "total_aerodynamic_g_load_type": "",
                    "stagnation_point_heat_flux_type": "",
                    "local_temperature_type": "",
                    "geodetic_latitude_type": "",
                    "control_surface_deflection_type": "",
                    "total_mass_rate_type": "",
                    "lvlh_to_inertial_frame_rotation_type": "",
                    "periapsis_altitude_type": "",
                    "total_torque_norm_type": "",
                    "single_torque_norm_type": "",
                    "total_torque_type": "",
                    "single_torque_type": "",
                    "body_fixed_groundspeed_based_velocity_type": "",
                    "keplerian_state_type": "",
                    "modified_equinoctial_state_type": "",
                    "spherical_harmonic_acceleration_terms_type": "",
                    "spherical_harmonic_acceleration_norm_terms_type": "",
                    "body_fixed_relative_cartesian_position_type": "",
                    "body_fixed_relative_spherical_position_type": "",
                    "total_gravity_field_variation_acceleration_type": "",
                    "single_gravity_field_variation_acceleration_type": "",
                    "single_gravity_field_variation_acceleration_terms_type": "",
                    "acceleration_partial_wrt_body_translational_state_type": "",
                    "local_dynamic_pressure_type": "",
                    "local_aerodynamic_heat_rate_type": "",
                    "euler_angles_to_body_fixed_type": "",
                    "current_body_mass_type": "",
                    "radiation_pressure_coefficient_type": "",
                    "__docstring__": "\nEnumeration of available propagation dependent variables.\n\nEnumeration of propagation dependent variables supported by tudat.\n\n\n\n\n\n",
                    "name": "PropagationDependentVariables",
                    "short_summary": "Enumeration of available propagation dependent variables.",
                    "extended_summary": "Enumeration of propagation dependent variables supported by tudat.\n",
                    "members": [
                        {
                            "name": "mach_number_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "altitude_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "airspeed_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "local_density_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "relative_speed_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "relative_position_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "relative_distance_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "relative_velocity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "radiation_pressure_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "total_acceleration_norm_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "single_acceleration_norm_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "total_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "single_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "aerodynamic_force_coefficients_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "aerodynamic_moment_coefficients_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "rotation_matrix_to_body_fixed_frame_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "intermediate_aerodynamic_rotation_matrix_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "relative_body_aerodynamic_orientation_angle_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "body_fixed_airspeed_based_velocity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "total_aerodynamic_g_load_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "stagnation_point_heat_flux_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "local_temperature_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "geodetic_latitude_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "control_surface_deflection_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "total_mass_rate_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "lvlh_to_inertial_frame_rotation_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "periapsis_altitude_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "total_torque_norm_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "single_torque_norm_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "total_torque_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "single_torque_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "body_fixed_groundspeed_based_velocity_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "keplerian_state_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "modified_equinoctial_state_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "spherical_harmonic_acceleration_terms_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "spherical_harmonic_acceleration_norm_terms_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "body_fixed_relative_cartesian_position_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "body_fixed_relative_spherical_position_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "total_gravity_field_variation_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "single_gravity_field_variation_acceleration_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "single_gravity_field_variation_acceleration_terms_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "acceleration_partial_wrt_body_translational_state_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "local_dynamic_pressure_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "local_aerodynamic_heat_rate_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "euler_angles_to_body_fixed_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "current_body_mass_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "radiation_pressure_coefficient_type",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            },
            "integrator": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/propagation_setup",
                "file": "integrator.yaml",
                "_implicit_name": "integrator",
                "config": null,
                "summary": null,
                "extended_summary": "This module provides the functionality for creating integrator\nsettings.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": [
                    {
                        "name": "AvailableIntegrators",
                        "short_summary": "Enumeration of available integrators.",
                        "extended_summary": "Enumeration of integrators supported by tudat.\n",
                        "members": [
                            {
                                "name": "euler_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "runge_kutta_4_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "runge_kutta_variable_step_size_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "bulirsch_stoer_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "adams_bashforth_moulton_type",
                                "description": null,
                                "value": null
                            }
                        ]
                    },
                    {
                        "name": "CoefficientSets",
                        "short_summary": "Coefficient sets for Runge-Kutta integrators.",
                        "extended_summary": "Coefficient sets for Runge-Kutta integrators.\n",
                        "members": [
                            {
                                "name": "rkf_45",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "rkf_56",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "rkf_78",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "rkdp_87",
                                "description": null,
                                "value": null
                            }
                        ]
                    },
                    {
                        "name": "ExtrapolationMethodStepSequences",
                        "short_summary": "Enumeration of available extrapolation method step sequences.",
                        "extended_summary": "Enumeration of extrapolation method step sequences supported by tudat.\n",
                        "members": [
                            {
                                "name": "bulirsch_stoer_sequence",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "deufelhard_sequence",
                                "description": null,
                                "value": null
                            }
                        ]
                    }
                ],
                "classes": [
                    {
                        "name": "IntegratorSettings",
                        "short_summary": "Functional base class to define settings for integrators.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time of the integration."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "RungeKuttaVariableStepSizeSettingsScalarTolerances",
                        "short_summary": "`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with scalar tolerances.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "RungeKuttaVariableStepSizeSettingsVectorTolerances",
                        "short_summary": "`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with vector tolerances.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "BulirschStoerIntegratorSettings",
                        "short_summary": "`IntegratorSettings`-derived class to define settings for Bulirsch-Stoer integrator settings.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "AdamsBashforthMoultonSettings",
                        "short_summary": "`IntegratorSettings`-derived class to define settings for Adams-Bashforth-Moulton integrator settings.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "euler",
                        "short_summary": "Creates the settings for the Euler integrator.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Euler integrator. For this integrator, the step size is kept\nconstant.\n",
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Start time (independent variable) of numerical integration."
                            },
                            {
                                "name": "initial_time_step",
                                "type": "float",
                                "description": "Initial and constant value for the time step."
                            },
                            {
                                "name": "save_frequency",
                                "type": "int, default=1",
                                "description": "Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step)."
                            },
                            {
                                "name": "assess_termination_on_minor_steps",
                                "type": "bool, default=false",
                                "description": "Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "IntegratorSettings",
                            "description": "Integrator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "runge_kutta_4",
                        "short_summary": "Creates the settings for the Runge Kutta 4 integrator.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Runge Kutta 4 integrator. For this integrator, the step size is kept\nconstant.\n",
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Start time (independent variable) of numerical integration."
                            },
                            {
                                "name": "initial_time_step",
                                "type": "float",
                                "description": "Initial and constant value for the time step."
                            },
                            {
                                "name": "save_frequency",
                                "type": "int, default=1",
                                "description": "Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step)."
                            },
                            {
                                "name": "assess_termination_on_minor_steps",
                                "type": "bool, default=false",
                                "description": "Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "IntegratorSettings",
                            "description": "Integrator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "runge_kutta_variable_step_size",
                        "short_summary": "Creates the settings for the Runge-Kutta variable step size integrator with scalar tolerances.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Runge-Kutta variable step size integrator with scalar tolerances.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent coefficient sets (Butcher's tableau) can be used (see the `CoefficientSets` enum).\n",
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": null
                            },
                            {
                                "name": "initial_time_step",
                                "type": "float",
                                "description": "Initial time step to be used."
                            },
                            {
                                "name": "coefficient_set",
                                "type": "RKCoefficientSets",
                                "description": "Coefficient set (Butcher's tableau) to be used in the integration."
                            },
                            {
                                "name": "minimum_step_size",
                                "type": "float",
                                "description": "Minimum time step to be used during the integration."
                            },
                            {
                                "name": "maximum_step_size",
                                "type": "float",
                                "description": "Maximum time step to be used during the integration."
                            },
                            {
                                "name": "relative_error_tolerance",
                                "type": "numpy.ndarray[numpy.float64[m, n]]",
                                "description": "Relative vector tolerance to adjust the time step."
                            },
                            {
                                "name": "absolute_error_tolerance",
                                "type": "numpy.ndarray[numpy.float64[m, n]]",
                                "description": "Absolute vector tolerance to adjust the time step."
                            },
                            {
                                "name": "save_frequency",
                                "type": "int, default=1",
                                "description": "Frequency at which to save the numerical integrated states (expressed per unit integration time step,\nwith n = saveFrequency, so n = 1 means that the state is saved once per integration step).\n"
                            },
                            {
                                "name": "assess_termination_on_minor_steps",
                                "type": "bool, default=false",
                                "description": "Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the\nintegrator (true) or only at the end of each integration step (false).\n"
                            },
                            {
                                "name": "safety_factor",
                                "type": "float, default=0.8",
                                "description": "Safety factor used in the step size control."
                            },
                            {
                                "name": "maximum_factor_increase",
                                "type": "float, default=4.0",
                                "description": "Maximum increase between consecutive time steps, expressed as the factor between new and old step size.\n"
                            },
                            {
                                "name": "minimum_factor_increase",
                                "type": "float, default=0.1",
                                "description": "Minimum increase between consecutive time steps, expressed as the factor between new and old step size.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "RungeKuttaVariableStepSettingsScalarTolerances",
                            "description": "RungeKuttaVariableStepSettingsScalarTolerances object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "runge_kutta_variable_step_size_vector_tolerances",
                        "short_summary": "Creates the settings for the Runge-Kutta variable step size integrator with vector tolerances.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Runge-Kutta variable step size integrator with vector tolerances.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum).\n",
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Start time (independent variable) of numerical integration."
                            },
                            {
                                "name": "initial_time_step",
                                "type": "float",
                                "description": "Initial time step to be used."
                            },
                            {
                                "name": "coefficient_set",
                                "type": "RKCoefficientSets",
                                "description": "Coefficient set (Butcher's tableau) to be used in the integration."
                            },
                            {
                                "name": "minimum_step_size",
                                "type": "float",
                                "description": "Minimum time step to be used during the integration."
                            },
                            {
                                "name": "maximum_step_size",
                                "type": "float",
                                "description": "Maximum time step to be used during the integration."
                            },
                            {
                                "name": "relative_error_tolerance",
                                "type": "numpy.ndarray[numpy.float64[m, n]]",
                                "description": "Relative vector tolerance to adjust the time step."
                            },
                            {
                                "name": "absolute_error_tolerance",
                                "type": "numpy.ndarray[numpy.float64[m, n]]",
                                "description": "Absolute vector tolerance to adjust the time step."
                            },
                            {
                                "name": "save_frequency",
                                "type": "int, default=1",
                                "description": "Frequency at which to save the numerical integrated states (expressed per unit integration time step,\nwith n = saveFrequency, so n = 1 means that the state is saved once per integration step).\n"
                            },
                            {
                                "name": "assess_termination_on_minor_steps",
                                "type": "bool, default=false",
                                "description": "Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the\nintegrator (true) or only at the end of each integration step (false).\n"
                            },
                            {
                                "name": "safety_factor",
                                "type": "float, default=0.8",
                                "description": "Safety factor used in the step size control."
                            },
                            {
                                "name": "maximum_factor_increase",
                                "type": "float, default=4.0",
                                "description": "Maximum increase between consecutive time steps, expressed as the factor between new and old step size.\n"
                            },
                            {
                                "name": "minimum_factor_increase",
                                "type": "float, default=0.1",
                                "description": "Minimum increase between consecutive time steps, expressed as the factor between new and old step size.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "RungeKuttaVariableStepSizeSettingsVectorTolerances",
                            "description": "RungeKuttaVariableStepSizeSettingsVectorTolerances object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "bulirsch_stoer",
                        "short_summary": "Creates the settings for the Bulirsch-Stoer integrator.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Bulirsch-Stoer integrator.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent extrapolation sequences can be used (see the `ExtrapolationMethodStepSequences` enum).\n",
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Start time (independent variable) of numerical integration."
                            },
                            {
                                "name": "initial_time_step",
                                "type": "float",
                                "description": "Initial time step to be used."
                            },
                            {
                                "name": "extrapolation_sequence",
                                "type": "ExtrapolationMethodStepSequences",
                                "description": "Extrapolation sequence to be used in the integration."
                            },
                            {
                                "name": "maximum_number_of_steps",
                                "type": "int",
                                "description": "Number of entries in the sequence (e.g., number of integrations used for a single extrapolation)."
                            },
                            {
                                "name": "minimum_step_size",
                                "type": "float",
                                "description": "Minimum time step to be used during the integration."
                            },
                            {
                                "name": "maximum_step_size",
                                "type": "float",
                                "description": "Maximum time step to be used during the integration."
                            },
                            {
                                "name": "relative_error_tolerance",
                                "type": "float, default=1.0E-12",
                                "description": "Relative tolerance to adjust the time step."
                            },
                            {
                                "name": "absolute_error_tolerance",
                                "type": "float, default=1.0E-12",
                                "description": "Relative tolerance to adjust the time step."
                            },
                            {
                                "name": "save_frequency",
                                "type": "int, default=1",
                                "description": "Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step)."
                            },
                            {
                                "name": "assess_termination_on_minor_steps",
                                "type": "bool, default=false",
                                "description": "Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false)."
                            },
                            {
                                "name": "safety_factor",
                                "type": "float, default=0.7",
                                "description": "Safety factor used in the step size control."
                            },
                            {
                                "name": "maximum_factor_increase",
                                "type": "float, default=10.0",
                                "description": "Maximum increase between consecutive time steps, expressed as the factor between new and old step size."
                            },
                            {
                                "name": "minimum_factor_increase",
                                "type": "float, default=0.1",
                                "description": "Minimum increase between consecutive time steps, expressed as the factor between new and old step size."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "BulirschStoerIntegratorSettings",
                            "description": "BulirschStoerIntegratorSettings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "adams_bashforth_moulton",
                        "short_summary": "Creates the settings for the Bulirsch-Stoer integrator.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Adams-Bashorth-Moulton integrator.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum).\n",
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Start time (independent variable) of numerical integration."
                            },
                            {
                                "name": "initial_time_step",
                                "type": "float",
                                "description": "Initial time step to be used."
                            },
                            {
                                "name": "minimum_step_size",
                                "type": "float",
                                "description": "Minimum time step to be used during the integration."
                            },
                            {
                                "name": "maximum_step_size",
                                "type": "float",
                                "description": "Maximum time step to be used during the integration."
                            },
                            {
                                "name": "relative_error_tolerance",
                                "type": "float, default=1.0E-12",
                                "description": "Relative tolerance to adjust the time step."
                            },
                            {
                                "name": "absolute_error_tolerance",
                                "type": "float, default=1.0E-12",
                                "description": "Relative tolerance to adjust the time step."
                            },
                            {
                                "name": "minimum_order",
                                "type": null,
                                "description": "Minimum order of the integrator."
                            },
                            {
                                "name": "maximum_order",
                                "type": null,
                                "description": "Maximum order of the integrator."
                            },
                            {
                                "name": "save_frequency",
                                "type": "int, default=1",
                                "description": "Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step)."
                            },
                            {
                                "name": "assess_termination_on_minor_steps",
                                "type": "bool, default=false",
                                "description": "Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false)."
                            },
                            {
                                "name": "bandwidth",
                                "type": "float, default=200.0",
                                "description": "Maximum error factor for doubling the stepsize."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "AdamsBashforthMoultonSettings",
                            "description": "AdamsBashforthMoultonSettings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "integrator",
                "version": null,
                "euler": "\nCreates the settings for the Euler integrator.\n\nFactory function to create settings for the Euler integrator. For this integrator, the step size is kept\nconstant.\n\n\nParameters\n----------\ninitial_time : float\n    Start time (independent variable) of numerical integration.\ninitial_time_step : float\n    Initial and constant value for the time step.\nsave_frequency : int, default=1\n    Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\nassess_termination_on_minor_steps : bool, default=false\n    Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\nReturns\n-------\nIntegratorSettings\n    Integrator settings object.\n\n\n\n\n\n",
                "runge_kutta_4": "\nCreates the settings for the Runge Kutta 4 integrator.\n\nFactory function to create settings for the Runge Kutta 4 integrator. For this integrator, the step size is kept\nconstant.\n\n\nParameters\n----------\ninitial_time : float\n    Start time (independent variable) of numerical integration.\ninitial_time_step : float\n    Initial and constant value for the time step.\nsave_frequency : int, default=1\n    Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\nassess_termination_on_minor_steps : bool, default=false\n    Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\nReturns\n-------\nIntegratorSettings\n    Integrator settings object.\n\n\n\n\n\n",
                "runge_kutta_variable_step_size": "\nCreates the settings for the Runge-Kutta variable step size integrator with scalar tolerances.\n\nFactory function to create settings for the Runge-Kutta variable step size integrator with scalar tolerances.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent coefficient sets (Butcher's tableau) can be used (see the `CoefficientSets` enum).\n\n\nParameters\n----------\ninitial_time : float\n    None\ninitial_time_step : float\n    Initial time step to be used.\ncoefficient_set : RKCoefficientSets\n    Coefficient set (Butcher's tableau) to be used in the integration.\nminimum_step_size : float\n    Minimum time step to be used during the integration.\nmaximum_step_size : float\n    Maximum time step to be used during the integration.\nrelative_error_tolerance : numpy.ndarray[numpy.float64[m, n]]\n    Relative vector tolerance to adjust the time step.\nabsolute_error_tolerance : numpy.ndarray[numpy.float64[m, n]]\n    Absolute vector tolerance to adjust the time step.\nsave_frequency : int, default=1\n    Frequency at which to save the numerical integrated states (expressed per unit integration time step,\n    with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\n\nassess_termination_on_minor_steps : bool, default=false\n    Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the\n    integrator (true) or only at the end of each integration step (false).\n\nsafety_factor : float, default=0.8\n    Safety factor used in the step size control.\nmaximum_factor_increase : float, default=4.0\n    Maximum increase between consecutive time steps, expressed as the factor between new and old step size.\n\nminimum_factor_increase : float, default=0.1\n    Minimum increase between consecutive time steps, expressed as the factor between new and old step size.\n\nReturns\n-------\nRungeKuttaVariableStepSettingsScalarTolerances\n    RungeKuttaVariableStepSettingsScalarTolerances object.\n\n\n\n\n\n",
                "runge_kutta_variable_step_size_vector_tolerances": "\nCreates the settings for the Runge-Kutta variable step size integrator with vector tolerances.\n\nFactory function to create settings for the Runge-Kutta variable step size integrator with vector tolerances.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum).\n\n\nParameters\n----------\ninitial_time : float\n    Start time (independent variable) of numerical integration.\ninitial_time_step : float\n    Initial time step to be used.\ncoefficient_set : RKCoefficientSets\n    Coefficient set (Butcher's tableau) to be used in the integration.\nminimum_step_size : float\n    Minimum time step to be used during the integration.\nmaximum_step_size : float\n    Maximum time step to be used during the integration.\nrelative_error_tolerance : numpy.ndarray[numpy.float64[m, n]]\n    Relative vector tolerance to adjust the time step.\nabsolute_error_tolerance : numpy.ndarray[numpy.float64[m, n]]\n    Absolute vector tolerance to adjust the time step.\nsave_frequency : int, default=1\n    Frequency at which to save the numerical integrated states (expressed per unit integration time step,\n    with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\n\nassess_termination_on_minor_steps : bool, default=false\n    Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the\n    integrator (true) or only at the end of each integration step (false).\n\nsafety_factor : float, default=0.8\n    Safety factor used in the step size control.\nmaximum_factor_increase : float, default=4.0\n    Maximum increase between consecutive time steps, expressed as the factor between new and old step size.\n\nminimum_factor_increase : float, default=0.1\n    Minimum increase between consecutive time steps, expressed as the factor between new and old step size.\n\nReturns\n-------\nRungeKuttaVariableStepSizeSettingsVectorTolerances\n    RungeKuttaVariableStepSizeSettingsVectorTolerances object.\n\n\n\n\n\n",
                "bulirsch_stoer": "\nCreates the settings for the Bulirsch-Stoer integrator.\n\nFactory function to create settings for the Bulirsch-Stoer integrator.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent extrapolation sequences can be used (see the `ExtrapolationMethodStepSequences` enum).\n\n\nParameters\n----------\ninitial_time : float\n    Start time (independent variable) of numerical integration.\ninitial_time_step : float\n    Initial time step to be used.\nextrapolation_sequence : ExtrapolationMethodStepSequences\n    Extrapolation sequence to be used in the integration.\nmaximum_number_of_steps : int\n    Number of entries in the sequence (e.g., number of integrations used for a single extrapolation).\nminimum_step_size : float\n    Minimum time step to be used during the integration.\nmaximum_step_size : float\n    Maximum time step to be used during the integration.\nrelative_error_tolerance : float, default=1.0E-12\n    Relative tolerance to adjust the time step.\nabsolute_error_tolerance : float, default=1.0E-12\n    Relative tolerance to adjust the time step.\nsave_frequency : int, default=1\n    Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\nassess_termination_on_minor_steps : bool, default=false\n    Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\nsafety_factor : float, default=0.7\n    Safety factor used in the step size control.\nmaximum_factor_increase : float, default=10.0\n    Maximum increase between consecutive time steps, expressed as the factor between new and old step size.\nminimum_factor_increase : float, default=0.1\n    Minimum increase between consecutive time steps, expressed as the factor between new and old step size.\nReturns\n-------\nBulirschStoerIntegratorSettings\n    BulirschStoerIntegratorSettings object.\n\n\n\n\n\n",
                "adams_bashforth_moulton": "\nCreates the settings for the Bulirsch-Stoer integrator.\n\nFactory function to create settings for the Adams-Bashorth-Moulton integrator.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum).\n\n\nParameters\n----------\ninitial_time : float\n    Start time (independent variable) of numerical integration.\ninitial_time_step : float\n    Initial time step to be used.\nminimum_step_size : float\n    Minimum time step to be used during the integration.\nmaximum_step_size : float\n    Maximum time step to be used during the integration.\nrelative_error_tolerance : float, default=1.0E-12\n    Relative tolerance to adjust the time step.\nabsolute_error_tolerance : float, default=1.0E-12\n    Relative tolerance to adjust the time step.\nminimum_order\n    Minimum order of the integrator.\nmaximum_order\n    Maximum order of the integrator.\nsave_frequency : int, default=1\n    Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\nassess_termination_on_minor_steps : bool, default=false\n    Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\nbandwidth : float, default=200.0\n    Maximum error factor for doubling the stepsize.\nReturns\n-------\nAdamsBashforthMoultonSettings\n    AdamsBashforthMoultonSettings object.\n\n\n\n\n\n",
                "IntegratorSettings": {
                    "__docstring__": "\nFunctional base class to define settings for integrators.\n\n\nAttributes\n----------\ninitial_time : float\n    Initial time of the integration.\n\n\n\n\n"
                },
                "RungeKuttaVariableStepSizeSettingsScalarTolerances": {
                    "__docstring__": "\n`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with scalar tolerances.\n\n\n\n\n\n"
                },
                "RungeKuttaVariableStepSizeSettingsVectorTolerances": {
                    "__docstring__": "\n`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with vector tolerances.\n\n\n\n\n\n"
                },
                "BulirschStoerIntegratorSettings": {
                    "__docstring__": "\n`IntegratorSettings`-derived class to define settings for Bulirsch-Stoer integrator settings.\n\n\n\n\n\n"
                },
                "AdamsBashforthMoultonSettings": {
                    "__docstring__": "\n`IntegratorSettings`-derived class to define settings for Adams-Bashforth-Moulton integrator settings.\n\n\n\n\n\n"
                },
                "AvailableIntegrators": {
                    "euler_type": "",
                    "runge_kutta_4_type": "",
                    "runge_kutta_variable_step_size_type": "",
                    "bulirsch_stoer_type": "",
                    "adams_bashforth_moulton_type": "",
                    "__docstring__": "\nEnumeration of available integrators.\n\nEnumeration of integrators supported by tudat.\n\n\n\n\n\n",
                    "name": "AvailableIntegrators",
                    "short_summary": "Enumeration of available integrators.",
                    "extended_summary": "Enumeration of integrators supported by tudat.\n",
                    "members": [
                        {
                            "name": "euler_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "runge_kutta_4_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "runge_kutta_variable_step_size_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "bulirsch_stoer_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "adams_bashforth_moulton_type",
                            "description": null,
                            "value": null
                        }
                    ]
                },
                "CoefficientSets": {
                    "rkf_45": "",
                    "rkf_56": "",
                    "rkf_78": "",
                    "rkdp_87": "",
                    "__docstring__": "\nCoefficient sets for Runge-Kutta integrators.\n\nCoefficient sets for Runge-Kutta integrators.\n\n\n\n\n\n",
                    "name": "CoefficientSets",
                    "short_summary": "Coefficient sets for Runge-Kutta integrators.",
                    "extended_summary": "Coefficient sets for Runge-Kutta integrators.\n",
                    "members": [
                        {
                            "name": "rkf_45",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "rkf_56",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "rkf_78",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "rkdp_87",
                            "description": null,
                            "value": null
                        }
                    ]
                },
                "ExtrapolationMethodStepSequences": {
                    "bulirsch_stoer_sequence": "",
                    "deufelhard_sequence": "",
                    "__docstring__": "\nEnumeration of available extrapolation method step sequences.\n\nEnumeration of extrapolation method step sequences supported by tudat.\n\n\n\n\n\n",
                    "name": "ExtrapolationMethodStepSequences",
                    "short_summary": "Enumeration of available extrapolation method step sequences.",
                    "extended_summary": "Enumeration of extrapolation method step sequences supported by tudat.\n",
                    "members": [
                        {
                            "name": "bulirsch_stoer_sequence",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "deufelhard_sequence",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            },
            "mass_rate": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/propagation_setup",
                "file": "mass_rate.yaml",
                "_implicit_name": "mass_rate",
                "config": null,
                "summary": null,
                "extended_summary": "This module provides the functionality for creating mass rate settings.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": [
                    {
                        "name": "AvailableMassRateModels",
                        "short_summary": "Enumeration of available mass rate models.",
                        "extended_summary": "Enumeration of mass rate models supported by tuday.\n",
                        "members": [
                            {
                                "name": "undefined_mass_rate_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "custom_mass_rate_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "from_thrust_mass_rate_type",
                                "description": null,
                                "value": null
                            }
                        ]
                    }
                ],
                "classes": [
                    {
                        "name": "MassRateModelSettings",
                        "short_summary": "Functional base class to define settings for mass rates.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "FromThrustMassRateSettings",
                        "short_summary": "`MassRateModelSettings`-derived class to define settings for a mass rate model derived from a thrust model.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "CustomMassRateSettings",
                        "short_summary": "`MassRateModelSettings`-derived class to define settings for a custom mass rate model.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "from_thrust",
                        "short_summary": "Creates the settings for a mass rate model defined from a thrust model.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates the settings for a mass rate model defined from a thrust model. The mass rate model is derived from\nthe associated body's engine model. It is possible to consider only a specific engine or all engines.\n",
                        "parameters": [
                            {
                                "name": "use_all_thrust_models",
                                "type": "bool, default=true",
                                "description": "Denotes whether all engines of the associated body are to be combined into a single thrust model."
                            },
                            {
                                "name": "associated_thrust_source",
                                "type": "str, default=\"\"",
                                "description": "Name of engine model from which thrust is to be derived (must be empty if the first argument is set to true)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "FromThrustMassRateSettings",
                            "description": "From thrust mass rate settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom",
                        "short_summary": "Creates the settings for a mass rate model defined from a thrust model.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates the settings for a custom mass rate model defined through a mass rate function. The function must have\ntime as an independent variable.\n",
                        "parameters": [
                            {
                                "name": "mass_rate_function",
                                "type": "callable[[float], float]",
                                "description": "Function of time defining the custom mass rate."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CustomMassRateSettings",
                            "description": "Custom mass rate settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "mass_rate",
                "version": null,
                "from_thrust": "\nCreates the settings for a mass rate model defined from a thrust model.\n\nCreates the settings for a mass rate model defined from a thrust model. The mass rate model is derived from\nthe associated body's engine model. It is possible to consider only a specific engine or all engines.\n\n\nParameters\n----------\nuse_all_thrust_models : bool, default=true\n    Denotes whether all engines of the associated body are to be combined into a single thrust model.\nassociated_thrust_source : str, default=\"\"\n    Name of engine model from which thrust is to be derived (must be empty if the first argument is set to true).\nReturns\n-------\nFromThrustMassRateSettings\n    From thrust mass rate settings object.\n\n\n\n\n\n",
                "custom": "\nCreates the settings for a mass rate model defined from a thrust model.\n\nCreates the settings for a custom mass rate model defined through a mass rate function. The function must have\ntime as an independent variable.\n\n\nParameters\n----------\nmass_rate_function : callable[[float], float]\n    Function of time defining the custom mass rate.\nReturns\n-------\nCustomMassRateSettings\n    Custom mass rate settings object.\n\n\n\n\n\n",
                "MassRateModelSettings": {
                    "__docstring__": "\nFunctional base class to define settings for mass rates.\n\n\n\n\n\n"
                },
                "FromThrustMassRateSettings": {
                    "__docstring__": "\n`MassRateModelSettings`-derived class to define settings for a mass rate model derived from a thrust model.\n\n\n\n\n\n"
                },
                "CustomMassRateSettings": {
                    "__docstring__": "\n`MassRateModelSettings`-derived class to define settings for a custom mass rate model.\n\n\n\n\n\n"
                },
                "AvailableMassRateModels": {
                    "undefined_mass_rate_type": "",
                    "custom_mass_rate_type": "",
                    "from_thrust_mass_rate_type": "",
                    "__docstring__": "\nEnumeration of available mass rate models.\n\nEnumeration of mass rate models supported by tuday.\n\n\n\n\n\n",
                    "name": "AvailableMassRateModels",
                    "short_summary": "Enumeration of available mass rate models.",
                    "extended_summary": "Enumeration of mass rate models supported by tuday.\n",
                    "members": [
                        {
                            "name": "undefined_mass_rate_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "custom_mass_rate_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "from_thrust_mass_rate_type",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            },
            "propagator": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/propagation_setup",
                "file": "propagator.yaml",
                "_implicit_name": "propagator",
                "config": null,
                "summary": null,
                "extended_summary": "This module provides the functionality for creating propagator settings.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": [
                    {
                        "name": "TranslationalPropagatorType",
                        "short_summary": "Enumeration of available translational propagator types.",
                        "extended_summary": "Enumeration of translational propagator types supported by tudat.\n",
                        "members": [
                            {
                                "name": "undefined_translational_propagator",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "cowell",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "encke",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "gauss_keplerian",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "gauss_modified_equinoctial",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "unified_state_model_quaternions",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "unified_state_model_modified_rodrigues_parameters",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "unified_state_model_exponential_map",
                                "description": null,
                                "value": null
                            }
                        ]
                    },
                    {
                        "name": "RotationalPropagatorType",
                        "short_summary": "Enumeration of available rotational propagator types.",
                        "extended_summary": "Enumeration of rotational propagator types supported by tudat.\n",
                        "members": [
                            {
                                "name": "undefined_rotational_propagator",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "quaternions",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "modified_rodrigues_parameters",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "exponential_map",
                                "description": null,
                                "value": null
                            }
                        ]
                    },
                    {
                        "name": "StateType",
                        "short_summary": "Enumeration of available integrated state types.",
                        "extended_summary": "Enumeration of integrated state types supported by tudat.\n",
                        "members": [
                            {
                                "name": "hybrid_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "translational_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "rotational_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "body_mass_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "custom_type",
                                "description": null,
                                "value": null
                            }
                        ]
                    },
                    {
                        "name": "RotationalPropagatorType",
                        "short_summary": "Enumeration of available rotational propagator types.",
                        "extended_summary": "Enumeration of rotational propagator types supported by tudat. # [py]\n",
                        "members": [
                            {
                                "name": "time_stopping_condition",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "cpu_time_stopping_condition",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "dependent_variable_stopping_condition",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "hybrid_stopping_condition",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "custom_stopping_condition",
                                "description": null,
                                "value": null
                            }
                        ]
                    }
                ],
                "classes": [
                    {
                        "name": "DependentVariableSaveSettings",
                        "short_summary": "Functional class to define settings for dependent variable to save.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "PropagatorSettings",
                        "short_summary": "Functional base class to define settings for propagators.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "reset_initial_states",
                                "short_summary": "Function to reset the initial state used as input for numerical integration.",
                                "deprecation_warning": null,
                                "extended_summary": "Function to reset the initial state used as input for numerical integration.\n",
                                "parameters": [
                                    {
                                        "name": "initial_states",
                                        "type": "numpy.ndarray",
                                        "description": "Initial states to be reset for the numerical propagation."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "MultiArcPropagatorSettings",
                        "short_summary": "`PropagatorSettings`-derived class to define settings for multi-arc dynamics.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "HybridArcPropagatorSettings",
                        "short_summary": "`PropagatorSettings`-derived class to define settings for hybrid-arc dynamics.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "SingleArcPropagatorSettings",
                        "short_summary": "`PropagatorSettings`-derived class to define settings for single-arc dynamics.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Settings for creating the object that checks whether the propagation is finished."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "TranslationalStatePropagatorSettings",
                        "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "acceleration_settings",
                                "type": "SelectedAccelerationMap",
                                "description": "Settings for retrieving the accelerations acting on the body during propagation."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "reset_initial_states",
                                "short_summary": "Function to reset the initial state used as input for numerical integration.",
                                "deprecation_warning": null,
                                "extended_summary": "Function to reset the initial state used as input for numerical integration.\n",
                                "parameters": [
                                    {
                                        "name": "initial_states",
                                        "type": "numpy.ndarray",
                                        "description": "Initial states to be reset for the numerical propagation."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "recreate_state_derivative_models",
                                "short_summary": "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models).",
                                "deprecation_warning": null,
                                "extended_summary": "Function to create the integrated state models (e.g. acceleration/torque/mass models) for\neach fo the propagators state types contained in `propagatorSettingsMap_`.\n",
                                "parameters": [
                                    {
                                        "name": "bodies",
                                        "type": "SystemOfBodies",
                                        "description": "System of bodies used in the propagation."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "single_type_settings",
                                "short_summary": "Function to retrieve a single type of propagator.",
                                "deprecation_warning": null,
                                "extended_summary": "Function to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n",
                                "parameters": [
                                    {
                                        "name": "state_type",
                                        "type": "IntegratedStateType",
                                        "description": "State type to be retrieved."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "RotationalStatePropagatorSettings",
                        "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "MultiTypePropagatorSettings",
                        "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for propagation of multiple quantities.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "propagator_settings_per_type",
                                "type": "dict[IntegratedStateType, list[SingleArcPropagatorSettings]]",
                                "description": null
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "reset_initial_states",
                                "short_summary": "Function to reset the initial states used as input for numerical integration.",
                                "deprecation_warning": null,
                                "extended_summary": "Function to reset the initial states used as input for numerical integration.\n",
                                "parameters": [
                                    {
                                        "name": "initial_states",
                                        "type": "numpy.ndarray",
                                        "description": "Initial states to be reset for the numerical propagation."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "recreate_state_derivative_models",
                                "short_summary": "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models).",
                                "deprecation_warning": null,
                                "extended_summary": "Function to create the integrated state models (e.g. acceleration/torque/mass models) for\neach of the propagators state types contained in `propagatorSettingsMap_`.\n",
                                "parameters": [
                                    {
                                        "name": "bodies",
                                        "type": "SystemOfBodies",
                                        "description": "System of bodies used in the propagation."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "single_type_settings",
                                "short_summary": "Function to retrieve a single type of propagator.",
                                "deprecation_warning": null,
                                "extended_summary": "Function to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n",
                                "parameters": [
                                    {
                                        "name": "state_type",
                                        "type": "IntegratedStateType",
                                        "description": "State type to be retrieved."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "PropagationTerminationSettings",
                        "short_summary": "Functional base class to define termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "PropagationDependentVariableTerminationSettings",
                        "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "PropagationTimeTerminationSettings",
                        "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from propagation time.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "PropagationCPUTimeTerminationSettings",
                        "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from CPU time.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "PropagationCustomTerminationSettings",
                        "short_summary": "`PropagationTerminationSettings`-derived class to define custom termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    },
                    {
                        "name": "PropagationHybridTerminationSettings",
                        "short_summary": "`PropagationTerminationSettings`-derived class to define hybrid termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ],
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "combine_initial_states",
                        "short_summary": "Function to retrieve the initial state for a list of propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to retrieve the initial state for a list of propagator settings. This way, the initial state for\ndifferent quantities to be propagated (e.g., translational state, rotational state, mass) are retrieved and\norganized in a single container.\n",
                        "parameters": [
                            {
                                "name": "propagator_settings_per_type",
                                "type": "dict",
                                "description": "Propagator settings where the type of propagation is reported as key and the respective list of propagator settings as value."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "numpy.ndarray",
                            "description": "Vector of initial states, sorted in order of IntegratedStateType, and then in the order of the vector of SingleArcPropagatorSettings of given type."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "create_acceleration_models",
                        "short_summary": "Function to create a set of acceleration models from a dictionary of bodies linked to acceleration model types.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to create a set of acceleration models from a map of bodies and acceleration model types. The propagated\nbodies and central bodies are provided through a dictionary.\n",
                        "parameters": [
                            {
                                "name": "body_system",
                                "type": "SystemOfBodies",
                                "description": "System of bodies to be used in the propagation."
                            },
                            {
                                "name": "selected_acceleration_per_body",
                                "type": "SelectedAccelerationMap",
                                "description": "Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key."
                            },
                            {
                                "name": "central_bodies",
                                "type": "dict",
                                "description": "Key-value container indicating the body to propagate as key and its central body as value."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "AccelerationMap",
                            "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration models."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "create_acceleration_models",
                        "short_summary": "Function to create a set of acceleration models from a dictionary of bodies linked to acceleration model types.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to create a set of acceleration models from a map of bodies and acceleration model types. The propagated\nbodies and central bodies are provided as two separate lists with the same order.\n",
                        "parameters": [
                            {
                                "name": "body_system",
                                "type": "SystemOfBodies",
                                "description": "System of bodies to be used in the propagation."
                            },
                            {
                                "name": "selected_acceleration_per_body",
                                "type": "SelectedAccelerationMap",
                                "description": "Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key."
                            },
                            {
                                "name": "bodies_to_propagate",
                                "type": "list",
                                "description": "List of bodies to propagate."
                            },
                            {
                                "name": "central_bodies",
                                "type": "list",
                                "description": "List of central bodies, each referred to each propagated body in the same order."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "AccelerationMap",
                            "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration models."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "create_acceleration_models",
                        "short_summary": "Function to create a set of acceleration models from a dictionary of bodies linked to acceleration model types.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to create a set of acceleration models from a map of bodies and acceleration model types. The propagated\nbodies is provided as a list.\n",
                        "parameters": [
                            {
                                "name": "body_system",
                                "type": "SystemOfBodies",
                                "description": "System of bodies to be used in the propagation."
                            },
                            {
                                "name": "selected_torque_per_body",
                                "type": "SelectedTorqueMap",
                                "description": "Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key."
                            },
                            {
                                "name": "bodies_to_propagate",
                                "type": "list",
                                "description": "List of bodies to propagate."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "TorqueModelMap",
                            "description": "Set of torques acting on the bodies to propagate, provided as torque models."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "create_acceleration_models",
                        "short_summary": "Function to get the states of a set of bodies, with respect to some set of central bodies, at the requested time.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to get the states of a set of bodies, with respect to some set of central bodies, at the requested time.\n",
                        "parameters": [
                            {
                                "name": "bodies_to_propagate",
                                "type": "list[str]",
                                "description": "List of bodies to be propagated."
                            },
                            {
                                "name": "central_bodies",
                                "type": "list[str]",
                                "description": "List of central bodies, each referred to a body being propagated (in the same order)."
                            },
                            {
                                "name": "bodies_to_propagate",
                                "type": "body_system",
                                "description": "System of bodies used in the propagation."
                            },
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time of the propagation."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "numpy.ndarray",
                            "description": "Time at which the states should be retrieved."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "translational",
                        "short_summary": "Factory function to create translational state propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create translational state propagator settings.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "central_bodies",
                                "type": "list[str]",
                                "description": "List of central bodies with respect to which the bodies to be integrated are propagated."
                            },
                            {
                                "name": "acceleration_models",
                                "type": "AccelerationMap",
                                "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration models."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "list[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "propagator",
                                "type": "TranslationalPropagatorType, default=cowell",
                                "description": "Type of translational propagator to be used (see `TranslationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "list[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved, provided as a list of SingleDependentVariableSaveSettings objects (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "TranslationalStatePropagatorSettings",
                            "description": "Translational state propagator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "translational_with_time_termination",
                        "short_summary": "Factory function to create translational state propagator settings with stopping condition at given final time.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create translational state propagator settings with stopping condition at given final time.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the termination conditions are set\nthrough the final time provided.\n",
                        "parameters": [
                            {
                                "name": "central_bodies",
                                "type": "list[str]",
                                "description": "List of central bodies with respect to which the bodies to be integrated are propagated."
                            },
                            {
                                "name": "acceleration_models",
                                "type": "AccelerationMap",
                                "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration models."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "list[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_time",
                                "type": "float",
                                "description": "Final time of the propagation to be used as termination criterion."
                            },
                            {
                                "name": "propagator",
                                "type": "TranslationalPropagatorType, default=cowell",
                                "description": "Type of translational propagator to be used (see `TranslationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "list[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "TranslationalStatePropagatorSettings",
                            "description": "Translational state propagator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "translational_from_acceleration_settings",
                        "short_summary": "Factory function to create translational state propagator settings with generic stopping conditions, and acceleration settings input.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create translational state propagator settings with generic stopping conditions, and acceleration\nsettings input. Unlike the typical propagator settings factory functions, it works by providing a key-value acceleration\n*settings* container, containing the list of accelerations settings acting on each body. The map has as key a string\ndenoting the name of the body on which a set of accelerations, provided as value, act. This set is again a key-value\ncontainer, with the key denoting the body exerting the acceleration  and the value (a pointer to) an acceleration settings\nobject. In this function, the termination conditions are set through the final time provided. NOTE, this function is *only*\nused in the rare cases where the creation of the acceleration models is to be deferred until after the propagator settings\ncreation, or where the acceleration settings of the same propagator settings are to be modified in a loop. When in doubt,\nuse the regular ``translational`` function.\n",
                        "parameters": [
                            {
                                "name": "central_bodies",
                                "type": "list[str]",
                                "description": "List of central bodies with respect to which the bodies to be integrated are propagated."
                            },
                            {
                                "name": "acceleration_settings",
                                "type": "SelectedAccelerationMap",
                                "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration settings objects."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "list[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_time",
                                "type": "float",
                                "description": "Final time of the propagation to be used as termination criterion."
                            },
                            {
                                "name": "propagator",
                                "type": "TranslationalPropagatorType, default=cowell",
                                "description": "Type of translational propagator to be used (see `TranslationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "list[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "TranslationalStatePropagatorSettings",
                            "description": "Translational state propagator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "rotational",
                        "short_summary": "Factory function to create rotational state propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create rotational state propagator settings.\nIt works by providing a key-value torque container, containing the list of torques acting on\neach body. The map has as key a string denoting the name of the body on which a set of torques, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the torque\nand the value (a pointer to) a torque model. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "torque_models",
                                "type": "TorqueModelMap",
                                "description": "Set of torques acting on the bodies to propagate, provided as torque models."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "list[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "propagator",
                                "type": "RotationalPropagatorType, default=quaternions",
                                "description": "Type of rotational propagator to be used (see `RotationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "list[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "RotationalStatePropagatorSettings",
                            "description": "Rotational state propagator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "mass",
                        "short_summary": "Factory function to create mass propagator settings",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create mass propagator settings \nIt works by providing a key-value mass rate container, containing the list of mass rate settings objects associated to\neach body. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "bodies_with_mass_to_propagate",
                                "type": "list[str]",
                                "description": "List of bodies whose mass should be numerically propagated."
                            },
                            {
                                "name": "mass_rate_settings",
                                "type": "SelectedMassRateModelMap",
                                "description": "Mass rates associated to each body, provided as a mass rate settings object."
                            },
                            {
                                "name": "initial_body_masses",
                                "type": "numpy.ndarray",
                                "description": "Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "output_variables",
                                "type": "list[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "MassPropagatorSettings",
                            "description": "Mass propagator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "multitype",
                        "short_summary": "Factory function to create multitype propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create multitype propagator settings.\nIt works by providing a list of SingleArcPropagatorSettings objects. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "propagator_settings_list",
                                "type": "list[SingleArcPropagatorSettings]",
                                "description": "List of SingleArcPropagatorSettings objects to use."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "output_variables",
                                "type": "list[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "MassPropagatorSettings",
                            "description": "Mass propagator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "multi_arc",
                        "short_summary": "Factory function to create multi-arc propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create multi-arc propagator settings. It works by providing separate settings for\neach arc in a list.\n",
                        "parameters": [
                            {
                                "name": "single_arc_settings",
                                "type": "list[SingleArcPropagatorSettings]",
                                "description": "List of SingleArcPropagatorSettings objects to use, one for each arc."
                            },
                            {
                                "name": "transfer_state_to_next_arc",
                                "type": "bool, default=False",
                                "description": "It denotes whether whether the initial state of arc N+1 is to be taken from arc N (for N>0)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "MultiArcPropagatorSettings",
                            "description": "Multi-arc propagator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "hybrid_arc",
                        "short_summary": "Factory function to create hybrid-arc propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create hybrid-arc propagator settings (i.e., a combination of single- and multi-arc dynamics).\n",
                        "parameters": [
                            {
                                "name": "single_arc_settings",
                                "type": "SingleArcPropagatorSettings",
                                "description": "SingleArcPropagatorSettings object to use for the propagation."
                            },
                            {
                                "name": "multi_arc_settings",
                                "type": "MultiArcPropagatorSettings",
                                "description": "MultiArcPropagatorSettings object to use for the propagation."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "HybridArcPropagatorSettings",
                            "description": "Hybrid-arc propagator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "time_termination",
                        "short_summary": "Factory function to create time termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create time termination settings for the propagation.\nThe propagation is stopped when the final time provided is reached.\n",
                        "parameters": [
                            {
                                "name": "termination_time",
                                "type": "float",
                                "description": "Final time of the propagation."
                            },
                            {
                                "name": "terminate_exactly_on_final_condition",
                                "type": "bool, default=False",
                                "description": "Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "PropagationTimeTerminationSettings",
                            "description": "Time termination settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "cpu_time_termination",
                        "short_summary": "Factory function to create CPU time termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create CPU time termination settings for the propagation.\nThe propagation is stopped when the final CPU time provided is reached.\n",
                        "parameters": [
                            {
                                "name": "cpu_termination_time",
                                "type": "float",
                                "description": "Maximum CPU time for the propagation."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "PropagationCPUTimeTerminationSettings",
                            "description": "CPU time termination settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "dependent_variable_termination",
                        "short_summary": "Factory function to create CPU time termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create CPU time termination settings for the propagation.\nThe propagation is stopped when the final CPU time provided is reached.\n",
                        "parameters": [
                            {
                                "name": "dependent_variable_settings",
                                "type": "SingleDependentVariableSaveSettings",
                                "description": "Dependent variable object to be used as termination setting."
                            },
                            {
                                "name": "limit_value",
                                "type": "float",
                                "description": "Limit value of the dependent variable; if reached, the propagation is stopped."
                            },
                            {
                                "name": "use_as_lower_limit",
                                "type": "bool, default=False",
                                "description": "Denotes whether the limit value should be used as lower or upper limit."
                            },
                            {
                                "name": "terminate_exactly_on_final_condition",
                                "type": "bool, default=False",
                                "description": "Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated."
                            },
                            {
                                "name": "termination_root_finder_settings",
                                "type": "bool, default=None",
                                "description": "Settings object to create root finder used to converge on exact final condition."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "PropagationDependentVariableTerminationSettings",
                            "description": "Dependent variable termination settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_termination",
                        "short_summary": "Factory function to create custom termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create custom termination settings for the propagation.\nThe propagation is stopped when the condition provided is verified.\n",
                        "parameters": [
                            {
                                "name": "custom_condition",
                                "type": "callable[[float], bool]",
                                "description": "Function of time (independent variable) which is called during the propagation and returns a boolean value denoting whether the termination condition is verified."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "PropagationCustomTerminationSettings",
                            "description": "Custom termination settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "hybrid_termination",
                        "short_summary": "Factory function to create bybrid termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create hybrid termination settings for the propagation. This function can be used\nto define that all conditions or a single condition of the conditions provided must be met to\nstop the propagation.\n",
                        "parameters": [
                            {
                                "name": "termination_settings",
                                "type": "list[PropagationTerminationSettings]",
                                "description": "List of single PropagationTerminationSettings objects to be checked during the propagation."
                            },
                            {
                                "name": "fulfill_single_condition",
                                "type": "bool, default=False",
                                "description": "Whether only a single condition of those provided must be met to stop the propagation (true) or all of them simultaneously (false)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "PropagationHybridTerminationSettings",
                            "description": "Hybrid termination settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "propagator",
                "version": null,
                "combine_initial_states": "\nFunction to retrieve the initial state for a list of propagator settings.\n\nFunction to retrieve the initial state for a list of propagator settings. This way, the initial state for\ndifferent quantities to be propagated (e.g., translational state, rotational state, mass) are retrieved and\norganized in a single container.\n\n\nParameters\n----------\npropagator_settings_per_type : dict\n    Propagator settings where the type of propagation is reported as key and the respective list of propagator settings as value.\nReturns\n-------\nnumpy.ndarray\n    Vector of initial states, sorted in order of IntegratedStateType, and then in the order of the vector of SingleArcPropagatorSettings of given type.\n\n\n\n\n\n",
                "create_acceleration_models": {
                    "overloaded": true,
                    "overloads": 4,
                    "0": "\nFunction to create a set of acceleration models from a dictionary of bodies linked to acceleration model types.\n\nFunction to create a set of acceleration models from a map of bodies and acceleration model types. The propagated\nbodies and central bodies are provided through a dictionary.\n\n\nParameters\n----------\nbody_system : SystemOfBodies\n    System of bodies to be used in the propagation.\nselected_acceleration_per_body : SelectedAccelerationMap\n    Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key.\ncentral_bodies : dict\n    Key-value container indicating the body to propagate as key and its central body as value.\nReturns\n-------\nAccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration models.\n\n\n\n\n\n",
                    "1": "\nFunction to create a set of acceleration models from a dictionary of bodies linked to acceleration model types.\n\nFunction to create a set of acceleration models from a map of bodies and acceleration model types. The propagated\nbodies and central bodies are provided as two separate lists with the same order.\n\n\nParameters\n----------\nbody_system : SystemOfBodies\n    System of bodies to be used in the propagation.\nselected_acceleration_per_body : SelectedAccelerationMap\n    Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key.\nbodies_to_propagate : list\n    List of bodies to propagate.\ncentral_bodies : list\n    List of central bodies, each referred to each propagated body in the same order.\nReturns\n-------\nAccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration models.\n\n\n\n\n\n",
                    "2": "\nFunction to create a set of acceleration models from a dictionary of bodies linked to acceleration model types.\n\nFunction to create a set of acceleration models from a map of bodies and acceleration model types. The propagated\nbodies is provided as a list.\n\n\nParameters\n----------\nbody_system : SystemOfBodies\n    System of bodies to be used in the propagation.\nselected_torque_per_body : SelectedTorqueMap\n    Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key.\nbodies_to_propagate : list\n    List of bodies to propagate.\nReturns\n-------\nTorqueModelMap\n    Set of torques acting on the bodies to propagate, provided as torque models.\n\n\n\n\n\n",
                    "3": "\nFunction to get the states of a set of bodies, with respect to some set of central bodies, at the requested time.\n\nFunction to get the states of a set of bodies, with respect to some set of central bodies, at the requested time.\n\n\nParameters\n----------\nbodies_to_propagate : list[str]\n    List of bodies to be propagated.\ncentral_bodies : list[str]\n    List of central bodies, each referred to a body being propagated (in the same order).\nbodies_to_propagate : body_system\n    System of bodies used in the propagation.\ninitial_time : float\n    Initial time of the propagation.\nReturns\n-------\nnumpy.ndarray\n    Time at which the states should be retrieved.\n\n\n\n\n\n"
                },
                "translational": "\nFactory function to create translational state propagator settings.\n\nFactory function to create translational state propagator settings.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\ncentral_bodies : list[str]\n    List of central bodies with respect to which the bodies to be integrated are propagated.\nacceleration_models : AccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration models.\nbodies_to_integrate : list[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\npropagator : TranslationalPropagatorType, default=cowell\n    Type of translational propagator to be used (see `TranslationalPropagatorType` enum).\noutput_variables : list[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved, provided as a list of SingleDependentVariableSaveSettings objects (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\nReturns\n-------\nTranslationalStatePropagatorSettings\n    Translational state propagator settings object.\n\n\n\n\n\n",
                "translational_with_time_termination": "\nFactory function to create translational state propagator settings with stopping condition at given final time.\n\nFactory function to create translational state propagator settings with stopping condition at given final time.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the termination conditions are set\nthrough the final time provided.\n\n\nParameters\n----------\ncentral_bodies : list[str]\n    List of central bodies with respect to which the bodies to be integrated are propagated.\nacceleration_models : AccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration models.\nbodies_to_integrate : list[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_time : float\n    Final time of the propagation to be used as termination criterion.\npropagator : TranslationalPropagatorType, default=cowell\n    Type of translational propagator to be used (see `TranslationalPropagatorType` enum).\noutput_variables : list[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\nReturns\n-------\nTranslationalStatePropagatorSettings\n    Translational state propagator settings object.\n\n\n\n\n\n",
                "translational_from_acceleration_settings": "\nFactory function to create translational state propagator settings with generic stopping conditions, and acceleration settings input.\n\nFactory function to create translational state propagator settings with generic stopping conditions, and acceleration\nsettings input. Unlike the typical propagator settings factory functions, it works by providing a key-value acceleration\n*settings* container, containing the list of accelerations settings acting on each body. The map has as key a string\ndenoting the name of the body on which a set of accelerations, provided as value, act. This set is again a key-value\ncontainer, with the key denoting the body exerting the acceleration  and the value (a pointer to) an acceleration settings\nobject. In this function, the termination conditions are set through the final time provided. NOTE, this function is *only*\nused in the rare cases where the creation of the acceleration models is to be deferred until after the propagator settings\ncreation, or where the acceleration settings of the same propagator settings are to be modified in a loop. When in doubt,\nuse the regular ``translational`` function.\n\n\nParameters\n----------\ncentral_bodies : list[str]\n    List of central bodies with respect to which the bodies to be integrated are propagated.\nacceleration_settings : SelectedAccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration settings objects.\nbodies_to_integrate : list[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_time : float\n    Final time of the propagation to be used as termination criterion.\npropagator : TranslationalPropagatorType, default=cowell\n    Type of translational propagator to be used (see `TranslationalPropagatorType` enum).\noutput_variables : list[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\nReturns\n-------\nTranslationalStatePropagatorSettings\n    Translational state propagator settings object.\n\n\n\n\n\n",
                "rotational": "\nFactory function to create rotational state propagator settings.\n\nFactory function to create rotational state propagator settings.\nIt works by providing a key-value torque container, containing the list of torques acting on\neach body. The map has as key a string denoting the name of the body on which a set of torques, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the torque\nand the value (a pointer to) a torque model. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\ntorque_models : TorqueModelMap\n    Set of torques acting on the bodies to propagate, provided as torque models.\nbodies_to_integrate : list[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\npropagator : RotationalPropagatorType, default=quaternions\n    Type of rotational propagator to be used (see `RotationalPropagatorType` enum).\noutput_variables : list[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\nReturns\n-------\nRotationalStatePropagatorSettings\n    Rotational state propagator settings object.\n\n\n\n\n\n",
                "mass": "\nFactory function to create mass propagator settings\n\nFactory function to create mass propagator settings \nIt works by providing a key-value mass rate container, containing the list of mass rate settings objects associated to\neach body. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\nbodies_with_mass_to_propagate : list[str]\n    List of bodies whose mass should be numerically propagated.\nmass_rate_settings : SelectedMassRateModelMap\n    Mass rates associated to each body, provided as a mass rate settings object.\ninitial_body_masses : numpy.ndarray\n    Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\noutput_variables : list[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\nReturns\n-------\nMassPropagatorSettings\n    Mass propagator settings object.\n\n\n\n\n\n",
                "multitype": "\nFactory function to create multitype propagator settings.\n\nFactory function to create multitype propagator settings.\nIt works by providing a list of SingleArcPropagatorSettings objects. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\npropagator_settings_list : list[SingleArcPropagatorSettings]\n    List of SingleArcPropagatorSettings objects to use.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\noutput_variables : list[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\nReturns\n-------\nMassPropagatorSettings\n    Mass propagator settings object.\n\n\n\n\n\n",
                "multi_arc": "\nFactory function to create multi-arc propagator settings.\n\nFactory function to create multi-arc propagator settings. It works by providing separate settings for\neach arc in a list.\n\n\nParameters\n----------\nsingle_arc_settings : list[SingleArcPropagatorSettings]\n    List of SingleArcPropagatorSettings objects to use, one for each arc.\ntransfer_state_to_next_arc : bool, default=False\n    It denotes whether whether the initial state of arc N+1 is to be taken from arc N (for N>0).\nReturns\n-------\nMultiArcPropagatorSettings\n    Multi-arc propagator settings object.\n\n\n\n\n\n",
                "hybrid_arc": "\nFactory function to create hybrid-arc propagator settings.\n\nFactory function to create hybrid-arc propagator settings (i.e., a combination of single- and multi-arc dynamics).\n\n\nParameters\n----------\nsingle_arc_settings : SingleArcPropagatorSettings\n    SingleArcPropagatorSettings object to use for the propagation.\nmulti_arc_settings : MultiArcPropagatorSettings\n    MultiArcPropagatorSettings object to use for the propagation.\nReturns\n-------\nHybridArcPropagatorSettings\n    Hybrid-arc propagator settings object.\n\n\n\n\n\n",
                "time_termination": "\nFactory function to create time termination settings for the propagation.\n\nFactory function to create time termination settings for the propagation.\nThe propagation is stopped when the final time provided is reached.\n\n\nParameters\n----------\ntermination_time : float\n    Final time of the propagation.\nterminate_exactly_on_final_condition : bool, default=False\n    Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated.\nReturns\n-------\nPropagationTimeTerminationSettings\n    Time termination settings object.\n\n\n\n\n\n",
                "cpu_time_termination": "\nFactory function to create CPU time termination settings for the propagation.\n\nFactory function to create CPU time termination settings for the propagation.\nThe propagation is stopped when the final CPU time provided is reached.\n\n\nParameters\n----------\ncpu_termination_time : float\n    Maximum CPU time for the propagation.\nReturns\n-------\nPropagationCPUTimeTerminationSettings\n    CPU time termination settings object.\n\n\n\n\n\n",
                "dependent_variable_termination": "\nFactory function to create CPU time termination settings for the propagation.\n\nFactory function to create CPU time termination settings for the propagation.\nThe propagation is stopped when the final CPU time provided is reached.\n\n\nParameters\n----------\ndependent_variable_settings : SingleDependentVariableSaveSettings\n    Dependent variable object to be used as termination setting.\nlimit_value : float\n    Limit value of the dependent variable; if reached, the propagation is stopped.\nuse_as_lower_limit : bool, default=False\n    Denotes whether the limit value should be used as lower or upper limit.\nterminate_exactly_on_final_condition : bool, default=False\n    Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated.\ntermination_root_finder_settings : bool, default=None\n    Settings object to create root finder used to converge on exact final condition.\nReturns\n-------\nPropagationDependentVariableTerminationSettings\n    Dependent variable termination settings object.\n\n\n\n\n\n",
                "custom_termination": "\nFactory function to create custom termination settings for the propagation.\n\nFactory function to create custom termination settings for the propagation.\nThe propagation is stopped when the condition provided is verified.\n\n\nParameters\n----------\ncustom_condition : callable[[float], bool]\n    Function of time (independent variable) which is called during the propagation and returns a boolean value denoting whether the termination condition is verified.\nReturns\n-------\nPropagationCustomTerminationSettings\n    Custom termination settings object.\n\n\n\n\n\n",
                "hybrid_termination": "\nFactory function to create bybrid termination settings for the propagation.\n\nFactory function to create hybrid termination settings for the propagation. This function can be used\nto define that all conditions or a single condition of the conditions provided must be met to\nstop the propagation.\n\n\nParameters\n----------\ntermination_settings : list[PropagationTerminationSettings]\n    List of single PropagationTerminationSettings objects to be checked during the propagation.\nfulfill_single_condition : bool, default=False\n    Whether only a single condition of those provided must be met to stop the propagation (true) or all of them simultaneously (false).\nReturns\n-------\nPropagationHybridTerminationSettings\n    Hybrid termination settings object.\n\n\n\n\n\n",
                "DependentVariableSaveSettings": {
                    "name": "DependentVariableSaveSettings",
                    "short_summary": "Functional class to define settings for dependent variable to save.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user because this is a base class.\n\n\n\n\n\n",
                    "__docstring__": "\nFunctional class to define settings for dependent variable to save.\n\n\n\n\n\n"
                },
                "PropagatorSettings": {
                    "name": "PropagatorSettings",
                    "short_summary": "Functional base class to define settings for propagators.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "reset_initial_states",
                            "short_summary": "Function to reset the initial state used as input for numerical integration.",
                            "deprecation_warning": null,
                            "extended_summary": "Function to reset the initial state used as input for numerical integration.\n",
                            "parameters": [
                                {
                                    "name": "initial_states",
                                    "type": "numpy.ndarray",
                                    "description": "Initial states to be reset for the numerical propagation."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user because this is a base class.\n\n\n\n\n\n",
                    "reset_initial_states": "\nFunction to reset the initial state used as input for numerical integration.\n\nFunction to reset the initial state used as input for numerical integration.\n\n\nParameters\n----------\ninitial_states : numpy.ndarray\n    Initial states to be reset for the numerical propagation.\n\n\n\n\n",
                    "__docstring__": "\nFunctional base class to define settings for propagators.\n\n\n\n\n\n"
                },
                "MultiArcPropagatorSettings": {
                    "name": "MultiArcPropagatorSettings",
                    "short_summary": "`PropagatorSettings`-derived class to define settings for multi-arc dynamics.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "__docstring__": "\n`PropagatorSettings`-derived class to define settings for multi-arc dynamics.\n\n\n\n\n\n"
                },
                "HybridArcPropagatorSettings": {
                    "name": "HybridArcPropagatorSettings",
                    "short_summary": "`PropagatorSettings`-derived class to define settings for hybrid-arc dynamics.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "__docstring__": "\n`PropagatorSettings`-derived class to define settings for hybrid-arc dynamics.\n\n\n\n\n\n"
                },
                "SingleArcPropagatorSettings": {
                    "name": "SingleArcPropagatorSettings",
                    "short_summary": "`PropagatorSettings`-derived class to define settings for single-arc dynamics.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": [
                        {
                            "name": "termination_settings",
                            "type": "PropagationTerminationSettings",
                            "description": "Settings for creating the object that checks whether the propagation is finished."
                        }
                    ],
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "__docstring__": "\n`PropagatorSettings`-derived class to define settings for single-arc dynamics.\n\n\nAttributes\n----------\ntermination_settings : PropagationTerminationSettings\n    Settings for creating the object that checks whether the propagation is finished.\n\n\n\n\n"
                },
                "TranslationalStatePropagatorSettings": {
                    "name": "TranslationalStatePropagatorSettings",
                    "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": [
                        {
                            "name": "acceleration_settings",
                            "type": "SelectedAccelerationMap",
                            "description": "Settings for retrieving the accelerations acting on the body during propagation."
                        }
                    ],
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "reset_initial_states",
                            "short_summary": "Function to reset the initial state used as input for numerical integration.",
                            "deprecation_warning": null,
                            "extended_summary": "Function to reset the initial state used as input for numerical integration.\n",
                            "parameters": [
                                {
                                    "name": "initial_states",
                                    "type": "numpy.ndarray",
                                    "description": "Initial states to be reset for the numerical propagation."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "recreate_state_derivative_models",
                            "short_summary": "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models).",
                            "deprecation_warning": null,
                            "extended_summary": "Function to create the integrated state models (e.g. acceleration/torque/mass models) for\neach fo the propagators state types contained in `propagatorSettingsMap_`.\n",
                            "parameters": [
                                {
                                    "name": "bodies",
                                    "type": "SystemOfBodies",
                                    "description": "System of bodies used in the propagation."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "single_type_settings",
                            "short_summary": "Function to retrieve a single type of propagator.",
                            "deprecation_warning": null,
                            "extended_summary": "Function to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n",
                            "parameters": [
                                {
                                    "name": "state_type",
                                    "type": "IntegratedStateType",
                                    "description": "State type to be retrieved."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "reset_initial_states": "\nFunction to reset the initial state used as input for numerical integration.\n\nFunction to reset the initial state used as input for numerical integration.\n\n\nParameters\n----------\ninitial_states : numpy.ndarray\n    Initial states to be reset for the numerical propagation.\n\n\n\n\n",
                    "recreate_state_derivative_models": "\nFunction to (re)create the integrated state models (e.g. acceleration/torque/mass models).\n\nFunction to create the integrated state models (e.g. acceleration/torque/mass models) for\neach fo the propagators state types contained in `propagatorSettingsMap_`.\n\n\nParameters\n----------\nbodies : SystemOfBodies\n    System of bodies used in the propagation.\n\n\n\n\n",
                    "single_type_settings": "\nFunction to retrieve a single type of propagator.\n\nFunction to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n\n\nParameters\n----------\nstate_type : IntegratedStateType\n    State type to be retrieved.\n\n\n\n\n",
                    "__docstring__": "\n`SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics.\n\n\nAttributes\n----------\nacceleration_settings : SelectedAccelerationMap\n    Settings for retrieving the accelerations acting on the body during propagation.\n\n\n\n\n"
                },
                "RotationalStatePropagatorSettings": {
                    "name": "RotationalStatePropagatorSettings",
                    "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "__docstring__": "\n`SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation.\n\n\n\n\n\n"
                },
                "MultiTypePropagatorSettings": {
                    "name": "MultiTypePropagatorSettings",
                    "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for propagation of multiple quantities.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": [
                        {
                            "name": "propagator_settings_per_type",
                            "type": "dict[IntegratedStateType, list[SingleArcPropagatorSettings]]",
                            "description": null
                        }
                    ],
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "reset_initial_states",
                            "short_summary": "Function to reset the initial states used as input for numerical integration.",
                            "deprecation_warning": null,
                            "extended_summary": "Function to reset the initial states used as input for numerical integration.\n",
                            "parameters": [
                                {
                                    "name": "initial_states",
                                    "type": "numpy.ndarray",
                                    "description": "Initial states to be reset for the numerical propagation."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "recreate_state_derivative_models",
                            "short_summary": "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models).",
                            "deprecation_warning": null,
                            "extended_summary": "Function to create the integrated state models (e.g. acceleration/torque/mass models) for\neach of the propagators state types contained in `propagatorSettingsMap_`.\n",
                            "parameters": [
                                {
                                    "name": "bodies",
                                    "type": "SystemOfBodies",
                                    "description": "System of bodies used in the propagation."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "single_type_settings",
                            "short_summary": "Function to retrieve a single type of propagator.",
                            "deprecation_warning": null,
                            "extended_summary": "Function to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n",
                            "parameters": [
                                {
                                    "name": "state_type",
                                    "type": "IntegratedStateType",
                                    "description": "State type to be retrieved."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "reset_initial_states": "\nFunction to reset the initial states used as input for numerical integration.\n\nFunction to reset the initial states used as input for numerical integration.\n\n\nParameters\n----------\ninitial_states : numpy.ndarray\n    Initial states to be reset for the numerical propagation.\n\n\n\n\n",
                    "recreate_state_derivative_models": "\nFunction to (re)create the integrated state models (e.g. acceleration/torque/mass models).\n\nFunction to create the integrated state models (e.g. acceleration/torque/mass models) for\neach of the propagators state types contained in `propagatorSettingsMap_`.\n\n\nParameters\n----------\nbodies : SystemOfBodies\n    System of bodies used in the propagation.\n\n\n\n\n",
                    "single_type_settings": "\nFunction to retrieve a single type of propagator.\n\nFunction to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n\n\nParameters\n----------\nstate_type : IntegratedStateType\n    State type to be retrieved.\n\n\n\n\n",
                    "__docstring__": "\n`SingleArcPropagatorSettings`-derived class to define settings for propagation of multiple quantities.\n\n\nAttributes\n----------\npropagator_settings_per_type : dict[IntegratedStateType, list[SingleArcPropagatorSettings]]\n    None\n\n\n\n\n"
                },
                "PropagationTerminationSettings": {
                    "name": "PropagationTerminationSettings",
                    "short_summary": "Functional base class to define termination settings for the propagation.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user because this is a base class.\n\n\n\n\n\n",
                    "__docstring__": "\nFunctional base class to define termination settings for the propagation.\n\n\n\n\n\n"
                },
                "PropagationDependentVariableTerminationSettings": {
                    "name": "PropagationDependentVariableTerminationSettings",
                    "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "__docstring__": "\n`PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables.\n\n\n\n\n\n"
                },
                "PropagationTimeTerminationSettings": {
                    "name": "PropagationTimeTerminationSettings",
                    "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from propagation time.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "__docstring__": "\n`PropagationTerminationSettings`-derived class to define termination settings for the propagation from propagation time.\n\n\n\n\n\n"
                },
                "PropagationCPUTimeTerminationSettings": {
                    "name": "PropagationCPUTimeTerminationSettings",
                    "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from CPU time.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "__docstring__": "\n`PropagationTerminationSettings`-derived class to define termination settings for the propagation from CPU time.\n\n\n\n\n\n"
                },
                "PropagationCustomTerminationSettings": {
                    "name": "PropagationCustomTerminationSettings",
                    "short_summary": "`PropagationTerminationSettings`-derived class to define custom termination settings for the propagation.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "__docstring__": "\n`PropagationTerminationSettings`-derived class to define custom termination settings for the propagation.\n\n\n\n\n\n"
                },
                "PropagationHybridTerminationSettings": {
                    "name": "PropagationHybridTerminationSettings",
                    "short_summary": "`PropagationTerminationSettings`-derived class to define hybrid termination settings for the propagation.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null,
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n\n\n\n\n",
                    "__docstring__": "\n`PropagationTerminationSettings`-derived class to define hybrid termination settings for the propagation.\n\n\n\n\n\n"
                },
                "TranslationalPropagatorType": {
                    "undefined_translational_propagator": "",
                    "cowell": "",
                    "encke": "",
                    "gauss_keplerian": "",
                    "gauss_modified_equinoctial": "",
                    "unified_state_model_quaternions": "",
                    "unified_state_model_modified_rodrigues_parameters": "",
                    "unified_state_model_exponential_map": "",
                    "__docstring__": "\nEnumeration of available translational propagator types.\n\nEnumeration of translational propagator types supported by tudat.\n\n\n\n\n\n",
                    "name": "TranslationalPropagatorType",
                    "short_summary": "Enumeration of available translational propagator types.",
                    "extended_summary": "Enumeration of translational propagator types supported by tudat.\n",
                    "members": [
                        {
                            "name": "undefined_translational_propagator",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "cowell",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "encke",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "gauss_keplerian",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "gauss_modified_equinoctial",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "unified_state_model_quaternions",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "unified_state_model_modified_rodrigues_parameters",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "unified_state_model_exponential_map",
                            "description": null,
                            "value": null
                        }
                    ]
                },
                "RotationalPropagatorType": {
                    "time_stopping_condition": "",
                    "cpu_time_stopping_condition": "",
                    "dependent_variable_stopping_condition": "",
                    "hybrid_stopping_condition": "",
                    "custom_stopping_condition": "",
                    "__docstring__": "\nEnumeration of available rotational propagator types.\n\nEnumeration of rotational propagator types supported by tudat. # [py]\n\n\n\n\n\n",
                    "name": "RotationalPropagatorType",
                    "short_summary": "Enumeration of available rotational propagator types.",
                    "extended_summary": "Enumeration of rotational propagator types supported by tudat. # [py]\n",
                    "members": [
                        {
                            "name": "time_stopping_condition",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "cpu_time_stopping_condition",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "dependent_variable_stopping_condition",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "hybrid_stopping_condition",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "custom_stopping_condition",
                            "description": null,
                            "value": null
                        }
                    ]
                },
                "StateType": {
                    "hybrid_type": "",
                    "translational_type": "",
                    "rotational_type": "",
                    "body_mass_type": "",
                    "custom_type": "",
                    "__docstring__": "\nEnumeration of available integrated state types.\n\nEnumeration of integrated state types supported by tudat.\n\n\n\n\n\n",
                    "name": "StateType",
                    "short_summary": "Enumeration of available integrated state types.",
                    "extended_summary": "Enumeration of integrated state types supported by tudat.\n",
                    "members": [
                        {
                            "name": "hybrid_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "translational_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "rotational_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "body_mass_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "custom_type",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            },
            "torque": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/propagation_setup",
                "file": "torque.yaml",
                "_implicit_name": "torque",
                "config": null,
                "summary": null,
                "extended_summary": "This module provides the functionality for creating torque settings.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": [
                    {
                        "name": "AvailableTorque",
                        "short_summary": "Enumeration of available torque types.",
                        "extended_summary": "Enumeration of torque types supported by tudat.\n",
                        "members": [
                            {
                                "name": "torque_free_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "underfined_torque_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "second_order_gravitational_torque_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "aerodynamic_torque_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "spherical_harmonic_gravitational_torque_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "inertial_torque_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "dissipative_torque_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "custom_torque_type",
                                "description": null,
                                "value": null
                            }
                        ]
                    }
                ],
                "classes": [
                    {
                        "name": "TorqueSettings",
                        "short_summary": "Functional base class to define settings for torques.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "SphericalHarmonicTorqueSettings",
                        "short_summary": "`TorqueSettings`-derived class to define settings for torques caused by spherical harmonic gravity.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "aerodynamic",
                        "short_summary": "Creates the settings for the aerodynamic torque.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates the settings for the aerodynamic torque exerted by a body with an atmosphere model and shape model on\nanother body. The body exerting the torque needs to have both an atmosphere model and a shape model defined.\nFurthermore, the body undergoing the torque needs to have the aerodynamic coefficient interface and its moment\ncoefficients defined. In the case that the aerodynamic coefficients are defined as a function of the vehicle\norientation (e.g. angle of attack and sideslip angle), these angles can be manually or automatically defined.\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "TorqueSettings",
                            "description": "Torque settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic_gravitational",
                        "short_summary": "Creates the settings for the spherical harmonic torque.",
                        "deprecation_warning": null,
                        "extended_summary": "Torque exerted by a point mass on a body with an arbitrary degree/order spherical harmonics mass distribution.\nThe body exerting the torque only needs to have a gravitational model defined (point-mass or spherical harmonic),\nwhile the body undergoing the torque needs to have a spherical harmonic gravity field defined.\n",
                        "parameters": [
                            {
                                "name": "maximum_degree",
                                "type": "int",
                                "description": "Maximum degree of the spherical harmonic expansion."
                            },
                            {
                                "name": "maximum_order",
                                "type": "int",
                                "description": "Maximum order of the spherical harmonic expansion."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "TorqueSettings",
                            "description": "Torque settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "second_degree_gravitational",
                        "short_summary": "Creates the settings for the second-degree gravitational torque.",
                        "deprecation_warning": null,
                        "extended_summary": "Torque exerted by a point mass on a body with a degree two spherical harmonics mass distribution.\nA degree two spherical harmonics mass distribution can be represented by an inertia tensor; thus,\nfor this torque model, the body undergoing the torque needs to have an inertia tensor defined.\nThe body exerting the torque only needs to have a gravitational model defined (either point-mass or spherical\nharmonics).\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "TorqueSettings",
                            "description": "Torque settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom",
                        "short_summary": "Creates the settings for a custom torque.",
                        "deprecation_warning": null,
                        "extended_summary": "Torque exerted by a point mass on a body with a degree two spherical harmonics mass distribution.\nA degree two spherical harmonics mass distribution can be represented by an inertia tensor; thus,\nfor this torque model, the body undergoing the torque needs to have an inertia tensor defined.\nThe body exerting the torque only needs to have a gravitational model defined (either point-mass or spherical\nharmonics).\n",
                        "parameters": [
                            {
                                "name": "torque_function",
                                "type": "callable[[float], list]",
                                "description": "Custom torque function with time as an independent variable."
                            },
                            {
                                "name": "scaling_function",
                                "type": "callable[[float], float], default=None",
                                "description": "Scaling function with time as an independent variable to be multiplied by the custom torque function."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "TorqueSettings",
                            "description": "Torque settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "torque",
                "version": null,
                "aerodynamic": "\nCreates the settings for the aerodynamic torque.\n\nCreates the settings for the aerodynamic torque exerted by a body with an atmosphere model and shape model on\nanother body. The body exerting the torque needs to have both an atmosphere model and a shape model defined.\nFurthermore, the body undergoing the torque needs to have the aerodynamic coefficient interface and its moment\ncoefficients defined. In the case that the aerodynamic coefficients are defined as a function of the vehicle\norientation (e.g. angle of attack and sideslip angle), these angles can be manually or automatically defined.\n\nReturns\n-------\nTorqueSettings\n    Torque settings object.\n\n\n\n\n\n",
                "spherical_harmonic_gravitational": "\nCreates the settings for the spherical harmonic torque.\n\nTorque exerted by a point mass on a body with an arbitrary degree/order spherical harmonics mass distribution.\nThe body exerting the torque only needs to have a gravitational model defined (point-mass or spherical harmonic),\nwhile the body undergoing the torque needs to have a spherical harmonic gravity field defined.\n\n\nParameters\n----------\nmaximum_degree : int\n    Maximum degree of the spherical harmonic expansion.\nmaximum_order : int\n    Maximum order of the spherical harmonic expansion.\nReturns\n-------\nTorqueSettings\n    Torque settings object.\n\n\n\n\n\n",
                "second_degree_gravitational": "\nCreates the settings for the second-degree gravitational torque.\n\nTorque exerted by a point mass on a body with a degree two spherical harmonics mass distribution.\nA degree two spherical harmonics mass distribution can be represented by an inertia tensor; thus,\nfor this torque model, the body undergoing the torque needs to have an inertia tensor defined.\nThe body exerting the torque only needs to have a gravitational model defined (either point-mass or spherical\nharmonics).\n\nReturns\n-------\nTorqueSettings\n    Torque settings object.\n\n\n\n\n\n",
                "custom": "\nCreates the settings for a custom torque.\n\nTorque exerted by a point mass on a body with a degree two spherical harmonics mass distribution.\nA degree two spherical harmonics mass distribution can be represented by an inertia tensor; thus,\nfor this torque model, the body undergoing the torque needs to have an inertia tensor defined.\nThe body exerting the torque only needs to have a gravitational model defined (either point-mass or spherical\nharmonics).\n\n\nParameters\n----------\ntorque_function : callable[[float], list]\n    Custom torque function with time as an independent variable.\nscaling_function : callable[[float], float], default=None\n    Scaling function with time as an independent variable to be multiplied by the custom torque function.\nReturns\n-------\nTorqueSettings\n    Torque settings object.\n\n\n\n\n\n",
                "TorqueSettings": {
                    "__docstring__": "\nFunctional base class to define settings for torques.\n\n\n\n\n\n"
                },
                "SphericalHarmonicTorqueSettings": {
                    "__docstring__": "\n`TorqueSettings`-derived class to define settings for torques caused by spherical harmonic gravity.\n\n\n\n\n\n"
                },
                "AvailableTorque": {
                    "torque_free_type": "",
                    "underfined_torque_type": "",
                    "second_order_gravitational_torque_type": "",
                    "aerodynamic_torque_type": "",
                    "spherical_harmonic_gravitational_torque_type": "",
                    "inertial_torque_type": "",
                    "dissipative_torque_type": "",
                    "custom_torque_type": "",
                    "__docstring__": "\nEnumeration of available torque types.\n\nEnumeration of torque types supported by tudat.\n\n\n\n\n\n",
                    "name": "AvailableTorque",
                    "short_summary": "Enumeration of available torque types.",
                    "extended_summary": "Enumeration of torque types supported by tudat.\n",
                    "members": [
                        {
                            "name": "torque_free_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "underfined_torque_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "second_order_gravitational_torque_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "aerodynamic_torque_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "spherical_harmonic_gravitational_torque_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "inertial_torque_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "dissipative_torque_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "custom_torque_type",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            },
            "thrust": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/numerical_simulation/propagation_setup",
                "file": "thrust.yaml",
                "_implicit_name": "thrust",
                "config": null,
                "summary": null,
                "extended_summary": "This module provides the functionality for creating thrust \nmagnitude and direction settings.\n",
                "routine_listings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "enums": [
                    {
                        "name": "ThrustFrames",
                        "short_summary": "Enumeration of available thrust frame types.",
                        "extended_summary": "Enumeration of thrust frame types supported by tudat.\n",
                        "members": [
                            {
                                "name": "unspecified_thrust_frame_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "inertial_thrust_frame_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "lvlh_thrust_frame_type",
                                "description": null,
                                "value": null
                            }
                        ]
                    },
                    {
                        "name": "ThrustMagnitudeTypes",
                        "short_summary": "Enumeration of available thrust magnitude types.",
                        "extended_summary": "Enumeration of thrust magnitude types supported by tudat.\n",
                        "members": [
                            {
                                "name": "constant_thrust_magnitude",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "from_engine_properties_thrust_magnitude",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "thrust_magnitude_from_time_function",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "thrust_magnitude_from_dependent_variables",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "bang_bang_thrust_magnitude_from_mee_costates",
                                "description": null,
                                "value": null
                            }
                        ]
                    },
                    {
                        "name": "ThrustDirectionTypes",
                        "short_summary": "Enumeration of available thrust direction types.",
                        "extended_summary": "Enumeration of thrust direction types supported by tudat.\n",
                        "members": [
                            {
                                "name": "colinear_with_state_segment_thrust_direction_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "thrust_direction_from_existing_body_orientation_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "custom_thrust_direction_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "custom_thrust_orientation_type",
                                "description": null,
                                "value": null
                            },
                            {
                                "name": "mee_costate_based_thrust_direction_type",
                                "description": null,
                                "value": null
                            }
                        ]
                    }
                ],
                "classes": [
                    {
                        "name": "ThrustDirectionSettings",
                        "short_summary": "Functional base class to define settings for the thrust direction.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "thrust_direction_type",
                                "type": "ThrustDirectionType",
                                "description": "Thrust direction type object."
                            },
                            {
                                "name": "relative_body",
                                "type": "str",
                                "description": "Body to which the thrust acceleration is applied."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "ThrustDirectionFromStateGuidanceSettings",
                        "short_summary": "`ThrustDirectionSettings`-derived class to define settings for the thrust direction from the current state.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "is_colinear_with_velocity",
                                "type": "bool",
                                "description": "Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false)."
                            },
                            {
                                "name": "direction_is_opposite_to_vector",
                                "type": "bool",
                                "description": "Whether the thrust is pointing towards the thrusting body (true) or the central body (false)."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "CustomThrustDirectionSettings",
                        "short_summary": "`ThrustDirectionSettings`-derived class to define settings for a custom thrust direction.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "thrust_direction_function",
                                "type": "callable[[float], numpy.ndarray]",
                                "description": "Function of time returning the thrust direction in the inertial frame."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "CustomThrustOrientationSettings",
                        "short_summary": "`ThrustDirectionSettings`-derived class to define settings for a custom thrust orientation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "thrust_orientation_function",
                                "type": "callable[[float], numpy.ndarray]",
                                "description": "Function of time returning the rotation between the thrust direction in the body-fixed frame to the inertial frame."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "MeeCostateBasedThrustDirectionSettings",
                        "short_summary": "`ThrustDirectionSettings`-derived class to define settings for the thrust direction from Modified Equinoctial Elements (MEE) costates.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "vehicle_name",
                                "type": "str",
                                "description": "Name of the body to which the thrust is applied."
                            },
                            {
                                "name": "costate_function",
                                "type": "callable[[float], numpy.ndarray]",
                                "description": "Function of time returning the five costates."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "ThrustMagnitudeSettings",
                        "short_summary": "Functional base class to define settings for the thrust magnitude.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "thrust_magnitude_type",
                                "type": "ThrustMagnitudeType",
                                "description": "Thrust magnitude type object."
                            },
                            {
                                "name": "thrust_origin_id",
                                "type": "str",
                                "description": "Reference ID of the thrust origin that should be used (empty if N/A)."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "ConstantThrustMagnitudeSettings",
                        "short_summary": "`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "thrust_magnitude",
                                "type": "float",
                                "description": "Value of the constant thrust magnitude."
                            },
                            {
                                "name": "specific_impulse",
                                "type": "float",
                                "description": "Value of the constant specific impulse."
                            },
                            {
                                "name": "specific_impulse",
                                "type": "numpy.ndarray",
                                "description": "Thrust direction vector expressed in the body-fixed reference frame."
                            }
                        ],
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    },
                    {
                        "name": "FromFunctionThrustMagnitudeSettings",
                        "short_summary": "`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "properties": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null,
                        "autoclass": null
                    }
                ],
                "functions": [
                    {
                        "name": "get_propulsion_input_variables",
                        "short_summary": "Function to create a list of functions that compute and return independent variables for the thrust.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to create a list of functions that compute and return independent variables for thrust and/or specific\nimpulse. This parameterization is used to create a specific thrust magnitude type (see thrust magnitude from\ndependent variables). This function retrieves all input functions from the environment and a list of user-defined\nfunctions.\n",
                        "parameters": [
                            {
                                "name": "body_with_guidance",
                                "type": "Body",
                                "description": "Body object whose thrust guidance should be defined."
                            },
                            {
                                "name": "independent_variables",
                                "type": "list[ThrustIndependentVariables]",
                                "description": "Set of dependent variables that should be used to compute the thrust."
                            },
                            {
                                "name": "guidance_input_functions",
                                "type": "list[callable[[], float], default=[]",
                                "description": "Set of functions to compute the thrust, each associated to a specific dependent variable."
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "thrust_direction_from_state_guidance",
                        "short_summary": "Create thrust direction settings from the state guidance.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates thrust direction settings from the state guidance. In various simplified cases,\nthe thrust direction can be assumed to be in line with either the position or velocity of the body of interest\nwith respect to some other body.\n",
                        "parameters": [
                            {
                                "name": "central_body",
                                "type": "Body",
                                "description": "Central body with respect to which the position and velocity of the body undergoing the thrust acceleration are computed."
                            },
                            {
                                "name": "is_colinear_with_velocity",
                                "type": "bool",
                                "description": "Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false)."
                            },
                            {
                                "name": "direction_is_opposite_to_vector",
                                "type": "bool",
                                "description": "Whether the thrust is pointing towards the thrusting body (true) or the central body (false)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ThrustDirectionFromStateGuidanceSettings",
                            "description": "Thrust direction from state guidance settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "thrust_from_existing_body_orientation",
                        "short_summary": "Create thrust direction settings from the existing body orientation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates thrust direction settings from the existing body orientation. In some cases,\nthe vehicle\u2019s orientation may be predetermined, either due to aerodynamic guidance or to the concurrent\npropagation of the rotational equations of motion. In such a case, the thrust direction is computed from the\nbody-fixed thrust direction (defined in ThrustMagnitudeSettings) and the existing vehicle orientation.\n",
                        "parameters": null,
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_thrust_orientation",
                        "short_summary": "Create custom thrust orientation settings, expressed as a rotation matrix.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates custom thrust orientation settings, expressed through a rotation matrix.\nAs an alternative expression for generalized thrust direction guidance, the thrust orientation can be defined as\nan arbitrary function of time. As with the custom thrust direction, this allows a broad range of options to be\ndefined, at the expense of increased complexity (somehow the thrust orientation needs to be manually defined).\nThe thrust orientation is provided through a rotation matrix representing the rotation\nfrom body-fixed thrust direction to the inertial thrust direction.\n",
                        "parameters": [
                            {
                                "name": "thrust_orientation_function",
                                "type": "callable[[float], numpy.ndarray]",
                                "description": "Function of time returning the matrix representing the rotation between the thrust direction in the body-fixed frame to the inertial frame."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CustomThrustOrientationSettings",
                            "description": "Custom thrust orientation settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_thrust_direction",
                        "short_summary": "Create custom thrust direction settings, expressed as a vector in the inertial frame.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates custom thrust direction settings, expressed as a unit vector in the inertial frame.\nFor a generalized thrust direction guidance, the thrust can be defined as an arbitrary function of time.\nThis allows a broad range of options to be defined, at the expense of increased complexity (somehow the thrust\ndirection needs to be manually defined).\n",
                        "parameters": [
                            {
                                "name": "thrust_direction_function",
                                "type": "callable[[float], numpy.ndarray]",
                                "description": "Function of time returning the thrust direction in the inertial frame."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "CustomThrustDirectionSettings",
                            "description": "Custom thrust direction settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "constant_thrust_magnitude",
                        "short_summary": "Create thrust magnitude settings from a constant thrust magnitude and Isp.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates constant thrust magnitude settings. The specific impulse to use for the thrust is\nalso supplied when applying a mass rate model in the propagation of the vehicle dynamics, relating the thrust\nto the mass decrease of the vehicle.\n",
                        "parameters": [
                            {
                                "name": "thrust_magnitude",
                                "type": "float",
                                "description": "Value of the constant thrust magnitude."
                            },
                            {
                                "name": "specific_impulse",
                                "type": "float",
                                "description": "Value of the constant specific impulse, used to link the thrust model to the mass propagation."
                            },
                            {
                                "name": "body_fixed_thrust_direction",
                                "type": "numpy.ndarray, default=numpy.ndarray([])",
                                "description": "Constant body-fixed thrust direction (positive x-direction by default). Note that this should be a unit-vector representing the direction opposite to the nozzle direction."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "ConstantThrustMagnitudeSettings",
                            "description": "Constant thrust magnitude settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_thrust_magnitude",
                        "short_summary": "Create thrust magnitude settings from a custom thrust magnitude function.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates thrust magnitude from a custom thrust magnitude function.\nThis model defines a thrust force and specific impulse that can vary with time. The specific impulse is also\nprovided to apply a mass rate model in the propagation the vehicle dynamics, relating the thrust to the mass\ndecrease of the vehicle. Note that, if you wish to use a constant value for any or all of the first three\narguments, lambda expression can be used. Presently, the definition of the thrust direction in the body-fixed\nframe is also defined through these derived classes. In essence, the ThrustMagnitudeSettings defines all local\n(to the vehicle systems) settings for the thrust, while ThrustDirectionGuidanceSettings defines how the full\nvehicle must orient itself in space for the required thrust direction to be achieved. At present, there is no\ndirect option for thrust-vector control (i.e. modifying the thrust direction in the body-fixed frame).\n",
                        "parameters": [
                            {
                                "name": "thrust_magnitude_function",
                                "type": "callable[[float], float]",
                                "description": "Function of time returning the value of the thrust magnitude."
                            },
                            {
                                "name": "specific_impulse_function",
                                "type": "callable[[float], float]",
                                "description": "Function of time returning the value of the specific impulse, useful to link the mass propagation to the thrust model."
                            },
                            {
                                "name": "is_engine_on_function",
                                "type": "callable[[float], bool], default=lambda t: true",
                                "description": "Function of time returning a boolean, denoting  whether the thrust should be engaged at all (e.g. thrust is 0 N if it returns false). It is useful to link the mass propagation to the thrust model."
                            },
                            {
                                "name": "body_fixed_thrust_direction",
                                "type": null,
                                "description": null
                            },
                            {
                                "name": "callable[[], numpy.ndarray], default=lambda t: numpy.ndarray([])",
                                "type": null,
                                "description": "Constant body-fixed thrust direction (positive x-direction by default). Note that this function should be a unit-vector representing the direction opposite to the nozzle direction. This setting can be used to incorporate thrust-vector control (TVC) into the thrust."
                            },
                            {
                                "name": "custom_thrust_reset_function",
                                "type": "callable[[float], ], default=lambda t: None",
                                "description": "Function of time that updates any relevant aspects of the environment/system models, called before retrieving the thrust magnitude, specific impulse, and body-fixed thrust direction."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "FromFunctionThrustMagnitudeSettings",
                            "description": "From function thrust magnitude settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "thrust",
                "version": null,
                "get_propulsion_input_variables": "\nFunction to create a list of functions that compute and return independent variables for the thrust.\n\nFunction to create a list of functions that compute and return independent variables for thrust and/or specific\nimpulse. This parameterization is used to create a specific thrust magnitude type (see thrust magnitude from\ndependent variables). This function retrieves all input functions from the environment and a list of user-defined\nfunctions.\n\n\nParameters\n----------\nbody_with_guidance : Body\n    Body object whose thrust guidance should be defined.\nindependent_variables : list[ThrustIndependentVariables]\n    Set of dependent variables that should be used to compute the thrust.\nguidance_input_functions : list[callable[[], float], default=[]\n    Set of functions to compute the thrust, each associated to a specific dependent variable.\n\n\n\n\n",
                "thrust_direction_from_state_guidance": "\nCreate thrust direction settings from the state guidance.\n\nFactory function that creates thrust direction settings from the state guidance. In various simplified cases,\nthe thrust direction can be assumed to be in line with either the position or velocity of the body of interest\nwith respect to some other body.\n\n\nParameters\n----------\ncentral_body : Body\n    Central body with respect to which the position and velocity of the body undergoing the thrust acceleration are computed.\nis_colinear_with_velocity : bool\n    Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false).\ndirection_is_opposite_to_vector : bool\n    Whether the thrust is pointing towards the thrusting body (true) or the central body (false).\nReturns\n-------\nThrustDirectionFromStateGuidanceSettings\n    Thrust direction from state guidance settings object.\n\n\n\n\n\n",
                "thrust_from_existing_body_orientation": "\nCreate thrust direction settings from the existing body orientation.\n\nFactory function that creates thrust direction settings from the existing body orientation. In some cases,\nthe vehicle\u2019s orientation may be predetermined, either due to aerodynamic guidance or to the concurrent\npropagation of the rotational equations of motion. In such a case, the thrust direction is computed from the\nbody-fixed thrust direction (defined in ThrustMagnitudeSettings) and the existing vehicle orientation.\n\n\n\n\n\n",
                "custom_thrust_orientation": "\nCreate custom thrust orientation settings, expressed as a rotation matrix.\n\nFactory function that creates custom thrust orientation settings, expressed through a rotation matrix.\nAs an alternative expression for generalized thrust direction guidance, the thrust orientation can be defined as\nan arbitrary function of time. As with the custom thrust direction, this allows a broad range of options to be\ndefined, at the expense of increased complexity (somehow the thrust orientation needs to be manually defined).\nThe thrust orientation is provided through a rotation matrix representing the rotation\nfrom body-fixed thrust direction to the inertial thrust direction.\n\n\nParameters\n----------\nthrust_orientation_function : callable[[float], numpy.ndarray]\n    Function of time returning the matrix representing the rotation between the thrust direction in the body-fixed frame to the inertial frame.\nReturns\n-------\nCustomThrustOrientationSettings\n    Custom thrust orientation settings object.\n\n\n\n\n\n",
                "custom_thrust_direction": "\nCreate custom thrust direction settings, expressed as a vector in the inertial frame.\n\nFactory function that creates custom thrust direction settings, expressed as a unit vector in the inertial frame.\nFor a generalized thrust direction guidance, the thrust can be defined as an arbitrary function of time.\nThis allows a broad range of options to be defined, at the expense of increased complexity (somehow the thrust\ndirection needs to be manually defined).\n\n\nParameters\n----------\nthrust_direction_function : callable[[float], numpy.ndarray]\n    Function of time returning the thrust direction in the inertial frame.\nReturns\n-------\nCustomThrustDirectionSettings\n    Custom thrust direction settings object.\n\n\n\n\n\n",
                "constant_thrust_magnitude": "\nCreate thrust magnitude settings from a constant thrust magnitude and Isp.\n\nFactory function that creates constant thrust magnitude settings. The specific impulse to use for the thrust is\nalso supplied when applying a mass rate model in the propagation of the vehicle dynamics, relating the thrust\nto the mass decrease of the vehicle.\n\n\nParameters\n----------\nthrust_magnitude : float\n    Value of the constant thrust magnitude.\nspecific_impulse : float\n    Value of the constant specific impulse, used to link the thrust model to the mass propagation.\nbody_fixed_thrust_direction : numpy.ndarray, default=numpy.ndarray([])\n    Constant body-fixed thrust direction (positive x-direction by default). Note that this should be a unit-vector representing the direction opposite to the nozzle direction.\nReturns\n-------\nConstantThrustMagnitudeSettings\n    Constant thrust magnitude settings object.\n\n\n\n\n\n",
                "custom_thrust_magnitude": "\nCreate thrust magnitude settings from a custom thrust magnitude function.\n\nFactory function that creates thrust magnitude from a custom thrust magnitude function.\nThis model defines a thrust force and specific impulse that can vary with time. The specific impulse is also\nprovided to apply a mass rate model in the propagation the vehicle dynamics, relating the thrust to the mass\ndecrease of the vehicle. Note that, if you wish to use a constant value for any or all of the first three\narguments, lambda expression can be used. Presently, the definition of the thrust direction in the body-fixed\nframe is also defined through these derived classes. In essence, the ThrustMagnitudeSettings defines all local\n(to the vehicle systems) settings for the thrust, while ThrustDirectionGuidanceSettings defines how the full\nvehicle must orient itself in space for the required thrust direction to be achieved. At present, there is no\ndirect option for thrust-vector control (i.e. modifying the thrust direction in the body-fixed frame).\n\n\nParameters\n----------\nthrust_magnitude_function : callable[[float], float]\n    Function of time returning the value of the thrust magnitude.\nspecific_impulse_function : callable[[float], float]\n    Function of time returning the value of the specific impulse, useful to link the mass propagation to the thrust model.\nis_engine_on_function : callable[[float], bool], default=lambda t: true\n    Function of time returning a boolean, denoting  whether the thrust should be engaged at all (e.g. thrust is 0 N if it returns false). It is useful to link the mass propagation to the thrust model.\nbody_fixed_thrust_direction\n    None\ncallable[[], numpy.ndarray], default=lambda t: numpy.ndarray([])\n    Constant body-fixed thrust direction (positive x-direction by default). Note that this function should be a unit-vector representing the direction opposite to the nozzle direction. This setting can be used to incorporate thrust-vector control (TVC) into the thrust.\ncustom_thrust_reset_function : callable[[float], ], default=lambda t: None\n    Function of time that updates any relevant aspects of the environment/system models, called before retrieving the thrust magnitude, specific impulse, and body-fixed thrust direction.\nReturns\n-------\nFromFunctionThrustMagnitudeSettings\n    From function thrust magnitude settings object.\n\n\n\n\n\n",
                "ThrustDirectionSettings": {
                    "__docstring__": "\nFunctional base class to define settings for the thrust direction.\n\n\nAttributes\n----------\nthrust_direction_type : ThrustDirectionType\n    Thrust direction type object.\nrelative_body : str\n    Body to which the thrust acceleration is applied.\n\n\n\n\n"
                },
                "ThrustDirectionFromStateGuidanceSettings": {
                    "__docstring__": "\n`ThrustDirectionSettings`-derived class to define settings for the thrust direction from the current state.\n\n\nAttributes\n----------\nis_colinear_with_velocity : bool\n    Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false).\ndirection_is_opposite_to_vector : bool\n    Whether the thrust is pointing towards the thrusting body (true) or the central body (false).\n\n\n\n\n"
                },
                "CustomThrustDirectionSettings": {
                    "__docstring__": "\n`ThrustDirectionSettings`-derived class to define settings for a custom thrust direction.\n\n\nAttributes\n----------\nthrust_direction_function : callable[[float], numpy.ndarray]\n    Function of time returning the thrust direction in the inertial frame.\n\n\n\n\n"
                },
                "CustomThrustOrientationSettings": {
                    "__docstring__": "\n`ThrustDirectionSettings`-derived class to define settings for a custom thrust orientation.\n\n\nAttributes\n----------\nthrust_orientation_function : callable[[float], numpy.ndarray]\n    Function of time returning the rotation between the thrust direction in the body-fixed frame to the inertial frame.\n\n\n\n\n"
                },
                "MeeCostateBasedThrustDirectionSettings": {
                    "__docstring__": "\n`ThrustDirectionSettings`-derived class to define settings for the thrust direction from Modified Equinoctial Elements (MEE) costates.\n\n\nAttributes\n----------\nvehicle_name : str\n    Name of the body to which the thrust is applied.\ncostate_function : callable[[float], numpy.ndarray]\n    Function of time returning the five costates.\n\n\n\n\n"
                },
                "ThrustMagnitudeSettings": {
                    "__docstring__": "\nFunctional base class to define settings for the thrust magnitude.\n\n\nAttributes\n----------\nthrust_magnitude_type : ThrustMagnitudeType\n    Thrust magnitude type object.\nthrust_origin_id : str\n    Reference ID of the thrust origin that should be used (empty if N/A).\n\n\n\n\n"
                },
                "ConstantThrustMagnitudeSettings": {
                    "__docstring__": "\n`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude.\n\n\nAttributes\n----------\nthrust_magnitude : float\n    Value of the constant thrust magnitude.\nspecific_impulse : float\n    Value of the constant specific impulse.\nspecific_impulse : numpy.ndarray\n    Thrust direction vector expressed in the body-fixed reference frame.\n\n\n\n\n"
                },
                "FromFunctionThrustMagnitudeSettings": {
                    "__docstring__": "\n`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude.\n\n\n\n\n\n"
                },
                "ThrustFrames": {
                    "unspecified_thrust_frame_type": "",
                    "inertial_thrust_frame_type": "",
                    "lvlh_thrust_frame_type": "",
                    "__docstring__": "\nEnumeration of available thrust frame types.\n\nEnumeration of thrust frame types supported by tudat.\n\n\n\n\n\n",
                    "name": "ThrustFrames",
                    "short_summary": "Enumeration of available thrust frame types.",
                    "extended_summary": "Enumeration of thrust frame types supported by tudat.\n",
                    "members": [
                        {
                            "name": "unspecified_thrust_frame_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "inertial_thrust_frame_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "lvlh_thrust_frame_type",
                            "description": null,
                            "value": null
                        }
                    ]
                },
                "ThrustMagnitudeTypes": {
                    "constant_thrust_magnitude": "",
                    "from_engine_properties_thrust_magnitude": "",
                    "thrust_magnitude_from_time_function": "",
                    "thrust_magnitude_from_dependent_variables": "",
                    "bang_bang_thrust_magnitude_from_mee_costates": "",
                    "__docstring__": "\nEnumeration of available thrust magnitude types.\n\nEnumeration of thrust magnitude types supported by tudat.\n\n\n\n\n\n",
                    "name": "ThrustMagnitudeTypes",
                    "short_summary": "Enumeration of available thrust magnitude types.",
                    "extended_summary": "Enumeration of thrust magnitude types supported by tudat.\n",
                    "members": [
                        {
                            "name": "constant_thrust_magnitude",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "from_engine_properties_thrust_magnitude",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "thrust_magnitude_from_time_function",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "thrust_magnitude_from_dependent_variables",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "bang_bang_thrust_magnitude_from_mee_costates",
                            "description": null,
                            "value": null
                        }
                    ]
                },
                "ThrustDirectionTypes": {
                    "colinear_with_state_segment_thrust_direction_type": "",
                    "thrust_direction_from_existing_body_orientation_type": "",
                    "custom_thrust_direction_type": "",
                    "custom_thrust_orientation_type": "",
                    "mee_costate_based_thrust_direction_type": "",
                    "__docstring__": "\nEnumeration of available thrust direction types.\n\nEnumeration of thrust direction types supported by tudat.\n\n\n\n\n\n",
                    "name": "ThrustDirectionTypes",
                    "short_summary": "Enumeration of available thrust direction types.",
                    "extended_summary": "Enumeration of thrust direction types supported by tudat.\n",
                    "members": [
                        {
                            "name": "colinear_with_state_segment_thrust_direction_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "thrust_direction_from_existing_body_orientation_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "custom_thrust_direction_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "custom_thrust_orientation_type",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "mee_costate_based_thrust_direction_type",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            }
        },
        "environment": {
            "type": "module",
            "path": "./tudat-multidoc/docstrings/numerical_simulation",
            "file": "environment.yaml",
            "_implicit_name": "environment",
            "config": null,
            "summary": null,
            "extended_summary": "This module provides the functionality for functional environment\nobjects and associated functionality. Specifically, it contains the\nmodels that perform computations related to environment models of\nnatural and artificial bodies.\n",
            "routine_listings": null,
            "see_also": null,
            "notes": null,
            "references": null,
            "examples": null,
            "enums": null,
            "classes": [
                {
                    "name": "FlightConditions",
                    "short_summary": "Object that calculates various state-derived quantities typically\nrelevant for flight dynamics.\n",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": [
                        {
                            "name": "aerodynamic_angle_calculator",
                            "type": "AerodynamicAngleCalculator",
                            "description": "The object that is responsible for computing various relevant\nflight dynamics angles and frame rotations.\n",
                            "readonly": false
                        },
                        {
                            "name": "longitude",
                            "type": "float",
                            "description": "The body-fixed longitude of the body w.r.t. its central body.\n",
                            "readonly": false
                        },
                        {
                            "name": "latitude",
                            "type": "float",
                            "description": "The body-fixed geographic latitude of the body w.r.t. its\ncentral body.\n",
                            "readonly": false
                        },
                        {
                            "name": "geodetic_latitude",
                            "type": "float",
                            "description": "The body-fixed geodetic latitude of the body w.r.t. its central\nbody, using an :py:class:`~OblateSpheroidBodyShapeModel` of the\ncentral body. If no such model is defined in the central body,\nthis attribute equals the latitude.\n",
                            "readonly": false
                        },
                        {
                            "name": "altitude",
                            "type": "float",
                            "description": "The altitude of this body w.r.t. the central body (using the\n:py:class:`~ShapeModel` of the central body).\n",
                            "readonly": false
                        },
                        {
                            "name": "time",
                            "type": "float",
                            "description": "The current time, at which this object was last updated\n",
                            "readonly": false
                        },
                        {
                            "name": "body_centered_body_fixed_state",
                            "type": "numpy.ndarray",
                            "description": "Cartesian translational state, expressed in a frame centered\nat, and fixed to, the central body. Note that, due to the\nrotation of the central body, the norm of the body-fixed,\nbody-centered, velocity differs from the norm of the inertial\nbody-centered velocity. # [py]\n",
                            "readonly": false
                        }
                    ],
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": null,
                    "autoclass": null
                },
                {
                    "name": "AtmosphericFlightConditions",
                    "short_summary": "Object that calculates various state-derived quantities typically\nrelevant for flight dynamics, for flight in an atmosphere.\n",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": [
                        {
                            "name": "density",
                            "type": "float",
                            "description": "The freestream atmospheric density at the body's current\nlocation.\n",
                            "readonly": false
                        },
                        {
                            "name": "temperature",
                            "type": "float",
                            "description": "The freestream atmospheric temperature at the body's current\nlocation.\n",
                            "readonly": false
                        },
                        {
                            "name": "dynamic_pressure",
                            "type": "float",
                            "description": "The freestream atmospheric dynamic pressure at the body's\ncurrent location.\n",
                            "readonly": false
                        },
                        {
                            "name": "pressure",
                            "type": "float",
                            "description": "The freestream atmospheric static pressure at the body's\ncurrent location.\n",
                            "readonly": false
                        },
                        {
                            "name": "speed_of_sound",
                            "type": "float",
                            "description": "The freestream atmospheric speed of sound at the body's current\nlocation.\n",
                            "readonly": false
                        },
                        {
                            "name": "airspeed",
                            "type": "float",
                            "description": "The airspeed of the body w.r.t. the atmosphere.\n",
                            "readonly": false
                        },
                        {
                            "name": "airspeed_velocity",
                            "type": "numpy.ndarray",
                            "description": "The velocity vector of the body w.r.t. the freestream\natmosphere (e.g. vectorial counterpart of airspeed).\n",
                            "readonly": false
                        },
                        {
                            "name": "mach_number",
                            "type": "float",
                            "description": "The freestream Mach number of the body\n",
                            "readonly": false
                        },
                        {
                            "name": "aero_coefficient_independent_variables",
                            "type": "numpy.ndarray",
                            "description": "List of current values of independent variables of aerodynamic\ncoefficients. This list is only defined if the body has an\n:py:class:`~AerodynamicCoefficientInterface` that has\ndependencies on environmental variables (e.g. Mach number,\nangle of attack, etc.).\n",
                            "readonly": false
                        },
                        {
                            "name": "control_surface_aero_coefficient_independent_variables",
                            "type": "numpy.ndarray",
                            "description": "List of lists current values of independent variables of\naerodynamic coefficients for control surfaces. The outer list\ndefines the control surface, the inner list the values of the\nindependent variables. This list is only defined if the body\nhas an :py:class:`~AerodynamicCoefficientInterface` with\ncontrol surfaces that have dependencies on environmental\nvariables (e.g. Mach number, angle of attack, etc.).\n",
                            "readonly": false
                        },
                        {
                            "name": "aerodynamic_coefficient_interface",
                            "type": "AerodynamicCoefficientInterface",
                            "description": "Object extracted from the same Body object as this\n:py:class:`~AtmosphericFlightConditions` object, which defines\nthe aerodynamic coefficients.\n",
                            "readonly": false
                        }
                    ],
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": null,
                    "autoclass": null
                },
                {
                    "name": "Body",
                    "short_summary": "Object that stores the environment properties and current state of\na single body.\n",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": [
                        {
                            "name": "state",
                            "type": "numpy.ndarray",
                            "description": "The translational state of the Body, as set during the current\nstep of the numerical propagation. The translational state\nstored here is always in Cartesian elements, w.r.t. the global\nframe origin, with axes along the global frame orientation. If\nthe body's translational state is numerically propagated, this\nproperty gets extracted from the propagated state vector. If it\nis not propagated, the state is extracted from this body's\nephemeris. In both cases, any required state transformations\nare automatically applied. Note that this function  is *only*\nvalid during the numerical propagation if any aspects of the\ndynamics or dependent variables require the body's state.\n",
                            "readonly": false
                        },
                        {
                            "name": "position",
                            "type": "numpy.ndarray",
                            "description": "The translational position of the Body, as set during the\ncurrent step of the numerical propagation\n(see :py:attr:`~state`).\n",
                            "readonly": false
                        },
                        {
                            "name": "airspeed",
                            "type": "float",
                            "description": "The airspeed of the body w.r.t. the atmosphere\n",
                            "readonly": false
                        },
                        {
                            "name": "velocity",
                            "type": "numpy.ndarray",
                            "description": "The translational velocity of the Body, as set during the\ncurrent step of the numerical propagation\n(see :py:attr:`~state`).\n",
                            "readonly": false
                        },
                        {
                            "name": "inertial_to_body_fixed_frame",
                            "type": "numpy.ndarray",
                            "description": "The rotation from inertial frame (with global frame\norientation) to this Body's body-fixed frame. The rotation is\nalways returned here as a rotation matrix.  If the body's\nrotational state is numerically propagated, this property gets\nextracted from the propagated state vector. If it is not\npropagated, the state is extracted from this body's rotatitonal\nephemeris.\n\n.. note:: This function is **only** valid during the\n          numerical propagation if any aspects of the dynamics\n          or dependent variables require the body's rotational\n          state.\n",
                            "readonly": false
                        },
                        {
                            "name": "body_fixed_to_inertial_frame",
                            "type": "numpy.ndarray",
                            "description": "The rotation from this Body's body-fixed frame to inertial\nframe (see :py:attr:`~inertial_to_body_fixed_frame`).\n",
                            "readonly": false
                        },
                        {
                            "name": "inertial_to_body_fixed_frame_derivative",
                            "type": "numpy.ndarray",
                            "description": "Time derivative of rotation matrix from inertial frame to this\nBody's body-fixed frame\n(see :py:attr:`~inertial_to_body_fixed_frame`).\n",
                            "readonly": false
                        },
                        {
                            "name": "body_fixed_to_inertial_frame_derivative",
                            "type": "numpy.ndarray",
                            "description": "Time derivative of rotation matrix from this Body's body-fixed\nframe to inertial frame\n(see :py:attr:`~inertial_to_body_fixed_frame`).\n",
                            "readonly": false
                        },
                        {
                            "name": "inertial_angular_velocity",
                            "type": "numpy.ndarray",
                            "description": "Angular velocity vector of the body, expressed in inertial\nframe (see :py:attr:`~inertial_to_body_fixed_frame`).\n",
                            "readonly": false
                        },
                        {
                            "name": "body_fixed_angular_velocity",
                            "type": "numpy.ndarray",
                            "description": "Angular velocity vector of the body, expressed in body-fixed\nframe (see :py:attr:`~inertial_to_body_fixed_frame`).\n",
                            "readonly": false
                        }
                    ],
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": null,
                    "autoclass": null
                },
                {
                    "name": "SystemOfBodies",
                    "short_summary": "Object that contains a set of Body objects and associated frame\ninformation.\n",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "get",
                            "short_summary": "This function extracts a single Body object from the SystemOfBodies.",
                            "deprecation_warning": null,
                            "extended_summary": null,
                            "parameters": [
                                {
                                    "name": "body_name",
                                    "type": "numpy.ndarray",
                                    "description": "Name of the Body that is to be retrieved.\n"
                                }
                            ],
                            "returns": {
                                "name": null,
                                "type": "Body",
                                "description": "Body object of the requested name"
                            },
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "create_empty_body",
                            "short_summary": "This function creates a new empty body.",
                            "deprecation_warning": null,
                            "extended_summary": "This function creates a new empty body, and adds it to the\n:py:class:`~SystemOfBodies`. Since the body is empty, it will\nnot have any environment models defined. These must all be\nadded manually by a user.\n",
                            "parameters": [
                                {
                                    "name": "body_name",
                                    "type": "string",
                                    "description": "Name of the Body that is to be added\n"
                                },
                                {
                                    "name": "process_body",
                                    "type": "bool, default=True",
                                    "description": "Variable that defines whether this new Body will have its\nglobal frame origin/orientation set to conform to rest of\nthe environment.\n\n.. warning:: Only in very rare cases should\n             this variable be anything other than ``True``.\n             Users are recommended to keep this default value\n             intact.\n"
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": "\nThis function is often used early on in the environment\ncreation segment of a simulation, following the creation of\na :py:class:`~SystemOfBodies` from the default settings\nfor celestial bodies.\n\n.. code-block:: python\n   :emphasize-lines: 18\n\n   # Define string names for bodies to be created from default.\n   bodies_to_create = [\"Sun\", \"Earth\", \"Moon\", \"Mars\", \"Venus\"]\n\n   # Use \"Earth\"/\"J2000\" as global frame origin and orientation.\n   global_frame_origin = \"Earth\"\n   global_frame_orientation = \"J2000\"\n\n   # Create default body settings, usually from `spice`.\n   body_settings = environment_setup.get_default_body_settings(\n       bodies_to_create,\n       global_frame_origin,\n       global_frame_orientation)\n\n   # Create system of selected celestial bodies\n   bodies = environment_setup.create_system_of_bodies(body_settings)\n\n   # Create vehicle objects.\n   bodies.create_empty_body(\"Delfi-C3\")\n"
                        },
                        {
                            "name": "add_body",
                            "short_summary": "This function adds an existing body, which the user has\nseparately created, to the :py:class:`~SystemOfBodies`.\n",
                            "deprecation_warning": null,
                            "extended_summary": null,
                            "parameters": [
                                {
                                    "name": "body_to_add",
                                    "type": "Body",
                                    "description": "Body object that is to be added.\n"
                                },
                                {
                                    "name": "body_name",
                                    "type": "numpy.ndarray",
                                    "description": "Name of the Body that is to be added.\n"
                                },
                                {
                                    "name": "process_body",
                                    "type": "bool, default=True",
                                    "description": "Variable that defines whether this new Body will have its\nglobal frame origin/orientation set to conform to rest of\nthe environment.\n\n.. warning:: Only in very rare cases should this variable be\n             anything other than ``True``. Users are\n             recommended to keep this default value intact.\n"
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "remove_body",
                            "short_summary": "This function removes an existing body from the\n:py:class:`~SystemOfBodies`.\n",
                            "deprecation_warning": null,
                            "extended_summary": "\n.. warning:: This function does *not* necessarilly delete the\n             Body object, it only removes it from this object.\n             If any existing models in the simulation refer to\n             this Body, it will persist in memory.\n",
                            "parameters": [
                                {
                                    "name": "body_name",
                                    "type": "numpy.ndarray",
                                    "description": "Name of the Body that is to be removed."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "autoclass": null
                }
            ],
            "functions": null,
            "constants": null,
            "name": "environment",
            "version": null,
            "FlightConditions": {
                "name": "FlightConditions",
                "short_summary": "Object that calculates various state-derived quantities typically\nrelevant for flight dynamics.\n",
                "deprecation_warning": null,
                "extended_summary": null,
                "parameters": null,
                "attributes": null,
                "properties": [
                    {
                        "name": "aerodynamic_angle_calculator",
                        "type": "AerodynamicAngleCalculator",
                        "description": "The object that is responsible for computing various relevant\nflight dynamics angles and frame rotations.\n",
                        "readonly": false
                    },
                    {
                        "name": "longitude",
                        "type": "float",
                        "description": "The body-fixed longitude of the body w.r.t. its central body.\n",
                        "readonly": false
                    },
                    {
                        "name": "latitude",
                        "type": "float",
                        "description": "The body-fixed geographic latitude of the body w.r.t. its\ncentral body.\n",
                        "readonly": false
                    },
                    {
                        "name": "geodetic_latitude",
                        "type": "float",
                        "description": "The body-fixed geodetic latitude of the body w.r.t. its central\nbody, using an :py:class:`~OblateSpheroidBodyShapeModel` of the\ncentral body. If no such model is defined in the central body,\nthis attribute equals the latitude.\n",
                        "readonly": false
                    },
                    {
                        "name": "altitude",
                        "type": "float",
                        "description": "The altitude of this body w.r.t. the central body (using the\n:py:class:`~ShapeModel` of the central body).\n",
                        "readonly": false
                    },
                    {
                        "name": "time",
                        "type": "float",
                        "description": "The current time, at which this object was last updated\n",
                        "readonly": false
                    },
                    {
                        "name": "body_centered_body_fixed_state",
                        "type": "numpy.ndarray",
                        "description": "Cartesian translational state, expressed in a frame centered\nat, and fixed to, the central body. Note that, due to the\nrotation of the central body, the norm of the body-fixed,\nbody-centered, velocity differs from the norm of the inertial\nbody-centered velocity. # [py]\n",
                        "readonly": false
                    }
                ],
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "methods": null,
                "autoclass": null,
                "aerodynamic_angle_calculator": "\nThe object that is responsible for computing various relevant\nflight dynamics angles and frame rotations.\n\n\n:type: AerodynamicAngleCalculator\n",
                "longitude": "\nThe body-fixed longitude of the body w.r.t. its central body.\n\n\n:type: float\n",
                "latitude": "\nThe body-fixed geographic latitude of the body w.r.t. its\ncentral body.\n\n\n:type: float\n",
                "geodetic_latitude": "\nThe body-fixed geodetic latitude of the body w.r.t. its central\nbody, using an :py:class:`~OblateSpheroidBodyShapeModel` of the\ncentral body. If no such model is defined in the central body,\nthis attribute equals the latitude.\n\n\n:type: float\n",
                "altitude": "\nThe altitude of this body w.r.t. the central body (using the\n:py:class:`~ShapeModel` of the central body).\n\n\n:type: float\n",
                "time": "\nThe current time, at which this object was last updated\n\n\n:type: float\n",
                "body_centered_body_fixed_state": "\nCartesian translational state, expressed in a frame centered\nat, and fixed to, the central body. Note that, due to the\nrotation of the central body, the norm of the body-fixed,\nbody-centered, velocity differs from the norm of the inertial\nbody-centered velocity. # [py]\n\n\n:type: numpy.ndarray\n",
                "__docstring__": "\nObject that calculates various state-derived quantities typically\nrelevant for flight dynamics.\n\n\n\n\n\n\n"
            },
            "AtmosphericFlightConditions": {
                "name": "AtmosphericFlightConditions",
                "short_summary": "Object that calculates various state-derived quantities typically\nrelevant for flight dynamics, for flight in an atmosphere.\n",
                "deprecation_warning": null,
                "extended_summary": null,
                "parameters": null,
                "attributes": null,
                "properties": [
                    {
                        "name": "density",
                        "type": "float",
                        "description": "The freestream atmospheric density at the body's current\nlocation.\n",
                        "readonly": false
                    },
                    {
                        "name": "temperature",
                        "type": "float",
                        "description": "The freestream atmospheric temperature at the body's current\nlocation.\n",
                        "readonly": false
                    },
                    {
                        "name": "dynamic_pressure",
                        "type": "float",
                        "description": "The freestream atmospheric dynamic pressure at the body's\ncurrent location.\n",
                        "readonly": false
                    },
                    {
                        "name": "pressure",
                        "type": "float",
                        "description": "The freestream atmospheric static pressure at the body's\ncurrent location.\n",
                        "readonly": false
                    },
                    {
                        "name": "speed_of_sound",
                        "type": "float",
                        "description": "The freestream atmospheric speed of sound at the body's current\nlocation.\n",
                        "readonly": false
                    },
                    {
                        "name": "airspeed",
                        "type": "float",
                        "description": "The airspeed of the body w.r.t. the atmosphere.\n",
                        "readonly": false
                    },
                    {
                        "name": "airspeed_velocity",
                        "type": "numpy.ndarray",
                        "description": "The velocity vector of the body w.r.t. the freestream\natmosphere (e.g. vectorial counterpart of airspeed).\n",
                        "readonly": false
                    },
                    {
                        "name": "mach_number",
                        "type": "float",
                        "description": "The freestream Mach number of the body\n",
                        "readonly": false
                    },
                    {
                        "name": "aero_coefficient_independent_variables",
                        "type": "numpy.ndarray",
                        "description": "List of current values of independent variables of aerodynamic\ncoefficients. This list is only defined if the body has an\n:py:class:`~AerodynamicCoefficientInterface` that has\ndependencies on environmental variables (e.g. Mach number,\nangle of attack, etc.).\n",
                        "readonly": false
                    },
                    {
                        "name": "control_surface_aero_coefficient_independent_variables",
                        "type": "numpy.ndarray",
                        "description": "List of lists current values of independent variables of\naerodynamic coefficients for control surfaces. The outer list\ndefines the control surface, the inner list the values of the\nindependent variables. This list is only defined if the body\nhas an :py:class:`~AerodynamicCoefficientInterface` with\ncontrol surfaces that have dependencies on environmental\nvariables (e.g. Mach number, angle of attack, etc.).\n",
                        "readonly": false
                    },
                    {
                        "name": "aerodynamic_coefficient_interface",
                        "type": "AerodynamicCoefficientInterface",
                        "description": "Object extracted from the same Body object as this\n:py:class:`~AtmosphericFlightConditions` object, which defines\nthe aerodynamic coefficients.\n",
                        "readonly": false
                    }
                ],
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "methods": null,
                "autoclass": null,
                "density": "\nThe freestream atmospheric density at the body's current\nlocation.\n\n\n:type: float\n",
                "temperature": "\nThe freestream atmospheric temperature at the body's current\nlocation.\n\n\n:type: float\n",
                "dynamic_pressure": "\nThe freestream atmospheric dynamic pressure at the body's\ncurrent location.\n\n\n:type: float\n",
                "pressure": "\nThe freestream atmospheric static pressure at the body's\ncurrent location.\n\n\n:type: float\n",
                "speed_of_sound": "\nThe freestream atmospheric speed of sound at the body's current\nlocation.\n\n\n:type: float\n",
                "airspeed": "\nThe airspeed of the body w.r.t. the atmosphere.\n\n\n:type: float\n",
                "airspeed_velocity": "\nThe velocity vector of the body w.r.t. the freestream\natmosphere (e.g. vectorial counterpart of airspeed).\n\n\n:type: numpy.ndarray\n",
                "mach_number": "\nThe freestream Mach number of the body\n\n\n:type: float\n",
                "aero_coefficient_independent_variables": "\nList of current values of independent variables of aerodynamic\ncoefficients. This list is only defined if the body has an\n:py:class:`~AerodynamicCoefficientInterface` that has\ndependencies on environmental variables (e.g. Mach number,\nangle of attack, etc.).\n\n\n:type: numpy.ndarray\n",
                "control_surface_aero_coefficient_independent_variables": "\nList of lists current values of independent variables of\naerodynamic coefficients for control surfaces. The outer list\ndefines the control surface, the inner list the values of the\nindependent variables. This list is only defined if the body\nhas an :py:class:`~AerodynamicCoefficientInterface` with\ncontrol surfaces that have dependencies on environmental\nvariables (e.g. Mach number, angle of attack, etc.).\n\n\n:type: numpy.ndarray\n",
                "aerodynamic_coefficient_interface": "\nObject extracted from the same Body object as this\n:py:class:`~AtmosphericFlightConditions` object, which defines\nthe aerodynamic coefficients.\n\n\n:type: AerodynamicCoefficientInterface\n",
                "__docstring__": "\nObject that calculates various state-derived quantities typically\nrelevant for flight dynamics, for flight in an atmosphere.\n\n\n\n\n\n\n"
            },
            "Body": {
                "name": "Body",
                "short_summary": "Object that stores the environment properties and current state of\na single body.\n",
                "deprecation_warning": null,
                "extended_summary": null,
                "parameters": null,
                "attributes": null,
                "properties": [
                    {
                        "name": "state",
                        "type": "numpy.ndarray",
                        "description": "The translational state of the Body, as set during the current\nstep of the numerical propagation. The translational state\nstored here is always in Cartesian elements, w.r.t. the global\nframe origin, with axes along the global frame orientation. If\nthe body's translational state is numerically propagated, this\nproperty gets extracted from the propagated state vector. If it\nis not propagated, the state is extracted from this body's\nephemeris. In both cases, any required state transformations\nare automatically applied. Note that this function  is *only*\nvalid during the numerical propagation if any aspects of the\ndynamics or dependent variables require the body's state.\n",
                        "readonly": false
                    },
                    {
                        "name": "position",
                        "type": "numpy.ndarray",
                        "description": "The translational position of the Body, as set during the\ncurrent step of the numerical propagation\n(see :py:attr:`~state`).\n",
                        "readonly": false
                    },
                    {
                        "name": "airspeed",
                        "type": "float",
                        "description": "The airspeed of the body w.r.t. the atmosphere\n",
                        "readonly": false
                    },
                    {
                        "name": "velocity",
                        "type": "numpy.ndarray",
                        "description": "The translational velocity of the Body, as set during the\ncurrent step of the numerical propagation\n(see :py:attr:`~state`).\n",
                        "readonly": false
                    },
                    {
                        "name": "inertial_to_body_fixed_frame",
                        "type": "numpy.ndarray",
                        "description": "The rotation from inertial frame (with global frame\norientation) to this Body's body-fixed frame. The rotation is\nalways returned here as a rotation matrix.  If the body's\nrotational state is numerically propagated, this property gets\nextracted from the propagated state vector. If it is not\npropagated, the state is extracted from this body's rotatitonal\nephemeris.\n\n.. note:: This function is **only** valid during the\n          numerical propagation if any aspects of the dynamics\n          or dependent variables require the body's rotational\n          state.\n",
                        "readonly": false
                    },
                    {
                        "name": "body_fixed_to_inertial_frame",
                        "type": "numpy.ndarray",
                        "description": "The rotation from this Body's body-fixed frame to inertial\nframe (see :py:attr:`~inertial_to_body_fixed_frame`).\n",
                        "readonly": false
                    },
                    {
                        "name": "inertial_to_body_fixed_frame_derivative",
                        "type": "numpy.ndarray",
                        "description": "Time derivative of rotation matrix from inertial frame to this\nBody's body-fixed frame\n(see :py:attr:`~inertial_to_body_fixed_frame`).\n",
                        "readonly": false
                    },
                    {
                        "name": "body_fixed_to_inertial_frame_derivative",
                        "type": "numpy.ndarray",
                        "description": "Time derivative of rotation matrix from this Body's body-fixed\nframe to inertial frame\n(see :py:attr:`~inertial_to_body_fixed_frame`).\n",
                        "readonly": false
                    },
                    {
                        "name": "inertial_angular_velocity",
                        "type": "numpy.ndarray",
                        "description": "Angular velocity vector of the body, expressed in inertial\nframe (see :py:attr:`~inertial_to_body_fixed_frame`).\n",
                        "readonly": false
                    },
                    {
                        "name": "body_fixed_angular_velocity",
                        "type": "numpy.ndarray",
                        "description": "Angular velocity vector of the body, expressed in body-fixed\nframe (see :py:attr:`~inertial_to_body_fixed_frame`).\n",
                        "readonly": false
                    }
                ],
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "methods": null,
                "autoclass": null,
                "state": "\nThe translational state of the Body, as set during the current\nstep of the numerical propagation. The translational state\nstored here is always in Cartesian elements, w.r.t. the global\nframe origin, with axes along the global frame orientation. If\nthe body's translational state is numerically propagated, this\nproperty gets extracted from the propagated state vector. If it\nis not propagated, the state is extracted from this body's\nephemeris. In both cases, any required state transformations\nare automatically applied. Note that this function  is *only*\nvalid during the numerical propagation if any aspects of the\ndynamics or dependent variables require the body's state.\n\n\n:type: numpy.ndarray\n",
                "position": "\nThe translational position of the Body, as set during the\ncurrent step of the numerical propagation\n(see :py:attr:`~state`).\n\n\n:type: numpy.ndarray\n",
                "airspeed": "\nThe airspeed of the body w.r.t. the atmosphere\n\n\n:type: float\n",
                "velocity": "\nThe translational velocity of the Body, as set during the\ncurrent step of the numerical propagation\n(see :py:attr:`~state`).\n\n\n:type: numpy.ndarray\n",
                "inertial_to_body_fixed_frame": "\nThe rotation from inertial frame (with global frame\norientation) to this Body's body-fixed frame. The rotation is\nalways returned here as a rotation matrix.  If the body's\nrotational state is numerically propagated, this property gets\nextracted from the propagated state vector. If it is not\npropagated, the state is extracted from this body's rotatitonal\nephemeris.\n\n.. note:: This function is **only** valid during the\n          numerical propagation if any aspects of the dynamics\n          or dependent variables require the body's rotational\n          state.\n\n\n:type: numpy.ndarray\n",
                "body_fixed_to_inertial_frame": "\nThe rotation from this Body's body-fixed frame to inertial\nframe (see :py:attr:`~inertial_to_body_fixed_frame`).\n\n\n:type: numpy.ndarray\n",
                "inertial_to_body_fixed_frame_derivative": "\nTime derivative of rotation matrix from inertial frame to this\nBody's body-fixed frame\n(see :py:attr:`~inertial_to_body_fixed_frame`).\n\n\n:type: numpy.ndarray\n",
                "body_fixed_to_inertial_frame_derivative": "\nTime derivative of rotation matrix from this Body's body-fixed\nframe to inertial frame\n(see :py:attr:`~inertial_to_body_fixed_frame`).\n\n\n:type: numpy.ndarray\n",
                "inertial_angular_velocity": "\nAngular velocity vector of the body, expressed in inertial\nframe (see :py:attr:`~inertial_to_body_fixed_frame`).\n\n\n:type: numpy.ndarray\n",
                "body_fixed_angular_velocity": "\nAngular velocity vector of the body, expressed in body-fixed\nframe (see :py:attr:`~inertial_to_body_fixed_frame`).\n\n\n:type: numpy.ndarray\n",
                "__docstring__": "\nObject that stores the environment properties and current state of\na single body.\n\n\n\n\n\n\n"
            },
            "SystemOfBodies": {
                "name": "SystemOfBodies",
                "short_summary": "Object that contains a set of Body objects and associated frame\ninformation.\n",
                "deprecation_warning": null,
                "extended_summary": null,
                "parameters": null,
                "attributes": null,
                "properties": null,
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "methods": [
                    {
                        "name": "get",
                        "short_summary": "This function extracts a single Body object from the SystemOfBodies.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": [
                            {
                                "name": "body_name",
                                "type": "numpy.ndarray",
                                "description": "Name of the Body that is to be retrieved.\n"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "Body",
                            "description": "Body object of the requested name"
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "create_empty_body",
                        "short_summary": "This function creates a new empty body.",
                        "deprecation_warning": null,
                        "extended_summary": "This function creates a new empty body, and adds it to the\n:py:class:`~SystemOfBodies`. Since the body is empty, it will\nnot have any environment models defined. These must all be\nadded manually by a user.\n",
                        "parameters": [
                            {
                                "name": "body_name",
                                "type": "string",
                                "description": "Name of the Body that is to be added\n"
                            },
                            {
                                "name": "process_body",
                                "type": "bool, default=True",
                                "description": "Variable that defines whether this new Body will have its\nglobal frame origin/orientation set to conform to rest of\nthe environment.\n\n.. warning:: Only in very rare cases should\n             this variable be anything other than ``True``.\n             Users are recommended to keep this default value\n             intact.\n"
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": "\nThis function is often used early on in the environment\ncreation segment of a simulation, following the creation of\na :py:class:`~SystemOfBodies` from the default settings\nfor celestial bodies.\n\n.. code-block:: python\n   :emphasize-lines: 18\n\n   # Define string names for bodies to be created from default.\n   bodies_to_create = [\"Sun\", \"Earth\", \"Moon\", \"Mars\", \"Venus\"]\n\n   # Use \"Earth\"/\"J2000\" as global frame origin and orientation.\n   global_frame_origin = \"Earth\"\n   global_frame_orientation = \"J2000\"\n\n   # Create default body settings, usually from `spice`.\n   body_settings = environment_setup.get_default_body_settings(\n       bodies_to_create,\n       global_frame_origin,\n       global_frame_orientation)\n\n   # Create system of selected celestial bodies\n   bodies = environment_setup.create_system_of_bodies(body_settings)\n\n   # Create vehicle objects.\n   bodies.create_empty_body(\"Delfi-C3\")\n"
                    },
                    {
                        "name": "add_body",
                        "short_summary": "This function adds an existing body, which the user has\nseparately created, to the :py:class:`~SystemOfBodies`.\n",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": [
                            {
                                "name": "body_to_add",
                                "type": "Body",
                                "description": "Body object that is to be added.\n"
                            },
                            {
                                "name": "body_name",
                                "type": "numpy.ndarray",
                                "description": "Name of the Body that is to be added.\n"
                            },
                            {
                                "name": "process_body",
                                "type": "bool, default=True",
                                "description": "Variable that defines whether this new Body will have its\nglobal frame origin/orientation set to conform to rest of\nthe environment.\n\n.. warning:: Only in very rare cases should this variable be\n             anything other than ``True``. Users are\n             recommended to keep this default value intact.\n"
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "remove_body",
                        "short_summary": "This function removes an existing body from the\n:py:class:`~SystemOfBodies`.\n",
                        "deprecation_warning": null,
                        "extended_summary": "\n.. warning:: This function does *not* necessarilly delete the\n             Body object, it only removes it from this object.\n             If any existing models in the simulation refer to\n             this Body, it will persist in memory.\n",
                        "parameters": [
                            {
                                "name": "body_name",
                                "type": "numpy.ndarray",
                                "description": "Name of the Body that is to be removed."
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "autoclass": null,
                "get": "\nThis function extracts a single Body object from the SystemOfBodies.\n\n\nParameters\n----------\nbody_name : numpy.ndarray\n    Name of the Body that is to be retrieved.\n\nReturns\n-------\nBody\n    Body object of the requested name\n\n\n\n\n\n",
                "create_empty_body": "\nThis function creates a new empty body.\n\nThis function creates a new empty body, and adds it to the\n:py:class:`~SystemOfBodies`. Since the body is empty, it will\nnot have any environment models defined. These must all be\nadded manually by a user.\n\n\nParameters\n----------\nbody_name : string\n    Name of the Body that is to be added\n\nprocess_body : bool, default=True\n    Variable that defines whether this new Body will have its\n    global frame origin/orientation set to conform to rest of\n    the environment.\n\n    .. warning:: Only in very rare cases should\n                 this variable be anything other than ``True``.\n                 Users are recommended to keep this default value\n                 intact.\n\n\n\n\n\nExamples\n--------\n\nThis function is often used early on in the environment\ncreation segment of a simulation, following the creation of\na :py:class:`~SystemOfBodies` from the default settings\nfor celestial bodies.\n\n.. code-block:: python\n   :emphasize-lines: 18\n\n   # Define string names for bodies to be created from default.\n   bodies_to_create = [\"Sun\", \"Earth\", \"Moon\", \"Mars\", \"Venus\"]\n\n   # Use \"Earth\"/\"J2000\" as global frame origin and orientation.\n   global_frame_origin = \"Earth\"\n   global_frame_orientation = \"J2000\"\n\n   # Create default body settings, usually from `spice`.\n   body_settings = environment_setup.get_default_body_settings(\n       bodies_to_create,\n       global_frame_origin,\n       global_frame_orientation)\n\n   # Create system of selected celestial bodies\n   bodies = environment_setup.create_system_of_bodies(body_settings)\n\n   # Create vehicle objects.\n   bodies.create_empty_body(\"Delfi-C3\")\n\n",
                "add_body": "\nThis function adds an existing body, which the user has\nseparately created, to the :py:class:`~SystemOfBodies`.\n\n\n\nParameters\n----------\nbody_to_add : Body\n    Body object that is to be added.\n\nbody_name : numpy.ndarray\n    Name of the Body that is to be added.\n\nprocess_body : bool, default=True\n    Variable that defines whether this new Body will have its\n    global frame origin/orientation set to conform to rest of\n    the environment.\n\n    .. warning:: Only in very rare cases should this variable be\n                 anything other than ``True``. Users are\n                 recommended to keep this default value intact.\n\n\n\n\n\n",
                "remove_body": "\nThis function removes an existing body from the\n:py:class:`~SystemOfBodies`.\n\n\n\n.. warning:: This function does *not* necessarilly delete the\n             Body object, it only removes it from this object.\n             If any existing models in the simulation refer to\n             this Body, it will persist in memory.\n\n\nParameters\n----------\nbody_name : numpy.ndarray\n    Name of the Body that is to be removed.\n\n\n\n\n",
                "__docstring__": "\nObject that contains a set of Body objects and associated frame\ninformation.\n\n\n\n\n\n\n"
            }
        },
        "propagation": {
            "type": "module",
            "path": "./tudat-multidoc/docstrings/numerical_simulation",
            "file": "propagation.yaml",
            "_implicit_name": "propagation",
            "config": null,
            "summary": null,
            "extended_summary": "This module provides the functionality for functional environment\nobjects and associated functionality. Specifically, it contains\nthe models that perform computations related to environment models\nof natural and artificial bodies.\n",
            "routine_listings": null,
            "see_also": null,
            "notes": null,
            "references": null,
            "examples": null,
            "enums": [
                {
                    "name": "PropagationTerminationReason",
                    "short_summary": "Enumeration of types of termination of propagation.",
                    "extended_summary": null,
                    "members": [
                        {
                            "name": "propagation_never_run",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "unknown_reason",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "termination_condition_reached",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "runtime_error_caught_in_propagation",
                            "description": null,
                            "value": null
                        },
                        {
                            "name": "nan_or_inf_detected_in_state",
                            "description": null,
                            "value": null
                        }
                    ]
                }
            ],
            "classes": [
                {
                    "name": "PropagationTerminationDetails",
                    "short_summary": "Object that provides information on the reason for the\ntermination of the propagation.\n",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "properties": [
                        {
                            "name": "termination_reason",
                            "type": "PropagationTerminationReason",
                            "description": "Enum defining the reason the propagation was terminated\n",
                            "readonly": false
                        },
                        {
                            "name": "terminated_on_exact_condition",
                            "type": "bool",
                            "description": "Boolean defining whether the propagation was termined on an *exact* final condition,\nor once the propagation went *past* the determined final condition. The choice of behaviour is\ndefined by the termination settings provided as input to the Simulator object.\n",
                            "readonly": false
                        }
                    ],
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": null,
                    "autoclass": null
                }
            ],
            "functions": null,
            "constants": null,
            "name": "propagation",
            "version": null,
            "PropagationTerminationDetails": {
                "name": "PropagationTerminationDetails",
                "short_summary": "Object that provides information on the reason for the\ntermination of the propagation.\n",
                "deprecation_warning": null,
                "extended_summary": null,
                "parameters": null,
                "attributes": null,
                "properties": [
                    {
                        "name": "termination_reason",
                        "type": "PropagationTerminationReason",
                        "description": "Enum defining the reason the propagation was terminated\n",
                        "readonly": false
                    },
                    {
                        "name": "terminated_on_exact_condition",
                        "type": "bool",
                        "description": "Boolean defining whether the propagation was termined on an *exact* final condition,\nor once the propagation went *past* the determined final condition. The choice of behaviour is\ndefined by the termination settings provided as input to the Simulator object.\n",
                        "readonly": false
                    }
                ],
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "methods": null,
                "autoclass": null,
                "termination_reason": "\nEnum defining the reason the propagation was terminated\n\n\n:type: PropagationTerminationReason\n",
                "terminated_on_exact_condition": "\nBoolean defining whether the propagation was termined on an *exact* final condition,\nor once the propagation went *past* the determined final condition. The choice of behaviour is\ndefined by the termination settings provided as input to the Simulator object.\n\n\n:type: bool\n",
                "__docstring__": "\nObject that provides information on the reason for the\ntermination of the propagation.\n\n\n\n\n\n\n"
            },
            "PropagationTerminationReason": {
                "propagation_never_run": "",
                "unknown_reason": "",
                "termination_condition_reached": "",
                "runtime_error_caught_in_propagation": "",
                "nan_or_inf_detected_in_state": "",
                "__docstring__": "\nEnumeration of types of termination of propagation.\n\n\n\n\n\n",
                "name": "PropagationTerminationReason",
                "short_summary": "Enumeration of types of termination of propagation.",
                "extended_summary": null,
                "members": [
                    {
                        "name": "propagation_never_run",
                        "description": null,
                        "value": null
                    },
                    {
                        "name": "unknown_reason",
                        "description": null,
                        "value": null
                    },
                    {
                        "name": "termination_condition_reached",
                        "description": null,
                        "value": null
                    },
                    {
                        "name": "runtime_error_caught_in_propagation",
                        "description": null,
                        "value": null
                    },
                    {
                        "name": "nan_or_inf_detected_in_state",
                        "description": null,
                        "value": null
                    }
                ]
            }
        }
    },
    "plotting": {
        "type": "module",
        "path": "./tudat-multidoc/docstrings",
        "file": "plotting.yaml",
        "_implicit_name": "plotting",
        "config": null,
        "summary": null,
        "extended_summary": null,
        "routine_listings": null,
        "see_also": null,
        "notes": null,
        "references": null,
        "examples": null,
        "enums": null,
        "classes": null,
        "functions": [
            {
                "name": "plot_blue_marble_ground_track",
                "short_summary": null,
                "deprecation_warning": null,
                "extended_summary": null,
                "parameters": null,
                "returns": null,
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null
            },
            {
                "name": "plot_miller_ground_track",
                "short_summary": null,
                "deprecation_warning": null,
                "extended_summary": null,
                "parameters": null,
                "returns": null,
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null
            }
        ],
        "constants": null,
        "name": "plotting",
        "version": null,
        "plot_blue_marble_ground_track": "\n\n\n\n\n",
        "plot_miller_ground_track": "\n\n\n\n\n"
    },
    "util": {
        "type": "module",
        "path": "./tudat-multidoc/docstrings",
        "file": "util.yaml",
        "_implicit_name": "util",
        "config": null,
        "summary": null,
        "extended_summary": null,
        "routine_listings": null,
        "see_also": null,
        "notes": null,
        "references": null,
        "examples": null,
        "enums": null,
        "classes": null,
        "functions": [
            {
                "name": "result2array",
                "short_summary": null,
                "deprecation_warning": null,
                "extended_summary": null,
                "parameters": null,
                "returns": null,
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null
            }
        ],
        "constants": null,
        "name": "util",
        "version": null,
        "result2array": "\n\n\n\n\n"
    }
}