{
    "type": "package",
    "path": "./tudat-multidoc/docstrings",
    "file": "__package__.yaml",
    "_implicit_name": "docstrings",
    "config": {
        "name": "tudatpy",
        "version": null
    },
    "summary": null,
    "extended_summary": null,
    "routine_listings": null,
    "see_also": null,
    "notes": null,
    "references": null,
    "examples": null,
    "classes": null,
    "functions": null,
    "constants": null,
    "modules": [
        "interface",
        "simulation"
    ],
    "name": "tudatpy",
    "version": null,
    "interface": {
        "type": "package",
        "path": "./tudat-multidoc/docstrings/interface",
        "file": "__package__.yaml",
        "_implicit_name": "interface",
        "config": null,
        "summary": null,
        "extended_summary": null,
        "routine_listings": null,
        "see_also": null,
        "notes": null,
        "references": null,
        "examples": null,
        "classes": null,
        "functions": null,
        "constants": null,
        "modules": [
            "spice"
        ],
        "name": "interface",
        "version": null,
        "spice": {
            "type": "module",
            "path": "./tudat-multidoc/docstrings/interface",
            "file": "spice.yaml",
            "_implicit_name": "spice",
            "config": null,
            "summary": null,
            "extended_summary": null,
            "routine_listings": null,
            "see_also": null,
            "notes": "None",
            "references": null,
            "examples": null,
            "classes": [
                {
                    "name": "SpiceEphemeris",
                    "short_summary": "Ephemeris derived class which retrieves the state of a body directly from the SPICE library.",
                    "deprecation_warning": null,
                    "extended_summary": "Ephemeris derived class which retrieves the state of a body directly from the SPICE library.\nThe body of which the ephemeris is to be retrieved, as well as the origin and orientation\nof the reference frame in which the states are returned, and any corrections that are\napplied, are defined once during object construction.\n",
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "__init__",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Constructor, sets the input variables for the calls to the spice function to retrieve state.",
                            "parameters": [
                                {
                                    "name": "target_body_name",
                                    "type": null,
                                    "description": "Name of body of which the ephemeris is to be calculated."
                                },
                                {
                                    "name": "observer_body_name",
                                    "type": null,
                                    "description": "Name of body relative to which the ephemeris is to be calculated."
                                },
                                {
                                    "name": "correct_for_stellar_aberration",
                                    "type": null,
                                    "description": "Boolean whether to correct for stellar Aberration in retrieved values of (observed state).\n"
                                },
                                {
                                    "name": "correct_for_light_time_aberration",
                                    "type": null,
                                    "description": "Boolean whether to correct for light time in retrieved values of (observed state).\n"
                                },
                                {
                                    "name": "converge_ligh_time_aberration",
                                    "type": null,
                                    "description": "Boolean whether to use single iteration or max. 3 iterations for calculating light time.\n"
                                },
                                {
                                    "name": "reference_frame_name",
                                    "type": null,
                                    "description": "Name of the reference frame in which the epehemeris is to be calculated.\n"
                                },
                                {
                                    "name": "reference_julian_day",
                                    "type": null,
                                    "description": "Reference julian day w.r.t. which ephemeris is evaluated.\n"
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "get_cartesian_state",
                            "short_summary": "Get Cartesian state from ephemeris.",
                            "deprecation_warning": null,
                            "extended_summary": " Returns Cartesian state from ephemeris at given Julian day.",
                            "parameters": [
                                {
                                    "name": "seconds_since_epoch",
                                    "type": "float",
                                    "description": "Seconds since epoch at which ephemeris is to be evaluated."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ]
                }
            ],
            "functions": [
                {
                    "name": "convert_julian_date_to_ephemeris_time",
                    "short_summary": "Convert a Julian date to ephemeris time (equivalent to TDB in Spice).",
                    "deprecation_warning": null,
                    "extended_summary": "The following math is for documentation demonstration purposes\n\n.. math:: X(e^{j\\omega } ) = x(n)e^{ - j\\omega n}\n\n\\f$ f(x) = a + b \\f$\n\nFunction to convert a Julian date to ephemeris time, which is\nequivalent to barycentric dynamical time. A leap second kernel\nmust have been loaded to use this function.\n",
                    "parameters": [
                        {
                            "name": "julian_date",
                            "type": "int",
                            "description": "Julian date that is to be converted to ephemeris time."
                        }
                    ],
                    "returns": {
                        "name": "ephemeris_time",
                        "type": "float",
                        "description": "Julian date calculated from ephemeris time."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "convert_ephemeris_time_to_julian_date",
                    "short_summary": "Convert ephemeris time (equivalent to TDB) to a Julian date.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to convert ephemeris time, which is nearly equal to\nbarycentric dynamical time, to the Julian date. A leap second\nkernel must have been loaded to use this function.\n",
                    "parameters": [
                        {
                            "name": "ephemeris_time",
                            "type": "float",
                            "description": "Ephemeris time that is to be converted to Julian date."
                        }
                    ],
                    "returns": {
                        "name": "julian_date",
                        "type": "float",
                        "description": "Julian date calculated from ephemeris time."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "convert_date_string_to_ephemeris_time",
                    "short_summary": "Converts a date string to ephemeris time.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to convert a date string, for instance\n1988 June 13, 3:29:48 to ephemeris time, wrapper for `str2et_c`\nspice function.\n",
                    "parameters": [
                        {
                            "name": "date_string",
                            "type": "str",
                            "description": "String representing the date. See documentation of spice\nfunction `str2et_c` for details on supported formats.\n"
                        }
                    ],
                    "returns": {
                        "name": "ephemeris_time",
                        "type": "str",
                        "description": "Ephemeris time corresponding to given date_string."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_body_cartesian_state_at_epoch",
                    "short_summary": "Get Cartesian state of a body, as observed from another body.",
                    "deprecation_warning": null,
                    "extended_summary": "This function returns the state of a body, relative to another\nbody, in a frame specified by the user. Corrections for light-time\ncorrection and stellar aberration can be applied to obtain the\nstate of one of the bodies, as observed from the other. Wrapper\nfor `spkezr_c` spice function.\n",
                    "parameters": [
                        {
                            "name": "target_body_name",
                            "type": "str",
                            "description": "Name of the body of which the state is to be obtained. A kernel\nwith the ephemeris of this body must have been loaded. The\nstring must be a spice-recognized name or ID.\n"
                        },
                        {
                            "name": "observer_body_name",
                            "type": "str",
                            "description": "Name of the body relative to which the state is to be obtained.\nA kernel with the ephemeris of this body must have been loaded.\nThe string must be a spice-recognized name or ID.\n"
                        },
                        {
                            "name": "reference_frame_name",
                            "type": "str",
                            "description": "The spice-recognized name of the reference frame in which the\nstate is to be returned. Spice kernel(s) required to perform\nthe necessary conversion from the states of the target and\nobserver bodies to this frame need to have been loaded.\n"
                        },
                        {
                            "name": "aberration_corrections",
                            "type": "str",
                            "description": "Setting for correction for setting corrections. See Spice\ndocumentation for extended discussion.\nShort summary:\n\n- NONE: none\n- LT: light time corrected (one iteration for calculation)\n- CN: light time corrected (multiple iterations, max 3) for calculation\n- S: Stellar aberration corrected.\n- XLT and XCN: can be provided to make the ephemeris time input argument the transmission time, instead of reception time. Arguments can be combined (i.e.\"LT+S\" or \"XCN+S\").\n"
                        },
                        {
                            "name": "ephemeris_time",
                            "type": "float",
                            "description": "Observation time (or transmission time of observed light, see description\nof aberrationCorrections).\n"
                        }
                    ],
                    "returns": {
                        "name": "cartesian_state_vector",
                        "type": "np.ndarray[6,]",
                        "description": "Cartesian state vector (x,y,z, position+velocity)."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_body_cartesian_position_at_epoch",
                    "short_summary": "Get Cartesian position of a body, as observed from another body.",
                    "deprecation_warning": null,
                    "extended_summary": "This function returns the position of a body, relative to another\nbody, in a frame specified by the user. Corrections for light-time\ncorrection and stellar aberration can be applied to obtain the\nstate of one of the bodies, as observed from the other. Wrapper\nfor `spkpos_c` spice function.\n",
                    "parameters": [
                        {
                            "name": "target_body_name",
                            "type": "str",
                            "description": "Name of the body of which the state is to be obtained. A kernel\nwith the ephemeris of this body must have been loaded. The\nstring must be a spice-recognized name or ID.\n"
                        },
                        {
                            "name": "observer_body_name",
                            "type": "str",
                            "description": "Name of the body relative to which the state is to be obtained.\nA kernel with the ephemeris of this body must have been loaded.\nThe string must be a spice-recognized name or ID.\n"
                        },
                        {
                            "name": "reference_frame_name",
                            "type": "str",
                            "description": "The spice-recognized name of the reference frame in which the\nstate is to be returned. Spice kernel(s) required to perform\nthe necessary conversion from the states of the target and\nobserver bodies to this frame need to have been loaded.\n"
                        },
                        {
                            "name": "aberration_corrections",
                            "type": "str",
                            "description": "Setting for correction for setting corrections. See Spice\ndocumentation for extended discussion.\nShort summary:\n\n- NONE: none\n- LT: light time corrected (one iteration for calculation)\n- CN: light time corrected (multiple iterations, max 3) for calculation,\n- S: Stellar aberration corrected.\n- XLT and XCN: can be provided to make the ephemeris time input argument the transmission time, instead of reception time. Arguments can be combined (i.e.\"LT+S\" or \"XCN+S\").\n"
                        },
                        {
                            "name": "ephemeris_time",
                            "type": "float",
                            "description": "Observation time (or transmission time of observed light, see description\nof aberrationCorrections).\n"
                        }
                    ],
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_cartesian_state_from_tle_at_epoch",
                    "short_summary": "Get Cartesian state of a satellite from its two-line element set at a specified epoch.",
                    "deprecation_warning": null,
                    "extended_summary": "This function retrieves the state of a satellite at a certain epoch\nby propagating the SGP or SDP models (near-Earth resp. deep space)\nwith the given two-line elements (TLE). This function serves as a\nwrapper for the `ev2lin_` function in CSpice.\n",
                    "parameters": [
                        {
                            "name": "epoch",
                            "type": "float",
                            "description": "Time in seconds since J2000 at which the state is to be retrieved."
                        },
                        {
                            "name": "tle",
                            "type": ":class:`~tudatpy.kernel.astro.ephemerides.Tle`",
                            "description": "Shared pointer to a Tle object containing the SGP/SDP model parameters as derived from the element set."
                        }
                    ],
                    "returns": {
                        "name": "cartesian_state_vector",
                        "type": "np.ndarray[6,]",
                        "description": "Cartesian state vector (x,y,z, position+velocity)."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "compute_rotation_quaternion_between_frames",
                    "short_summary": "Compute quaternion of rotation between two frames.",
                    "deprecation_warning": null,
                    "extended_summary": "This function computes the quaternion of rotation between two\nframes at a given time instant. kernels defining the two frames,\nas well as any required intermediate frames, at the requested\ntime must have been loaded. Wrapper for `pxform_c` spice function.\n",
                    "parameters": [
                        {
                            "name": "original_frame",
                            "type": null,
                            "description": "Reference frame from which the rotation is made."
                        },
                        {
                            "name": "new_frame",
                            "type": null,
                            "description": "Reference frame to which the rotation is made."
                        },
                        {
                            "name": "ephemeris_time",
                            "type": null,
                            "description": "Value of ephemeris time at which rotation is to be determined."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Rotation quaternion from original to new frame at given time."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "compute_rotation_matrix_derivative_between_frames",
                    "short_summary": "Computes time derivative of rotation matrix between two frames.",
                    "deprecation_warning": null,
                    "extended_summary": "This function computes the derivative of the rotation matrix\nbetween two frames at a given time instant. kernels defining the\ntwo frames, as well as any required intermediate frames, at the\nrequested time must have been loaded. Wrapper for (part of) `sxform_c` spice function.\n",
                    "parameters": [
                        {
                            "name": "original_frame",
                            "type": null,
                            "description": "Reference frame from which the rotation is made."
                        },
                        {
                            "name": "new_frame",
                            "type": null,
                            "description": "Reference frame to which the rotation is made."
                        },
                        {
                            "name": "ephemeris_time",
                            "type": null,
                            "description": "Value of ephemeris time at which rotation is to be determined."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Time derivative of rotation matrix from original to new frame at given time."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_angular_velocity_vector_of_frame_in_original_frame",
                    "short_summary": "Computes the angular velocity of one frame w.r.t. to another frame.",
                    "deprecation_warning": null,
                    "extended_summary": "Computes the angular velocity of one frame w.r.t. to another frame.\nat a given time instant. kernels defining the two frames, as well\nas any required intermediate frames, at the requested time must\nhave been loaded. Wrapper for `xf2rav_c`_ spice function (utilizing `sxform_c`_).\n\n.. _`xf2rav_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/xf2rav_c.html\n.. _`sxform_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sxform_c.html\n",
                    "parameters": [
                        {
                            "name": "original_frame",
                            "type": null,
                            "description": "Reference frame from which the rotation is made."
                        },
                        {
                            "name": "new_frame",
                            "type": null,
                            "description": "Reference frame to which the rotation is made."
                        },
                        {
                            "name": "ephemeris_time",
                            "type": null,
                            "description": "Value of ephemeris time at which rotation is to be determined."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Angular velocity of newFrame w.r.t. originalFrame, expressed in originalFrame."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_body_properties",
                    "short_summary": "Get property of a body from Spice.",
                    "deprecation_warning": null,
                    "extended_summary": "Function to retrieve a property of a body from Spice, wraps the bodvrd_c Spice function.\n",
                    "parameters": [
                        {
                            "name": "body_name",
                            "type": null,
                            "description": "Name of the body of which the property is to be retrieved."
                        },
                        {
                            "name": "property",
                            "type": null,
                            "description": "Name of the property that is to be retrieved. Naming conventions can be found\nin the `bodvrd_c`_ function documentation.\n\n.. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n"
                        },
                        {
                            "name": "maximum_number_of_values",
                            "type": "int",
                            "description": "Number of values by which the property is expressed (i.e. 1 for\ngravitational parameter, 3 for tri-axial ellipsoid principal axes).\n"
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Property value(s) expressed in an STL vector of doubles."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": "Function returns values with distance unit km, not m!\n",
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_body_gravitational_parameter",
                    "short_summary": "Get gravitational parameter of a body.",
                    "deprecation_warning": null,
                    "extended_summary": "This function retrieves the gravitational parameter of a body.\nWraps the `bodvrd_c`_ spice function with \"GM\" as property type.\n\n.. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n",
                    "parameters": [
                        {
                            "name": "body",
                            "type": null,
                            "description": "Name of the body of which the parameter is to be retrieved."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Gravitational parameter of requested body."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_average_radius",
                    "short_summary": "Get the (arithmetic) mean of the three principal axes of the tri-axial ellipsoid shape.",
                    "deprecation_warning": null,
                    "extended_summary": "Returns the (arithmetic) mean of the three principal axes of the\ntri-axial ellipsoid shape of the requested body. Uses the `bodvrd_c` spice function with \"RADII\" as property type.\n\n.. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n",
                    "parameters": [
                        {
                            "name": "body",
                            "type": null,
                            "description": "Name of the body of which the average radius is to be retrieved."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "Arithmetic mean of principal axes of tri-axial ellipsoid shape model of body."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "convert_body_name_to_naif_id",
                    "short_summary": "Convert a body name to its NAIF identification number.",
                    "deprecation_warning": null,
                    "extended_summary": "This function converts a body name to its NAIF identification\nnumber. The NAIF id number is required for a number of spice\nfunctions, whereas the name is easily interpretable by the user.\nWrapper for the ``bods2c_c`` function.\n",
                    "parameters": [
                        {
                            "name": "body_name",
                            "type": null,
                            "description": "Name of the body for which NAIF id is to be retrieved."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": null,
                        "description": "NAIF id number for the body with bodyName."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "check_body_property_in_kernel_pool",
                    "short_summary": "Check if a certain property of a body is in the kernel pool.",
                    "deprecation_warning": null,
                    "extended_summary": "This function checks if a certain property of a body is in the\nkernel pool. These properties are defined in PCK kernels. Their\nnames are given in the kernel file, typical names can be found in\nthe Spice documentation. Wrapper for the `bodfnd_c`_ function.\n\n.. _`bodfnd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodfnd_c.html\n",
                    "parameters": [
                        {
                            "name": "body_name",
                            "type": null,
                            "description": "Name of the body of which the property is to be checked."
                        },
                        {
                            "name": "body_property",
                            "type": null,
                            "description": "Name of the property of which the presence is to be checked, not case-sensitive."
                        }
                    ],
                    "returns": {
                        "name": null,
                        "type": "bool",
                        "description": "True if property is in pool, false if not."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_standard_kernels",
                    "short_summary": "Get the paths to the default legacy kernels.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "load_standard_kernels",
                    "short_summary": "Load the default legacy kernels.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": [
                        {
                            "name": "kernel_paths",
                            "type": "List[str]",
                            "description": "Optional addition kernels to be loaded."
                        }
                    ],
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "get_total_count_of_kernels_loaded",
                    "short_summary": "Get the number of spice kernels currently loaded.",
                    "deprecation_warning": null,
                    "extended_summary": "This function returns the amount of Spice kernels that are loaded\ninto the kernel pool. The same kernel can be loaded multiple times.\nWrapper for the `ktotal_c`_ function.\n\n.. _`ktotal_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/ktotal_c.html\n",
                    "parameters": null,
                    "returns": {
                        "name": "n_kernels",
                        "type": "int",
                        "description": "Number of spice kernels currently loaded."
                    },
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "load_kernel",
                    "short_summary": "Loads a Spice kernel into the pool.",
                    "deprecation_warning": null,
                    "extended_summary": "This function loads a Spice kernel into the kernel pool, from which\nit can be used by the various internal spice routines. Matters\nregarding the manner in which Spice handles different kernels\ncontaining the same information can be found in the spice required\nreading documentation, kernel section. Wrapper for the `furnsh_c`_\nfunction.\n\n.. _`furnsh_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/furnsh_c.html\n",
                    "parameters": [
                        {
                            "name": "file_path",
                            "type": "str",
                            "description": "Path to the spice kernel to be loaded."
                        }
                    ],
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                },
                {
                    "name": "clear_kernels",
                    "short_summary": "Clear all loaded spice kernels.",
                    "deprecation_warning": null,
                    "extended_summary": "This function removes all Spice kernels from the kernel pool.\nWrapper for the `kclear_c`_ function.\n\n.. _`kclear_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/kclear_c.html\n",
                    "parameters": null,
                    "returns": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null
                }
            ],
            "constants": null,
            "name": "spice",
            "version": null,
            "convert_julian_date_to_ephemeris_time": "\nConvert a Julian date to ephemeris time (equivalent to TDB in Spice).\n\nThe following math is for documentation demonstration purposes\n\n.. math:: X(e^{j\\omega } ) = x(n)e^{ - j\\omega n}\n\n\\f$ f(x) = a + b \\f$\n\nFunction to convert a Julian date to ephemeris time, which is\nequivalent to barycentric dynamical time. A leap second kernel\nmust have been loaded to use this function.\n\n\nParameters\n----------\njulian_date : int\n    Julian date that is to be converted to ephemeris time.\n\nReturns\n-------\nephemeris_time : floatJulian date calculated from ephemeris time.\n\n",
            "convert_ephemeris_time_to_julian_date": "\nConvert ephemeris time (equivalent to TDB) to a Julian date.\n\nFunction to convert ephemeris time, which is nearly equal to\nbarycentric dynamical time, to the Julian date. A leap second\nkernel must have been loaded to use this function.\n\n\nParameters\n----------\nephemeris_time : float\n    Ephemeris time that is to be converted to Julian date.\n\nReturns\n-------\njulian_date : floatJulian date calculated from ephemeris time.\n\n",
            "convert_date_string_to_ephemeris_time": "\nConverts a date string to ephemeris time.\n\nFunction to convert a date string, for instance\n1988 June 13, 3:29:48 to ephemeris time, wrapper for `str2et_c`\nspice function.\n\n\nParameters\n----------\ndate_string : str\n    String representing the date. See documentation of spice\n    function `str2et_c` for details on supported formats.\n\n\nReturns\n-------\nephemeris_time : strEphemeris time corresponding to given date_string.\n\n",
            "get_body_cartesian_state_at_epoch": "\nGet Cartesian state of a body, as observed from another body.\n\nThis function returns the state of a body, relative to another\nbody, in a frame specified by the user. Corrections for light-time\ncorrection and stellar aberration can be applied to obtain the\nstate of one of the bodies, as observed from the other. Wrapper\nfor `spkezr_c` spice function.\n\n\nParameters\n----------\ntarget_body_name : str\n    Name of the body of which the state is to be obtained. A kernel\n    with the ephemeris of this body must have been loaded. The\n    string must be a spice-recognized name or ID.\n\nobserver_body_name : str\n    Name of the body relative to which the state is to be obtained.\n    A kernel with the ephemeris of this body must have been loaded.\n    The string must be a spice-recognized name or ID.\n\nreference_frame_name : str\n    The spice-recognized name of the reference frame in which the\n    state is to be returned. Spice kernel(s) required to perform\n    the necessary conversion from the states of the target and\n    observer bodies to this frame need to have been loaded.\n\naberration_corrections : str\n    Setting for correction for setting corrections. See Spice\n    documentation for extended discussion.\n    Short summary:\n\n    - NONE: none\n    - LT: light time corrected (one iteration for calculation)\n    - CN: light time corrected (multiple iterations, max 3) for calculation\n    - S: Stellar aberration corrected.\n    - XLT and XCN: can be provided to make the ephemeris time input argument the transmission time, instead of reception time. Arguments can be combined (i.e.\"LT+S\" or \"XCN+S\").\n\nephemeris_time : float\n    Observation time (or transmission time of observed light, see description\n    of aberrationCorrections).\n\n\nReturns\n-------\ncartesian_state_vector : np.ndarray[6,]Cartesian state vector (x,y,z, position+velocity).\n\n",
            "get_body_cartesian_position_at_epoch": "\nGet Cartesian position of a body, as observed from another body.\n\nThis function returns the position of a body, relative to another\nbody, in a frame specified by the user. Corrections for light-time\ncorrection and stellar aberration can be applied to obtain the\nstate of one of the bodies, as observed from the other. Wrapper\nfor `spkpos_c` spice function.\n\n\nParameters\n----------\ntarget_body_name : str\n    Name of the body of which the state is to be obtained. A kernel\n    with the ephemeris of this body must have been loaded. The\n    string must be a spice-recognized name or ID.\n\nobserver_body_name : str\n    Name of the body relative to which the state is to be obtained.\n    A kernel with the ephemeris of this body must have been loaded.\n    The string must be a spice-recognized name or ID.\n\nreference_frame_name : str\n    The spice-recognized name of the reference frame in which the\n    state is to be returned. Spice kernel(s) required to perform\n    the necessary conversion from the states of the target and\n    observer bodies to this frame need to have been loaded.\n\naberration_corrections : str\n    Setting for correction for setting corrections. See Spice\n    documentation for extended discussion.\n    Short summary:\n\n    - NONE: none\n    - LT: light time corrected (one iteration for calculation)\n    - CN: light time corrected (multiple iterations, max 3) for calculation,\n    - S: Stellar aberration corrected.\n    - XLT and XCN: can be provided to make the ephemeris time input argument the transmission time, instead of reception time. Arguments can be combined (i.e.\"LT+S\" or \"XCN+S\").\n\nephemeris_time : float\n    Observation time (or transmission time of observed light, see description\n    of aberrationCorrections).\n\n",
            "get_cartesian_state_from_tle_at_epoch": "\nGet Cartesian state of a satellite from its two-line element set at a specified epoch.\n\nThis function retrieves the state of a satellite at a certain epoch\nby propagating the SGP or SDP models (near-Earth resp. deep space)\nwith the given two-line elements (TLE). This function serves as a\nwrapper for the `ev2lin_` function in CSpice.\n\n\nParameters\n----------\nepoch : float\n    Time in seconds since J2000 at which the state is to be retrieved.\ntle : :class:`~tudatpy.kernel.astro.ephemerides.Tle`\n    Shared pointer to a Tle object containing the SGP/SDP model parameters as derived from the element set.\n\nReturns\n-------\ncartesian_state_vector : np.ndarray[6,]Cartesian state vector (x,y,z, position+velocity).\n\n",
            "compute_rotation_quaternion_between_frames": "\nCompute quaternion of rotation between two frames.\n\nThis function computes the quaternion of rotation between two\nframes at a given time instant. kernels defining the two frames,\nas well as any required intermediate frames, at the requested\ntime must have been loaded. Wrapper for `pxform_c` spice function.\n\n\nParameters\n----------\noriginal_frame\n    Reference frame from which the rotation is made.\nnew_frame\n    Reference frame to which the rotation is made.\nephemeris_time\n    Value of ephemeris time at which rotation is to be determined.\n\nReturns\n-------\nRotation quaternion from original to new frame at given time.\n\n",
            "compute_rotation_matrix_derivative_between_frames": "\nComputes time derivative of rotation matrix between two frames.\n\nThis function computes the derivative of the rotation matrix\nbetween two frames at a given time instant. kernels defining the\ntwo frames, as well as any required intermediate frames, at the\nrequested time must have been loaded. Wrapper for (part of) `sxform_c` spice function.\n\n\nParameters\n----------\noriginal_frame\n    Reference frame from which the rotation is made.\nnew_frame\n    Reference frame to which the rotation is made.\nephemeris_time\n    Value of ephemeris time at which rotation is to be determined.\n\nReturns\n-------\nTime derivative of rotation matrix from original to new frame at given time.\n\n",
            "get_angular_velocity_vector_of_frame_in_original_frame": "\nComputes the angular velocity of one frame w.r.t. to another frame.\n\nComputes the angular velocity of one frame w.r.t. to another frame.\nat a given time instant. kernels defining the two frames, as well\nas any required intermediate frames, at the requested time must\nhave been loaded. Wrapper for `xf2rav_c`_ spice function (utilizing `sxform_c`_).\n\n.. _`xf2rav_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/xf2rav_c.html\n.. _`sxform_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sxform_c.html\n\n\nParameters\n----------\noriginal_frame\n    Reference frame from which the rotation is made.\nnew_frame\n    Reference frame to which the rotation is made.\nephemeris_time\n    Value of ephemeris time at which rotation is to be determined.\n\nReturns\n-------\nAngular velocity of newFrame w.r.t. originalFrame, expressed in originalFrame.\n\n",
            "get_body_properties": "\nGet property of a body from Spice.\n\nFunction to retrieve a property of a body from Spice, wraps the bodvrd_c Spice function.\n\n\nParameters\n----------\nbody_name\n    Name of the body of which the property is to be retrieved.\nproperty\n    Name of the property that is to be retrieved. Naming conventions can be found\n    in the `bodvrd_c`_ function documentation.\n\n    .. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n\nmaximum_number_of_values : int\n    Number of values by which the property is expressed (i.e. 1 for\n    gravitational parameter, 3 for tri-axial ellipsoid principal axes).\n\n\nReturns\n-------\nProperty value(s) expressed in an STL vector of doubles.\n\n",
            "get_body_gravitational_parameter": "\nGet gravitational parameter of a body.\n\nThis function retrieves the gravitational parameter of a body.\nWraps the `bodvrd_c`_ spice function with \"GM\" as property type.\n\n.. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n\n\nParameters\n----------\nbody\n    Name of the body of which the parameter is to be retrieved.\n\nReturns\n-------\nGravitational parameter of requested body.\n\n",
            "get_average_radius": "\nGet the (arithmetic) mean of the three principal axes of the tri-axial ellipsoid shape.\n\nReturns the (arithmetic) mean of the three principal axes of the\ntri-axial ellipsoid shape of the requested body. Uses the `bodvrd_c` spice function with \"RADII\" as property type.\n\n.. _`bodvrd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodvrd_c.html\n\n\nParameters\n----------\nbody\n    Name of the body of which the average radius is to be retrieved.\n\nReturns\n-------\nArithmetic mean of principal axes of tri-axial ellipsoid shape model of body.\n\n",
            "convert_body_name_to_naif_id": "\nConvert a body name to its NAIF identification number.\n\nThis function converts a body name to its NAIF identification\nnumber. The NAIF id number is required for a number of spice\nfunctions, whereas the name is easily interpretable by the user.\nWrapper for the ``bods2c_c`` function.\n\n\nParameters\n----------\nbody_name\n    Name of the body for which NAIF id is to be retrieved.\n\nReturns\n-------\nNAIF id number for the body with bodyName.\n\n",
            "check_body_property_in_kernel_pool": "\nCheck if a certain property of a body is in the kernel pool.\n\nThis function checks if a certain property of a body is in the\nkernel pool. These properties are defined in PCK kernels. Their\nnames are given in the kernel file, typical names can be found in\nthe Spice documentation. Wrapper for the `bodfnd_c`_ function.\n\n.. _`bodfnd_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/bodfnd_c.html\n\n\nParameters\n----------\nbody_name\n    Name of the body of which the property is to be checked.\nbody_property\n    Name of the property of which the presence is to be checked, not case-sensitive.\n\nReturns\n-------\nbool\nTrue if property is in pool, false if not.\n\n",
            "get_standard_kernels": "\nGet the paths to the default legacy kernels.\n\n",
            "load_standard_kernels": "\nLoad the default legacy kernels.\n\n\nParameters\n----------\nkernel_paths : List[str]\n    Optional addition kernels to be loaded.\n",
            "get_total_count_of_kernels_loaded": "\nGet the number of spice kernels currently loaded.\n\nThis function returns the amount of Spice kernels that are loaded\ninto the kernel pool. The same kernel can be loaded multiple times.\nWrapper for the `ktotal_c`_ function.\n\n.. _`ktotal_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/ktotal_c.html\n\n\nReturns\n-------\nn_kernels : intNumber of spice kernels currently loaded.\n\n",
            "load_kernel": "\nLoads a Spice kernel into the pool.\n\nThis function loads a Spice kernel into the kernel pool, from which\nit can be used by the various internal spice routines. Matters\nregarding the manner in which Spice handles different kernels\ncontaining the same information can be found in the spice required\nreading documentation, kernel section. Wrapper for the `furnsh_c`_\nfunction.\n\n.. _`furnsh_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/furnsh_c.html\n\n\nParameters\n----------\nfile_path : str\n    Path to the spice kernel to be loaded.\n",
            "clear_kernels": "\nClear all loaded spice kernels.\n\nThis function removes all Spice kernels from the kernel pool.\nWrapper for the `kclear_c`_ function.\n\n.. _`kclear_c`: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/kclear_c.html\n\n",
            "SpiceEphemeris": {
                "name": "SpiceEphemeris",
                "short_summary": "Ephemeris derived class which retrieves the state of a body directly from the SPICE library.",
                "deprecation_warning": null,
                "extended_summary": "Ephemeris derived class which retrieves the state of a body directly from the SPICE library.\nThe body of which the ephemeris is to be retrieved, as well as the origin and orientation\nof the reference frame in which the states are returned, and any corrections that are\napplied, are defined once during object construction.\n",
                "parameters": null,
                "attributes": null,
                "yields": null,
                "other_parameters": null,
                "raises": null,
                "warns": null,
                "warnings": null,
                "see_also": null,
                "notes": null,
                "references": null,
                "examples": null,
                "methods": [
                    {
                        "name": "__init__",
                        "short_summary": "Constructor.",
                        "deprecation_warning": null,
                        "extended_summary": "Constructor, sets the input variables for the calls to the spice function to retrieve state.",
                        "parameters": [
                            {
                                "name": "target_body_name",
                                "type": null,
                                "description": "Name of body of which the ephemeris is to be calculated."
                            },
                            {
                                "name": "observer_body_name",
                                "type": null,
                                "description": "Name of body relative to which the ephemeris is to be calculated."
                            },
                            {
                                "name": "correct_for_stellar_aberration",
                                "type": null,
                                "description": "Boolean whether to correct for stellar Aberration in retrieved values of (observed state).\n"
                            },
                            {
                                "name": "correct_for_light_time_aberration",
                                "type": null,
                                "description": "Boolean whether to correct for light time in retrieved values of (observed state).\n"
                            },
                            {
                                "name": "converge_ligh_time_aberration",
                                "type": null,
                                "description": "Boolean whether to use single iteration or max. 3 iterations for calculating light time.\n"
                            },
                            {
                                "name": "reference_frame_name",
                                "type": null,
                                "description": "Name of the reference frame in which the epehemeris is to be calculated.\n"
                            },
                            {
                                "name": "reference_julian_day",
                                "type": null,
                                "description": "Reference julian day w.r.t. which ephemeris is evaluated.\n"
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "get_cartesian_state",
                        "short_summary": "Get Cartesian state from ephemeris.",
                        "deprecation_warning": null,
                        "extended_summary": " Returns Cartesian state from ephemeris at given Julian day.",
                        "parameters": [
                            {
                                "name": "seconds_since_epoch",
                                "type": "float",
                                "description": "Seconds since epoch at which ephemeris is to be evaluated."
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "__init__": "\nConstructor.\n\nConstructor, sets the input variables for the calls to the spice function to retrieve state.\n\nParameters\n----------\ntarget_body_name\n    Name of body of which the ephemeris is to be calculated.\nobserver_body_name\n    Name of body relative to which the ephemeris is to be calculated.\ncorrect_for_stellar_aberration\n    Boolean whether to correct for stellar Aberration in retrieved values of (observed state).\n\ncorrect_for_light_time_aberration\n    Boolean whether to correct for light time in retrieved values of (observed state).\n\nconverge_ligh_time_aberration\n    Boolean whether to use single iteration or max. 3 iterations for calculating light time.\n\nreference_frame_name\n    Name of the reference frame in which the epehemeris is to be calculated.\n\nreference_julian_day\n    Reference julian day w.r.t. which ephemeris is evaluated.\n\n",
                "get_cartesian_state": "\nGet Cartesian state from ephemeris.\n\n Returns Cartesian state from ephemeris at given Julian day.\n\nParameters\n----------\nseconds_since_epoch : float\n    Seconds since epoch at which ephemeris is to be evaluated.\n",
                "__docstring__": "\nEphemeris derived class which retrieves the state of a body directly from the SPICE library.\n\nEphemeris derived class which retrieves the state of a body directly from the SPICE library.\nThe body of which the ephemeris is to be retrieved, as well as the origin and orientation\nof the reference frame in which the states are returned, and any corrections that are\napplied, are defined once during object construction.\n\n"
            }
        }
    },
    "simulation": {
        "type": "package",
        "path": "./tudat-multidoc/docstrings/simulation",
        "file": "__package__.yaml",
        "_implicit_name": "simulation",
        "config": null,
        "summary": null,
        "extended_summary": null,
        "routine_listings": null,
        "see_also": null,
        "notes": null,
        "references": null,
        "examples": null,
        "classes": null,
        "functions": null,
        "constants": null,
        "modules": [
            "environment_setup",
            "propagation_setup"
        ],
        "name": "simulation",
        "version": null,
        "environment_setup": {
            "type": "package",
            "path": "./tudat-multidoc/docstrings/simulation/environment_setup",
            "file": "__package__.yaml",
            "_implicit_name": "environment_setup",
            "config": null,
            "summary": null,
            "extended_summary": null,
            "routine_listings": null,
            "see_also": null,
            "notes": null,
            "references": null,
            "examples": null,
            "classes": null,
            "functions": null,
            "constants": null,
            "modules": [
                "ephemeris",
                "gravity_field",
                "rotation_model"
            ],
            "name": "environment_setup",
            "version": null,
            "ephemeris": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/simulation/environment_setup",
                "file": "ephemeris.yaml",
                "_implicit_name": "ephemeris",
                "config": null,
                "summary": null,
                "extended_summary": null,
                "routine_listings": null,
                "see_also": null,
                "notes": "None",
                "references": null,
                "examples": null,
                "classes": [
                    {
                        "name": "EphemerisSettings",
                        "short_summary": "Base class for providing settings for ephemeris model.",
                        "deprecation_warning": null,
                        "extended_summary": "Functional (base) class for settings of ephemeris models that require no information in addition to their type (and frame origin and orientation).\nEphemeris model classes requiring additional information must be created using an object derived from this class.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "ephemeris_type",
                                "type": "EphemerisType",
                                "description": "Type of ephemeris that is to be created."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str",
                                "description": "Origin of frame in which ephemeris data is to be defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str",
                                "description": "Orientation of frame in which ephemeris data is to be defined."
                            },
                            {
                                "name": "make_multi_arc_ephemeris",
                                "type": "bool",
                                "description": "Boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "ScaledEphemerisSettings",
                        "short_summary": "Class for defining settings from scaling existing ephemeris settings.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for a new ephemeris created from scaling an existing ephemeris settings object. It allows the user to apply a scaling factor to the resulting Cartesian states (for instance for an uncertainty analysis).",
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "DirectSpiceEphemerisSettings",
                        "short_summary": "Class for defining settings of an ephemeris linked directly to Spice.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for ephemeris which are directly linked to Spice.",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "correct_for_stellar_aberration",
                                "type": "bool",
                                "description": "Boolean defining whether to correct for stellar abberations in retrieved values (of observed state)."
                            },
                            {
                                "name": "correct_for_light_time_aberration",
                                "type": "bool",
                                "description": "Boolean defining whether to correct for light time in retrieved values (of observed state)."
                            },
                            {
                                "name": "converge_light_time_aberration",
                                "type": "bool",
                                "description": "Boolean defining whether to use single iteration or max. 3 iterations for calculating light time correction."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "InterpolatedSpiceEphemerisSettings",
                        "short_summary": "Class for defining settings of an ephemeris interpolated from Spice data.",
                        "deprecation_warning": null,
                        "extended_summary": "`DirectSpiceEphemerisSettings` derived class for setting ephemerides to be created from interpolated Spice ephemeris data.",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time from which interpolated data from Spice should be created."
                            },
                            {
                                "name": "final_time",
                                "type": "float",
                                "description": "Final time from which interpolated data from Spice should be created."
                            },
                            {
                                "name": "time_step",
                                "type": "float",
                                "description": "Time step setting to be used for the state interpolation."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "ApproximatePlanetPositionSettings",
                        "short_summary": "Class for creating settings of approximate ephemeris for major planets.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for approximate ephemeris for major planets as inplemented in ApproximatePlanetPositions class and derived class (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "body_identifier",
                                "type": null,
                                "description": "Type Parameter identifying for which body an ephemeris is to be created."
                            },
                            {
                                "name": "use_circular_coplanar_approximation",
                                "type": "bool",
                                "description": "Boolean defining whether a circular coplanar orbit of the body is to be assumed."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "ConstantEphemerisSettings",
                        "short_summary": "Class for defining settings of constant ephemerides.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for ephemerides producing a constant (time-independent) state.",
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "CustomEphemerisSettings",
                        "short_summary": "Class for defining settings of a custom ephemeris.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for ephemerides which represent an ideal Kepler orbit.",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "initial_state_in_keplerian_elements",
                                "type": "numpy.ndarray",
                                "description": "Kepler elements at time epochOfInitialState."
                            },
                            {
                                "name": "epoch_of_initial_state",
                                "type": "float",
                                "description": "Time at which initialStateInKeplerianElements represents the Keplerian state."
                            },
                            {
                                "name": "central_body_gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of the central body that is used in the computations."
                            },
                            {
                                "name": "root_finder_absolute_tolerance",
                                "type": "float",
                                "description": "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            },
                            {
                                "name": "root_finder_maximum_number_of_iterations",
                                "type": "float",
                                "description": "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "TabulatedEphemerisSettings",
                        "short_summary": "Class for defining settings of ephemeris to be created from tabulated data.",
                        "deprecation_warning": null,
                        "extended_summary": "`EphemerisSettings` derived class for ephemeris created from tabulated data. The provided data is interpolated into ephemerides.",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "body_state_history",
                                "type": "dict",
                                "description": "Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray)."
                            },
                            {
                                "name": "use_long_double_states",
                                "type": "bool",
                                "description": "Boolean defining whether increased numerical precision (long double type) is to be used when creating the ephemeris."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    }
                ],
                "functions": [
                    {
                        "name": "direct_spice",
                        "short_summary": "Factory function for creating ephemeris model settings entirely from Spice.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model directly and entirely from Spice.\nRequires an appropriate Spice kernel to be loaded.\nThis function creates an instance of an `EphemerisSettings` derived `DirectSpiceEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "body_name_to_use",
                                "type": "str, default = \"\"",
                                "description": "?"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "interpolated_spice",
                        "short_summary": "Factory function for creating ephemeris model settings using interpolated Spice data.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time from which interpolated data from Spice should be created."
                            },
                            {
                                "name": "final_time",
                                "type": "float",
                                "description": "Final time from which interpolated data from Spice should be created."
                            },
                            {
                                "name": "time_step",
                                "type": "float",
                                "description": "Time step with which interpolated data from Spice should be created."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "interpolator_settings",
                                "type": "std::make_shared< interpolators::InterpolatorSettings >, default=std::make_shared< interpolators::LagrangeInterpolatorSettings >( 6 )",
                                "description": "Settings to be used for the state interpolation."
                            },
                            {
                                "name": "body_name_to_use",
                                "type": "str, default = \"\"",
                                "description": "?"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "approximate_planet_positions",
                        "short_summary": "Factory function for creating approximate ephemeris model settings for major planets.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining approximate ephemeris model for major planets.\nIn this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).\n#(%! only given in ctor, not FF) Three-dimensional and circular-coplanar approximation may be used.\nThis function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object.\n",
                        "parameters": [
                            {
                                "name": "body_name_to_use",
                                "type": "str",
                                "description": "String that is attempted to be matched to an identifier for the body that the ephemeris is to be created for."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "approximate_planet_positions",
                        "short_summary": "Factory function for creating approximate ephemeris model settings for major planets.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining approximate ephemeris model for major planets.\nIn this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).\n#(%! only given in ctor, not FF) Three-dimensional and circular-coplanar approximation may be used.\nThis function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object.\n",
                        "parameters": [
                            {
                                "name": "None",
                                "type": null,
                                "description": null
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "constant",
                        "short_summary": "Factory function for creating constant ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model with a constant, time-independent state.\nThis function creates an instance of an `EphemerisSettings` derived `constantEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "constant_state",
                                "type": "numpy.ndarray",
                                "description": "Constant state that will be provided as output of the ephemeris at all times."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom",
                        "short_summary": "Factory function for creating custom ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model with a custom state.\nThis allows the user to provide an custom state function as ephemeris model.\nThe state function (pointer) must be taking a time (float) as input and returning the Cartesian state (numpy.ndarray).\nThis function creates an instance of an `EphemerisSettings` derived `customEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "custom_state_function",
                                "type": null,
                                "description": "Function returning the state as a function of time."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "keplerian",
                        "short_summary": "Factory function for creating Keplerian ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from the given Kepler elements.\nThese are taken as the elements at the ``initial_state_epoch`` and propagated to any other time using the provided ``central_body_gravitational_parameter``.\nSee Frame/State Transformations (`link`) for more details on orbital elements in Tudat.\nThis function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "initial_state_in_keplerian_elements",
                                "type": "numpy.ndarray",
                                "description": "Kepler elements at time epochOfInitialState."
                            },
                            {
                                "name": "initial_state_epoch",
                                "type": "float",
                                "description": "Time at which initialStateInKeplerianElements represents the Keplerian state."
                            },
                            {
                                "name": "central_body_gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of the central body that is used in the computations."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "root_finder_absolute_tolerance",
                                "type": "float",
                                "description": "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            },
                            {
                                "name": "root_finder_maximum_number_of_iterations",
                                "type": "float",
                                "description": "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "keplerian_from_spice",
                        "short_summary": "Factory function for creating Keplerian ephemeris model settings with initial state from Spice.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from an initial state from Spice.\nThe Kepler elements inferred from the initial state are propagated to any other time using the provided ``central_body_gravitational_parameter``.\nSee Frame/State Transformations (`link`) for more details on orbital elements in Tudat.\nThis function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Name of body for which to create ephemeris settings and infer initial state from Spice."
                            },
                            {
                                "name": "initial_state_epoch",
                                "type": "float",
                                "description": "Time at which initialStateInKeplerianElements represents the Keplerian state."
                            },
                            {
                                "name": "central_body_gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of the central body that is used in the computations."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "root_finder_absolute_tolerance",
                                "type": "float",
                                "description": "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            },
                            {
                                "name": "root_finder_maximum_number_of_iterations",
                                "type": "float",
                                "description": "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled",
                        "short_summary": "Factory function for creating scaled ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_ephemeris_settings",
                                "type": "EphemerisSettings",
                                "description": "Sets base settings of ephemeris to be scaled."
                            },
                            {
                                "name": "scaling_constant",
                                "type": "float",
                                "description": "Constant scaling factor to be applied to all elements of the Cartesian state."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool, default=false",
                                "description": "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled",
                        "short_summary": "Factory function for creating scaled ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_ephemeris_settings",
                                "type": "EphemerisSettings",
                                "description": "Sets base settings of ephemeris to be scaled."
                            },
                            {
                                "name": "scaling_vector",
                                "type": "numpy.ndarray",
                                "description": "Vector containing scaling factors to be applied to each element of the Cartesian state."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool, default=false",
                                "description": "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "scaled",
                        "short_summary": "Factory function for creating scaled ephemeris model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "unscaled_ephemeris_settings",
                                "type": "EphemerisSettings",
                                "description": "Sets base settings of ephemeris to be scaled."
                            },
                            {
                                "name": "scaling_vector_function",
                                "type": "function < numpy.ndarray >",
                                "description": "Function returning a vector with the scaling factors to be applied to each element of the Cartesian state."
                            },
                            {
                                "name": "is_scaling_absolute",
                                "type": "bool, default=false",
                                "description": "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "tabulated",
                        "short_summary": "Factory function for creating ephemeris model settings from tabulated data.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining ephemeris model to be created from tabulated data.\nCurrently the data that is provided gets interpolated by a 6th order Lagrange interpolator (hardcoded).\nAt the edges of the interpolation interval a cubic spline interpolator is used to suppres the influence of Runge's phenomenon.\nThis function creates an instance of an `EphemerisSettings` derived `TabulatedEphemerisSettings` object.\n",
                        "parameters": [
                            {
                                "name": "body_state_history",
                                "type": "dict",
                                "description": "Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray)."
                            },
                            {
                                "name": "frame_origin",
                                "type": "str, default='SSB'",
                                "description": "Origin of frame in which ephemeris data is defined."
                            },
                            {
                                "name": "frame_orientation",
                                "type": "str, default='ECLIPJ2000'",
                                "description": "Orientation of frame in which ephemeris data is defined."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "ephemeris",
                "version": null,
                "direct_spice": "\nFactory function for creating ephemeris model settings entirely from Spice.\n\nFactory function for settings object, defining ephemeris model directly and entirely from Spice.\nRequires an appropriate Spice kernel to be loaded.\nThis function creates an instance of an `EphemerisSettings` derived `DirectSpiceEphemerisSettings` object.\n\n\nParameters\n----------\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\nbody_name_to_use : str, default = \"\"\n    ?\n\nReturns\n-------\ndescription\nNone\n\n",
                "interpolated_spice": "\nFactory function for creating ephemeris model settings using interpolated Spice data.\n\n\nParameters\n----------\ninitial_time : float\n    Initial time from which interpolated data from Spice should be created.\nfinal_time : float\n    Final time from which interpolated data from Spice should be created.\ntime_step : float\n    Time step with which interpolated data from Spice should be created.\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\ninterpolator_settings : std::make_shared< interpolators::InterpolatorSettings >, default=std::make_shared< interpolators::LagrangeInterpolatorSettings >( 6 )\n    Settings to be used for the state interpolation.\nbody_name_to_use : str, default = \"\"\n    ?\n\nReturns\n-------\ndescription\nNone\n\n",
                "approximate_planet_positions": {
                    "overloaded": true,
                    "overloads": 2,
                    "0": "\nFactory function for creating approximate ephemeris model settings for major planets.\n\nFactory function for settings object, defining approximate ephemeris model for major planets.\nIn this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).\n#(%! only given in ctor, not FF) Three-dimensional and circular-coplanar approximation may be used.\nThis function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object.\n\n\nParameters\n----------\nbody_name_to_use : str\n    String that is attempted to be matched to an identifier for the body that the ephemeris is to be created for.\n\nReturns\n-------\ndescription\nNone\n\n",
                    "1": "\nFactory function for creating approximate ephemeris model settings for major planets.\n\nFactory function for settings object, defining approximate ephemeris model for major planets.\nIn this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).\n#(%! only given in ctor, not FF) Three-dimensional and circular-coplanar approximation may be used.\nThis function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object.\n\n\nParameters\n----------\nNone\n    None\n\nReturns\n-------\ndescription\nNone\n\n"
                },
                "constant": "\nFactory function for creating constant ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model with a constant, time-independent state.\nThis function creates an instance of an `EphemerisSettings` derived `constantEphemerisSettings` object.\n\n\nParameters\n----------\nconstant_state : numpy.ndarray\n    Constant state that will be provided as output of the ephemeris at all times.\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\n\nReturns\n-------\ndescription\nNone\n\n",
                "custom": "\nFactory function for creating custom ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model with a custom state.\nThis allows the user to provide an custom state function as ephemeris model.\nThe state function (pointer) must be taking a time (float) as input and returning the Cartesian state (numpy.ndarray).\nThis function creates an instance of an `EphemerisSettings` derived `customEphemerisSettings` object.\n\n\nParameters\n----------\ncustom_state_function\n    Function returning the state as a function of time.\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\n\nReturns\n-------\ndescription\nNone\n\n",
                "keplerian": "\nFactory function for creating Keplerian ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from the given Kepler elements.\nThese are taken as the elements at the ``initial_state_epoch`` and propagated to any other time using the provided ``central_body_gravitational_parameter``.\nSee Frame/State Transformations (`link`) for more details on orbital elements in Tudat.\nThis function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.\n\n\nParameters\n----------\ninitial_state_in_keplerian_elements : numpy.ndarray\n    Kepler elements at time epochOfInitialState.\ninitial_state_epoch : float\n    Time at which initialStateInKeplerianElements represents the Keplerian state.\ncentral_body_gravitational_parameter : float\n    Gravitational parameter of the central body that is used in the computations.\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\nroot_finder_absolute_tolerance : float\n    Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState.\nroot_finder_maximum_number_of_iterations : float\n    Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState.\n\nReturns\n-------\ndescription\nNone\n\n",
                "keplerian_from_spice": "\nFactory function for creating Keplerian ephemeris model settings with initial state from Spice.\n\nFactory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from an initial state from Spice.\nThe Kepler elements inferred from the initial state are propagated to any other time using the provided ``central_body_gravitational_parameter``.\nSee Frame/State Transformations (`link`) for more details on orbital elements in Tudat.\nThis function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.\n\n\nParameters\n----------\nbody : str\n    Name of body for which to create ephemeris settings and infer initial state from Spice.\ninitial_state_epoch : float\n    Time at which initialStateInKeplerianElements represents the Keplerian state.\ncentral_body_gravitational_parameter : float\n    Gravitational parameter of the central body that is used in the computations.\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\nroot_finder_absolute_tolerance : float\n    Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState.\nroot_finder_maximum_number_of_iterations : float\n    Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState.\n\nReturns\n-------\ndescription\nNone\n\n",
                "scaled": {
                    "overloaded": true,
                    "overloads": 3,
                    "0": "\nFactory function for creating scaled ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n\n\nParameters\n----------\nunscaled_ephemeris_settings : EphemerisSettings\n    Sets base settings of ephemeris to be scaled.\nscaling_constant : float\n    Constant scaling factor to be applied to all elements of the Cartesian state.\nis_scaling_absolute : bool, default=false\n    Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value.\n\nReturns\n-------\ndescription\nNone\n\n",
                    "1": "\nFactory function for creating scaled ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n\n\nParameters\n----------\nunscaled_ephemeris_settings : EphemerisSettings\n    Sets base settings of ephemeris to be scaled.\nscaling_vector : numpy.ndarray\n    Vector containing scaling factors to be applied to each element of the Cartesian state.\nis_scaling_absolute : bool, default=false\n    Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value.\n\nReturns\n-------\ndescription\nNone\n\n",
                    "2": "\nFactory function for creating scaled ephemeris model settings.\n\nFactory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.\nThe user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).\nThis function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.\n\n\nParameters\n----------\nunscaled_ephemeris_settings : EphemerisSettings\n    Sets base settings of ephemeris to be scaled.\nscaling_vector_function : function < numpy.ndarray >\n    Function returning a vector with the scaling factors to be applied to each element of the Cartesian state.\nis_scaling_absolute : bool, default=false\n    Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value.\n\nReturns\n-------\ndescription\nNone\n\n"
                },
                "tabulated": "\nFactory function for creating ephemeris model settings from tabulated data.\n\nFactory function for settings object, defining ephemeris model to be created from tabulated data.\nCurrently the data that is provided gets interpolated by a 6th order Lagrange interpolator (hardcoded).\nAt the edges of the interpolation interval a cubic spline interpolator is used to suppres the influence of Runge's phenomenon.\nThis function creates an instance of an `EphemerisSettings` derived `TabulatedEphemerisSettings` object.\n\n\nParameters\n----------\nbody_state_history : dict\n    Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray).\nframe_origin : str, default='SSB'\n    Origin of frame in which ephemeris data is defined.\nframe_orientation : str, default='ECLIPJ2000'\n    Orientation of frame in which ephemeris data is defined.\n\nReturns\n-------\ndescription\nNone\n\n",
                "EphemerisSettings": {
                    "__docstring__": "\nBase class for providing settings for ephemeris model.\n\nFunctional (base) class for settings of ephemeris models that require no information in addition to their type (and frame origin and orientation).\nEphemeris model classes requiring additional information must be created using an object derived from this class.\n\n"
                },
                "ScaledEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings from scaling existing ephemeris settings.\n\n`EphemerisSettings` derived class for a new ephemeris created from scaling an existing ephemeris settings object. It allows the user to apply a scaling factor to the resulting Cartesian states (for instance for an uncertainty analysis).\n"
                },
                "DirectSpiceEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings of an ephemeris linked directly to Spice.\n\n`EphemerisSettings` derived class for ephemeris which are directly linked to Spice.\n"
                },
                "InterpolatedSpiceEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings of an ephemeris interpolated from Spice data.\n\n`DirectSpiceEphemerisSettings` derived class for setting ephemerides to be created from interpolated Spice ephemeris data.\n"
                },
                "ApproximatePlanetPositionSettings": {
                    "__docstring__": "\nClass for creating settings of approximate ephemeris for major planets.\n\n`EphemerisSettings` derived class for approximate ephemeris for major planets as inplemented in ApproximatePlanetPositions class and derived class (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).\n"
                },
                "ConstantEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings of constant ephemerides.\n\n`EphemerisSettings` derived class for ephemerides producing a constant (time-independent) state.\n"
                },
                "CustomEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings of a custom ephemeris.\n\n`EphemerisSettings` derived class for ephemerides which represent an ideal Kepler orbit.\n"
                },
                "TabulatedEphemerisSettings": {
                    "__docstring__": "\nClass for defining settings of ephemeris to be created from tabulated data.\n\n`EphemerisSettings` derived class for ephemeris created from tabulated data. The provided data is interpolated into ephemerides.\n"
                }
            },
            "gravity_field": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/simulation/environment_setup",
                "file": "gravity_field.yaml",
                "_implicit_name": "gravity_field",
                "config": null,
                "summary": null,
                "extended_summary": null,
                "routine_listings": null,
                "see_also": null,
                "notes": "None",
                "references": null,
                "examples": null,
                "classes": [
                    {
                        "name": "GravityFieldSettings",
                        "short_summary": "Base class for providing settings for automatic gravity field model creation.",
                        "deprecation_warning": null,
                        "extended_summary": "This class is a functional base class for settings of gravity field models that require no information in addition to their type.\nGravity field model classes requiring additional information must be created using an object derived from this class.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "gravity_field_type",
                                "type": "GravityFieldType",
                                "description": "Type of gravity field model that is to be created."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "__init__",
                                "short_summary": null,
                                "deprecation_warning": null,
                                "extended_summary": null,
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "CentralGravityFieldSettings",
                        "short_summary": "`GravityFieldSettings` derived class defining settings of point mass gravity field.",
                        "deprecation_warning": null,
                        "extended_summary": "Derived class of `GravityFieldSettings` for central gravity fields, which are defined by a single gravitational parameter.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of central gravity field."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "SphericalHarmonicsGravityFieldSettings",
                        "short_summary": "`GravityFieldSettings` derived class defining settings of spherical harmonic gravity field representation.",
                        "deprecation_warning": null,
                        "extended_summary": "Derived class of `GravityFieldSettings` for gravity fields, which are defined by a spherical harmonic gravity field representation.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of gravity field."
                            },
                            {
                                "name": "reference_radius",
                                "type": "float",
                                "description": "Reference radius of spherical harmonic field expansion."
                            },
                            {
                                "name": "normalized_cosine_coefficients",
                                "type": "numpy.ndarray",
                                "description": "Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j."
                            },
                            {
                                "name": "normalized_sine_coefficients",
                                "type": "numpy.ndarray",
                                "description": "Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j."
                            },
                            {
                                "name": "associated_reference_frame",
                                "type": "str",
                                "description": "Identifier for body-fixed reference frame with which the coefficients are associated."
                            },
                            {
                                "name": "create_time_dependent_field",
                                "type": "bool",
                                "description": "Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed intially)."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    }
                ],
                "functions": [
                    {
                        "name": "central",
                        "short_summary": "Factory function for central gravity field settings object.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a point-mass gravity field model with user-defined gravitational parameter.\nThis function returns a `GravityFieldSettings` derived `CentralGravityFieldSettings` object.\n",
                        "parameters": [
                            {
                                "name": "gravitational_parameter",
                                "type": "float",
                                "description": null
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "central_spice",
                        "short_summary": "Factory function to create central gravity field settings from Spice settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a point-mass gravity field model with gravitational parameter from Spice.\nThis function returns a `GravityFieldSettings` object of gravity field type ``central_spice``.\n",
                        "parameters": [
                            {
                                "name": "None",
                                "type": null,
                                "description": null
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic",
                        "short_summary": "Factory function for creating a spherical harmonics gravity field settings object.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a gravity field model through spherical harmonic expansion.\nThe associated reference frame must presently be the same frame ID as the target frame of the body\u2019s rotation model.\nIt represents the frame in which the spherical harmonic field is defined.\nSpherical harmonic coefficients used for this environment model must *always* be fully normalized.\nTo normalize unnormalized spherical harmonic coefficients, see `spherical_harmonics_normalization`.\nThis function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.\n",
                        "parameters": [
                            {
                                "name": "gravitational_parameter",
                                "type": "float",
                                "description": "Gravitational parameter of gravity field."
                            },
                            {
                                "name": "reference_radius",
                                "type": "float",
                                "description": "Reference radius of spherical harmonic field expansion."
                            },
                            {
                                "name": "normalized_cosine_coefficients",
                                "type": "numpy.ndarray",
                                "description": "Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j.\nAs such, note that entry (0,0) of cosine coefficients should be equal to 1.\n"
                            },
                            {
                                "name": "normalized_sine_coefficients",
                                "type": "numpy.ndarray",
                                "description": "Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j."
                            },
                            {
                                "name": "associated_reference_frame",
                                "type": "str",
                                "description": "Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic_triaxial_body",
                        "short_summary": "Factory function for spherical harmonics gravity field settings object from triaxial ellipsoid parameters.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a gravity field model through spherical harmonic expansion of a homogeneous triaxial ellipsoid.\nThe constant mass distribution in the specified ellipsoid shape is expanded to obtain a spherical harmonic coefficient representation.\nGravity fields from this setting object are expressed in normalized spherical harmonic coefficients.\n(%!) The x-, y- and z-axis of the ... ABC (?).\nThis function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.\n",
                        "parameters": [
                            {
                                "name": "axis_a",
                                "type": "float",
                                "description": "Dimension of largest axis of triaxial ellipsoid."
                            },
                            {
                                "name": "axis_b",
                                "type": "float",
                                "description": "Dimension of intermediate axis of triaxial ellipsoid."
                            },
                            {
                                "name": "axis_c",
                                "type": "float",
                                "description": "Dimension of smallest axis of triaxial ellipsoid."
                            },
                            {
                                "name": "density",
                                "type": "float",
                                "description": "Density of ellipsoid."
                            },
                            {
                                "name": "maximum_degree",
                                "type": "int",
                                "description": "Maximum degree of spherical harmonics expansion."
                            },
                            {
                                "name": "maximum_order",
                                "type": "int",
                                "description": "Maximum order of spherical harmonics expansion."
                            },
                            {
                                "name": "associated_reference_frame",
                                "type": "str",
                                "description": "Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "gravity_field",
                "version": null,
                "central": "\nFactory function for central gravity field settings object.\n\nFactory function for settings object, defining a point-mass gravity field model with user-defined gravitational parameter.\nThis function returns a `GravityFieldSettings` derived `CentralGravityFieldSettings` object.\n\n\nParameters\n----------\ngravitational_parameter : float\n    None\n\nReturns\n-------\ndescription\nNone\n\n",
                "central_spice": "\nFactory function to create central gravity field settings from Spice settings.\n\nFactory function for settings object, defining a point-mass gravity field model with gravitational parameter from Spice.\nThis function returns a `GravityFieldSettings` object of gravity field type ``central_spice``.\n\n\nParameters\n----------\nNone\n    None\n\nReturns\n-------\ndescription\nNone\n\n",
                "spherical_harmonic": "\nFactory function for creating a spherical harmonics gravity field settings object.\n\nFactory function for settings object, defining a gravity field model through spherical harmonic expansion.\nThe associated reference frame must presently be the same frame ID as the target frame of the body\u2019s rotation model.\nIt represents the frame in which the spherical harmonic field is defined.\nSpherical harmonic coefficients used for this environment model must *always* be fully normalized.\nTo normalize unnormalized spherical harmonic coefficients, see `spherical_harmonics_normalization`.\nThis function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.\n\n\nParameters\n----------\ngravitational_parameter : float\n    Gravitational parameter of gravity field.\nreference_radius : float\n    Reference radius of spherical harmonic field expansion.\nnormalized_cosine_coefficients : numpy.ndarray\n    Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j.\n    As such, note that entry (0,0) of cosine coefficients should be equal to 1.\n\nnormalized_sine_coefficients : numpy.ndarray\n    Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j.\nassociated_reference_frame : str\n    Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.\n\nReturns\n-------\ndescription\nNone\n\n",
                "spherical_harmonic_triaxial_body": "\nFactory function for spherical harmonics gravity field settings object from triaxial ellipsoid parameters.\n\nFactory function for settings object, defining a gravity field model through spherical harmonic expansion of a homogeneous triaxial ellipsoid.\nThe constant mass distribution in the specified ellipsoid shape is expanded to obtain a spherical harmonic coefficient representation.\nGravity fields from this setting object are expressed in normalized spherical harmonic coefficients.\n(%!) The x-, y- and z-axis of the ... ABC (?).\nThis function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.\n\n\nParameters\n----------\naxis_a : float\n    Dimension of largest axis of triaxial ellipsoid.\naxis_b : float\n    Dimension of intermediate axis of triaxial ellipsoid.\naxis_c : float\n    Dimension of smallest axis of triaxial ellipsoid.\ndensity : float\n    Density of ellipsoid.\nmaximum_degree : int\n    Maximum degree of spherical harmonics expansion.\nmaximum_order : int\n    Maximum order of spherical harmonics expansion.\nassociated_reference_frame : str\n    Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.\n\nReturns\n-------\ndescription\nNone\n\n",
                "GravityFieldSettings": {
                    "name": "GravityFieldSettings",
                    "short_summary": "Base class for providing settings for automatic gravity field model creation.",
                    "deprecation_warning": null,
                    "extended_summary": "This class is a functional base class for settings of gravity field models that require no information in addition to their type.\nGravity field model classes requiring additional information must be created using an object derived from this class.\n",
                    "parameters": null,
                    "attributes": [
                        {
                            "name": "gravity_field_type",
                            "type": "GravityFieldType",
                            "description": "Type of gravity field model that is to be created."
                        }
                    ],
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "__init__",
                            "short_summary": null,
                            "deprecation_warning": null,
                            "extended_summary": null,
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "__init__": "\n",
                    "__docstring__": "\nBase class for providing settings for automatic gravity field model creation.\n\nThis class is a functional base class for settings of gravity field models that require no information in addition to their type.\nGravity field model classes requiring additional information must be created using an object derived from this class.\n\n"
                },
                "CentralGravityFieldSettings": {
                    "__docstring__": "\n`GravityFieldSettings` derived class defining settings of point mass gravity field.\n\nDerived class of `GravityFieldSettings` for central gravity fields, which are defined by a single gravitational parameter.\n\n"
                },
                "SphericalHarmonicsGravityFieldSettings": {
                    "__docstring__": "\n`GravityFieldSettings` derived class defining settings of spherical harmonic gravity field representation.\n\nDerived class of `GravityFieldSettings` for gravity fields, which are defined by a spherical harmonic gravity field representation.\n\n"
                }
            },
            "rotation_model": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/simulation/environment_setup",
                "file": "rotation_model.yaml",
                "_implicit_name": "rotation_model",
                "config": null,
                "summary": null,
                "extended_summary": null,
                "routine_listings": null,
                "see_also": null,
                "notes": "None",
                "references": null,
                "examples": null,
                "classes": [
                    {
                        "name": "RotationModelSettings",
                        "short_summary": "Base class for providing settings for automatic rotation model creation.",
                        "deprecation_warning": null,
                        "extended_summary": "This class is a functional base class for settings of rotation models that require no information in addition to their type.\nBasic rotation model has constant orientation of the rotation axis (body-fixed z-axis) and constant rotation rate about this axis.\nRotation models requiring additional information must be created using the factory functions which create the specific object derived from this base class.\n",
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "rotation_type",
                                "type": "RotationModelType",
                                "description": "Type of rotation model that is to be created."
                            },
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": null
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    }
                ],
                "functions": [
                    {
                        "name": "simple",
                        "short_summary": "Factory function for creating simple rotation model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a basic rotation model with constant orientation of the rotation axis and constant rotation rate about this axis.\nRotation from original (inertial) to target (body-fixed) frame at some reference time ``initial_time`` is defined by the ``initial_orientation`` rotation matrix.\nRotation about the body-fixed z-axis is defined by the ``rotation_rate`` float variable (in rad/s).\nThis function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target frame of rotation model."
                            },
                            {
                                "name": "initial_orientation",
                                "type": "numpy.ndarray",
                                "description": "Orientation of target frame in base frame at initial time."
                            },
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time (reference epoch for rotation matrices)."
                            },
                            {
                                "name": "rotation_rate",
                                "type": "float",
                                "description": "Constant rotation rate [rad/s] about rotational axis."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "simple_from_spice",
                        "short_summary": "Factory function for creating simple rotation model settings using initial orientation and rotaton rates from Spice.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a simple rotation model with the added functionality that the initial orientation and rotation rate are extracted from Spice, as opposed to provided manually.\nNote that *only* the initial orientation and rotation rate ( at the time defined by `initial_time` ) are extracted from Spice.\nThe distinction between the two target frame inputs is the following\n\n  - the ``target_frame`` parameter is the name of frame that Tudat assigns to the body-fixed frame\n  - the ``target_frame_spice`` is the name of the frame in Spice for which the initial orientation and rotation rate are extracted.\n\nThis function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target frame of rotation model."
                            },
                            {
                                "name": "target_frame_spice",
                                "type": "str",
                                "description": "Spice reference of target frame."
                            },
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time (reference epoch for rotation matrices)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "synchronous",
                        "short_summary": "Factory function for creating synchronous rotational ephemeris settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a synchronous rotation model where rotation of a body is defined from its relative orbit w.r.t. some central body. Specifically\n- the body-fixed x-axis is *always* pointing towards the central body\n- the body-fixed z-axis is *always* perpendicular to the orbital plane (along the direction of\n.. math:: \\mathbf{x} \\cross \\mathbf{v} )\n- the body-fixed y-axis completes the right-handed reference frame\n\nSuch a model can be useful for, for instance, approximate rotation of tidally locked natural satellites or nadir-pointing spacraft.\nThis function creates an instance of a `RotationModelSettings` derived `SynchronousRotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "central_body_name",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Spice reference of target frame."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spice",
                        "short_summary": "Factory function for creating rotation model settings from the Spice interface.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining a rotation model directly (and entirely) from Spice interface.\nThis function creates an instance of a `RotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target frame of rotation model."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "gcrs_to_itrs",
                        "short_summary": "Factory function for creating high-accuracy Earth rotation model settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining high-accuracy Earth rotation model according to the IERS 2010 Conventions.\nThis settings class has various options to deviate from the default settings, typical applications will use default.\nNote that for this model the original frame must be J2000 or GCRS (in the case of the former, the frame bias between GCRS and J2000 is automatically corrected for). The target frame (e.g. body-fixed frame) name is ITRS.\nThe precession-nutation theory may be `iau_2000a` / `iau_2000b` or `iau_2006`, as implemented in the SOFA toolbox. Alternative options to modify the input (not shown above) include the EOP correction file, input time scale, short period UT1 and polar motion variations.\nThe target frame (e.g. body-fixed frame) name is ITRS.\nThis function creates an instance of a `RotationModelSettings` derived `gcrsToItrsRotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "precession_nutation_theory",
                                "type": "default=tba::iau_2006",
                                "description": "Setting theory for modelling Earth nutation.\n"
                            },
                            {
                                "name": "base_frame",
                                "type": "str, default='GCRS'",
                                "description": "Base frame of rotation model"
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "constant",
                        "short_summary": "Factory function for creating simple rotation model settings for target-frames with constant orientation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function for settings object, defining simple rotation model setting objects with constant rotation matrix.\nThese model settings are for target frames which do not have a rotational rate in the base frame and are fully defined by their initial orientation.\nThis function creates an instance of a `RotationModelSettings` derived `SimpleRotationModelSettings` object.\n",
                        "parameters": [
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base frame of rotation model."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target frame of rotation model."
                            },
                            {
                                "name": "initial_orientation",
                                "type": "numpy.ndarray",
                                "description": "Orientation of target frame in base frame at initial time (constant throughout)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "rotation_model",
                "version": null,
                "simple": "\nFactory function for creating simple rotation model settings.\n\nFactory function for settings object, defining a basic rotation model with constant orientation of the rotation axis and constant rotation rate about this axis.\nRotation from original (inertial) to target (body-fixed) frame at some reference time ``initial_time`` is defined by the ``initial_orientation`` rotation matrix.\nRotation about the body-fixed z-axis is defined by the ``rotation_rate`` float variable (in rad/s).\nThis function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object.\n\n\nParameters\n----------\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Target frame of rotation model.\ninitial_orientation : numpy.ndarray\n    Orientation of target frame in base frame at initial time.\ninitial_time : float\n    Initial time (reference epoch for rotation matrices).\nrotation_rate : float\n    Constant rotation rate [rad/s] about rotational axis.\n\nReturns\n-------\ndescription\nNone\n\n",
                "simple_from_spice": "\nFactory function for creating simple rotation model settings using initial orientation and rotaton rates from Spice.\n\nFactory function for settings object, defining a simple rotation model with the added functionality that the initial orientation and rotation rate are extracted from Spice, as opposed to provided manually.\nNote that *only* the initial orientation and rotation rate ( at the time defined by `initial_time` ) are extracted from Spice.\nThe distinction between the two target frame inputs is the following\n\n  - the ``target_frame`` parameter is the name of frame that Tudat assigns to the body-fixed frame\n  - the ``target_frame_spice`` is the name of the frame in Spice for which the initial orientation and rotation rate are extracted.\n\nThis function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object.\n\n\nParameters\n----------\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Target frame of rotation model.\ntarget_frame_spice : str\n    Spice reference of target frame.\ninitial_time : float\n    Initial time (reference epoch for rotation matrices).\n\nReturns\n-------\ndescription\nNone\n\n",
                "synchronous": "\nFactory function for creating synchronous rotational ephemeris settings.\n\nFactory function for settings object, defining a synchronous rotation model where rotation of a body is defined from its relative orbit w.r.t. some central body. Specifically\n- the body-fixed x-axis is *always* pointing towards the central body\n- the body-fixed z-axis is *always* perpendicular to the orbital plane (along the direction of\n.. math:: \\mathbf{x} \\cross \\mathbf{v} )\n- the body-fixed y-axis completes the right-handed reference frame\n\nSuch a model can be useful for, for instance, approximate rotation of tidally locked natural satellites or nadir-pointing spacraft.\nThis function creates an instance of a `RotationModelSettings` derived `SynchronousRotationModelSettings` object.\n\n\nParameters\n----------\ncentral_body_name : str\n    Base frame of rotation model.\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Spice reference of target frame.\n\nReturns\n-------\ndescription\nNone\n\n",
                "spice": "\nFactory function for creating rotation model settings from the Spice interface.\n\nFactory function for settings object, defining a rotation model directly (and entirely) from Spice interface.\nThis function creates an instance of a `RotationModelSettings` object.\n\n\nParameters\n----------\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Target frame of rotation model.\n\nReturns\n-------\ndescription\nNone\n\n",
                "gcrs_to_itrs": "\nFactory function for creating high-accuracy Earth rotation model settings.\n\nFactory function for settings object, defining high-accuracy Earth rotation model according to the IERS 2010 Conventions.\nThis settings class has various options to deviate from the default settings, typical applications will use default.\nNote that for this model the original frame must be J2000 or GCRS (in the case of the former, the frame bias between GCRS and J2000 is automatically corrected for). The target frame (e.g. body-fixed frame) name is ITRS.\nThe precession-nutation theory may be `iau_2000a` / `iau_2000b` or `iau_2006`, as implemented in the SOFA toolbox. Alternative options to modify the input (not shown above) include the EOP correction file, input time scale, short period UT1 and polar motion variations.\nThe target frame (e.g. body-fixed frame) name is ITRS.\nThis function creates an instance of a `RotationModelSettings` derived `gcrsToItrsRotationModelSettings` object.\n\n\nParameters\n----------\nprecession_nutation_theory : default=tba::iau_2006\n    Setting theory for modelling Earth nutation.\n\nbase_frame : str, default='GCRS'\n    Base frame of rotation model\n\nReturns\n-------\ndescription\nNone\n\n",
                "constant": "\nFactory function for creating simple rotation model settings for target-frames with constant orientation.\n\nFactory function for settings object, defining simple rotation model setting objects with constant rotation matrix.\nThese model settings are for target frames which do not have a rotational rate in the base frame and are fully defined by their initial orientation.\nThis function creates an instance of a `RotationModelSettings` derived `SimpleRotationModelSettings` object.\n\n\nParameters\n----------\nbase_frame : str\n    Base frame of rotation model.\ntarget_frame : str\n    Target frame of rotation model.\ninitial_orientation : numpy.ndarray\n    Orientation of target frame in base frame at initial time (constant throughout).\n\nReturns\n-------\ndescription\nNone\n\n",
                "RotationModelSettings": {
                    "__docstring__": "\nBase class for providing settings for automatic rotation model creation.\n\nThis class is a functional base class for settings of rotation models that require no information in addition to their type.\nBasic rotation model has constant orientation of the rotation axis (body-fixed z-axis) and constant rotation rate about this axis.\nRotation models requiring additional information must be created using the factory functions which create the specific object derived from this base class.\n\n"
                }
            }
        },
        "propagation_setup": {
            "type": "package",
            "path": "./tudat-multidoc/docstrings/simulation/propagation_setup",
            "file": "__package__.yaml",
            "_implicit_name": "propagation_setup",
            "config": null,
            "summary": null,
            "extended_summary": null,
            "routine_listings": null,
            "see_also": null,
            "notes": null,
            "references": null,
            "examples": null,
            "classes": null,
            "functions": null,
            "constants": null,
            "modules": [
                "acceleration",
                "dependent_variable",
                "integrator",
                "mass_rate",
                "propagator",
                "torque"
            ],
            "name": "propagation_setup",
            "version": null,
            "acceleration": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/simulation/propagation_setup",
                "file": "acceleration.yaml",
                "_implicit_name": "acceleration",
                "config": null,
                "summary": null,
                "extended_summary": null,
                "routine_listings": null,
                "see_also": null,
                "notes": "None",
                "references": null,
                "examples": null,
                "classes": [
                    {
                        "name": "AccelerationSettings",
                        "short_summary": "Functional base class to define settings for accelerations.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "SphericalHarmonicAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for the spherical harmonic acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "MutualSphericalHarmonicAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for the mutual spherical harmonic acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "RelativisticAccelerationCorrectionSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for the relativistic acceleration correction.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "EmpiricalAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for the empirical acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "CustomAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for custom acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "DirectTidalDissipationAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "ThrustAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "direction_settings",
                                "type": "ThrustDirectionSettings",
                                "description": "Thrust direction settings object."
                            },
                            {
                                "name": "magnitude_settings",
                                "type": "ThrustMagnitudeSettings",
                                "description": "Thrust magnitude settings object."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "MomentumWheelDesaturationAccelerationSettings",
                        "short_summary": "`AccelerationSettings`-derived class to define settings for momentum wheel desaturation acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "ThrustDirectionSettings",
                        "short_summary": "Functional base class to define settings for the thrust direction.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "thrust_direction_type",
                                "type": "ThrustDirectionType",
                                "description": "Thrust direction type object."
                            },
                            {
                                "name": "relative_body",
                                "type": "str",
                                "description": "Body to which the thrust acceleration is applied."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "ThrustDirectionFromStateGuidanceSettings",
                        "short_summary": "`ThrustDirectionSettings`-derived class to define settings for the thrust direction from the current state.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "is_colinear_with_velocity",
                                "type": "bool",
                                "description": "Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false)."
                            },
                            {
                                "name": "direction_is_opposite_to_vector",
                                "type": "bool",
                                "description": "Whether the thrust is pointing towards the thrusting body (true) or the central body (false)."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "CustomThrustDirectionSettings",
                        "short_summary": "`ThrustDirectionSettings`-derived class to define settings for a custom thrust direction.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "thrust_direction_function",
                                "type": "Callable[[float], numpy.ndarray]",
                                "description": "Function of time returning the thrust direction in the inertial frame."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "CustomThrustOrientationSettings",
                        "short_summary": "`ThrustDirectionSettings`-derived class to define settings for a custom thrust orientation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "thrust_orientation_function",
                                "type": "Callable[[float], numpy.ndarray]",
                                "description": "Function of time returning the rotation between the thrust direction in the body-fixed frame to the inertial frame."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "MeeCostateBasedThrustDirectionSettings",
                        "short_summary": "`ThrustDirectionSettings`-derived class to define settings for the thrust direction from Modified Equinoctial Elements (MEE) costates.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "vehicle_name",
                                "type": "str",
                                "description": "Name of the body to which the thrust is applied."
                            },
                            {
                                "name": "costate_function",
                                "type": "Callable[[float], numpy.ndarray]",
                                "description": "Function of time returning the five costates."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "ThrustMagnitudeSettings",
                        "short_summary": "Functional base class to define settings for the thrust magnitude.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "thrust_magnitude_type",
                                "type": "ThrustMagnitudeType",
                                "description": "Thrust magnitude type object."
                            },
                            {
                                "name": "thrust_origin_id",
                                "type": "str",
                                "description": "Reference ID of the thrust origin that should be used (empty if N/A)."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "ConstantThrustMagnitudeSettings",
                        "short_summary": "`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "thrust_magnitude",
                                "type": "float",
                                "description": "Value of the constant thrust magnitude."
                            },
                            {
                                "name": "specific_impulse",
                                "type": "float",
                                "description": "Value of the constant specific impulse."
                            },
                            {
                                "name": "specific_impulse",
                                "type": "numpy.ndarray",
                                "description": "Thrust direction vector expressed in the body-fixed reference frame."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "FromFunctionThrustMagnitudeSettings",
                        "short_summary": "`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    }
                ],
                "functions": [
                    {
                        "name": "point_mass_gravity",
                        "short_summary": "Creates settings for the point-mass gravity acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for the point-mass gravity acceleration. The body exerting the acceleration needs to have a\ngravity field model defined.\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "aerodynamic",
                        "short_summary": "Creates settings for the aerodynamic acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for the aerodynamic acceleration. The body exerting the acceleration needs to have an\natmosphere defined.\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "cannonball_radiation_pressure",
                        "short_summary": "Creates settings for the cannonball radiation pressure acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for the radiation pressure acceleration, for which a cannonball model is used. In this model,\nthe effective acceleration is colinear with the vector connecting the source of radiation and the target.\nThe body undergoing the acceleration needs to have a radiation pressure model defined, while the body emitting\nradiation needs to have radiative properties defined (the Sun has default ones).\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic_gravity",
                        "short_summary": "Creates settings for the spherical harmonic gravity acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for the spherical harmonic gravity acceleration, accounting for a finite (given) number\nof degree and order. The body exerting the acceleration needs to have a spherical harmonic gravity field model\ndefined.\n",
                        "parameters": [
                            {
                                "name": "maximum_degree",
                                "type": "int",
                                "description": "Maximum degree of the spherical harmonic expansion."
                            },
                            {
                                "name": "maximum_order",
                                "type": "int",
                                "description": "Maximum order of the spherical harmonic expansion."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "mutual_spherical_harmonic_gravity",
                        "short_summary": "Creates settings for the mutual spherical harmonic gravity acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for the mutual spherical harmonic gravity acceleration, accounting for a finite (given) number\nof degree and order for both bodies. Both the body exerting the acceleration and the body undergoing it need to\nhave spherical harmonic gravity field models defined. In addition, the body undergoing the acceleration needs to\nhave a rotational model defined. For the case where a third-body mutual spherical harmonic acceleration,\nadditional parameters have to be provided that denote the expansion degree/order of the central body.\n",
                        "parameters": [
                            {
                                "name": "maximum_degree_body_exerting",
                                "type": "int",
                                "description": "Maximum degree of the spherical harmonic expansion for the body exerting the acceleration."
                            },
                            {
                                "name": "maximum_order_body_exerting",
                                "type": "int",
                                "description": "Maximum order of the spherical harmonic expansion for the body exerting the acceleration."
                            },
                            {
                                "name": "maximum_degree_body_undergoing",
                                "type": "int",
                                "description": "Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration."
                            },
                            {
                                "name": "maximum_order_body_undergoing",
                                "type": "int",
                                "description": "Maximum order of the spherical harmonic expansion for the body undergoing the acceleration."
                            },
                            {
                                "name": "maximum_degree_central_body",
                                "type": "int, default=0",
                                "description": "Maximum degree of the spherical harmonic expansion for the central body, if needed."
                            },
                            {
                                "name": "maximum_order_central_body",
                                "type": "int, default=0",
                                "description": "Maximum order of the spherical harmonic expansion for the central body, if needed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "relativistic_correction",
                        "short_summary": "Creates settings for the relativistic acceleration correction.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for typical relativistic acceleration corrections: the Schwarzschild, Lense-Thirring and de\nSitter terms (see 'General relativity and Space Geodesy' by L. Combrinck, 2012). It implements the model of\n2010 Conventions (chapter 10, section 3). Here, the \u2018primary body\u2019 for a planetary orbiter should always be set\nas the Sun (only relevant for de Sitter correction). The angular momentum vector of the orbited body is only\nrelevant for Lense-Thirring correction.\n",
                        "parameters": [
                            {
                                "name": "use_schwarzschild",
                                "type": "bool",
                                "description": "Maximum degree of the spherical harmonic expansion for the body exerting the acceleration."
                            },
                            {
                                "name": "use_lense_thirring",
                                "type": "bool",
                                "description": "Maximum order of the spherical harmonic expansion for the body exerting the acceleration."
                            },
                            {
                                "name": "use_de_sitter",
                                "type": "bool",
                                "description": "Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration."
                            },
                            {
                                "name": "de_sitter_central_body",
                                "type": "str, default=\"\"",
                                "description": "Maximum order of the spherical harmonic expansion for the body undergoing the acceleration."
                            },
                            {
                                "name": "lense_thirring_angular_momentum",
                                "type": "numpy.ndarray, default=numpy.array([0, 0, 0])",
                                "description": "Maximum degree of the spherical harmonic expansion for the central body, if needed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "empirical",
                        "short_summary": "Creates settings for empirical acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for empirical accelerations. These are expressed in the\nRSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).\nThe acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:\na constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of\nthe RSW frame.\n",
                        "parameters": [
                            {
                                "name": "constant_acceleration",
                                "type": "numpy.ndarray, default=numpy.array([0, 0, 0])",
                                "description": "Constant term, defined in the RSW frame."
                            },
                            {
                                "name": "sine_acceleration",
                                "type": "numpy.ndarray, default=numpy.array([0, 0, 0])",
                                "description": "Sine term (function of the true anomaly), defined in the RSW frame.."
                            },
                            {
                                "name": "cosine_acceleration",
                                "type": "numpy.ndarray, default=numpy.array([0, 0, 0])",
                                "description": "Cosine term (function of the true anomaly), defined in the RSW frame.."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom",
                        "short_summary": "Creates settings for custom acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for empirical accelerations. These are expressed in the\nRSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).\nThe acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:\na constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of\nthe RSW frame.\n",
                        "parameters": [
                            {
                                "name": "acceleration_function",
                                "type": "Callable[[float], list]",
                                "description": "Custom acceleration function with time as an independent variable."
                            },
                            {
                                "name": "scaling_function",
                                "type": "Callable[[float], float], default=None",
                                "description": "Scaling function with time as an independent variable to be multiplied by the custom acceleration function."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "direct_tidal_dissipation_acceleration",
                        "short_summary": "Creates settings for custom acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for tidal accelerations. The direct of tidal effects in a satellite system is applied directly as\nan acceleration (as opposed to a modification of spherical harmonic coefficients).\nThe model is based on Lainey et al. (2007, 2012). It can compute the acceleration due to tides, and in\nparticular tidal dissipation, on a planetary satellite. The acceleration computed can account for either the\neffect of tide raised on the satellite by the planet or on the planet by the satellite. The satellite is assumed\nto be tidally locked to the planet.\n",
                        "parameters": [
                            {
                                "name": "k2_love_number",
                                "type": "float",
                                "description": "Value of the k2 Love number."
                            },
                            {
                                "name": "time_lag",
                                "type": "float",
                                "description": "Value of the tidal time lag."
                            },
                            {
                                "name": "include_direct_radial_component",
                                "type": null,
                                "description": "It denotes whether the term independent of the time lag is to be computed."
                            },
                            {
                                "name": "use_tide_raised_on_planet",
                                "type": null,
                                "description": "It denotes whether the tide raised on the planet is to be modelled (if true) or the tide raised on the satellite (if false)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "momentum_wheel_desaturation_acceleration",
                        "short_summary": "Creates settings for momentum wheel desaturation acceleration.",
                        "deprecation_warning": null,
                        "extended_summary": "The acceleration model is purpose-built to represent short bursts of thrust, such as a momentum wheel desaturation.\nA typical use case is precise orbit determination, but the functionality can be used just as well in propagation\n(for instance to model an impulsive manuever in a continuous manner when going from preliminary modelling to\n'full' modelling). The thrust is modelled similarly to Fig. 3 of Alessi et al. (2012), with the main difference\nbeing that a third-order polynomial to go from zero acceleration to the maximum acceleration level is employed.\nBy using a 3rd-order polynomial and imposing continuity in the value and first derivative of the acceleration,\ndefining the 'rise time' (time it takes acceleration to go from 0 to its maximum level), the total time where\nthere is non-zero thrust ('total maneuver time'), and the total Delta V exerted by a single maneuver,\nthe acceleration profile is fully defined.\n",
                        "parameters": [
                            {
                                "name": "thrust_mid_times",
                                "type": "list[float]",
                                "description": "Set of middle point in times in the maneuver denoting the epoch of each maneuver."
                            },
                            {
                                "name": "delta_v_values",
                                "type": "list[numpy.ndarray]",
                                "description": "Set of delta V, one for each maneuver."
                            },
                            {
                                "name": "total_maneuver_time",
                                "type": null,
                                "description": "Total duration of every maneuver."
                            },
                            {
                                "name": "maneuver_rise_time",
                                "type": null,
                                "description": "Time taken by the acceleration to go from zero to its maximum level."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "thrust_acceleration",
                        "short_summary": "Creates settings for thrust acceleration from thrust guidance settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for thrust acceleration from thrust guidance settings. The thrust direction and magnitude are\nsupplied in the form of dedicated settings objects (see the API for the respective classes).\n",
                        "parameters": [
                            {
                                "name": "thrust_direction_settings",
                                "type": "ThrustDirectionSettings",
                                "description": "Thrust direction settings object."
                            },
                            {
                                "name": "thrust_magnitude_settings",
                                "type": "ThrustMagnitudeSettings",
                                "description": "Thrust magnitude settings object."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "thrust_acceleration",
                        "short_summary": "Creates settings for thrust acceleration from interpolated thrust data with variable magnitude.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for thrust acceleration from interpolated thrust data. The thrust direction is defined through\nthe related interpolator (which uses time as independent variable) and it returns the thrust direction vector in\nthe specified frame (it can be local or inertial). The variable thrust magnitude is computed from the specific impulse, given as a function of time.\n",
                        "parameters": [
                            {
                                "name": "data_interpolation_settings",
                                "type": "DataInterpolationSettings<float, numpy.ndarray>",
                                "description": "Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time."
                            },
                            {
                                "name": "specific_impulse_function",
                                "type": "Callable[[double], double]",
                                "description": "Specific impulse provided as a function of time."
                            },
                            {
                                "name": "thrust_frame",
                                "type": "ThrustFrames, default=unspecified_thrust_frame",
                                "description": "Frame in which the thrust direction vector is represented."
                            },
                            {
                                "name": "central_body",
                                "type": "str, default=\"\"",
                                "description": "Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "thrust_acceleration",
                        "short_summary": "Creates settings for thrust acceleration from interpolated thrust data with constant magnitudee.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates settings for thrust acceleration from interpolated thrust data. The thrust direction is defined through\nthe related interpolator (which uses time as independent variable) and it returns the thrust direction vector in\nthe specified frame (it can be local or inertial). The constant thrust magnitude is computed from the constant\nspecific impulse.\n",
                        "parameters": [
                            {
                                "name": "data_interpolation_settings",
                                "type": "DataInterpolationSettings<float, numpy.ndarray>",
                                "description": "Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time."
                            },
                            {
                                "name": "constant_specific_impulse",
                                "type": "float",
                                "description": "Constant specific impulse."
                            },
                            {
                                "name": "thrust_frame",
                                "type": "ThrustFrames, default=unspecified_thrust_frame",
                                "description": "Frame in which the thrust direction vector is represented."
                            },
                            {
                                "name": "central_body",
                                "type": "str, default=\"\"",
                                "description": "Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "get_propulsion_input_variables",
                        "short_summary": "Function to create a list of functions that compute and return independent variables for the thrust.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to create a list of functions that compute and return independent variables for thrust and/or specific\nimpulse. This parameterization is used to create a specific thrust magnitude type (see thrust magnitude from\ndependent variables). This function retrieves all input functions from the environment and a list of user-defined\nfunctions.\n",
                        "parameters": [
                            {
                                "name": "body_with_guidance",
                                "type": "Body",
                                "description": "Body object whose thrust guidance should be defined."
                            },
                            {
                                "name": "independent_variables",
                                "type": "List[ThrustIndependentVariables]",
                                "description": "Set of dependent variables that should be used to compute the thrust."
                            },
                            {
                                "name": "guidance_input_functions",
                                "type": "List[Callable[[], float], default=[]",
                                "description": "Set of functions to compute the thrust, each associated to a specific dependent variable."
                            }
                        ],
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "thrust_direction_from_state_guidance",
                        "short_summary": "Create thrust direction settings from the state guidance.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates thrust direction settings from the state guidance. In various simplified cases,\nthe thrust direction can be assumed to be in line with either the position or velocity of the body of interest\nwith respect to some other body.\n",
                        "parameters": [
                            {
                                "name": "central_body",
                                "type": "Body",
                                "description": "Central body with respect to which the position and velocity of the body undergoing the thrust acceleration are computed."
                            },
                            {
                                "name": "is_colinear_with_velocity",
                                "type": "bool",
                                "description": "Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false)."
                            },
                            {
                                "name": "direction_is_opposite_to_vector",
                                "type": "bool",
                                "description": "Whether the thrust is pointing towards the thrusting body (true) or the central body (false)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "thrust_from_existing_body_orientation",
                        "short_summary": "Create thrust direction settings from the existing body orientation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates thrust direction settings from the existing body orientation. In some cases,\nthe vehicle\u2019s orientation may be predetermined, either due to aerodynamic guidance or to the concurrent\npropagation of the rotational equations of motion. In such a case, the thrust direction is computed from the\nbody-fixed thrust direction (defined in ThrustMagnitudeSettings) and the existing vehicle orientation.\n",
                        "parameters": null,
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_thrust_orientation",
                        "short_summary": "Create custom thrust orientation settings, expressed as a rotation matrix.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates custom thrust orientation settings, expressed through a rotation matrix.\nAs an alternative expression for generalized thrust direction guidance, the thrust orientation can be defined as\nan arbitrary function of time. As with the custom thrust direction, this allows a broad range of options to be\ndefined, at the expense of increased complexity (somehow the thrust orientation needs to be manually defined).\nThe thrust orientation is provided through a rotation matrix representing the rotation\nfrom body-fixed thrust direction to the inertial thrust direction.\n",
                        "parameters": [
                            {
                                "name": "thrust_orientation_function",
                                "type": "Callable[[float], numpy.ndarray]",
                                "description": "Function of time returning the matrix representing the rotation between the thrust direction in the body-fixed frame to the inertial frame."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_thrust_direction",
                        "short_summary": "Create custom thrust direction settings, expressed as a vector in the inertial frame.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates custom thrust direction settings, expressed as a unit vector in the inertial frame.\nFor a generalized thrust direction guidance, the thrust can be defined as an arbitrary function of time.\nThis allows a broad range of options to be defined, at the expense of increased complexity (somehow the thrust\ndirection needs to be manually defined).\n",
                        "parameters": [
                            {
                                "name": "thrust_direction_function",
                                "type": "Callable[[float], numpy.ndarray]",
                                "description": "Function of time returning the thrust direction in the inertial frame."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_thrust_direction",
                        "short_summary": "Create thrust direction settings, expressed through modified equinoctial elements costates.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates thrust direction settings, expressed through modified equinoctial elements costates.\nBy using these settings for the thrust direction, the so-called co-states of the Modified Equinoctial elements\nare used to determine the direction of the thrust. Details of this model are given by Kluever (2010),\nBoudestijn (2014) and Hogervorst (2017). This function takes variable costates as an interpolator over time.\n",
                        "parameters": [
                            {
                                "name": "vehicle_name",
                                "type": "str",
                                "description": "Name of the body undergoing thrust."
                            },
                            {
                                "name": "central_body_name",
                                "type": "str",
                                "description": "Name of the central body with respect to which the Modified Equinoctial Elements are computed."
                            },
                            {
                                "name": "costate_interpolator",
                                "type": "OneDimensionalInterpolator<float, numpy.ndarray>",
                                "description": "Interpolator object returning the five costates with time as an independent variable."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_thrust_direction",
                        "short_summary": "Create thrust direction settings, expressed through modified equinoctial elements costates.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates thrust direction settings, expressed through modified equinoctial elements costates.\nBy using these settings for the thrust direction, the so-called co-states of the Modified Equinoctial elements\nare used to determine the direction of the thrust. Details of this model are given by Kluever (2010),\nBoudestijn (2014) and Hogervorst (2017). This function takes constant costates.\n",
                        "parameters": [
                            {
                                "name": "vehicle_name",
                                "type": "str",
                                "description": "Name of the body undergoing thrust."
                            },
                            {
                                "name": "central_body_name",
                                "type": "str",
                                "description": "Name of the central body with respect to which the Modified Equinoctial Elements are computed."
                            },
                            {
                                "name": "constant_costates",
                                "type": "numpy.ndarray",
                                "description": "Set of five constant costates."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_thrust_magnitude",
                        "short_summary": "Create thrust magnitude settings from a custom thrust magnitude function.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates constant thrust magnitude settings. The specific impulse to use for the thrust is\nalso supplied when applying a mass rate model in the propagation of the vehicle dynamics, relating the thrust\nto the mass decrease of the vehicle.\n",
                        "parameters": [
                            {
                                "name": "thrust_magnitude",
                                "type": "float",
                                "description": "Value of the constant thrust magnitude."
                            },
                            {
                                "name": "specific_impulse",
                                "type": "float",
                                "description": "Value of the constant specific impulse, used to link the thrust model to the mass propagation."
                            },
                            {
                                "name": "body_fixed_thrust_direction",
                                "type": "numpy.ndarray, default=numpy.ndarray([])",
                                "description": "Constant body-fixed thrust direction (positive x-direction by default). Note that this should be a unit-vector representing the direction opposite to the nozzle direction."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_thrust_magnitude",
                        "short_summary": "Create thrust magnitude settings from a custom thrust magnitude function.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function that creates thrust magnitude from a custom thrust magnitude function.\nThis model defines a thrust force and specific impulse that can vary with time. The specific impulse is also\nprovided to apply a mass rate model in the propagation the vehicle dynamics, relating the thrust to the mass\ndecrease of the vehicle. Note that, if you wish to use a constant value for any or all of the first three\narguments, lambda expression can be used. Presently, the definition of the thrust direction in the body-fixed\nframe is also defined through these derived classes. In essence, the ThrustMagnitudeSettings defines all local\n(to the vehicle systems) settings for the thrust, while ThrustDirectionGuidanceSettings defines how the full\nvehicle must orient itself in space for the required thrust direction to be achieved. At present, there is no\ndirect option for thrust-vector control (i.e. modifying the thrust direction in the body-fixed frame).\n",
                        "parameters": [
                            {
                                "name": "thrust_magnitude_function",
                                "type": "Callable[[float], float]",
                                "description": "Function of time returning the value of the thrust magnitude."
                            },
                            {
                                "name": "specific_impulse_function",
                                "type": "Callable[[float], float]",
                                "description": "Function of time returning the value of the specific impulse, useful to link the mass propagation to the thrust model."
                            },
                            {
                                "name": "is_engine_on_function",
                                "type": "Callable[[float], bool], default=lambda t: true",
                                "description": "Function of time returning a boolean, denoting  whether the thrust should be engaged at all (e.g. thrust is 0 N if it returns false). It is useful to link the mass propagation to the thrust model."
                            },
                            {
                                "name": "body_fixed_thrust_direction",
                                "type": null,
                                "description": null
                            },
                            {
                                "name": "Callable[[], numpy.ndarray], default=lambda t: numpy.ndarray([])",
                                "type": null,
                                "description": "Constant body-fixed thrust direction (positive x-direction by default). Note that this function should be a unit-vector representing the direction opposite to the nozzle direction. This setting can be used to incorporate thrust-vector control (TVC) into the thrust."
                            },
                            {
                                "name": "custom_thrust_reset_function",
                                "type": "Callable[[float], ], default=lambda t: None",
                                "description": "Function of time that updates any relevant aspects of the environment/system models, called before retrieving the thrust magnitude, specific impulse, and body-fixed thrust direction."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "acceleration",
                "version": null,
                "point_mass_gravity": "\nCreates settings for the point-mass gravity acceleration.\n\nCreates settings for the point-mass gravity acceleration. The body exerting the acceleration needs to have a\ngravity field model defined.\n\n\nReturns\n-------\ndescription\nNone\n\n",
                "aerodynamic": "\nCreates settings for the aerodynamic acceleration.\n\nCreates settings for the aerodynamic acceleration. The body exerting the acceleration needs to have an\natmosphere defined.\n\n\nReturns\n-------\ndescription\nNone\n\n",
                "cannonball_radiation_pressure": "\nCreates settings for the cannonball radiation pressure acceleration.\n\nCreates settings for the radiation pressure acceleration, for which a cannonball model is used. In this model,\nthe effective acceleration is colinear with the vector connecting the source of radiation and the target.\nThe body undergoing the acceleration needs to have a radiation pressure model defined, while the body emitting\nradiation needs to have radiative properties defined (the Sun has default ones).\n\n\nReturns\n-------\ndescription\nNone\n\n",
                "spherical_harmonic_gravity": "\nCreates settings for the spherical harmonic gravity acceleration.\n\nCreates settings for the spherical harmonic gravity acceleration, accounting for a finite (given) number\nof degree and order. The body exerting the acceleration needs to have a spherical harmonic gravity field model\ndefined.\n\n\nParameters\n----------\nmaximum_degree : int\n    Maximum degree of the spherical harmonic expansion.\nmaximum_order : int\n    Maximum order of the spherical harmonic expansion.\n\nReturns\n-------\ndescription\nNone\n\n",
                "mutual_spherical_harmonic_gravity": "\nCreates settings for the mutual spherical harmonic gravity acceleration.\n\nCreates settings for the mutual spherical harmonic gravity acceleration, accounting for a finite (given) number\nof degree and order for both bodies. Both the body exerting the acceleration and the body undergoing it need to\nhave spherical harmonic gravity field models defined. In addition, the body undergoing the acceleration needs to\nhave a rotational model defined. For the case where a third-body mutual spherical harmonic acceleration,\nadditional parameters have to be provided that denote the expansion degree/order of the central body.\n\n\nParameters\n----------\nmaximum_degree_body_exerting : int\n    Maximum degree of the spherical harmonic expansion for the body exerting the acceleration.\nmaximum_order_body_exerting : int\n    Maximum order of the spherical harmonic expansion for the body exerting the acceleration.\nmaximum_degree_body_undergoing : int\n    Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration.\nmaximum_order_body_undergoing : int\n    Maximum order of the spherical harmonic expansion for the body undergoing the acceleration.\nmaximum_degree_central_body : int, default=0\n    Maximum degree of the spherical harmonic expansion for the central body, if needed.\nmaximum_order_central_body : int, default=0\n    Maximum order of the spherical harmonic expansion for the central body, if needed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "relativistic_correction": "\nCreates settings for the relativistic acceleration correction.\n\nCreates settings for typical relativistic acceleration corrections: the Schwarzschild, Lense-Thirring and de\nSitter terms (see 'General relativity and Space Geodesy' by L. Combrinck, 2012). It implements the model of\n2010 Conventions (chapter 10, section 3). Here, the \u2018primary body\u2019 for a planetary orbiter should always be set\nas the Sun (only relevant for de Sitter correction). The angular momentum vector of the orbited body is only\nrelevant for Lense-Thirring correction.\n\n\nParameters\n----------\nuse_schwarzschild : bool\n    Maximum degree of the spherical harmonic expansion for the body exerting the acceleration.\nuse_lense_thirring : bool\n    Maximum order of the spherical harmonic expansion for the body exerting the acceleration.\nuse_de_sitter : bool\n    Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration.\nde_sitter_central_body : str, default=\"\"\n    Maximum order of the spherical harmonic expansion for the body undergoing the acceleration.\nlense_thirring_angular_momentum : numpy.ndarray, default=numpy.array([0, 0, 0])\n    Maximum degree of the spherical harmonic expansion for the central body, if needed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "empirical": "\nCreates settings for empirical acceleration.\n\nCreates settings for empirical accelerations. These are expressed in the\nRSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).\nThe acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:\na constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of\nthe RSW frame.\n\n\nParameters\n----------\nconstant_acceleration : numpy.ndarray, default=numpy.array([0, 0, 0])\n    Constant term, defined in the RSW frame.\nsine_acceleration : numpy.ndarray, default=numpy.array([0, 0, 0])\n    Sine term (function of the true anomaly), defined in the RSW frame..\ncosine_acceleration : numpy.ndarray, default=numpy.array([0, 0, 0])\n    Cosine term (function of the true anomaly), defined in the RSW frame..\n\nReturns\n-------\ndescription\nNone\n\n",
                "custom": "\nCreates settings for custom acceleration.\n\nCreates settings for empirical accelerations. These are expressed in the\nRSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).\nThe acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:\na constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of\nthe RSW frame.\n\n\nParameters\n----------\nacceleration_function : Callable[[float], list]\n    Custom acceleration function with time as an independent variable.\nscaling_function : Callable[[float], float], default=None\n    Scaling function with time as an independent variable to be multiplied by the custom acceleration function.\n\nReturns\n-------\ndescription\nNone\n\n",
                "direct_tidal_dissipation_acceleration": "\nCreates settings for custom acceleration.\n\nCreates settings for tidal accelerations. The direct of tidal effects in a satellite system is applied directly as\nan acceleration (as opposed to a modification of spherical harmonic coefficients).\nThe model is based on Lainey et al. (2007, 2012). It can compute the acceleration due to tides, and in\nparticular tidal dissipation, on a planetary satellite. The acceleration computed can account for either the\neffect of tide raised on the satellite by the planet or on the planet by the satellite. The satellite is assumed\nto be tidally locked to the planet.\n\n\nParameters\n----------\nk2_love_number : float\n    Value of the k2 Love number.\ntime_lag : float\n    Value of the tidal time lag.\ninclude_direct_radial_component\n    It denotes whether the term independent of the time lag is to be computed.\nuse_tide_raised_on_planet\n    It denotes whether the tide raised on the planet is to be modelled (if true) or the tide raised on the satellite (if false).\n\nReturns\n-------\ndescription\nNone\n\n",
                "momentum_wheel_desaturation_acceleration": "\nCreates settings for momentum wheel desaturation acceleration.\n\nThe acceleration model is purpose-built to represent short bursts of thrust, such as a momentum wheel desaturation.\nA typical use case is precise orbit determination, but the functionality can be used just as well in propagation\n(for instance to model an impulsive manuever in a continuous manner when going from preliminary modelling to\n'full' modelling). The thrust is modelled similarly to Fig. 3 of Alessi et al. (2012), with the main difference\nbeing that a third-order polynomial to go from zero acceleration to the maximum acceleration level is employed.\nBy using a 3rd-order polynomial and imposing continuity in the value and first derivative of the acceleration,\ndefining the 'rise time' (time it takes acceleration to go from 0 to its maximum level), the total time where\nthere is non-zero thrust ('total maneuver time'), and the total Delta V exerted by a single maneuver,\nthe acceleration profile is fully defined.\n\n\nParameters\n----------\nthrust_mid_times : list[float]\n    Set of middle point in times in the maneuver denoting the epoch of each maneuver.\ndelta_v_values : list[numpy.ndarray]\n    Set of delta V, one for each maneuver.\ntotal_maneuver_time\n    Total duration of every maneuver.\nmaneuver_rise_time\n    Time taken by the acceleration to go from zero to its maximum level.\n\nReturns\n-------\ndescription\nNone\n\n",
                "thrust_acceleration": {
                    "overloaded": true,
                    "overloads": 3,
                    "0": "\nCreates settings for thrust acceleration from thrust guidance settings.\n\nCreates settings for thrust acceleration from thrust guidance settings. The thrust direction and magnitude are\nsupplied in the form of dedicated settings objects (see the API for the respective classes).\n\n\nParameters\n----------\nthrust_direction_settings : ThrustDirectionSettings\n    Thrust direction settings object.\nthrust_magnitude_settings : ThrustMagnitudeSettings\n    Thrust magnitude settings object.\n\nReturns\n-------\ndescription\nNone\n\n",
                    "1": "\nCreates settings for thrust acceleration from interpolated thrust data with variable magnitude.\n\nCreates settings for thrust acceleration from interpolated thrust data. The thrust direction is defined through\nthe related interpolator (which uses time as independent variable) and it returns the thrust direction vector in\nthe specified frame (it can be local or inertial). The variable thrust magnitude is computed from the specific impulse, given as a function of time.\n\n\nParameters\n----------\ndata_interpolation_settings : DataInterpolationSettings<float, numpy.ndarray>\n    Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time.\nspecific_impulse_function : Callable[[double], double]\n    Specific impulse provided as a function of time.\nthrust_frame : ThrustFrames, default=unspecified_thrust_frame\n    Frame in which the thrust direction vector is represented.\ncentral_body : str, default=\"\"\n    Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "2": "\nCreates settings for thrust acceleration from interpolated thrust data with constant magnitudee.\n\nCreates settings for thrust acceleration from interpolated thrust data. The thrust direction is defined through\nthe related interpolator (which uses time as independent variable) and it returns the thrust direction vector in\nthe specified frame (it can be local or inertial). The constant thrust magnitude is computed from the constant\nspecific impulse.\n\n\nParameters\n----------\ndata_interpolation_settings : DataInterpolationSettings<float, numpy.ndarray>\n    Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time.\nconstant_specific_impulse : float\n    Constant specific impulse.\nthrust_frame : ThrustFrames, default=unspecified_thrust_frame\n    Frame in which the thrust direction vector is represented.\ncentral_body : str, default=\"\"\n    Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default).\n\nReturns\n-------\ndescription\nNone\n\n"
                },
                "get_propulsion_input_variables": "\nFunction to create a list of functions that compute and return independent variables for the thrust.\n\nFunction to create a list of functions that compute and return independent variables for thrust and/or specific\nimpulse. This parameterization is used to create a specific thrust magnitude type (see thrust magnitude from\ndependent variables). This function retrieves all input functions from the environment and a list of user-defined\nfunctions.\n\n\nParameters\n----------\nbody_with_guidance : Body\n    Body object whose thrust guidance should be defined.\nindependent_variables : List[ThrustIndependentVariables]\n    Set of dependent variables that should be used to compute the thrust.\nguidance_input_functions : List[Callable[[], float], default=[]\n    Set of functions to compute the thrust, each associated to a specific dependent variable.\n",
                "thrust_direction_from_state_guidance": "\nCreate thrust direction settings from the state guidance.\n\nFactory function that creates thrust direction settings from the state guidance. In various simplified cases,\nthe thrust direction can be assumed to be in line with either the position or velocity of the body of interest\nwith respect to some other body.\n\n\nParameters\n----------\ncentral_body : Body\n    Central body with respect to which the position and velocity of the body undergoing the thrust acceleration are computed.\nis_colinear_with_velocity : bool\n    Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false).\ndirection_is_opposite_to_vector : bool\n    Whether the thrust is pointing towards the thrusting body (true) or the central body (false).\n\nReturns\n-------\ndescription\nNone\n\n",
                "thrust_from_existing_body_orientation": "\nCreate thrust direction settings from the existing body orientation.\n\nFactory function that creates thrust direction settings from the existing body orientation. In some cases,\nthe vehicle\u2019s orientation may be predetermined, either due to aerodynamic guidance or to the concurrent\npropagation of the rotational equations of motion. In such a case, the thrust direction is computed from the\nbody-fixed thrust direction (defined in ThrustMagnitudeSettings) and the existing vehicle orientation.\n\n",
                "custom_thrust_orientation": "\nCreate custom thrust orientation settings, expressed as a rotation matrix.\n\nFactory function that creates custom thrust orientation settings, expressed through a rotation matrix.\nAs an alternative expression for generalized thrust direction guidance, the thrust orientation can be defined as\nan arbitrary function of time. As with the custom thrust direction, this allows a broad range of options to be\ndefined, at the expense of increased complexity (somehow the thrust orientation needs to be manually defined).\nThe thrust orientation is provided through a rotation matrix representing the rotation\nfrom body-fixed thrust direction to the inertial thrust direction.\n\n\nParameters\n----------\nthrust_orientation_function : Callable[[float], numpy.ndarray]\n    Function of time returning the matrix representing the rotation between the thrust direction in the body-fixed frame to the inertial frame.\n\nReturns\n-------\ndescription\nNone\n\n",
                "custom_thrust_direction": {
                    "overloaded": true,
                    "overloads": 3,
                    "0": "\nCreate custom thrust direction settings, expressed as a vector in the inertial frame.\n\nFactory function that creates custom thrust direction settings, expressed as a unit vector in the inertial frame.\nFor a generalized thrust direction guidance, the thrust can be defined as an arbitrary function of time.\nThis allows a broad range of options to be defined, at the expense of increased complexity (somehow the thrust\ndirection needs to be manually defined).\n\n\nParameters\n----------\nthrust_direction_function : Callable[[float], numpy.ndarray]\n    Function of time returning the thrust direction in the inertial frame.\n\nReturns\n-------\ndescription\nNone\n\n",
                    "1": "\nCreate thrust direction settings, expressed through modified equinoctial elements costates.\n\nFactory function that creates thrust direction settings, expressed through modified equinoctial elements costates.\nBy using these settings for the thrust direction, the so-called co-states of the Modified Equinoctial elements\nare used to determine the direction of the thrust. Details of this model are given by Kluever (2010),\nBoudestijn (2014) and Hogervorst (2017). This function takes variable costates as an interpolator over time.\n\n\nParameters\n----------\nvehicle_name : str\n    Name of the body undergoing thrust.\ncentral_body_name : str\n    Name of the central body with respect to which the Modified Equinoctial Elements are computed.\ncostate_interpolator : OneDimensionalInterpolator<float, numpy.ndarray>\n    Interpolator object returning the five costates with time as an independent variable.\n\nReturns\n-------\ndescription\nNone\n\n",
                    "2": "\nCreate thrust direction settings, expressed through modified equinoctial elements costates.\n\nFactory function that creates thrust direction settings, expressed through modified equinoctial elements costates.\nBy using these settings for the thrust direction, the so-called co-states of the Modified Equinoctial elements\nare used to determine the direction of the thrust. Details of this model are given by Kluever (2010),\nBoudestijn (2014) and Hogervorst (2017). This function takes constant costates.\n\n\nParameters\n----------\nvehicle_name : str\n    Name of the body undergoing thrust.\ncentral_body_name : str\n    Name of the central body with respect to which the Modified Equinoctial Elements are computed.\nconstant_costates : numpy.ndarray\n    Set of five constant costates.\n\nReturns\n-------\ndescription\nNone\n\n"
                },
                "custom_thrust_magnitude": {
                    "overloaded": true,
                    "overloads": 2,
                    "0": "\nCreate thrust magnitude settings from a custom thrust magnitude function.\n\nFactory function that creates constant thrust magnitude settings. The specific impulse to use for the thrust is\nalso supplied when applying a mass rate model in the propagation of the vehicle dynamics, relating the thrust\nto the mass decrease of the vehicle.\n\n\nParameters\n----------\nthrust_magnitude : float\n    Value of the constant thrust magnitude.\nspecific_impulse : float\n    Value of the constant specific impulse, used to link the thrust model to the mass propagation.\nbody_fixed_thrust_direction : numpy.ndarray, default=numpy.ndarray([])\n    Constant body-fixed thrust direction (positive x-direction by default). Note that this should be a unit-vector representing the direction opposite to the nozzle direction.\n\nReturns\n-------\ndescription\nNone\n\n",
                    "1": "\nCreate thrust magnitude settings from a custom thrust magnitude function.\n\nFactory function that creates thrust magnitude from a custom thrust magnitude function.\nThis model defines a thrust force and specific impulse that can vary with time. The specific impulse is also\nprovided to apply a mass rate model in the propagation the vehicle dynamics, relating the thrust to the mass\ndecrease of the vehicle. Note that, if you wish to use a constant value for any or all of the first three\narguments, lambda expression can be used. Presently, the definition of the thrust direction in the body-fixed\nframe is also defined through these derived classes. In essence, the ThrustMagnitudeSettings defines all local\n(to the vehicle systems) settings for the thrust, while ThrustDirectionGuidanceSettings defines how the full\nvehicle must orient itself in space for the required thrust direction to be achieved. At present, there is no\ndirect option for thrust-vector control (i.e. modifying the thrust direction in the body-fixed frame).\n\n\nParameters\n----------\nthrust_magnitude_function : Callable[[float], float]\n    Function of time returning the value of the thrust magnitude.\nspecific_impulse_function : Callable[[float], float]\n    Function of time returning the value of the specific impulse, useful to link the mass propagation to the thrust model.\nis_engine_on_function : Callable[[float], bool], default=lambda t: true\n    Function of time returning a boolean, denoting  whether the thrust should be engaged at all (e.g. thrust is 0 N if it returns false). It is useful to link the mass propagation to the thrust model.\nbody_fixed_thrust_direction\n    None\nCallable[[], numpy.ndarray], default=lambda t: numpy.ndarray([])\n    Constant body-fixed thrust direction (positive x-direction by default). Note that this function should be a unit-vector representing the direction opposite to the nozzle direction. This setting can be used to incorporate thrust-vector control (TVC) into the thrust.\ncustom_thrust_reset_function : Callable[[float], ], default=lambda t: None\n    Function of time that updates any relevant aspects of the environment/system models, called before retrieving the thrust magnitude, specific impulse, and body-fixed thrust direction.\n\nReturns\n-------\ndescription\nNone\n\n"
                },
                "AccelerationSettings": {
                    "__docstring__": "\nFunctional base class to define settings for accelerations.\n\n"
                },
                "SphericalHarmonicAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for the spherical harmonic acceleration.\n\n"
                },
                "MutualSphericalHarmonicAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for the mutual spherical harmonic acceleration.\n\n"
                },
                "RelativisticAccelerationCorrectionSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for the relativistic acceleration correction.\n\n"
                },
                "EmpiricalAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for the empirical acceleration.\n\n"
                },
                "CustomAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for custom acceleration.\n\n"
                },
                "DirectTidalDissipationAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration.\n\n"
                },
                "ThrustAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration.\n\n"
                },
                "MomentumWheelDesaturationAccelerationSettings": {
                    "__docstring__": "\n`AccelerationSettings`-derived class to define settings for momentum wheel desaturation acceleration.\n\n"
                },
                "ThrustDirectionSettings": {
                    "__docstring__": "\nFunctional base class to define settings for the thrust direction.\n\n"
                },
                "ThrustDirectionFromStateGuidanceSettings": {
                    "__docstring__": "\n`ThrustDirectionSettings`-derived class to define settings for the thrust direction from the current state.\n\n"
                },
                "CustomThrustDirectionSettings": {
                    "__docstring__": "\n`ThrustDirectionSettings`-derived class to define settings for a custom thrust direction.\n\n"
                },
                "CustomThrustOrientationSettings": {
                    "__docstring__": "\n`ThrustDirectionSettings`-derived class to define settings for a custom thrust orientation.\n\n"
                },
                "MeeCostateBasedThrustDirectionSettings": {
                    "__docstring__": "\n`ThrustDirectionSettings`-derived class to define settings for the thrust direction from Modified Equinoctial Elements (MEE) costates.\n\n"
                },
                "ThrustMagnitudeSettings": {
                    "__docstring__": "\nFunctional base class to define settings for the thrust magnitude.\n\n"
                },
                "ConstantThrustMagnitudeSettings": {
                    "__docstring__": "\n`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude.\n\n"
                },
                "FromFunctionThrustMagnitudeSettings": {
                    "__docstring__": "\n`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude.\n\n"
                }
            },
            "dependent_variable": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/simulation/propagation_setup",
                "file": "dependent_variable.yaml",
                "_implicit_name": "dependent_variable",
                "config": null,
                "summary": null,
                "extended_summary": null,
                "routine_listings": null,
                "see_also": null,
                "notes": "None",
                "references": null,
                "examples": null,
                "classes": [
                    {
                        "name": "VariableSettings",
                        "short_summary": "Functional base class to define settings for variables.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "SingleDependentVariableSaveSettings",
                        "short_summary": "`VariableSettings`-derived class to define settings for dependent variables that are to be saved during propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "SingleAccelerationDependentVariableSaveSettings",
                        "short_summary": "`SingleDependentVariableSaveSettings`-derived class to save a single acceleration (norm or vector) during propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    }
                ],
                "functions": [
                    {
                        "name": "create",
                        "short_summary": "Function to create settings for a generic dependent variable.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to create settings for a dependent variable. It creates objects that calculate dependent variables\nfrom the objects that define their settings. It is usually not relevant nor useful for the user.\n",
                        "parameters": [
                            {
                                "name": "dependent_variable_list",
                                "type": "List[SingleDependentVariableSaveSettings]",
                                "description": "List of dependent variables to be saved."
                            },
                            {
                                "name": "print_variable_indices",
                                "type": "bool, default=True",
                                "description": "Whether the types of dependent variables to be saved should be printed on the terminal."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "mach_number",
                        "short_summary": "Function to add the Mach number to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the Mach number to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with atmosphere with respect to which the Mach number is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "altitude",
                        "short_summary": "Function to add the altitude to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the altitude to the dependent variables to save. It requires an aerodynamic acceleration to be acting on the vehicle and it depends on the central body's shape.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with atmosphere with respect to which the altitude is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "airspeed",
                        "short_summary": "Function to add the airspeed to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the airspeed to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with atmosphere with respect to which the airspeed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "density",
                        "short_summary": "Function to add the local density to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the density (at position of body undergoing acceleration) to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "body_with_atmosphere",
                                "type": "str",
                                "description": "Body with atmosphere with respect to which the density is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "relative_speed",
                        "short_summary": "Function to add the relative speed (norm of the velocity vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the relative speed (norm of the velocity vector) with respect to a second body to the dependent variables to save. The relative speed is computed between the bodies' centers of mass.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "relative_body",
                                "type": "str",
                                "description": "Body with respect to which the relative speed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "relative_speed",
                        "short_summary": "Function to add the relative position vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the relative position vector with respect to a second body to the dependent variables to save. The relative position is computed between the bodies' centers of mass.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "relative_body",
                                "type": "str",
                                "description": "Body with respect to which the relative position is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "relative_distance",
                        "short_summary": "Function to add the relative distance (norm of the position vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the relative distance (norm of the position vector) with respect to a second body to the dependent variables to save. The relative distance is computed between the bodies' centers of mass.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "relative_body",
                                "type": "str",
                                "description": "Body with respect to which the relative distance is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "relative_velocity",
                        "short_summary": "Function to add the relative velocity vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the relative velocity vector with respect to a second body to the dependent variables to save. The relative distance is computed between the bodies' centers of mass.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "relative_body",
                                "type": "str",
                                "description": "Body with respect to which the relative velocity is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "keplerian_state",
                        "short_summary": "Function to add the Keplerian state to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the Keplerian state to the dependent variables to save. The Keplerian state is returned in this order: 1: Semi-major Axis. 2: Eccentricity. 3: Inclination. 4: Argument of Periapsis. 5. Right Ascension of the Ascending Node. 6: True Anomaly.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the Keplerian state is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "modified_equinoctial_state",
                        "short_summary": "Function to add the modified equinoctial state to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the modified equinoctial state to the dependent variables to save. The value of the parameter I is automatically chosen as +1 or -1, depending on whether the inclination is smaller or larger than 90 degrees.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the modified equinoctial state is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_acceleration",
                        "short_summary": "Function to add an acceleration vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add an acceleration vector to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "acceleration_type",
                                "type": "AvailableAcceleration",
                                "description": "Acceleration type to be saved."
                            },
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_acceleration_norm",
                        "short_summary": "Function to add a scalar acceleration (norm of the acceleration vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add a scalar acceleration (norm of the acceleration vector) to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "acceleration_type",
                                "type": "AvailableAcceleration",
                                "description": "Acceleration type to be saved (see `AvailableAcceleration` enum)."
                            },
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_acceleration_norm",
                        "short_summary": "Function to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_acceleration",
                        "short_summary": "Function to add the total acceleration vector acting on a body to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total acceleration vector acting on a body to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_torque_norm",
                        "short_summary": "Function to add a single torque (norm of the torque vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add a single torque (norm of the torque vector) to the dependent variables to save. The altitude depends on the shape of the central body.",
                        "parameters": [
                            {
                                "name": "torque_type",
                                "type": "AvailableTorque",
                                "description": "Torque type to be saved."
                            },
                            {
                                "name": "body_undergoing_torque",
                                "type": "str",
                                "description": "Body undergoing torque."
                            },
                            {
                                "name": "body_exerting_torque",
                                "type": "str",
                                "description": "Body exerting torque."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_torque",
                        "short_summary": "Function to add a single torque vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add a single torque vector to the dependent variables to save. The altitude depends on the shape of the central body.",
                        "parameters": [
                            {
                                "name": "torque_type",
                                "type": "AvailableTorque",
                                "description": "Torque type to be saved."
                            },
                            {
                                "name": "body_undergoing_torque",
                                "type": "str",
                                "description": "Body undergoing torque."
                            },
                            {
                                "name": "body_exerting_torque",
                                "type": "str",
                                "description": "Body exerting torque."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_torque_norm",
                        "short_summary": "Function to add the total torque (norm of the torque vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total torque (norm of the torque vector) to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_torque",
                        "short_summary": "Function to add the total torque vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total torque vector to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic_terms_acceleration",
                        "short_summary": "Function to add a single term of the spherical harmonic acceleration vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add single term of the spherical harmonic acceleration vector to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting acceleration."
                            },
                            {
                                "name": "component_indices",
                                "type": "list[tuple]",
                                "description": "Tuples of (degree, order) indicating the terms to save."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic_terms_acceleration_norm",
                        "short_summary": "Function to add a single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting acceleration."
                            },
                            {
                                "name": "component_indices",
                                "type": "list[tuple]",
                                "description": "Tuples of (degree, order) indicating the terms to save."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "aerodynamic_force_coefficients",
                        "short_summary": "Function to add the aerodynamic force coefficients to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the aerodynamic force coefficients to the dependent variables to save. It requires an aerodynamic acceleration acting on the vehicle. The coefficients are returned in the following order: drag force, side force, lift force.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "aerodynamic_moment_coefficients",
                        "short_summary": "Function to add the aerodynamic moment coefficients to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the aerodynamic force coefficients to the dependent variables to save. It requires an aerodynamic torque acting on the vehicle. The coefficients are returned in the following order: C_l, C_m, C_n (respectively about the X, Y, Z axes of the body-fixed frame, see Mooij 1994).",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body undergoing acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "latitude",
                        "short_summary": "Function to add the latitude to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the latitude to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the latitude is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "geodetic_latitude",
                        "short_summary": "Function to add the geodetic latitude to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the geodetic latitude to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the geodetic latitude is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "longitude",
                        "short_summary": "Function to add the longitude to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the longitude to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the longitude is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "heading_angle",
                        "short_summary": "Function to add the heading angle to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the heading angle to the dependent variables to save. The heading angle is the angle between the X-axis of the vertical frame and the XZ-plane in the groundspeed-based trajectory frame (see Mooij, 1994).",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the heading angle is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "flight_path_angle",
                        "short_summary": "Function to add the flight path angle to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the flight path angle to the dependent variables to save. The flight path angle is the angle between the X-axis of the groundspeed-based trajectory frame and the local horizontal plane defined in the vertical reference frame (see Mooij, 1994).",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the flight path angle is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "angle_of_attack",
                        "short_summary": "Function to add the angle of attack to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the angle of attack angle to the dependent variables to save. The angle of attack is the angle between the X-axis of the body-fixed reference frame and the XY plane in the groundspeed-based aerodynamic frame (see Mooij, 1994).",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the angle of attack is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "sideslip_angle",
                        "short_summary": "Function to add the sideslip angle to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the sideslip angle to the dependent variables to save. The sideslip angle is ???",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the sideslip angle is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "bank_angle",
                        "short_summary": "Function to add the bank angle to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the bank angle to the dependent variables to save. The bank angle is ???",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the bank angle is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "radiation_pressure",
                        "short_summary": "Function to add the radiation pressure to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the radiation pressure to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "radiating_body",
                                "type": "str",
                                "description": "Radiating body."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_gravity_field_variation_acceleration",
                        "short_summary": "Function to add the total gravity field variation acceleration to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total gravity field variation acceleration to the dependent variables to save. This function does not distinguish between different sources of variations of the gravity field. To select only one contribution, look for the single gravity field variation acceleration.",
                        "parameters": [
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting the acceleration."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_gravity_field_variation_acceleration",
                        "short_summary": "Function to add a single gravity field variation acceleration to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add a single gravity field variation acceleration to the dependent variables to save. This function does distinguish between different sources of variations of the gravity field, but not between terms of the spherical harmonic expansion. To select specific combinations of order and degree, look for the single per term gravity field variation acceleration.",
                        "parameters": [
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting the acceleration."
                            },
                            {
                                "name": "deformation_type",
                                "type": "str",
                                "description": "Deformation type (see BodyDeformationTypes)."
                            },
                            {
                                "name": "identifier",
                                "type": "str, default=\"\"",
                                "description": "Identifier for the deformation type."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "single_per_terms_gravity_field_variation_acceleration",
                        "short_summary": "Function to add specific spherical harmonic terms of a single gravity field variation acceleration to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add specific spherical harmonic terms of a single gravity field variation acceleration to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body_undergoing_acceleration",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "body_exerting_acceleration",
                                "type": "str",
                                "description": "Body exerting the acceleration."
                            },
                            {
                                "name": "component_indices",
                                "type": "list[tuple]",
                                "description": "Tuples of (degree, order) indicating the terms to save."
                            },
                            {
                                "name": "deformation_type",
                                "type": "str",
                                "description": "Deformation type (see BodyDeformationTypes)."
                            },
                            {
                                "name": "identifier",
                                "type": "str, default=\"\"",
                                "description": "Identifier for the deformation type."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "body_fixed_airspeed_velocity",
                        "short_summary": "Function to add the airspeed velocity vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the airspeed velocity vector to the dependent variables to save. The airspeed velocity is expressed with respect to a central body and returned in a frame fixed to the same central body. It requires the central body to have an atmosphere.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the airspeed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "body_fixed_groundspeed_velocity",
                        "short_summary": "Function to add the groundspeed velocity vector to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the groundspeed velocity vector to the dependent variables to save. The groundspeed velocity is expressed with respect to a central body and returned in a frame fixed to the same central body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the groundspeed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "inertial_to_body_fixed_rotation_frame",
                        "short_summary": "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body of interest."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "lvlh_to_inertial_rotation_matrix",
                        "short_summary": "Function to add the rotation matrix from the Local Vertical, Local Horizontal (LVLH) RF to the inertial RF to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the rotation matrix from the Local Vertical, Local Horizontal (LVLH) RF to the inertial RF to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the groundspeed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "inertial_to_body_fixed_313_euler_angles",
                        "short_summary": "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save. It uses a 313-Euler angles representation.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "intermediate_aerodynamic_rotation_matrix_variable",
                        "short_summary": "Function to add the rotation matrix from the a base aerodynamic RF to a target aerodynamic RF to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the rotation matrix from the a base aerodynamic RF to a target aerodynamic RF to the dependent variables to save. The aerodynamic RFs are collected in the AerodynamicsReferenceFrames enum.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "base_frame",
                                "type": "str",
                                "description": "Base reference frame for the transformation."
                            },
                            {
                                "name": "target_frame",
                                "type": "str",
                                "description": "Target reference frame for the transformation."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "periapsis_altitude",
                        "short_summary": "Function to add the altitude of periapsis to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the altitude of periapsis to the dependent variables to save. The altitude depends on the shape of the central body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the altitude of periapsis is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "control_surface_deflection",
                        "short_summary": "Function to add the altitude of periapsis to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the altitude of periapsis to the dependent variables to save. The altitude depends on the shape of the central body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "control_surface",
                                "type": "str",
                                "description": "Control surface whose deflection should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "central_body_fixed_spherical_position",
                        "short_summary": "Function to add the spherical, body-fixed position to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the spherical position to the dependent variables to save. The spherical position is expressed in the central body's body-fixed RF.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the spherical, body-fixed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "central_body_fixed_cartesian_position",
                        "short_summary": "Function to add the cartesian, body-fixed position to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the cartesian position to the dependent variables to save. The cartesian position is expressed in the central body's body-fixed RF.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the cartesian, body-fixed is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "body_mass",
                        "short_summary": "Function to add the body mass to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the body mass to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "radiation_pressure_coefficient",
                        "short_summary": "Function to add the radiation pressure coefficient to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the radiation pressure coefficient to the dependent variables to save.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "emitting_body",
                                "type": "str",
                                "description": "Emitting body."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "local_temperature",
                        "short_summary": "Function to add the local temperature to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the local temperature to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "local_dynamic_pressure",
                        "short_summary": "Function to add the local temperature to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the local temperature to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "local_aerodynamic_heat_rate",
                        "short_summary": "Function to add the local aerodynamic heat rate to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the local aerodynamic heat rate felt by the vehicle based on the current velocity and atmospheric conditions to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "local_aerodynamic_g_load",
                        "short_summary": "Function to add the total aerodynamic G-load to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total aerodynamic G-load induced by the aerodynamic acceleration to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "stagnation_point_heat_flux",
                        "short_summary": "Function to add the heat flux at the stagnation point to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the heat flux induced by atmospheric friction at the stagnation point to the dependent variables to save. It requires an aerodynamic acceleration to be acting on the body and a vehicle nose radius to be defined.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "total_mass_rate",
                        "short_summary": "Function to add the total mass rate to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the total mass rate to the dependent variables to save. It requires the body mass to be numerically propagated.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "aerodynamic_g_load",
                        "short_summary": "Function to add the aerodynamic g-load to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the aerodynamic g-load to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the aerodynamic g-load is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "dynamic_pressure",
                        "short_summary": "Function to add the dynamic pressure to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the dynamic pressure to the dependent variables to save. It requires the central body to have an atmosphere.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the dynamic pressure is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "atmospheric_temperature",
                        "short_summary": "Function to add the atmospheric temperature to the dependent variables to save.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to add the atmospheric temperature to the dependent variables to save. It requires the central body to have an atmosphere.",
                        "parameters": [
                            {
                                "name": "body",
                                "type": "str",
                                "description": "Body whose dependent variable should be saved."
                            },
                            {
                                "name": "central_body",
                                "type": "str",
                                "description": "Body with respect to which the atmospheric temperature is computed."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "dependent_variable",
                "version": null,
                "create": "\nFunction to create settings for a generic dependent variable.\n\nFunction to create settings for a dependent variable. It creates objects that calculate dependent variables\nfrom the objects that define their settings. It is usually not relevant nor useful for the user.\n\n\nParameters\n----------\ndependent_variable_list : List[SingleDependentVariableSaveSettings]\n    List of dependent variables to be saved.\nprint_variable_indices : bool, default=True\n    Whether the types of dependent variables to be saved should be printed on the terminal.\n\nReturns\n-------\ndescription\nNone\n\n",
                "mach_number": "\nFunction to add the Mach number to the dependent variables to save.\n\nFunction to add the Mach number to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with atmosphere with respect to which the Mach number is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "altitude": "\nFunction to add the altitude to the dependent variables to save.\n\nFunction to add the altitude to the dependent variables to save. It requires an aerodynamic acceleration to be acting on the vehicle and it depends on the central body's shape.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with atmosphere with respect to which the altitude is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "airspeed": "\nFunction to add the airspeed to the dependent variables to save.\n\nFunction to add the airspeed to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with atmosphere with respect to which the airspeed is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "density": "\nFunction to add the local density to the dependent variables to save.\n\nFunction to add the density (at position of body undergoing acceleration) to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nbody_with_atmosphere : str\n    Body with atmosphere with respect to which the density is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "relative_speed": {
                    "overloaded": true,
                    "overloads": 2,
                    "0": "\nFunction to add the relative speed (norm of the velocity vector) to the dependent variables to save.\n\nFunction to add the relative speed (norm of the velocity vector) with respect to a second body to the dependent variables to save. The relative speed is computed between the bodies' centers of mass.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nrelative_body : str\n    Body with respect to which the relative speed is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                    "1": "\nFunction to add the relative position vector to the dependent variables to save.\n\nFunction to add the relative position vector with respect to a second body to the dependent variables to save. The relative position is computed between the bodies' centers of mass.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nrelative_body : str\n    Body with respect to which the relative position is computed.\n\nReturns\n-------\ndescription\nNone\n\n"
                },
                "relative_distance": "\nFunction to add the relative distance (norm of the position vector) to the dependent variables to save.\n\nFunction to add the relative distance (norm of the position vector) with respect to a second body to the dependent variables to save. The relative distance is computed between the bodies' centers of mass.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nrelative_body : str\n    Body with respect to which the relative distance is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "relative_velocity": "\nFunction to add the relative velocity vector to the dependent variables to save.\n\nFunction to add the relative velocity vector with respect to a second body to the dependent variables to save. The relative distance is computed between the bodies' centers of mass.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nrelative_body : str\n    Body with respect to which the relative velocity is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "keplerian_state": "\nFunction to add the Keplerian state to the dependent variables to save.\n\nFunction to add the Keplerian state to the dependent variables to save. The Keplerian state is returned in this order: 1: Semi-major Axis. 2: Eccentricity. 3: Inclination. 4: Argument of Periapsis. 5. Right Ascension of the Ascending Node. 6: True Anomaly.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the Keplerian state is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "modified_equinoctial_state": "\nFunction to add the modified equinoctial state to the dependent variables to save.\n\nFunction to add the modified equinoctial state to the dependent variables to save. The value of the parameter I is automatically chosen as +1 or -1, depending on whether the inclination is smaller or larger than 90 degrees.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the modified equinoctial state is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "single_acceleration": "\nFunction to add an acceleration vector to the dependent variables to save.\n\nFunction to add an acceleration vector to the dependent variables to save.\n\nParameters\n----------\nacceleration_type : AvailableAcceleration\n    Acceleration type to be saved.\nbody_undergoing_acceleration : str\n    Body undergoing acceleration.\nbody_exerting_acceleration : str\n    Body exerting acceleration.\n\nReturns\n-------\ndescription\nNone\n\n",
                "single_acceleration_norm": "\nFunction to add a scalar acceleration (norm of the acceleration vector) to the dependent variables to save.\n\nFunction to add a scalar acceleration (norm of the acceleration vector) to the dependent variables to save.\n\nParameters\n----------\nacceleration_type : AvailableAcceleration\n    Acceleration type to be saved (see `AvailableAcceleration` enum).\nbody_undergoing_acceleration : str\n    Body undergoing acceleration.\nbody_exerting_acceleration : str\n    Body exerting acceleration.\n\nReturns\n-------\ndescription\nNone\n\n",
                "total_acceleration_norm": "\nFunction to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save.\n\nFunction to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body undergoing acceleration.\n\nReturns\n-------\ndescription\nNone\n\n",
                "total_acceleration": "\nFunction to add the total acceleration vector acting on a body to the dependent variables to save.\n\nFunction to add the total acceleration vector acting on a body to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body undergoing acceleration.\n\nReturns\n-------\ndescription\nNone\n\n",
                "single_torque_norm": "\nFunction to add a single torque (norm of the torque vector) to the dependent variables to save.\n\nFunction to add a single torque (norm of the torque vector) to the dependent variables to save. The altitude depends on the shape of the central body.\n\nParameters\n----------\ntorque_type : AvailableTorque\n    Torque type to be saved.\nbody_undergoing_torque : str\n    Body undergoing torque.\nbody_exerting_torque : str\n    Body exerting torque.\n\nReturns\n-------\ndescription\nNone\n\n",
                "single_torque": "\nFunction to add a single torque vector to the dependent variables to save.\n\nFunction to add a single torque vector to the dependent variables to save. The altitude depends on the shape of the central body.\n\nParameters\n----------\ntorque_type : AvailableTorque\n    Torque type to be saved.\nbody_undergoing_torque : str\n    Body undergoing torque.\nbody_exerting_torque : str\n    Body exerting torque.\n\nReturns\n-------\ndescription\nNone\n\n",
                "total_torque_norm": "\nFunction to add the total torque (norm of the torque vector) to the dependent variables to save.\n\nFunction to add the total torque (norm of the torque vector) to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "total_torque": "\nFunction to add the total torque vector to the dependent variables to save.\n\nFunction to add the total torque vector to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "spherical_harmonic_terms_acceleration": "\nFunction to add a single term of the spherical harmonic acceleration vector to the dependent variables to save.\n\nFunction to add single term of the spherical harmonic acceleration vector to the dependent variables to save.\n\nParameters\n----------\nbody_undergoing_acceleration : str\n    Body undergoing acceleration.\nbody_exerting_acceleration : str\n    Body exerting acceleration.\ncomponent_indices : list[tuple]\n    Tuples of (degree, order) indicating the terms to save.\n\nReturns\n-------\ndescription\nNone\n\n",
                "spherical_harmonic_terms_acceleration_norm": "\nFunction to add a single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save.\n\nFunction to add single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save.\n\nParameters\n----------\nbody_undergoing_acceleration : str\n    Body undergoing acceleration.\nbody_exerting_acceleration : str\n    Body exerting acceleration.\ncomponent_indices : list[tuple]\n    Tuples of (degree, order) indicating the terms to save.\n\nReturns\n-------\ndescription\nNone\n\n",
                "aerodynamic_force_coefficients": "\nFunction to add the aerodynamic force coefficients to the dependent variables to save.\n\nFunction to add the aerodynamic force coefficients to the dependent variables to save. It requires an aerodynamic acceleration acting on the vehicle. The coefficients are returned in the following order: drag force, side force, lift force.\n\nParameters\n----------\nbody : str\n    Body undergoing acceleration.\n\nReturns\n-------\ndescription\nNone\n\n",
                "aerodynamic_moment_coefficients": "\nFunction to add the aerodynamic moment coefficients to the dependent variables to save.\n\nFunction to add the aerodynamic force coefficients to the dependent variables to save. It requires an aerodynamic torque acting on the vehicle. The coefficients are returned in the following order: C_l, C_m, C_n (respectively about the X, Y, Z axes of the body-fixed frame, see Mooij 1994).\n\nParameters\n----------\nbody : str\n    Body undergoing acceleration.\n\nReturns\n-------\ndescription\nNone\n\n",
                "latitude": "\nFunction to add the latitude to the dependent variables to save.\n\nFunction to add the latitude to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the latitude is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "geodetic_latitude": "\nFunction to add the geodetic latitude to the dependent variables to save.\n\nFunction to add the geodetic latitude to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the geodetic latitude is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "longitude": "\nFunction to add the longitude to the dependent variables to save.\n\nFunction to add the longitude to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the longitude is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "heading_angle": "\nFunction to add the heading angle to the dependent variables to save.\n\nFunction to add the heading angle to the dependent variables to save. The heading angle is the angle between the X-axis of the vertical frame and the XZ-plane in the groundspeed-based trajectory frame (see Mooij, 1994).\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the heading angle is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "flight_path_angle": "\nFunction to add the flight path angle to the dependent variables to save.\n\nFunction to add the flight path angle to the dependent variables to save. The flight path angle is the angle between the X-axis of the groundspeed-based trajectory frame and the local horizontal plane defined in the vertical reference frame (see Mooij, 1994).\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the flight path angle is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "angle_of_attack": "\nFunction to add the angle of attack to the dependent variables to save.\n\nFunction to add the angle of attack angle to the dependent variables to save. The angle of attack is the angle between the X-axis of the body-fixed reference frame and the XY plane in the groundspeed-based aerodynamic frame (see Mooij, 1994).\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the angle of attack is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "sideslip_angle": "\nFunction to add the sideslip angle to the dependent variables to save.\n\nFunction to add the sideslip angle to the dependent variables to save. The sideslip angle is ???\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the sideslip angle is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "bank_angle": "\nFunction to add the bank angle to the dependent variables to save.\n\nFunction to add the bank angle to the dependent variables to save. The bank angle is ???\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the bank angle is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "radiation_pressure": "\nFunction to add the radiation pressure to the dependent variables to save.\n\nFunction to add the radiation pressure to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nradiating_body : str\n    Radiating body.\n\nReturns\n-------\ndescription\nNone\n\n",
                "total_gravity_field_variation_acceleration": "\nFunction to add the total gravity field variation acceleration to the dependent variables to save.\n\nFunction to add the total gravity field variation acceleration to the dependent variables to save. This function does not distinguish between different sources of variations of the gravity field. To select only one contribution, look for the single gravity field variation acceleration.\n\nParameters\n----------\nbody_undergoing_acceleration : str\n    Body whose dependent variable should be saved.\nbody_exerting_acceleration : str\n    Body exerting the acceleration.\n\nReturns\n-------\ndescription\nNone\n\n",
                "single_gravity_field_variation_acceleration": "\nFunction to add a single gravity field variation acceleration to the dependent variables to save.\n\nFunction to add a single gravity field variation acceleration to the dependent variables to save. This function does distinguish between different sources of variations of the gravity field, but not between terms of the spherical harmonic expansion. To select specific combinations of order and degree, look for the single per term gravity field variation acceleration.\n\nParameters\n----------\nbody_undergoing_acceleration : str\n    Body whose dependent variable should be saved.\nbody_exerting_acceleration : str\n    Body exerting the acceleration.\ndeformation_type : str\n    Deformation type (see BodyDeformationTypes).\nidentifier : str, default=\"\"\n    Identifier for the deformation type.\n\nReturns\n-------\ndescription\nNone\n\n",
                "single_per_terms_gravity_field_variation_acceleration": "\nFunction to add specific spherical harmonic terms of a single gravity field variation acceleration to the dependent variables to save.\n\nFunction to add specific spherical harmonic terms of a single gravity field variation acceleration to the dependent variables to save.\n\nParameters\n----------\nbody_undergoing_acceleration : str\n    Body whose dependent variable should be saved.\nbody_exerting_acceleration : str\n    Body exerting the acceleration.\ncomponent_indices : list[tuple]\n    Tuples of (degree, order) indicating the terms to save.\ndeformation_type : str\n    Deformation type (see BodyDeformationTypes).\nidentifier : str, default=\"\"\n    Identifier for the deformation type.\n\nReturns\n-------\ndescription\nNone\n\n",
                "body_fixed_airspeed_velocity": "\nFunction to add the airspeed velocity vector to the dependent variables to save.\n\nFunction to add the airspeed velocity vector to the dependent variables to save. The airspeed velocity is expressed with respect to a central body and returned in a frame fixed to the same central body. It requires the central body to have an atmosphere.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the airspeed is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "body_fixed_groundspeed_velocity": "\nFunction to add the groundspeed velocity vector to the dependent variables to save.\n\nFunction to add the groundspeed velocity vector to the dependent variables to save. The groundspeed velocity is expressed with respect to a central body and returned in a frame fixed to the same central body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the groundspeed is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "inertial_to_body_fixed_rotation_frame": "\nFunction to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.\n\nFunction to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body of interest.\n\nReturns\n-------\ndescription\nNone\n\n",
                "lvlh_to_inertial_rotation_matrix": "\nFunction to add the rotation matrix from the Local Vertical, Local Horizontal (LVLH) RF to the inertial RF to the dependent variables to save.\n\nFunction to add the rotation matrix from the Local Vertical, Local Horizontal (LVLH) RF to the inertial RF to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the groundspeed is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "inertial_to_body_fixed_313_euler_angles": "\nFunction to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save.\n\nFunction to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save. It uses a 313-Euler angles representation.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "intermediate_aerodynamic_rotation_matrix_variable": "\nFunction to add the rotation matrix from the a base aerodynamic RF to a target aerodynamic RF to the dependent variables to save.\n\nFunction to add the rotation matrix from the a base aerodynamic RF to a target aerodynamic RF to the dependent variables to save. The aerodynamic RFs are collected in the AerodynamicsReferenceFrames enum.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nbase_frame : str\n    Base reference frame for the transformation.\ntarget_frame : str\n    Target reference frame for the transformation.\n\nReturns\n-------\ndescription\nNone\n\n",
                "periapsis_altitude": "\nFunction to add the altitude of periapsis to the dependent variables to save.\n\nFunction to add the altitude of periapsis to the dependent variables to save. The altitude depends on the shape of the central body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the altitude of periapsis is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "control_surface_deflection": "\nFunction to add the altitude of periapsis to the dependent variables to save.\n\nFunction to add the altitude of periapsis to the dependent variables to save. The altitude depends on the shape of the central body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncontrol_surface : str\n    Control surface whose deflection should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "central_body_fixed_spherical_position": "\nFunction to add the spherical, body-fixed position to the dependent variables to save.\n\nFunction to add the spherical position to the dependent variables to save. The spherical position is expressed in the central body's body-fixed RF.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the spherical, body-fixed is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "central_body_fixed_cartesian_position": "\nFunction to add the cartesian, body-fixed position to the dependent variables to save.\n\nFunction to add the cartesian position to the dependent variables to save. The cartesian position is expressed in the central body's body-fixed RF.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the cartesian, body-fixed is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "body_mass": "\nFunction to add the body mass to the dependent variables to save.\n\nFunction to add the body mass to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "radiation_pressure_coefficient": "\nFunction to add the radiation pressure coefficient to the dependent variables to save.\n\nFunction to add the radiation pressure coefficient to the dependent variables to save.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\nemitting_body : str\n    Emitting body.\n\nReturns\n-------\ndescription\nNone\n\n",
                "local_temperature": "\nFunction to add the local temperature to the dependent variables to save.\n\nFunction to add the local temperature to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "local_dynamic_pressure": "\nFunction to add the local temperature to the dependent variables to save.\n\nFunction to add the local temperature to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "local_aerodynamic_heat_rate": "\nFunction to add the local aerodynamic heat rate to the dependent variables to save.\n\nFunction to add the local aerodynamic heat rate felt by the vehicle based on the current velocity and atmospheric conditions to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "local_aerodynamic_g_load": "\nFunction to add the total aerodynamic G-load to the dependent variables to save.\n\nFunction to add the total aerodynamic G-load induced by the aerodynamic acceleration to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "stagnation_point_heat_flux": "\nFunction to add the heat flux at the stagnation point to the dependent variables to save.\n\nFunction to add the heat flux induced by atmospheric friction at the stagnation point to the dependent variables to save. It requires an aerodynamic acceleration to be acting on the body and a vehicle nose radius to be defined.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "total_mass_rate": "\nFunction to add the total mass rate to the dependent variables to save.\n\nFunction to add the total mass rate to the dependent variables to save. It requires the body mass to be numerically propagated.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\n\nReturns\n-------\ndescription\nNone\n\n",
                "aerodynamic_g_load": "\nFunction to add the aerodynamic g-load to the dependent variables to save.\n\nFunction to add the aerodynamic g-load to the dependent variables to save (at position of body undergoing acceleration). It requires an aerodynamic acceleration to be acting on the body.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the aerodynamic g-load is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "dynamic_pressure": "\nFunction to add the dynamic pressure to the dependent variables to save.\n\nFunction to add the dynamic pressure to the dependent variables to save. It requires the central body to have an atmosphere.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the dynamic pressure is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "atmospheric_temperature": "\nFunction to add the atmospheric temperature to the dependent variables to save.\n\nFunction to add the atmospheric temperature to the dependent variables to save. It requires the central body to have an atmosphere.\n\nParameters\n----------\nbody : str\n    Body whose dependent variable should be saved.\ncentral_body : str\n    Body with respect to which the atmospheric temperature is computed.\n\nReturns\n-------\ndescription\nNone\n\n",
                "VariableSettings": {
                    "__docstring__": "\nFunctional base class to define settings for variables.\n\n"
                },
                "SingleDependentVariableSaveSettings": {
                    "__docstring__": "\n`VariableSettings`-derived class to define settings for dependent variables that are to be saved during propagation.\n\n"
                },
                "SingleAccelerationDependentVariableSaveSettings": {
                    "__docstring__": "\n`SingleDependentVariableSaveSettings`-derived class to save a single acceleration (norm or vector) during propagation.\n\n"
                }
            },
            "integrator": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/simulation/propagation_setup",
                "file": "integrator.yaml",
                "_implicit_name": "integrator",
                "config": null,
                "summary": null,
                "extended_summary": null,
                "routine_listings": null,
                "see_also": null,
                "notes": "None",
                "references": null,
                "examples": null,
                "classes": [
                    {
                        "name": "IntegratorSettings",
                        "short_summary": "Functional base class to define settings for integrators.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Initial time of the integration."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "RungeKuttaVariableStepSizeSettingsScalarTolerances",
                        "short_summary": "`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with scalar tolerances.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "RungeKuttaVariableStepSizeSettingsVectorTolerances",
                        "short_summary": "`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with vector tolerances.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "BulirschStoerIntegratorSettings",
                        "short_summary": "`IntegratorSettings`-derived class to define settings for Bulirsch-Stoer integrator settings.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "AdamsBashforthMoultonSettings",
                        "short_summary": "`IntegratorSettings`-derived class to define settings for Adams-Bashforth-Moulton integrator settings.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    }
                ],
                "functions": [
                    {
                        "name": "euler",
                        "short_summary": "Creates the settings for the Euler integrator.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Euler integrator. For this integrator, the step size is kept\nconstant.\n",
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Start time (independent variable) of numerical integration."
                            },
                            {
                                "name": "initial_time_step",
                                "type": "float",
                                "description": "Initial and constant value for the time step."
                            },
                            {
                                "name": "save_frequency",
                                "type": "int, default=1",
                                "description": "Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step)."
                            },
                            {
                                "name": "assess_termination_on_minor_steps",
                                "type": "bool, default=false",
                                "description": "Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "runge_kutta_4",
                        "short_summary": "Creates the settings for the Runge Kutta 4 integrator.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Runge Kutta 4 integrator. For this integrator, the step size is kept\nconstant.\n",
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Start time (independent variable) of numerical integration."
                            },
                            {
                                "name": "initial_time_step",
                                "type": "float",
                                "description": "Initial and constant value for the time step."
                            },
                            {
                                "name": "save_frequency",
                                "type": "int, default=1",
                                "description": "Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step)."
                            },
                            {
                                "name": "assess_termination_on_minor_steps",
                                "type": "bool, default=false",
                                "description": "Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "rungeKuttaVariableStepSettingsScalarTolerances",
                        "short_summary": null,
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "rungeKuttaVariableStepSettingsVectorTolerances",
                        "short_summary": null,
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "returns": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "runge_kutta_variable_step_size",
                        "short_summary": "Creates the settings for the Runge-Kutta variable step size integrator.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Runge-Kutta variable step size integrator with vector tolerances. # [py]\nFor this integrator, the step size is varied based on the tolerances and safety factor provided. # [py]\nThe tolerance can be either scalar or vector; it is composed of an absolute and a relative part. # [py]\nDifferent coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum). # [py]\n",
                        "parameters": [
                            {
                                "name": "initial_time",
                                "type": "float",
                                "description": "Start time (independent variable) of numerical integration."
                            },
                            {
                                "name": "initial_time_step",
                                "type": "float",
                                "description": "Initial time step to be used."
                            },
                            {
                                "name": "coefficient_set",
                                "type": "RungeKuttaCoefficients::CoefficientSets",
                                "description": "Coefficient set (Butcher's tableau) to be used in the integration."
                            },
                            {
                                "name": "minimum_step_size",
                                "type": "float",
                                "description": "Minimum time step to be used during the integration."
                            },
                            {
                                "name": "maximum_step_size",
                                "type": "float",
                                "description": "Maximum time step to be used during the integration."
                            },
                            {
                                "name": "relative_error_tolerance",
                                "type": "float or np.ndarray",
                                "description": "Relative vector tolerance to adjust the time step."
                            },
                            {
                                "name": "absolute_error_tolerance",
                                "type": "float or np.ndarray",
                                "description": "Absolute vector tolerance to adjust the time step."
                            },
                            {
                                "name": "save_frequency",
                                "type": "int, default=1",
                                "description": "Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step)."
                            },
                            {
                                "name": "assess_termination_on_minor_steps",
                                "type": "bool, default=false",
                                "description": "Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false)."
                            },
                            {
                                "name": "safety_factor",
                                "type": "float, default=0.8",
                                "description": "Safety factor used in the step size control."
                            },
                            {
                                "name": "maximum_factor_increase",
                                "type": "float, default=4.0",
                                "description": "Maximum increase between consecutive time steps, expressed as the factor between new and old step size."
                            },
                            {
                                "name": "minimum_factor_increase",
                                "type": "float, default=0.1",
                                "description": "Minimum increase between consecutive time steps, expressed as the factor between new and old step size."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "bulirsch_stoer",
                        "short_summary": "Creates the settings for the Bulirsch-Stoer integrator.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Bulirsch-Stoer integrator.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent extrapolation sequences can be used (see the `ExtrapolationMethodStepSequences` enum).\n\n- name: initial_time # [py]\n  type: float # [py]\n  description: Start time (independent variable) of numerical integration.\n\n- name: initial_time_step # [py]\n  type: float # [py]\n  description: Initial time step to be used.\n\n- name: extrapolation_sequence # [py]\n  type: ExtrapolationMethodStepSequences # [py]\n  description: Extrapolation sequence to be used in the integration.\n\n- name: maximum_number_of_steps # [py]\n  type: int # [py]\n  description: Number of entries in the sequence (e.g., number of integrations used for a single extrapolation).\n\n- name: minimum_step_size # [py]\n  type: float # [py]\n  description: Minimum time step to be used during the integration.\n\n- name: maximum_step_size # [py]\n  type: float # [py]\n  description: Maximum time step to be used during the integration.\n\n- name: relative_error_tolerance # [py]\n  type: float, default=1.0E-12 # [py]\n  description: Relative tolerance to adjust the time step.\n\n- name: absolute_error_tolerance # [py]\n  type: float, default=1.0E-12 # [py]\n  description: Relative tolerance to adjust the time step.\n\n- name: save_frequency # [py]\n  type: int, default=1 # [py]\n  description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\n\n- name: assess_termination_on_minor_steps # [py]\n  type: bool, default=false # [py]\n  description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\n\n- name: safety_factor # [py]\n  type: float, default=0.7 # [py]\n  description: Safety factor used in the step size control.\n\n- name: maximum_factor_increase # [py]\n  type: float, default=10.0 # [py]\n  description: Maximum increase between consecutive time steps, expressed as the factor between new and old step size.\n\n- name: minimum_factor_increase # [py]\n  type: float, default=0.1 # [py]\n  description: Minimum increase between consecutive time steps, expressed as the factor between new and old step size.\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "adams_bashforth_moulton",
                        "short_summary": "Creates the settings for the Bulirsch-Stoer integrator.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create settings for the Adams-Bashorth-Moulton integrator.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum).\n\n- name: initial_time # [py]\n  type: float # [py]\n  description: Start time (independent variable) of numerical integration.\n\n- name: initial_time_step # [py]\n  type: float # [py]\n  description: Initial time step to be used.\n\n- name: minimum_step_size # [py]\n  type: float # [py]\n  description: Minimum time step to be used during the integration.\n\n- name: maximum_step_size # [py]\n  type: float # [py]\n  description: Maximum time step to be used during the integration.\n\n- name: relative_error_tolerance # [py]\n  type: float, default=1.0E-12 # [py]\n  description: Relative tolerance to adjust the time step.\n\n- name: absolute_error_tolerance # [py]\n  type: float, default=1.0E-12 # [py]\n  description: Relative tolerance to adjust the time step.\n\n- name: minimum_order # [py]\n  description: Minimum order of the integrator.\n\n- name: maximum_order # [py]\n  description: Maximum order of the integrator.\n\n- name: save_frequency # [py]\n  type: int, default=1 # [py]\n  description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\n\n- name: assess_termination_on_minor_steps # [py]\n  type: bool, default=false # [py]\n  description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\n\n- name: bandwidth # [py]\n  type: float, default=200.0 # [py]\n  description: Maximum error factor for doubling the stepsize.\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "integrator",
                "version": null,
                "euler": "\nCreates the settings for the Euler integrator.\n\nFactory function to create settings for the Euler integrator. For this integrator, the step size is kept\nconstant.\n\n\nParameters\n----------\ninitial_time : float\n    Start time (independent variable) of numerical integration.\ninitial_time_step : float\n    Initial and constant value for the time step.\nsave_frequency : int, default=1\n    Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\nassess_termination_on_minor_steps : bool, default=false\n    Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\n\nReturns\n-------\ndescription\nNone\n\n",
                "runge_kutta_4": "\nCreates the settings for the Runge Kutta 4 integrator.\n\nFactory function to create settings for the Runge Kutta 4 integrator. For this integrator, the step size is kept\nconstant.\n\n\nParameters\n----------\ninitial_time : float\n    Start time (independent variable) of numerical integration.\ninitial_time_step : float\n    Initial and constant value for the time step.\nsave_frequency : int, default=1\n    Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\nassess_termination_on_minor_steps : bool, default=false\n    Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\n\nReturns\n-------\ndescription\nNone\n\n",
                "rungeKuttaVariableStepSettingsScalarTolerances": "\n",
                "rungeKuttaVariableStepSettingsVectorTolerances": "\n",
                "runge_kutta_variable_step_size": "\nCreates the settings for the Runge-Kutta variable step size integrator.\n\nFactory function to create settings for the Runge-Kutta variable step size integrator with vector tolerances. # [py]\nFor this integrator, the step size is varied based on the tolerances and safety factor provided. # [py]\nThe tolerance can be either scalar or vector; it is composed of an absolute and a relative part. # [py]\nDifferent coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum). # [py]\n\n\nParameters\n----------\ninitial_time : float\n    Start time (independent variable) of numerical integration.\ninitial_time_step : float\n    Initial time step to be used.\ncoefficient_set : RungeKuttaCoefficients::CoefficientSets\n    Coefficient set (Butcher's tableau) to be used in the integration.\nminimum_step_size : float\n    Minimum time step to be used during the integration.\nmaximum_step_size : float\n    Maximum time step to be used during the integration.\nrelative_error_tolerance : float or np.ndarray\n    Relative vector tolerance to adjust the time step.\nabsolute_error_tolerance : float or np.ndarray\n    Absolute vector tolerance to adjust the time step.\nsave_frequency : int, default=1\n    Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\nassess_termination_on_minor_steps : bool, default=false\n    Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\nsafety_factor : float, default=0.8\n    Safety factor used in the step size control.\nmaximum_factor_increase : float, default=4.0\n    Maximum increase between consecutive time steps, expressed as the factor between new and old step size.\nminimum_factor_increase : float, default=0.1\n    Minimum increase between consecutive time steps, expressed as the factor between new and old step size.\n\nReturns\n-------\ndescription\nNone\n\n",
                "bulirsch_stoer": "\nCreates the settings for the Bulirsch-Stoer integrator.\n\nFactory function to create settings for the Bulirsch-Stoer integrator.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent extrapolation sequences can be used (see the `ExtrapolationMethodStepSequences` enum).\n\n- name: initial_time # [py]\n  type: float # [py]\n  description: Start time (independent variable) of numerical integration.\n\n- name: initial_time_step # [py]\n  type: float # [py]\n  description: Initial time step to be used.\n\n- name: extrapolation_sequence # [py]\n  type: ExtrapolationMethodStepSequences # [py]\n  description: Extrapolation sequence to be used in the integration.\n\n- name: maximum_number_of_steps # [py]\n  type: int # [py]\n  description: Number of entries in the sequence (e.g., number of integrations used for a single extrapolation).\n\n- name: minimum_step_size # [py]\n  type: float # [py]\n  description: Minimum time step to be used during the integration.\n\n- name: maximum_step_size # [py]\n  type: float # [py]\n  description: Maximum time step to be used during the integration.\n\n- name: relative_error_tolerance # [py]\n  type: float, default=1.0E-12 # [py]\n  description: Relative tolerance to adjust the time step.\n\n- name: absolute_error_tolerance # [py]\n  type: float, default=1.0E-12 # [py]\n  description: Relative tolerance to adjust the time step.\n\n- name: save_frequency # [py]\n  type: int, default=1 # [py]\n  description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\n\n- name: assess_termination_on_minor_steps # [py]\n  type: bool, default=false # [py]\n  description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\n\n- name: safety_factor # [py]\n  type: float, default=0.7 # [py]\n  description: Safety factor used in the step size control.\n\n- name: maximum_factor_increase # [py]\n  type: float, default=10.0 # [py]\n  description: Maximum increase between consecutive time steps, expressed as the factor between new and old step size.\n\n- name: minimum_factor_increase # [py]\n  type: float, default=0.1 # [py]\n  description: Minimum increase between consecutive time steps, expressed as the factor between new and old step size.\n\n\nReturns\n-------\ndescription\nNone\n\n",
                "adams_bashforth_moulton": "\nCreates the settings for the Bulirsch-Stoer integrator.\n\nFactory function to create settings for the Adams-Bashorth-Moulton integrator.\nFor this integrator, the step size is varied based on the tolerances and safety factor provided.\nThe tolerance is composed of an absolute and a relative part.\nDifferent coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum).\n\n- name: initial_time # [py]\n  type: float # [py]\n  description: Start time (independent variable) of numerical integration.\n\n- name: initial_time_step # [py]\n  type: float # [py]\n  description: Initial time step to be used.\n\n- name: minimum_step_size # [py]\n  type: float # [py]\n  description: Minimum time step to be used during the integration.\n\n- name: maximum_step_size # [py]\n  type: float # [py]\n  description: Maximum time step to be used during the integration.\n\n- name: relative_error_tolerance # [py]\n  type: float, default=1.0E-12 # [py]\n  description: Relative tolerance to adjust the time step.\n\n- name: absolute_error_tolerance # [py]\n  type: float, default=1.0E-12 # [py]\n  description: Relative tolerance to adjust the time step.\n\n- name: minimum_order # [py]\n  description: Minimum order of the integrator.\n\n- name: maximum_order # [py]\n  description: Maximum order of the integrator.\n\n- name: save_frequency # [py]\n  type: int, default=1 # [py]\n  description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).\n\n- name: assess_termination_on_minor_steps # [py]\n  type: bool, default=false # [py]\n  description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).\n\n- name: bandwidth # [py]\n  type: float, default=200.0 # [py]\n  description: Maximum error factor for doubling the stepsize.\n\n\nReturns\n-------\ndescription\nNone\n\n",
                "IntegratorSettings": {
                    "__docstring__": "\nFunctional base class to define settings for integrators.\n\n"
                },
                "RungeKuttaVariableStepSizeSettingsScalarTolerances": {
                    "__docstring__": "\n`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with scalar tolerances.\n\n"
                },
                "RungeKuttaVariableStepSizeSettingsVectorTolerances": {
                    "__docstring__": "\n`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with vector tolerances.\n\n"
                },
                "BulirschStoerIntegratorSettings": {
                    "__docstring__": "\n`IntegratorSettings`-derived class to define settings for Bulirsch-Stoer integrator settings.\n\n"
                },
                "AdamsBashforthMoultonSettings": {
                    "__docstring__": "\n`IntegratorSettings`-derived class to define settings for Adams-Bashforth-Moulton integrator settings.\n\n"
                }
            },
            "mass_rate": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/simulation/propagation_setup",
                "file": "mass_rate.yaml",
                "_implicit_name": "mass_rate",
                "config": null,
                "summary": null,
                "extended_summary": null,
                "routine_listings": null,
                "see_also": null,
                "notes": "None",
                "references": null,
                "examples": null,
                "classes": [
                    {
                        "name": "MassRateModelSettings",
                        "short_summary": "Functional base class to define settings for mass rates.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "FromThrustMassRateSettings",
                        "short_summary": "`MassRateModelSettings`-derived class to define settings for a mass rate model derived from a thrust model.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "CustomMassRateSettings",
                        "short_summary": "`MassRateModelSettings`-derived class to define settings for a custom mass rate model.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    }
                ],
                "functions": [
                    {
                        "name": "from_thrust",
                        "short_summary": "Creates the settings for a mass rate model defined from a thrust model.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates the settings for a mass rate model defined from a thrust model. The mass rate model is derived from\nthe associated body's engine model. It is possible to consider only a specific engine or all engines.\n",
                        "parameters": [
                            {
                                "name": "use_all_thrust_models",
                                "type": "bool, default=true",
                                "description": "Denotes whether all engines of the associated body are to be combined into a single thrust model."
                            },
                            {
                                "name": "associated_thrust_source",
                                "type": "str, default=\"\"",
                                "description": "Name of engine model from which thrust is to be derived (must be empty if the first argument is set to true)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom",
                        "short_summary": "Creates the settings for a mass rate model defined from a thrust model.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates the settings for a custom mass rate model defined through a mass rate function. The function must have\ntime as an independent variable.\n",
                        "parameters": [
                            {
                                "name": "mass_rate_function",
                                "type": "Callable[[float], float]",
                                "description": "Function of time defining the custom mass rate."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "mass_rate",
                "version": null,
                "from_thrust": "\nCreates the settings for a mass rate model defined from a thrust model.\n\nCreates the settings for a mass rate model defined from a thrust model. The mass rate model is derived from\nthe associated body's engine model. It is possible to consider only a specific engine or all engines.\n\n\nParameters\n----------\nuse_all_thrust_models : bool, default=true\n    Denotes whether all engines of the associated body are to be combined into a single thrust model.\nassociated_thrust_source : str, default=\"\"\n    Name of engine model from which thrust is to be derived (must be empty if the first argument is set to true).\n\nReturns\n-------\ndescription\nNone\n\n",
                "custom": "\nCreates the settings for a mass rate model defined from a thrust model.\n\nCreates the settings for a custom mass rate model defined through a mass rate function. The function must have\ntime as an independent variable.\n\n\nParameters\n----------\nmass_rate_function : Callable[[float], float]\n    Function of time defining the custom mass rate.\n\nReturns\n-------\ndescription\nNone\n\n",
                "MassRateModelSettings": {
                    "__docstring__": "\nFunctional base class to define settings for mass rates.\n\n"
                },
                "FromThrustMassRateSettings": {
                    "__docstring__": "\n`MassRateModelSettings`-derived class to define settings for a mass rate model derived from a thrust model.\n\n"
                },
                "CustomMassRateSettings": {
                    "__docstring__": "\n`MassRateModelSettings`-derived class to define settings for a custom mass rate model.\n\n"
                }
            },
            "propagator": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/simulation/propagation_setup",
                "file": "propagator.yaml",
                "_implicit_name": "propagator",
                "config": null,
                "summary": null,
                "extended_summary": null,
                "routine_listings": null,
                "see_also": null,
                "notes": "None",
                "references": null,
                "examples": null,
                "classes": [
                    {
                        "name": "DependentVariableSaveSettings",
                        "short_summary": "Functional class to define settings for dependent variable to save.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "PropagatorSettings",
                        "short_summary": "Functional base class to define settings for propagators.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "reset_initial_states",
                                "short_summary": "Function to reset the initial state used as input for numerical integration.",
                                "deprecation_warning": null,
                                "extended_summary": "Function to reset the initial state used as input for numerical integration.\n",
                                "parameters": [
                                    {
                                        "name": "initial_states",
                                        "type": "numpy.ndarray",
                                        "description": "Initial states to be reset for the numerical propagation."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "MultiArcPropagatorSettings",
                        "short_summary": "`PropagatorSettings`-derived class to define settings for multi-arc dynamics.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "HybridArcPropagatorSettings",
                        "short_summary": "`PropagatorSettings`-derived class to define settings for hybrid-arc dynamics.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "SingleArcPropagatorSettings",
                        "short_summary": "`PropagatorSettings`-derived class to define settings for single-arc dynamics.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Settings for creating the object that checks whether the propagation is finished."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "TranslationalStatePropagatorSettings",
                        "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "acceleration_settings",
                                "type": "SelectedAccelerationMap",
                                "description": "Settings for retrieving the accelerations acting on the body during propagation."
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "reset_initial_states",
                                "short_summary": "Function to reset the initial state used as input for numerical integration.",
                                "deprecation_warning": null,
                                "extended_summary": "Function to reset the initial state used as input for numerical integration.\n",
                                "parameters": [
                                    {
                                        "name": "initial_states",
                                        "type": "numpy.ndarray",
                                        "description": "Initial states to be reset for the numerical propagation."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "recreate_state_derivative_models",
                                "short_summary": "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models).",
                                "deprecation_warning": null,
                                "extended_summary": "Function to create the integrated state models (e.g. acceleration/torque/mass models) for\neach fo the propagators state types contained in `propagatorSettingsMap_`.\n",
                                "parameters": [
                                    {
                                        "name": "bodies",
                                        "type": "SystemOfBodies",
                                        "description": "System of bodies used in the propagation."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "single_type_settings",
                                "short_summary": "Function to retrieve a single type of propagator.",
                                "deprecation_warning": null,
                                "extended_summary": "Function to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n",
                                "parameters": [
                                    {
                                        "name": "state_type",
                                        "type": "IntegratedStateType",
                                        "description": "State type to be retrieved."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "RotationalStatePropagatorSettings",
                        "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "MultiTypePropagatorSettings",
                        "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for propagation of multiple quantities.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": [
                            {
                                "name": "propagator_settings_per_type",
                                "type": "Dict[IntegratedStateType, List[SingleArcPropagatorSettings]]",
                                "description": null
                            }
                        ],
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "reset_initial_states",
                                "short_summary": "Function to reset the initial states used as input for numerical integration.",
                                "deprecation_warning": null,
                                "extended_summary": "Function to reset the initial states used as input for numerical integration.\n",
                                "parameters": [
                                    {
                                        "name": "initial_states",
                                        "type": "numpy.ndarray",
                                        "description": "Initial states to be reset for the numerical propagation."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "recreate_state_derivative_models",
                                "short_summary": "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models).",
                                "deprecation_warning": null,
                                "extended_summary": "Function to create the integrated state models (e.g. acceleration/torque/mass models) for\neach of the propagators state types contained in `propagatorSettingsMap_`.\n",
                                "parameters": [
                                    {
                                        "name": "bodies",
                                        "type": "SystemOfBodies",
                                        "description": "System of bodies used in the propagation."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            },
                            {
                                "name": "single_type_settings",
                                "short_summary": "Function to retrieve a single type of propagator.",
                                "deprecation_warning": null,
                                "extended_summary": "Function to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n",
                                "parameters": [
                                    {
                                        "name": "state_type",
                                        "type": "IntegratedStateType",
                                        "description": "State type to be retrieved."
                                    }
                                ],
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "PropagationTerminationSettings",
                        "short_summary": "Functional base class to define termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "PropagationDependentVariableTerminationSettings",
                        "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "PropagationTimeTerminationSettings",
                        "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from propagation time.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "PropagationCPUTimeTerminationSettings",
                        "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from CPU time.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "PropagationCustomTerminationSettings",
                        "short_summary": "`PropagationTerminationSettings`-derived class to define custom termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    },
                    {
                        "name": "PropagationHybridTerminationSettings",
                        "short_summary": "`PropagationTerminationSettings`-derived class to define hybrid termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": [
                            {
                                "name": "ctor",
                                "short_summary": "Constructor.",
                                "deprecation_warning": null,
                                "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                                "parameters": null,
                                "returns": null,
                                "yields": null,
                                "other_parameters": null,
                                "raises": null,
                                "warns": null,
                                "warnings": null,
                                "see_also": null,
                                "notes": null,
                                "references": null,
                                "examples": null
                            }
                        ]
                    }
                ],
                "functions": [
                    {
                        "name": "combine_initial_states",
                        "short_summary": "Function to retrieve the initial state for a list of propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Function to retrieve the initial state for a list of propagator settings. This way, the initial state for\ndifferent quantities to be propagated (e.g., translational state, rotational state, mass) are retrieved and\norganized in a single container.\n",
                        "parameters": [
                            {
                                "name": "propagator_settings_per_type",
                                "type": "dict",
                                "description": "Propagator settings where the type of propagation is reported as key and the respective list of propagator settings as value."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "translational",
                        "short_summary": "Factory function to create translational state propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the dependent variables to save are provided\nas a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "central_bodies",
                                "type": "List[str]",
                                "description": "List of central bodies with respect to which the bodies to be integrated are propagated."
                            },
                            {
                                "name": "acceleration_models",
                                "type": "AccelerationMap",
                                "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration models."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "List[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "propagator",
                                "type": "TranslationalPropagatorType, default=cowell",
                                "description": "Type of translational propagator to be used (see `TranslationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "DependentVariableSaveSettings, default=none",
                                "description": "Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "translational",
                        "short_summary": "Factory function to create translational state propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "central_bodies",
                                "type": "List[str]",
                                "description": "List of central bodies with respect to which the bodies to be integrated are propagated."
                            },
                            {
                                "name": "acceleration_models",
                                "type": "AccelerationMap",
                                "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration models."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "List[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "propagator",
                                "type": "TranslationalPropagatorType, default=cowell",
                                "description": "Type of translational propagator to be used (see `TranslationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "List[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved, provided as a list of SingleDependentVariableSaveSettings objects (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "TranslationalStatePropagatorSettings",
                            "description": "Translational state propagator settings object."
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "translational",
                        "short_summary": "Factory function to create translational state propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration settings object. In this function, the dependent variables to save are provided\nas a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "central_bodies",
                                "type": "List[str]",
                                "description": "List of central bodies with respect to which the bodies to be integrated are propagated."
                            },
                            {
                                "name": "acceleration_models",
                                "type": "AccelerationMap",
                                "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration settings objects."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "List[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "propagator",
                                "type": "TranslationalPropagatorType, default=cowell",
                                "description": "Type of translational propagator to be used (see `TranslationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "DependentVariableSaveSettings, default=none",
                                "description": "Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "translational",
                        "short_summary": "Factory function to create translational state propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration settings object. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "central_bodies",
                                "type": "List[str]",
                                "description": "List of central bodies with respect to which the bodies to be integrated are propagated."
                            },
                            {
                                "name": "acceleration_models",
                                "type": "AccelerationMap",
                                "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration settings objects."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "List[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "propagator",
                                "type": "TranslationalPropagatorType, default=cowell",
                                "description": "Type of translational propagator to be used (see `TranslationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "List[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "translational",
                        "short_summary": "Factory function to create translational state propagator settings with time termination conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the dependent variables to save are\nprovided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the final time provided.\n",
                        "parameters": [
                            {
                                "name": "central_bodies",
                                "type": "List[str]",
                                "description": "List of central bodies with respect to which the bodies to be integrated are propagated."
                            },
                            {
                                "name": "acceleration_models",
                                "type": "AccelerationMap",
                                "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration models."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "List[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_time",
                                "type": "float",
                                "description": "Final time of the propagation to be used as termination criterion."
                            },
                            {
                                "name": "propagator",
                                "type": "TranslationalPropagatorType, default=cowell",
                                "description": "Type of translational propagator to be used (see `TranslationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "DependentVariableSaveSettings, default=none",
                                "description": "Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "translational",
                        "short_summary": "Factory function to create translational state propagator settings with time termination conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the final time provided.\n",
                        "parameters": [
                            {
                                "name": "central_bodies",
                                "type": "List[str]",
                                "description": "List of central bodies with respect to which the bodies to be integrated are propagated."
                            },
                            {
                                "name": "acceleration_models",
                                "type": "AccelerationMap",
                                "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration models."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "List[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_time",
                                "type": "float",
                                "description": "Final time of the propagation to be used as termination criterion."
                            },
                            {
                                "name": "propagator",
                                "type": "TranslationalPropagatorType, default=cowell",
                                "description": "Type of translational propagator to be used (see `TranslationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "List[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "translational",
                        "short_summary": "Factory function to create translational state propagator settings with time termination conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration settings object. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the final time provided.\n",
                        "parameters": [
                            {
                                "name": "central_bodies",
                                "type": "List[str]",
                                "description": "List of central bodies with respect to which the bodies to be integrated are propagated."
                            },
                            {
                                "name": "acceleration_models",
                                "type": "AccelerationMap",
                                "description": "Set of accelerations acting on the bodies to propagate, provided as acceleration settings objects."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "List[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_time",
                                "type": "float",
                                "description": "Final time of the propagation to be used as termination criterion."
                            },
                            {
                                "name": "propagator",
                                "type": "TranslationalPropagatorType, default=cowell",
                                "description": "Type of translational propagator to be used (see `TranslationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "List[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "rotational",
                        "short_summary": "Factory function to create rotational state propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create rotational state propagator settings with generic stopping conditions.\nIt works by providing a key-value torque container, containing the list of torques acting on\neach body. The map has as key a string denoting the name of the body on which a set of torques, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the torque\nand the value (a pointer to) a torque model. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "torque_models",
                                "type": "TorqueModelMap",
                                "description": "Set of torques acting on the bodies to propagate, provided as torque models."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "List[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "propagator",
                                "type": "RotationalPropagatorType, default=quaternions",
                                "description": "Type of rotational propagator to be used (see `RotationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "List[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "rotational",
                        "short_summary": "Factory function to create rotational state propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create rotational state propagator settings with generic stopping conditions.\nIt works by providing a key-value torque container, containing the list of torques acting on\neach body. The map has as key a string denoting the name of the body on which a set of torques, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the torque\nand the value (a pointer to) a torque settings object. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "torque_settings",
                                "type": "SelectedTorqueMap",
                                "description": "Set of torques acting on the bodies to propagate, provided as torque settings object."
                            },
                            {
                                "name": "bodies_to_integrate",
                                "type": "List[str]",
                                "description": "List of bodies to be numerically propagated, whose order reflects the order of the central bodies."
                            },
                            {
                                "name": "initial_states",
                                "type": "numpy.ndarray",
                                "description": "Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "propagator",
                                "type": "RotationalPropagatorType, default=quaternions",
                                "description": "Type of rotational propagator to be used (see `RotationalPropagatorType` enum)."
                            },
                            {
                                "name": "output_variables",
                                "type": "List[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "mass",
                        "short_summary": "Factory function to create mass propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create mass propagator settings with generic stopping conditions.\nIt works by providing a key-value mass rate container, containing the list of mass rate models associated to\neach body. In this function, the dependent variables to save are\nprovided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "bodies_with_mass_to_propagate",
                                "type": "List[str]",
                                "description": "List of bodies whose mass should be numerically propagated."
                            },
                            {
                                "name": "mass_rate_models",
                                "type": "Dict[str, MassRateModel]",
                                "description": "List of mass rates associated to each body, provided as mass rate models."
                            },
                            {
                                "name": "initial_body_masses",
                                "type": "numpy.ndarray",
                                "description": "Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "output_variables",
                                "type": "DependentVariableSaveSettings, default=none",
                                "description": "Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "mass",
                        "short_summary": "Factory function to create mass propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create mass propagator settings with generic stopping conditions.\nIt works by providing a key-value mass rate container, containing the list of mass rate models associated to\neach body. In this function, the dependent variables to save are\nprovided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "bodies_with_mass_to_propagate",
                                "type": "List[str]",
                                "description": "List of bodies whose mass should be numerically propagated."
                            },
                            {
                                "name": "mass_rate_models",
                                "type": "Dict[str, MassRateModel]",
                                "description": "List of mass rates associated to each body, provided as mass rate models."
                            },
                            {
                                "name": "initial_body_masses",
                                "type": "numpy.ndarray",
                                "description": "Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "output_variables",
                                "type": "DependentVariableSaveSettings, default=none",
                                "description": "Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "mass",
                        "short_summary": "Factory function to create mass propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create mass propagator settings with generic stopping conditions.\nIt works by providing a key-value mass rate container, containing the list of mass rate settings objects associated to\neach body. In this function, the dependent variables to save are\nprovided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "bodies_with_mass_to_propagate",
                                "type": "List[str]",
                                "description": "List of bodies whose mass should be numerically propagated."
                            },
                            {
                                "name": "mass_rate_settings",
                                "type": "SelectedMassRateModelMap",
                                "description": "Mass rates associated to each body, provided as a mass rate settings object."
                            },
                            {
                                "name": "initial_body_masses",
                                "type": "numpy.ndarray",
                                "description": "Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "output_variables",
                                "type": "DependentVariableSaveSettings, default=none",
                                "description": "Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "mass",
                        "short_summary": "Factory function to create mass propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create mass propagator settings with generic stopping conditions.\nIt works by providing a key-value mass rate container, containing the list of mass rate models associated to\neach body. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "bodies_with_mass_to_propagate",
                                "type": "List[str]",
                                "description": "List of bodies whose mass should be numerically propagated."
                            },
                            {
                                "name": "mass_rate_models",
                                "type": "Dict[str, MassRateModel]",
                                "description": "List of mass rates associated to each body, provided as mass rate models."
                            },
                            {
                                "name": "initial_body_masses",
                                "type": "numpy.ndarray",
                                "description": "Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "output_variables",
                                "type": "List[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "mass",
                        "short_summary": "Factory function to create mass propagator settings with generic stopping conditions.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create mass propagator settings with generic stopping conditions.\nIt works by providing a key-value mass rate container, containing the list of mass rate settings objects associated to\neach body. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "bodies_with_mass_to_propagate",
                                "type": "List[str]",
                                "description": "List of bodies whose mass should be numerically propagated."
                            },
                            {
                                "name": "mass_rate_settings",
                                "type": "SelectedMassRateModelMap",
                                "description": "Mass rates associated to each body, provided as a mass rate settings object."
                            },
                            {
                                "name": "initial_body_masses",
                                "type": "numpy.ndarray",
                                "description": "Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "output_variables",
                                "type": "List[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "multitype",
                        "short_summary": "Factory function to create multitype propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create multitype propagator settings with generic stopping conditions.\nIt works by providing a list of SingleArcPropagatorSettings objects. In this function, the dependent variables to save are\nprovided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "propagator_settings_list",
                                "type": "List[SingleArcPropagatorSettings]",
                                "description": "List of SingleArcPropagatorSettings objects to use."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "output_variables",
                                "type": "DependentVariableSaveSettings, default=none",
                                "description": "Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "multitype",
                        "short_summary": "Factory function to create multitype propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create multitype propagator settings with generic stopping conditions.\nIt works by providing a list of SingleArcPropagatorSettings objects. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n",
                        "parameters": [
                            {
                                "name": "propagator_settings_list",
                                "type": "List[SingleArcPropagatorSettings]",
                                "description": "List of SingleArcPropagatorSettings objects to use."
                            },
                            {
                                "name": "termination_settings",
                                "type": "PropagationTerminationSettings",
                                "description": "Generic termination settings object to check whether the propagation should be ended."
                            },
                            {
                                "name": "output_variables",
                                "type": "List[SingleDependentVariableSaveSettings], default=[]",
                                "description": "List of dependent variables to be saved (by default, no dependent variables are saved)."
                            },
                            {
                                "name": "print_interval",
                                "type": "float, default=TUDAT_NAN",
                                "description": "Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "multi_arc",
                        "short_summary": "Factory function to create multi-arc propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create multi-arc propagator settings. It works by providing separate settings for\neach arc in a list.\n",
                        "parameters": [
                            {
                                "name": "single_arc_settings",
                                "type": "List[SingleArcPropagatorSettings]",
                                "description": "List of SingleArcPropagatorSettings objects to use, one for each arc."
                            },
                            {
                                "name": "transfer_state_to_next_arc",
                                "type": "bool, default=False",
                                "description": "It denotes whether whether the initial state of arc N+1 is to be taken from arc N (for N>0)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "hybrid_arc",
                        "short_summary": "Factory function to create hybrid-arc propagator settings.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create hybrid-arc propagator settings (i.e., a combination of single- and multi-arc dynamics).\n",
                        "parameters": [
                            {
                                "name": "single_arc_settings",
                                "type": "SingleArcPropagatorSettings",
                                "description": "SingleArcPropagatorSettings object to use for the propagation."
                            },
                            {
                                "name": "multi_arc_settings",
                                "type": "MultiArcPropagatorSettings",
                                "description": "MultiArcPropagatorSettings object to use for the propagation."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "time_termination",
                        "short_summary": "Factory function to create time termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create time termination settings for the propagation.\nThe propagation is stopped when the final time provided is reached.\n",
                        "parameters": [
                            {
                                "name": "termination_time",
                                "type": "float",
                                "description": "Final time of the propagation."
                            },
                            {
                                "name": "terminate_exactly_on_final_condition",
                                "type": "bool, default=False",
                                "description": "Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "cpu_time_termination",
                        "short_summary": "Factory function to create CPU time termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create CPU time termination settings for the propagation.\nThe propagation is stopped when the final CPU time provided is reached.\n",
                        "parameters": [
                            {
                                "name": "cpu_termination_time",
                                "type": "float",
                                "description": "Maximum CPU time for the propagation."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "dependent_variable_termination",
                        "short_summary": "Factory function to create CPU time termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create CPU time termination settings for the propagation.\nThe propagation is stopped when the final CPU time provided is reached.\n",
                        "parameters": [
                            {
                                "name": "dependent_variable_settings",
                                "type": "SingleDependentVariableSaveSettings",
                                "description": "Dependent variable object to be used as termination setting."
                            },
                            {
                                "name": "limit_value",
                                "type": "float",
                                "description": "Limit value of the dependent variable; if reached, the propagation is stopped."
                            },
                            {
                                "name": "use_as_lower_limit",
                                "type": "bool, default=False",
                                "description": "Denotes whether the limit value should be used as lower or upper limit."
                            },
                            {
                                "name": "terminate_exactly_on_final_condition",
                                "type": "bool, default=False",
                                "description": "Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated."
                            },
                            {
                                "name": "termination_root_finder_settings",
                                "type": "bool, default=None",
                                "description": "Settings object to create root finder used to converge on exact final condition."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom_termination",
                        "short_summary": "Factory function to create custom termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create custom termination settings for the propagation.\nThe propagation is stopped when the condition provided is verified.\n",
                        "parameters": [
                            {
                                "name": "custom_condition",
                                "type": "Callable[[float], bool]",
                                "description": "Function of time (independent variable) which is called during the propagation and returns a boolean value denoting whether the termination condition is verified."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "hybrid_termination",
                        "short_summary": "Factory function to create bybrid termination settings for the propagation.",
                        "deprecation_warning": null,
                        "extended_summary": "Factory function to create hybrid termination settings for the propagation. This function can be used\nto define that all conditions or a single condition of the conditions provided must be met to\nstop the propagation.\n",
                        "parameters": [
                            {
                                "name": "termination_settings",
                                "type": "List[PropagationTerminationSettings]",
                                "description": "List of single PropagationTerminationSettings objects to be checked during the propagation."
                            },
                            {
                                "name": "fulfill_single_condition",
                                "type": "bool, default=False",
                                "description": "Whether only a single condition of those provided must be met to stop the propagation (true) or all of them simultaneously (false)."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "propagator",
                "version": null,
                "combine_initial_states": "\nFunction to retrieve the initial state for a list of propagator settings.\n\nFunction to retrieve the initial state for a list of propagator settings. This way, the initial state for\ndifferent quantities to be propagated (e.g., translational state, rotational state, mass) are retrieved and\norganized in a single container.\n\n\nParameters\n----------\npropagator_settings_per_type : dict\n    Propagator settings where the type of propagation is reported as key and the respective list of propagator settings as value.\n\nReturns\n-------\ndescription\nNone\n\n",
                "translational": {
                    "overloaded": true,
                    "overloads": 7,
                    "0": "\nFactory function to create translational state propagator settings with generic stopping conditions.\n\nFactory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the dependent variables to save are provided\nas a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\ncentral_bodies : List[str]\n    List of central bodies with respect to which the bodies to be integrated are propagated.\nacceleration_models : AccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration models.\nbodies_to_integrate : List[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\npropagator : TranslationalPropagatorType, default=cowell\n    Type of translational propagator to be used (see `TranslationalPropagatorType` enum).\noutput_variables : DependentVariableSaveSettings, default=none\n    Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "1": "\nFactory function to create translational state propagator settings with generic stopping conditions.\n\nFactory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\ncentral_bodies : List[str]\n    List of central bodies with respect to which the bodies to be integrated are propagated.\nacceleration_models : AccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration models.\nbodies_to_integrate : List[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\npropagator : TranslationalPropagatorType, default=cowell\n    Type of translational propagator to be used (see `TranslationalPropagatorType` enum).\noutput_variables : List[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved, provided as a list of SingleDependentVariableSaveSettings objects (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\nTranslationalStatePropagatorSettings\nTranslational state propagator settings object.\n\n",
                    "2": "\nFactory function to create translational state propagator settings with generic stopping conditions.\n\nFactory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration settings object. In this function, the dependent variables to save are provided\nas a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\ncentral_bodies : List[str]\n    List of central bodies with respect to which the bodies to be integrated are propagated.\nacceleration_models : AccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration settings objects.\nbodies_to_integrate : List[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\npropagator : TranslationalPropagatorType, default=cowell\n    Type of translational propagator to be used (see `TranslationalPropagatorType` enum).\noutput_variables : DependentVariableSaveSettings, default=none\n    Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "3": "\nFactory function to create translational state propagator settings with generic stopping conditions.\n\nFactory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration settings object. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\ncentral_bodies : List[str]\n    List of central bodies with respect to which the bodies to be integrated are propagated.\nacceleration_models : AccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration settings objects.\nbodies_to_integrate : List[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\npropagator : TranslationalPropagatorType, default=cowell\n    Type of translational propagator to be used (see `TranslationalPropagatorType` enum).\noutput_variables : List[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "4": "\nFactory function to create translational state propagator settings with time termination conditions.\n\nFactory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the dependent variables to save are\nprovided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the final time provided.\n\n\nParameters\n----------\ncentral_bodies : List[str]\n    List of central bodies with respect to which the bodies to be integrated are propagated.\nacceleration_models : AccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration models.\nbodies_to_integrate : List[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_time : float\n    Final time of the propagation to be used as termination criterion.\npropagator : TranslationalPropagatorType, default=cowell\n    Type of translational propagator to be used (see `TranslationalPropagatorType` enum).\noutput_variables : DependentVariableSaveSettings, default=none\n    Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "5": "\nFactory function to create translational state propagator settings with time termination conditions.\n\nFactory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration model. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the final time provided.\n\n\nParameters\n----------\ncentral_bodies : List[str]\n    List of central bodies with respect to which the bodies to be integrated are propagated.\nacceleration_models : AccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration models.\nbodies_to_integrate : List[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_time : float\n    Final time of the propagation to be used as termination criterion.\npropagator : TranslationalPropagatorType, default=cowell\n    Type of translational propagator to be used (see `TranslationalPropagatorType` enum).\noutput_variables : List[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "6": "\nFactory function to create translational state propagator settings with time termination conditions.\n\nFactory function to create translational state propagator settings with generic stopping conditions.\nIt works by providing a key-value acceleration container, containing the list of accelerations acting on\neach body. The map has as key a string denoting the name of the body on which a set of accelerations, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration\nand the value (a pointer to) an acceleration settings object. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the final time provided.\n\n\nParameters\n----------\ncentral_bodies : List[str]\n    List of central bodies with respect to which the bodies to be integrated are propagated.\nacceleration_models : AccelerationMap\n    Set of accelerations acting on the bodies to propagate, provided as acceleration settings objects.\nbodies_to_integrate : List[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_time : float\n    Final time of the propagation to be used as termination criterion.\npropagator : TranslationalPropagatorType, default=cowell\n    Type of translational propagator to be used (see `TranslationalPropagatorType` enum).\noutput_variables : List[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n"
                },
                "rotational": {
                    "overloaded": true,
                    "overloads": 2,
                    "0": "\nFactory function to create rotational state propagator settings with generic stopping conditions.\n\nFactory function to create rotational state propagator settings with generic stopping conditions.\nIt works by providing a key-value torque container, containing the list of torques acting on\neach body. The map has as key a string denoting the name of the body on which a set of torques, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the torque\nand the value (a pointer to) a torque model. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\ntorque_models : TorqueModelMap\n    Set of torques acting on the bodies to propagate, provided as torque models.\nbodies_to_integrate : List[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\npropagator : RotationalPropagatorType, default=quaternions\n    Type of rotational propagator to be used (see `RotationalPropagatorType` enum).\noutput_variables : List[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "1": "\nFactory function to create rotational state propagator settings with generic stopping conditions.\n\nFactory function to create rotational state propagator settings with generic stopping conditions.\nIt works by providing a key-value torque container, containing the list of torques acting on\neach body. The map has as key a string denoting the name of the body on which a set of torques, provided\nas value, act. This set is again a key-value container, with the key denoting the body exerting the torque\nand the value (a pointer to) a torque settings object. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\ntorque_settings : SelectedTorqueMap\n    Set of torques acting on the bodies to propagate, provided as torque settings object.\nbodies_to_integrate : List[str]\n    List of bodies to be numerically propagated, whose order reflects the order of the central bodies.\ninitial_states : numpy.ndarray\n    Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\npropagator : RotationalPropagatorType, default=quaternions\n    Type of rotational propagator to be used (see `RotationalPropagatorType` enum).\noutput_variables : List[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n"
                },
                "mass": {
                    "overloaded": true,
                    "overloads": 5,
                    "0": "\nFactory function to create mass propagator settings with generic stopping conditions.\n\nFactory function to create mass propagator settings with generic stopping conditions.\nIt works by providing a key-value mass rate container, containing the list of mass rate models associated to\neach body. In this function, the dependent variables to save are\nprovided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\nbodies_with_mass_to_propagate : List[str]\n    List of bodies whose mass should be numerically propagated.\nmass_rate_models : Dict[str, MassRateModel]\n    List of mass rates associated to each body, provided as mass rate models.\ninitial_body_masses : numpy.ndarray\n    Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\noutput_variables : DependentVariableSaveSettings, default=none\n    Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "1": "\nFactory function to create mass propagator settings with generic stopping conditions.\n\nFactory function to create mass propagator settings with generic stopping conditions.\nIt works by providing a key-value mass rate container, containing the list of mass rate models associated to\neach body. In this function, the dependent variables to save are\nprovided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\nbodies_with_mass_to_propagate : List[str]\n    List of bodies whose mass should be numerically propagated.\nmass_rate_models : Dict[str, MassRateModel]\n    List of mass rates associated to each body, provided as mass rate models.\ninitial_body_masses : numpy.ndarray\n    Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\noutput_variables : DependentVariableSaveSettings, default=none\n    Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "2": "\nFactory function to create mass propagator settings with generic stopping conditions.\n\nFactory function to create mass propagator settings with generic stopping conditions.\nIt works by providing a key-value mass rate container, containing the list of mass rate settings objects associated to\neach body. In this function, the dependent variables to save are\nprovided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\nbodies_with_mass_to_propagate : List[str]\n    List of bodies whose mass should be numerically propagated.\nmass_rate_settings : SelectedMassRateModelMap\n    Mass rates associated to each body, provided as a mass rate settings object.\ninitial_body_masses : numpy.ndarray\n    Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\noutput_variables : DependentVariableSaveSettings, default=none\n    Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "3": "\nFactory function to create mass propagator settings with generic stopping conditions.\n\nFactory function to create mass propagator settings with generic stopping conditions.\nIt works by providing a key-value mass rate container, containing the list of mass rate models associated to\neach body. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\nbodies_with_mass_to_propagate : List[str]\n    List of bodies whose mass should be numerically propagated.\nmass_rate_models : Dict[str, MassRateModel]\n    List of mass rates associated to each body, provided as mass rate models.\ninitial_body_masses : numpy.ndarray\n    Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\noutput_variables : List[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "4": "\nFactory function to create mass propagator settings with generic stopping conditions.\n\nFactory function to create mass propagator settings with generic stopping conditions.\nIt works by providing a key-value mass rate container, containing the list of mass rate settings objects associated to\neach body. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\nbodies_with_mass_to_propagate : List[str]\n    List of bodies whose mass should be numerically propagated.\nmass_rate_settings : SelectedMassRateModelMap\n    Mass rates associated to each body, provided as a mass rate settings object.\ninitial_body_masses : numpy.ndarray\n    Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\noutput_variables : List[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n"
                },
                "multitype": {
                    "overloaded": true,
                    "overloads": 2,
                    "0": "\nFactory function to create multitype propagator settings.\n\nFactory function to create multitype propagator settings with generic stopping conditions.\nIt works by providing a list of SingleArcPropagatorSettings objects. In this function, the dependent variables to save are\nprovided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\npropagator_settings_list : List[SingleArcPropagatorSettings]\n    List of SingleArcPropagatorSettings objects to use.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\noutput_variables : DependentVariableSaveSettings, default=none\n    Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n",
                    "1": "\nFactory function to create multitype propagator settings.\n\nFactory function to create multitype propagator settings with generic stopping conditions.\nIt works by providing a list of SingleArcPropagatorSettings objects. In this function, the dependent variables to save are provided\nas a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set\nthrough the termination settings object provided.\n\n\nParameters\n----------\npropagator_settings_list : List[SingleArcPropagatorSettings]\n    List of SingleArcPropagatorSettings objects to use.\ntermination_settings : PropagationTerminationSettings\n    Generic termination settings object to check whether the propagation should be ended.\noutput_variables : List[SingleDependentVariableSaveSettings], default=[]\n    List of dependent variables to be saved (by default, no dependent variables are saved).\nprint_interval : float, default=TUDAT_NAN\n    Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).\n\nReturns\n-------\ndescription\nNone\n\n"
                },
                "multi_arc": "\nFactory function to create multi-arc propagator settings.\n\nFactory function to create multi-arc propagator settings. It works by providing separate settings for\neach arc in a list.\n\n\nParameters\n----------\nsingle_arc_settings : List[SingleArcPropagatorSettings]\n    List of SingleArcPropagatorSettings objects to use, one for each arc.\ntransfer_state_to_next_arc : bool, default=False\n    It denotes whether whether the initial state of arc N+1 is to be taken from arc N (for N>0).\n\nReturns\n-------\ndescription\nNone\n\n",
                "hybrid_arc": "\nFactory function to create hybrid-arc propagator settings.\n\nFactory function to create hybrid-arc propagator settings (i.e., a combination of single- and multi-arc dynamics).\n\n\nParameters\n----------\nsingle_arc_settings : SingleArcPropagatorSettings\n    SingleArcPropagatorSettings object to use for the propagation.\nmulti_arc_settings : MultiArcPropagatorSettings\n    MultiArcPropagatorSettings object to use for the propagation.\n\nReturns\n-------\ndescription\nNone\n\n",
                "time_termination": "\nFactory function to create time termination settings for the propagation.\n\nFactory function to create time termination settings for the propagation.\nThe propagation is stopped when the final time provided is reached.\n\n\nParameters\n----------\ntermination_time : float\n    Final time of the propagation.\nterminate_exactly_on_final_condition : bool, default=False\n    Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated.\n\nReturns\n-------\ndescription\nNone\n\n",
                "cpu_time_termination": "\nFactory function to create CPU time termination settings for the propagation.\n\nFactory function to create CPU time termination settings for the propagation.\nThe propagation is stopped when the final CPU time provided is reached.\n\n\nParameters\n----------\ncpu_termination_time : float\n    Maximum CPU time for the propagation.\n\nReturns\n-------\ndescription\nNone\n\n",
                "dependent_variable_termination": "\nFactory function to create CPU time termination settings for the propagation.\n\nFactory function to create CPU time termination settings for the propagation.\nThe propagation is stopped when the final CPU time provided is reached.\n\n\nParameters\n----------\ndependent_variable_settings : SingleDependentVariableSaveSettings\n    Dependent variable object to be used as termination setting.\nlimit_value : float\n    Limit value of the dependent variable; if reached, the propagation is stopped.\nuse_as_lower_limit : bool, default=False\n    Denotes whether the limit value should be used as lower or upper limit.\nterminate_exactly_on_final_condition : bool, default=False\n    Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated.\ntermination_root_finder_settings : bool, default=None\n    Settings object to create root finder used to converge on exact final condition.\n\nReturns\n-------\ndescription\nNone\n\n",
                "custom_termination": "\nFactory function to create custom termination settings for the propagation.\n\nFactory function to create custom termination settings for the propagation.\nThe propagation is stopped when the condition provided is verified.\n\n\nParameters\n----------\ncustom_condition : Callable[[float], bool]\n    Function of time (independent variable) which is called during the propagation and returns a boolean value denoting whether the termination condition is verified.\n\nReturns\n-------\ndescription\nNone\n\n",
                "hybrid_termination": "\nFactory function to create bybrid termination settings for the propagation.\n\nFactory function to create hybrid termination settings for the propagation. This function can be used\nto define that all conditions or a single condition of the conditions provided must be met to\nstop the propagation.\n\n\nParameters\n----------\ntermination_settings : List[PropagationTerminationSettings]\n    List of single PropagationTerminationSettings objects to be checked during the propagation.\nfulfill_single_condition : bool, default=False\n    Whether only a single condition of those provided must be met to stop the propagation (true) or all of them simultaneously (false).\n\nReturns\n-------\ndescription\nNone\n\n",
                "DependentVariableSaveSettings": {
                    "name": "DependentVariableSaveSettings",
                    "short_summary": "Functional class to define settings for dependent variable to save.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user because this is a base class.\n\n",
                    "__docstring__": "\nFunctional class to define settings for dependent variable to save.\n\n"
                },
                "PropagatorSettings": {
                    "name": "PropagatorSettings",
                    "short_summary": "Functional base class to define settings for propagators.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "reset_initial_states",
                            "short_summary": "Function to reset the initial state used as input for numerical integration.",
                            "deprecation_warning": null,
                            "extended_summary": "Function to reset the initial state used as input for numerical integration.\n",
                            "parameters": [
                                {
                                    "name": "initial_states",
                                    "type": "numpy.ndarray",
                                    "description": "Initial states to be reset for the numerical propagation."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user because this is a base class.\n\n",
                    "reset_initial_states": "\nFunction to reset the initial state used as input for numerical integration.\n\nFunction to reset the initial state used as input for numerical integration.\n\n\nParameters\n----------\ninitial_states : numpy.ndarray\n    Initial states to be reset for the numerical propagation.\n",
                    "__docstring__": "\nFunctional base class to define settings for propagators.\n\n"
                },
                "MultiArcPropagatorSettings": {
                    "name": "MultiArcPropagatorSettings",
                    "short_summary": "`PropagatorSettings`-derived class to define settings for multi-arc dynamics.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "__docstring__": "\n`PropagatorSettings`-derived class to define settings for multi-arc dynamics.\n\n"
                },
                "HybridArcPropagatorSettings": {
                    "name": "HybridArcPropagatorSettings",
                    "short_summary": "`PropagatorSettings`-derived class to define settings for hybrid-arc dynamics.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "__docstring__": "\n`PropagatorSettings`-derived class to define settings for hybrid-arc dynamics.\n\n"
                },
                "SingleArcPropagatorSettings": {
                    "name": "SingleArcPropagatorSettings",
                    "short_summary": "`PropagatorSettings`-derived class to define settings for single-arc dynamics.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": [
                        {
                            "name": "termination_settings",
                            "type": "PropagationTerminationSettings",
                            "description": "Settings for creating the object that checks whether the propagation is finished."
                        }
                    ],
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "__docstring__": "\n`PropagatorSettings`-derived class to define settings for single-arc dynamics.\n\n"
                },
                "TranslationalStatePropagatorSettings": {
                    "name": "TranslationalStatePropagatorSettings",
                    "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": [
                        {
                            "name": "acceleration_settings",
                            "type": "SelectedAccelerationMap",
                            "description": "Settings for retrieving the accelerations acting on the body during propagation."
                        }
                    ],
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "reset_initial_states",
                            "short_summary": "Function to reset the initial state used as input for numerical integration.",
                            "deprecation_warning": null,
                            "extended_summary": "Function to reset the initial state used as input for numerical integration.\n",
                            "parameters": [
                                {
                                    "name": "initial_states",
                                    "type": "numpy.ndarray",
                                    "description": "Initial states to be reset for the numerical propagation."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "recreate_state_derivative_models",
                            "short_summary": "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models).",
                            "deprecation_warning": null,
                            "extended_summary": "Function to create the integrated state models (e.g. acceleration/torque/mass models) for\neach fo the propagators state types contained in `propagatorSettingsMap_`.\n",
                            "parameters": [
                                {
                                    "name": "bodies",
                                    "type": "SystemOfBodies",
                                    "description": "System of bodies used in the propagation."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "single_type_settings",
                            "short_summary": "Function to retrieve a single type of propagator.",
                            "deprecation_warning": null,
                            "extended_summary": "Function to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n",
                            "parameters": [
                                {
                                    "name": "state_type",
                                    "type": "IntegratedStateType",
                                    "description": "State type to be retrieved."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "reset_initial_states": "\nFunction to reset the initial state used as input for numerical integration.\n\nFunction to reset the initial state used as input for numerical integration.\n\n\nParameters\n----------\ninitial_states : numpy.ndarray\n    Initial states to be reset for the numerical propagation.\n",
                    "recreate_state_derivative_models": "\nFunction to (re)create the integrated state models (e.g. acceleration/torque/mass models).\n\nFunction to create the integrated state models (e.g. acceleration/torque/mass models) for\neach fo the propagators state types contained in `propagatorSettingsMap_`.\n\n\nParameters\n----------\nbodies : SystemOfBodies\n    System of bodies used in the propagation.\n",
                    "single_type_settings": "\nFunction to retrieve a single type of propagator.\n\nFunction to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n\n\nParameters\n----------\nstate_type : IntegratedStateType\n    State type to be retrieved.\n",
                    "__docstring__": "\n`SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics.\n\n"
                },
                "RotationalStatePropagatorSettings": {
                    "name": "RotationalStatePropagatorSettings",
                    "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "__docstring__": "\n`SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation.\n\n"
                },
                "MultiTypePropagatorSettings": {
                    "name": "MultiTypePropagatorSettings",
                    "short_summary": "`SingleArcPropagatorSettings`-derived class to define settings for propagation of multiple quantities.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": [
                        {
                            "name": "propagator_settings_per_type",
                            "type": "Dict[IntegratedStateType, List[SingleArcPropagatorSettings]]",
                            "description": null
                        }
                    ],
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "reset_initial_states",
                            "short_summary": "Function to reset the initial states used as input for numerical integration.",
                            "deprecation_warning": null,
                            "extended_summary": "Function to reset the initial states used as input for numerical integration.\n",
                            "parameters": [
                                {
                                    "name": "initial_states",
                                    "type": "numpy.ndarray",
                                    "description": "Initial states to be reset for the numerical propagation."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "recreate_state_derivative_models",
                            "short_summary": "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models).",
                            "deprecation_warning": null,
                            "extended_summary": "Function to create the integrated state models (e.g. acceleration/torque/mass models) for\neach of the propagators state types contained in `propagatorSettingsMap_`.\n",
                            "parameters": [
                                {
                                    "name": "bodies",
                                    "type": "SystemOfBodies",
                                    "description": "System of bodies used in the propagation."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        },
                        {
                            "name": "single_type_settings",
                            "short_summary": "Function to retrieve a single type of propagator.",
                            "deprecation_warning": null,
                            "extended_summary": "Function to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n",
                            "parameters": [
                                {
                                    "name": "state_type",
                                    "type": "IntegratedStateType",
                                    "description": "State type to be retrieved."
                                }
                            ],
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "reset_initial_states": "\nFunction to reset the initial states used as input for numerical integration.\n\nFunction to reset the initial states used as input for numerical integration.\n\n\nParameters\n----------\ninitial_states : numpy.ndarray\n    Initial states to be reset for the numerical propagation.\n",
                    "recreate_state_derivative_models": "\nFunction to (re)create the integrated state models (e.g. acceleration/torque/mass models).\n\nFunction to create the integrated state models (e.g. acceleration/torque/mass models) for\neach of the propagators state types contained in `propagatorSettingsMap_`.\n\n\nParameters\n----------\nbodies : SystemOfBodies\n    System of bodies used in the propagation.\n",
                    "single_type_settings": "\nFunction to retrieve a single type of propagator.\n\nFunction to retrieve a single type of propagator (translational, rotational or mass). This function is\noften used in multi-type propagation.\n\n\nParameters\n----------\nstate_type : IntegratedStateType\n    State type to be retrieved.\n",
                    "__docstring__": "\n`SingleArcPropagatorSettings`-derived class to define settings for propagation of multiple quantities.\n\n"
                },
                "PropagationTerminationSettings": {
                    "name": "PropagationTerminationSettings",
                    "short_summary": "Functional base class to define termination settings for the propagation.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user because this is a base class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user because this is a base class.\n\n",
                    "__docstring__": "\nFunctional base class to define termination settings for the propagation.\n\n"
                },
                "PropagationDependentVariableTerminationSettings": {
                    "name": "PropagationDependentVariableTerminationSettings",
                    "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "__docstring__": "\n`PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables.\n\n"
                },
                "PropagationTimeTerminationSettings": {
                    "name": "PropagationTimeTerminationSettings",
                    "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from propagation time.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "__docstring__": "\n`PropagationTerminationSettings`-derived class to define termination settings for the propagation from propagation time.\n\n"
                },
                "PropagationCPUTimeTerminationSettings": {
                    "name": "PropagationCPUTimeTerminationSettings",
                    "short_summary": "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from CPU time.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "__docstring__": "\n`PropagationTerminationSettings`-derived class to define termination settings for the propagation from CPU time.\n\n"
                },
                "PropagationCustomTerminationSettings": {
                    "name": "PropagationCustomTerminationSettings",
                    "short_summary": "`PropagationTerminationSettings`-derived class to define custom termination settings for the propagation.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "__docstring__": "\n`PropagationTerminationSettings`-derived class to define custom termination settings for the propagation.\n\n"
                },
                "PropagationHybridTerminationSettings": {
                    "name": "PropagationHybridTerminationSettings",
                    "short_summary": "`PropagationTerminationSettings`-derived class to define hybrid termination settings for the propagation.",
                    "deprecation_warning": null,
                    "extended_summary": null,
                    "parameters": null,
                    "attributes": null,
                    "yields": null,
                    "other_parameters": null,
                    "raises": null,
                    "warns": null,
                    "warnings": null,
                    "see_also": null,
                    "notes": null,
                    "references": null,
                    "examples": null,
                    "methods": [
                        {
                            "name": "ctor",
                            "short_summary": "Constructor.",
                            "deprecation_warning": null,
                            "extended_summary": "Instances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n",
                            "parameters": null,
                            "returns": null,
                            "yields": null,
                            "other_parameters": null,
                            "raises": null,
                            "warns": null,
                            "warnings": null,
                            "see_also": null,
                            "notes": null,
                            "references": null,
                            "examples": null
                        }
                    ],
                    "ctor": "\nConstructor.\n\nInstances of this class are typically not generated by the user. Settings objects for integrators should be\ninstantiated through the factory functions of a derived class.\n\n",
                    "__docstring__": "\n`PropagationTerminationSettings`-derived class to define hybrid termination settings for the propagation.\n\n"
                }
            },
            "torque": {
                "type": "module",
                "path": "./tudat-multidoc/docstrings/simulation/propagation_setup",
                "file": "torque.yaml",
                "_implicit_name": "torque",
                "config": null,
                "summary": null,
                "extended_summary": null,
                "routine_listings": null,
                "see_also": null,
                "notes": "None",
                "references": null,
                "examples": null,
                "classes": [
                    {
                        "name": "TorqueSettings",
                        "short_summary": "Functional base class to define settings for torques.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    },
                    {
                        "name": "SphericalHarmonicTorqueSettings",
                        "short_summary": "`TorqueSettings`-derived class to define settings for torques caused by spherical harmonic gravity.",
                        "deprecation_warning": null,
                        "extended_summary": null,
                        "parameters": null,
                        "attributes": null,
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null,
                        "methods": null
                    }
                ],
                "functions": [
                    {
                        "name": "aerodynamic",
                        "short_summary": "Creates the settings for the aerodynamic torque.",
                        "deprecation_warning": null,
                        "extended_summary": "Creates the settings for the aerodynamic torque exerted by a body with an atmosphere model and shape model on\nanother body. The body exerting the torque needs to have both an atmosphere model and a shape model defined.\nFurthermore, the body undergoing the torque needs to have the aerodynamic coefficient interface and its moment\ncoefficients defined. In the case that the aerodynamic coefficients are defined as a function of the vehicle\norientation (e.g. angle of attack and sideslip angle), these angles can be manually or automatically defined.\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "spherical_harmonic_gravitational",
                        "short_summary": "Creates the settings for the spherical harmonic torque.",
                        "deprecation_warning": null,
                        "extended_summary": "Torque exerted by a point mass on a body with an arbitrary degree/order spherical harmonics mass distribution.\nThe body exerting the torque only needs to have a gravitational model defined (point-mass or spherical harmonic),\nwhile the body undergoing the torque needs to have a spherical harmonic gravity field defined.\n",
                        "parameters": [
                            {
                                "name": "maximum_degree",
                                "type": "int",
                                "description": "Maximum degree of the spherical harmonic expansion."
                            },
                            {
                                "name": "maximum_order",
                                "type": "int",
                                "description": "Maximum order of the spherical harmonic expansion."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "second_degree_gravitational",
                        "short_summary": "Creates the settings for the second-degree gravitational torque.",
                        "deprecation_warning": null,
                        "extended_summary": "Torque exerted by a point mass on a body with a degree two spherical harmonics mass distribution.\nA degree two spherical harmonics mass distribution can be represented by an inertia tensor; thus,\nfor this torque model, the body undergoing the torque needs to have an inertia tensor defined.\nThe body exerting the torque only needs to have a gravitational model defined (either point-mass or spherical\nharmonics).\n",
                        "parameters": null,
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    },
                    {
                        "name": "custom",
                        "short_summary": "Creates the settings for a custom torque.",
                        "deprecation_warning": null,
                        "extended_summary": "Torque exerted by a point mass on a body with a degree two spherical harmonics mass distribution.\nA degree two spherical harmonics mass distribution can be represented by an inertia tensor; thus,\nfor this torque model, the body undergoing the torque needs to have an inertia tensor defined.\nThe body exerting the torque only needs to have a gravitational model defined (either point-mass or spherical\nharmonics).\n",
                        "parameters": [
                            {
                                "name": "torque_function",
                                "type": "Callable[[float], list]",
                                "description": "Custom torque function with time as an independent variable."
                            },
                            {
                                "name": "scaling_function",
                                "type": "Callable[[float], float], default=None",
                                "description": "Scaling function with time as an independent variable to be multiplied by the custom torque function."
                            }
                        ],
                        "returns": {
                            "name": null,
                            "type": "description",
                            "description": null
                        },
                        "yields": null,
                        "other_parameters": null,
                        "raises": null,
                        "warns": null,
                        "warnings": null,
                        "see_also": null,
                        "notes": null,
                        "references": null,
                        "examples": null
                    }
                ],
                "constants": null,
                "name": "torque",
                "version": null,
                "aerodynamic": "\nCreates the settings for the aerodynamic torque.\n\nCreates the settings for the aerodynamic torque exerted by a body with an atmosphere model and shape model on\nanother body. The body exerting the torque needs to have both an atmosphere model and a shape model defined.\nFurthermore, the body undergoing the torque needs to have the aerodynamic coefficient interface and its moment\ncoefficients defined. In the case that the aerodynamic coefficients are defined as a function of the vehicle\norientation (e.g. angle of attack and sideslip angle), these angles can be manually or automatically defined.\n\n\nReturns\n-------\ndescription\nNone\n\n",
                "spherical_harmonic_gravitational": "\nCreates the settings for the spherical harmonic torque.\n\nTorque exerted by a point mass on a body with an arbitrary degree/order spherical harmonics mass distribution.\nThe body exerting the torque only needs to have a gravitational model defined (point-mass or spherical harmonic),\nwhile the body undergoing the torque needs to have a spherical harmonic gravity field defined.\n\n\nParameters\n----------\nmaximum_degree : int\n    Maximum degree of the spherical harmonic expansion.\nmaximum_order : int\n    Maximum order of the spherical harmonic expansion.\n\nReturns\n-------\ndescription\nNone\n\n",
                "second_degree_gravitational": "\nCreates the settings for the second-degree gravitational torque.\n\nTorque exerted by a point mass on a body with a degree two spherical harmonics mass distribution.\nA degree two spherical harmonics mass distribution can be represented by an inertia tensor; thus,\nfor this torque model, the body undergoing the torque needs to have an inertia tensor defined.\nThe body exerting the torque only needs to have a gravitational model defined (either point-mass or spherical\nharmonics).\n\n\nReturns\n-------\ndescription\nNone\n\n",
                "custom": "\nCreates the settings for a custom torque.\n\nTorque exerted by a point mass on a body with a degree two spherical harmonics mass distribution.\nA degree two spherical harmonics mass distribution can be represented by an inertia tensor; thus,\nfor this torque model, the body undergoing the torque needs to have an inertia tensor defined.\nThe body exerting the torque only needs to have a gravitational model defined (either point-mass or spherical\nharmonics).\n\n\nParameters\n----------\ntorque_function : Callable[[float], list]\n    Custom torque function with time as an independent variable.\nscaling_function : Callable[[float], float], default=None\n    Scaling function with time as an independent variable to be multiplied by the custom torque function.\n\nReturns\n-------\ndescription\nNone\n\n",
                "TorqueSettings": {
                    "__docstring__": "\nFunctional base class to define settings for torques.\n\n"
                },
                "SphericalHarmonicTorqueSettings": {
                    "__docstring__": "\n`TorqueSettings`-derived class to define settings for torques caused by spherical harmonic gravity.\n\n"
                }
            }
        }
    }
}